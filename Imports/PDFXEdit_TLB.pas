unit PDFXEdit_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 11/14/2018 10:43:01 AM from Type Library described below.

// ************************************************************************  //
// Type Lib: c:\Program Files\Tracker Software\PDF Editor\PDFXEditCore.x86.dll (1)
// LIBID: {0AAFF38C-CB91-4424-A8B9-F8B504ACBE0C}
// LCID: 0
// Helpfile: 
// HelpString: PDF-XChange Editor Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\System32\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// Errors:
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Member 'String' of 'ICabNode' changed to 'String_'
//   Hint: Member 'Set' of 'IBitSet' changed to 'Set_'
//   Hint: Member 'Do' of 'IOperationList' changed to 'Do_'
//   Hint: Member 'Do' of 'IOperation' changed to 'Do_'
//   Hint: Member 'Label' of 'IPXC_Page' changed to 'Label_'
//   Hint: Member 'End' of 'IPXC_WatermarkParams' changed to 'End_'
//   Hint: Member 'Function' of 'IPXC_Shading' changed to 'Function_'
//   Hint: Member 'File' of 'IPXC_DocSrcInfo' changed to 'File_'
//   Hint: Member 'End' of 'IPXC_HeaderAndFooterParams' changed to 'End_'
//   Hint: Member 'End' of 'IPXC_BackgroundParams' changed to 'End_'
//   Hint: Symbol 'hWnd' renamed to 'HWND_'
//   Hint: Member 'Label' of 'IUIX_Tooltip' changed to 'Label_'
//   Hint: Member 'String' of 'IPXV_JSValue' changed to 'String_'
//   Hint: Member 'Object' of 'IPXV_JSValue' changed to 'Object_'
//   Error creating palette bitmap of (TPXV_Control) : Registry key CLSID\{A1149909-4EDC-4421-B9E5-E93C25A000A1}\ToolboxBitmap32 not found
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}

interface

uses Winapi.Windows, System.Classes, System.Variants, System.Win.StdVCL, Vcl.Graphics, Vcl.OleCtrls, Vcl.OleServer, Winapi.ActiveX;
  


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  PDFXEditMajorVersion = 1;
  PDFXEditMinorVersion = 0;

  LIBID_PDFXEdit: TGUID = '{0AAFF38C-CB91-4424-A8B9-F8B504ACBE0C}';

  IID_IAUX_Inst: TGUID = '{3F5231AB-AF92-4184-A361-5A3307A3464E}';
  IID_ICab: TGUID = '{4A690B54-0046-47E7-960E-9C2630770D20}';
  IID_ICabNode: TGUID = '{3EDEE1C3-AA36-4DAA-8C8E-58AAD6EEC086}';
  IID_ISequentialStream: TGUID = '{0C733A30-2A1C-11CE-ADE5-00AA0044773D}';
  IID_IStream: TGUID = '{0000000C-0000-0000-C000-000000000046}';
  IID_IMemBlock: TGUID = '{65BCC286-157D-4D50-A3D6-6DFA9337311B}';
  IID_IBitSet: TGUID = '{E18E8434-3DF3-4A20-BFDC-F1F5272F162E}';
  IID_IColor: TGUID = '{DFA5BEFF-8BDD-4AE1-AD40-6D11FAD0CA1C}';
  IID_IOperationList: TGUID = '{874C499C-FA85-4B0C-A5E9-CA8F022CAC9F}';
  IID_IOperation: TGUID = '{96B2AE5F-BFDE-426A-A8C5-A7489C64F0C0}';
  IID_IOpInputItem: TGUID = '{5E0B2A7A-D5A8-4E0E-8D8C-5AF893269E44}';
  IID_IOperationHistory: TGUID = '{6C5CE95F-3FC4-4FE8-8159-21D550451AF8}';
  IID_IOperationHistoryItem: TGUID = '{A9E334D7-43CC-411D-8F86-1398203326C1}';
  IID_IOperationHistoryChangesMon: TGUID = '{2033B880-7331-462F-9F67-553BA0BE2A6A}';
  IID_IObjCollection: TGUID = '{4B1C806E-791F-4D81-AD28-28C84A7F9626}';
  IID_IWords: TGUID = '{05917844-D520-4B9C-9557-0A9219652549}';
  IID_IUniqueStrings: TGUID = '{BCBDCD6D-0C0A-4040-A69C-2008C35B7525}';
  IID_IProgressMon: TGUID = '{E663B47E-D10C-4690-B1EE-1BDB10C73EBE}';
  IID_IFlag: TGUID = '{5B1CB5B5-8FC9-426B-B0D0-42BCADFE3935}';
  IID_IString: TGUID = '{D1CB9426-FA08-4829-8470-C8C7FF7F7A00}';
  IID_INumArray: TGUID = '{F25D53D5-5F88-4FDD-BB3F-88EFC7E7C2CE}';
  IID_IRangeHelper: TGUID = '{7F6E91C4-12B5-4E2F-9C2B-479EF525A9F7}';
  IID_IDblArray: TGUID = '{7C0A30CF-1B2F-4091-AC7F-9D11D74326B0}';
  IID_ILogServer: TGUID = '{4E50F5DD-AF02-4325-836F-AA750CAD8527}';
  IID_ILogListener: TGUID = '{D6481642-A74B-42A2-B5D0-94247699EC12}';
  IID_ILogMsg: TGUID = '{D52738DB-591C-4B2E-97FB-A308866F0733}';
  IID_IMathHelper: TGUID = '{F6C02B27-4D99-4737-AB4C-A50830ECA67B}';
  IID_IScopeTable: TGUID = '{AFE955F3-4ADE-4C79-B40A-8DD1955A328F}';
  IID_IFastScopeTable: TGUID = '{8DF8461E-52D3-4E37-8AF6-3B5C1F6F7E87}';
  IID_IEventsRegistry: TGUID = '{E4F0EAD1-C256-40AD-9CCF-B9CD8872EC9A}';
  IID_IEventCreator: TGUID = '{F3C2B51C-003A-4D39-A90A-BB4486BF1E2C}';
  IID_IEvent: TGUID = '{63375FB3-4F89-42F0-8090-209E954EBA1A}';
  IID_IEventHandler: TGUID = '{8D00937C-06B9-4B5C-9A94-A7E046336B01}';
  IID_IEventServer: TGUID = '{816CDC47-C3A9-4671-A17C-790D90CD38E5}';
  IID_ISpellCheckCallbacks: TGUID = '{3A72CF63-DFA2-4B82-9797-DD14EF321C51}';
  IID_IOpOutputCallback: TGUID = '{826E210C-1895-4023-B3F6-7A382CF30968}';
  IID_IAFS_Name: TGUID = '{5996675A-1E7C-40D2-ABF7-6B34ABC720B0}';
  IID_IAFS_FileSys: TGUID = '{FF53F225-0530-4DCA-A174-240E61969C6D}';
  IID_IAFS_BindContext: TGUID = '{5ADCA7E1-E508-41AD-8E12-77A9FC1B2437}';
  IID_IAFS_BindPromptCallback: TGUID = '{F9FA7FE4-CBDE-4462-9A22-8A9EA0EEB7E8}';
  IID_IAFS_EnumFolder: TGUID = '{6554EA2D-9436-4F25-8B11-A4CB7C2608DB}';
  IID_IAFS_FileInfo: TGUID = '{2E920A0D-3156-4EB6-932F-5AB7287C54E5}';
  IID_IAFS_EnumFolderItem: TGUID = '{0C577CE3-F5BD-4AC5-B52D-76264D51D578}';
  IID_IAFS_File: TGUID = '{9AD3CF3E-6968-41E7-90C2-76B18A6662DC}';
  IID_IAFS_NamesCollection: TGUID = '{53674462-76AA-41A3-A5A3-5241912E4222}';
  IID_IAFS_ProgressMon: TGUID = '{98624D7C-5E25-41EE-B454-67F209FC7641}';
  IID_IAFS_AccountData: TGUID = '{E2F015BB-95B8-4C93-A68D-A9B706733987}';
  IID_IAFS_Inst: TGUID = '{F4C199F2-0F2A-4E4A-80C9-F5B36D96F527}';
  IID_IAFS_FileCachesMap: TGUID = '{C9B694F8-7523-400C-B6D2-AD4140F0DF29}';
  IID_IAFS_FileCacheEntry: TGUID = '{C9FD110D-6922-4ABC-A3B8-BE96516F8F87}';
  IID_IAFS_FileCache: TGUID = '{8E326E64-5457-4D9F-9C65-3116C4118D1D}';
  IID_IAFS_FileCacheCallbacks: TGUID = '{200C57EA-2628-4E40-A32C-6780EBAAE941}';
  IID_IAFS_DlgSettingsBtnCallbacks: TGUID = '{71D744C0-D3E3-4BF2-8405-56ABFC895DFC}';
  IID_IIXC_Image: TGUID = '{A77665FB-A9C1-4EAD-9912-D5F6907C6C84}';
  IID_IIXC_Page: TGUID = '{9800D9A6-340F-4D44-9C22-D01CAC544F26}';
  IID_IIXC_MatrixFilterDefinition: TGUID = '{B3F3DF4D-DE1E-472A-A6FC-843FEDC7C4F2}';
  IID_IIXC_ImageFmtParams: TGUID = '{91C21F3E-9B7D-4225-ABFC-F6B7DB65E12D}';
  IID_IIXC_FormatInfo: TGUID = '{9ED33DFA-1D20-4D52-93D1-567AAFADE145}';
  IID_IIXC_Inst: TGUID = '{03192318-BA9A-4790-BC39-C7149DCD9F2B}';
  IID_IPXS_PDFVariant: TGUID = '{55623473-ED26-45BF-A454-52A4C74665E4}';
  IID_IPXS_Document: TGUID = '{B5F984DB-9610-4F9E-9F9D-BDFF4B4ACAF4}';
  IID_IPXS_pdfStreamCoder: TGUID = '{F6E7F833-9638-4892-893A-D4AB9C561425}';
  IID_IPXS_pdfStringCoder: TGUID = '{007127FA-5143-431E-88AA-D13C893F2D32}';
  IID_IPXS_DecodeFilter: TGUID = '{51D6B2D0-CB5F-4AEB-908A-0910A370D72B}';
  IID_IPXS_EncodeFiltersArray: TGUID = '{E193B2C8-B8CF-44E3-9F00-FB439D1B6EC0}';
  IID_IPXS_EncodeFilter: TGUID = '{D3DE02B8-3A5B-402C-8798-854733238458}';
  IID_IPXS_Inst: TGUID = '{74FD343F-06A3-4386-A6C0-DC4D5AC1C090}';
  IID_IPXS_StreamFiltersFactory: TGUID = '{38F80738-DA2B-4251-896E-1BD9D44B2FC9}';
  IID_ICabDataProvider: TGUID = '{27382B72-0F58-4DB6-9EC5-39C94BEEC437}';
  IID_IPXC_AcroForm: TGUID = '{499EF19E-675E-436D-84B5-53E25C56CB02}';
  IID_IPXC_Document: TGUID = '{BE5B563D-C098-4971-9EFD-4E8F95D34D02}';
  IID_IPXC_Pages: TGUID = '{C5AA60EE-2A1A-4082-BA84-F59996E24A12}';
  IID_IPXC_Page: TGUID = '{D6367D39-E45F-4F79-B8FE-686F5FB6B844}';
  IID_IPXC_Content: TGUID = '{4CB60703-FC3B-41BA-A4E0-E8B885392555}';
  IID_IPXC_ContentItems: TGUID = '{61AA40E0-1B28-474E-9933-87B0C63D8067}';
  IID_IPXC_ContentItem: TGUID = '{7775315F-82FB-4CA2-8DD1-399B156663F2}';
  IID_IPXC_GState: TGUID = '{C594F71E-48D9-44FF-AEC3-D7EBE7F75A5C}';
  IID_IPXC_CState: TGUID = '{FD32D4AF-2567-4EB3-A56F-AEAC8D1F42D7}';
  IID_IPXC_Color: TGUID = '{F547EF7F-B5E3-4D4A-BECC-5C9AF8280B9F}';
  IID_IPXC_ColorSpace: TGUID = '{833F3FC0-2879-4B60-82E4-DD3E76D58268}';
  IID_IPXC_TState: TGUID = '{B1FC3914-2AE8-4B0E-B319-A682E0344837}';
  IID_IPXC_Font: TGUID = '{65DF6A11-A716-4CCD-8C93-1BF11724E41C}';
  IID_IPXC_DocFontsInfo: TGUID = '{B1C1E9CF-F1DA-453A-B713-56F19C82DE67}';
  IID_IPXC_CMap: TGUID = '{7A7FA31F-8F2D-489E-B07A-6A60670088D0}';
  IID_IPXC_EState: TGUID = '{364C6CAF-791F-426D-92A1-E0A1FB40D38C}';
  IID_IPXC_SoftMask: TGUID = '{72A7FDC6-B203-4736-9F0E-6C9F8D32F375}';
  IID_IPXC_Function: TGUID = '{A392EC1D-CB40-40B5-AD37-95AA7A52454A}';
  IID_IPXC_XForm: TGUID = '{925EC33C-03A9-40C5-9D9B-28CEE249E7FB}';
  IID_IPXC_XGroup: TGUID = '{57214007-75B9-4AC7-97B9-CFE13DC91793}';
  IID_IPXC_TransferFunction: TGUID = '{F1804BEA-2AE8-4808-8FEF-1B078B4FBC9F}';
  IID_IPXC_Image: TGUID = '{EDE57717-30BB-4478-9E00-CD3F5D15C918}';
  IID_IPXC_GetPageTextOptions: TGUID = '{59A14451-217C-4BF4-B9BA-ECE1E81B11F7}';
  IID_IPXC_PageText: TGUID = '{790A8FF4-9990-46A3-A9D3-C9F0D794604A}';
  IID_IPXC_TextBlockInfo: TGUID = '{926DF08D-6F44-45E4-A100-9927E7D6A640}';
  IID_IPXC_QuadsF: TGUID = '{EEF4AFBE-7A87-4323-8B39-93B36EEC955D}';
  IID_IPXC_Annotation: TGUID = '{64AD6ED3-2405-44C8-859C-DF9AAC1F828F}';
  IID_IPXC_ActionsList: TGUID = '{772575E5-74CA-4CBD-ACAE-E0C66B55572B}';
  IID_IPXC_Action: TGUID = '{16D15B5A-F210-4981-8EF3-F25A9824D567}';
  IID_IPXC_RemapCallback: TGUID = '{BC2654D2-1D08-4B2F-A2BA-BF3E2DC61CE1}';
  IID_IPXC_AnnotData: TGUID = '{5D9A0718-306A-4B2E-8097-A2719A728DA3}';
  IID_IPXC_AnnotHandler: TGUID = '{C0E080E4-3454-4CD5-8B1A-D4A7905E5195}';
  IID_IPXC_OCContext: TGUID = '{A9FCBEE5-C1CD-4649-B20F-4F1CD29725E2}';
  IID_IPXC_AnnotsVisibilityCallback: TGUID = '{86B80528-6ABD-4104-81F5-E412EFEE5317}';
  IID_IPXC_CIVisibilityCallback: TGUID = '{B9D001F0-1382-401A-A042-F34B01A2F1DF}';
  IID_IPXC_OCG: TGUID = '{3ACD8658-5341-4E7A-A0DD-AB29F7A3F777}';
  IID_IPXC_OCMD: TGUID = '{B198D983-F884-4B5B-A69D-F8E1C51307BE}';
  IID_IPXC_FormField: TGUID = '{954F5C0B-D5DF-417F-BD09-60F5F7554CA0}';
  IID_IPXC_AnnotsList: TGUID = '{75751C77-316F-447E-BA46-79F098261F6E}';
  IID_IPXC_PageRenderParams: TGUID = '{73844F0A-7090-48CD-9C97-0F02F5D5CBD0}';
  IID_IPXC_RedactInfo: TGUID = '{A3032CAE-5BF4-4947-B141-0ACB7B058073}';
  IID_IPXC_RedactEntry: TGUID = '{FFB63D66-4B26-46E3-A957-13C52C327390}';
  IID_IPXC_RedactOverlayParams: TGUID = '{F7C4875B-0B76-49B4-8E33-C6861240C146}';
  IID_IPXC_UndoRedoData: TGUID = '{D67C1B36-83B5-4C18-803A-6F9F7CA503A3}';
  IID_IPXC_Transition: TGUID = '{7FFFC122-1DE6-4013-90A4-40370600A3EB}';
  IID_IPXC_PagesOverlayInfo: TGUID = '{B65DEFED-7DDD-48F3-AB08-342C0C0B0212}';
  IID_IPXC_Bookmark: TGUID = '{75CD5048-E42C-4B6F-B7EA-DA64C9F1BABD}';
  IID_IPXC_DocumentProps: TGUID = '{15C5C747-B3A8-4C56-A5A9-9138E1DAFD80}';
  IID_IPXC_DocumentInfo: TGUID = '{93EF2F7D-2127-4D1F-ADE4-646D3D1B8419}';
  IID_IPXC_XMPMetadata: TGUID = '{7E4F8B4D-0BD5-44F0-94AD-8CEC1F00CB20}';
  IID_IPXC_Articles: TGUID = '{35F17EB7-BE46-4FE9-85B2-7349F6A61497}';
  IID_IPXC_Article: TGUID = '{729FADC4-BAC1-4C35-BA87-B099C2991DC7}';
  IID_IPXC_FileSpec: TGUID = '{540A53AF-BCBD-4A67-862D-49311E404C51}';
  IID_IPXC_EmbeddedFileStream: TGUID = '{2D1673C9-993A-4011-9B40-120CAE278251}';
  IID_IPXC_Collection: TGUID = '{A54695A0-0DB3-4169-8B94-AD4B999A898F}';
  IID_IPXC_CollectionFolder: TGUID = '{92C04A4E-343A-4A3A-95EA-4DC80E2C4573}';
  IID_IPXC_CollectionSchema: TGUID = '{6939D15D-1608-4AEE-BD68-12E05B91CAEF}';
  IID_IPXC_NameTree: TGUID = '{58B7B4E0-65C4-4711-8411-E2EAA46998C4}';
  IID_IPXC_SecurityHandler: TGUID = '{5E828ECC-FAC8-4D91-B334-E9F32746F2E8}';
  IID_IPXS_CryptInterface: TGUID = '{2CB3F936-F5E7-4A09-9026-76E17034C8D7}';
  IID_IPXC_SecurityPolicy: TGUID = '{624E5754-0E96-4ADB-932E-1365CAB8D529}';
  IID_IPXC_WatermarkParams: TGUID = '{0AC8022D-465E-47BB-BFFA-6362F8AAEBDA}';
  IID_IPXC_PageContentCallback: TGUID = '{184C9EB7-4681-4D3A-B0C3-76E162D09171}';
  IID_IPXC_ContentCreator: TGUID = '{4B22F741-E083-463F-A28B-60E4D9750AA5}';
  IID_IPXC_CharFormat: TGUID = '{677E6023-931C-4954-A8B3-FE0508EB440B}';
  IID_IPXC_ParaFormat: TGUID = '{779A8B53-D3C0-444F-8BD2-8A4F53DEC172}';
  IID_IPXC_TextTabStops: TGUID = '{9709B958-8DDD-4682-90A5-85A66F5399C8}';
  IID_IPXC_TabStopFormat: TGUID = '{944DF33B-5E14-469D-9EF9-3A6524439A6C}';
  IID_IPXC_DrawTextCallbacks: TGUID = '{8AA13E2F-E78D-4B97-A189-6F6A72DA44A5}';
  IID_IPXC_Rects: TGUID = '{984D8349-2159-4CF7-BEB1-713EAB511205}';
  IID_IPXC_Pattern: TGUID = '{C0AE89AF-0A07-494A-9EF1-CCFB8348B8F3}';
  IID_IPXC_Shading: TGUID = '{E6EC30B6-936A-4511-B42E-91CB1C1D4FB8}';
  IID_IPXC_FontInfoCallback: TGUID = '{BEAE11BB-3542-401C-86F8-C82B3EE632DC}';
  IID_IPXC_DocSrcInfo: TGUID = '{DF68A980-B679-48CF-ADF3-951AD4BD343B}';
  IID_IPXC_GradientStops: TGUID = '{7A75EA1A-BFBB-4043-A122-EDAF392CB95A}';
  IID_IPXC_HeaderAndFooterParams: TGUID = '{72C84745-5C1F-4F89-AA4A-3B8AADC72CA7}';
  IID_IPXC_BackgroundParams: TGUID = '{6CB09405-4536-4F1F-8ABD-19E41A76A57F}';
  IID_IPXC_BatesNumberingParams: TGUID = '{D90E561A-EFA3-4AF9-9866-C079CA3B9189}';
  IID_IPXC_FontEnumCallback: TGUID = '{720C8083-9FDD-42C3-AEA5-A1B8228487D9}';
  IID_IPXC_DocAuthCallback: TGUID = '{84B23B1A-25E5-46A4-90ED-E4C8B678F535}';
  IID_IPXC_Action_Goto: TGUID = '{6477DAFF-E612-49E5-BD4A-869AA53E5CD9}';
  IID_IPXC_GoToETargetPath: TGUID = '{880B001D-010B-4304-BF49-8F5916B90309}';
  IID_IPXC_GoToETargetItem: TGUID = '{5270603A-7826-4AAB-8135-3DD11AF91F5F}';
  IID_IPXC_Action_Launch: TGUID = '{7F2EB392-723A-4E6E-B6B2-52EABB6DC5BC}';
  IID_IPXC_Action_Thread: TGUID = '{CEC8A3C1-6778-4E6F-8C3A-4F48108C9EC4}';
  IID_IPXC_Action_URI: TGUID = '{8D4C2647-45E2-4113-8087-DFA81A534109}';
  IID_IPXC_Action_Sound: TGUID = '{45F9CDD6-F503-45F6-92A1-6EF19CFF2556}';
  IID_IPXC_Sound: TGUID = '{41BF5FE9-C571-453C-B4FF-41F4455A6564}';
  IID_IPXC_Action_Movie: TGUID = '{1517C6DF-7E64-4355-8A52-2059FB6AC43B}';
  IID_IPXC_Action_Hide: TGUID = '{6E16F13F-AB0F-402B-B12F-F0C93E5EA5FC}';
  IID_IPXC_Action_Named: TGUID = '{96DD05DE-02B1-43FD-A24F-A53CE82F1D42}';
  IID_IPXC_Action_SetOCGState: TGUID = '{BB81DD31-5185-4960-A852-2B1FCA9FF469}';
  IID_IPXC_Action_Rendition: TGUID = '{CD0A261B-D170-4D55-854D-EA62D5EB539C}';
  IID_IPXC_Action_Transition: TGUID = '{4B2CB135-9D33-475D-932C-2AEA4CFFF7F2}';
  IID_IPXC_Action_Goto3DView: TGUID = '{F32A5853-91C9-4311-8AD3-53C4B3DBEC79}';
  IID_IPXC_Action_JavaScript: TGUID = '{0F4A5ABE-634C-40DC-BF2E-CF85A910E9E1}';
  IID_IPXC_Action_RichMediaExecute: TGUID = '{6469F144-A1C6-4B1C-91A7-F04BC0F84CEA}';
  IID_IPXC_Action_SubmitForm: TGUID = '{4DCA199D-3102-48EB-B49E-BD4324A16E67}';
  IID_IPXC_Action_ResetForm: TGUID = '{F3EC0CB7-CD0E-4003-8CAD-CEE38DD1E362}';
  IID_IPXC_Action_ImportForm: TGUID = '{A294BE96-0579-4104-B879-34398C589BCF}';
  IID_IPXC_ActionHandler: TGUID = '{99AF3A2C-6BDD-4709-A63F-AAC3CB0B74AC}';
  IID_IPXC_AnnotData_Markup: TGUID = '{C67295DD-F7F3-4CAD-9BE0-CD3900A01CCE}';
  IID_IPXC_AnnotData_Caret: TGUID = '{11022531-356C-481C-9365-BD8357E454DC}';
  IID_IPXC_AnnotData_FileAttachment: TGUID = '{71000198-13C8-44AE-A8F9-EF352241D432}';
  IID_IPXC_AnnotData_FreeText: TGUID = '{926910D6-DB96-4A34-9216-93B5554B66B7}';
  IID_IPXC_AnnotData_Ink: TGUID = '{4A30F2BA-D095-4D7B-8D70-85FBE4F3C9D8}';
  IID_IPXC_PolyPolygonSrcF: TGUID = '{99CD1570-5F68-4CB3-A9FA-58E49327AA75}';
  IID_IPXC_PolygonSrcF: TGUID = '{E3F042E4-CBFA-4A87-984D-C6CF49118BF5}';
  IID_IPXC_AnnotData_Line: TGUID = '{74241EDA-26AF-4F26-89CC-DB968190332D}';
  IID_IPXC_Measure: TGUID = '{6FB73DCD-1779-4F94-89BC-B443AD8DCF9F}';
  IID_IPXC_AnnotData_Link: TGUID = '{6A899108-DFCC-4A0F-8E6D-D39EE5D1B623}';
  IID_IPXC_AnnotData_Poly: TGUID = '{19F591C3-3C76-4363-8611-608390A1D058}';
  IID_IPXC_AnnotData_Popup: TGUID = '{A0846463-A9B3-4545-A8EA-8DA950D9F93C}';
  IID_IPXC_AnnotData_Redaction: TGUID = '{1E7CE050-5851-4F92-80C0-CCBC6869F054}';
  IID_IPXC_AnnotData_Sound: TGUID = '{52D281BB-5D6C-4F55-A947-5183E66B4CBA}';
  IID_IPXC_AnnotData_Stamp: TGUID = '{EAB5D104-0798-455B-A81F-D72E0058F113}';
  IID_IPXC_AnnotData_SquareCircle: TGUID = '{B7452B7A-C9F7-4EAE-B6D3-FC2B602F9DA8}';
  IID_IPXC_AnnotData_Text: TGUID = '{9C321373-AA78-4420-82A4-3FDEA575E9B9}';
  IID_IPXC_AnnotData_TextMarkup: TGUID = '{EFEEAF08-3F34-47AC-B30E-1F82FA9D2714}';
  IID_IPXC_AnnotData_Watermark: TGUID = '{40CF2D68-A564-4554-9DEA-05B47F6A093F}';
  IID_IPXC_AnnotData_Widget: TGUID = '{D9AAD6C8-4D1D-4247-A67E-786F48CF9122}';
  IID_IPXC_FileSpecHandler: TGUID = '{5BF76A5C-7530-4A4A-92F8-73828B0D1C32}';
  IID_IPXC_MeasureRL: TGUID = '{88A8C1D0-92EC-41C1-83B8-AEDC983B151F}';
  IID_IPXC_NumberFormatArray: TGUID = '{9A4EAFCE-E4A0-466D-BFD1-667384190CFE}';
  IID_IPXC_NumberFormatItem: TGUID = '{DA823C90-7379-4FE0-8590-FAEB05610963}';
  IID_IPXC_NumberTree: TGUID = '{99F76052-61A2-4E4A-9226-639E697A004E}';
  IID_IPXC_OCConfig: TGUID = '{2FC40CEC-02A9-470F-936F-604C45F1D7B2}';
  IID_IPXC_OCOrderElement: TGUID = '{2A939CA1-EEB9-4105-A686-A9DF34766D4D}';
  IID_IPXC_PageLabel: TGUID = '{FDE6897D-D424-4960-B88D-FD25AA97AD9E}';
  IID_IPXC_RectsF: TGUID = '{906F510D-3026-4903-8522-DECE1A620188}';
  IID_IPXC_StampInfo: TGUID = '{6A450A18-BEC7-4173-8E8D-A775BE38E63A}';
  IID_IPXC_StampsCollection: TGUID = '{7476FE4F-6BB0-49F6-9584-52852359FDB0}';
  IID_IPXC_StampsManager: TGUID = '{8AFADCEE-4E34-4B62-8993-DFCD25B0FB14}';
  IID_IPXC_Inst: TGUID = '{06052A56-664B-4437-8F8C-9D697D1720B8}';
  CLASS_PXC_Inst: TGUID = '{77E64401-E3E8-4049-A630-0434E69586AA}';
  IID_IPXC_ColorManager: TGUID = '{42664284-0BFE-4458-BAF3-95C0207AEE02}';
  IID_IPXC_ColorSettings: TGUID = '{6A0D7BC2-7D48-46B1-9D74-761FA0CCEC96}';
  IID_IUIX_Event: TGUID = '{482E54A4-F8E8-4C78-8472-1FA890ED1C3A}';
  IID_IUIX_Obj: TGUID = '{E9C6A106-C4C1-4F7E-9E20-65E53233A2D2}';
  IID_IUIX_ThemeClass: TGUID = '{2D23846A-1D04-4209-8F4B-5D8150752421}';
  IID_IUIX_Theme: TGUID = '{71F2FEB3-5452-49FF-8A0F-AC49C635ECD9}';
  IID_IUIX_Font: TGUID = '{3147026C-5079-44E7-B764-889874FD7354}';
  IID_IUIX_Icon: TGUID = '{0DD779EB-D9AA-4448-904C-9DA8CAE1FB26}';
  IID_IUIX_ImageData: TGUID = '{98FC993C-A3B2-41EC-8933-9EE7E52008EF}';
  IID_IUIX_ThemeShape: TGUID = '{FCA9729D-FA5C-4D2E-98F6-846EF89264F1}';
  IID_IUIX_ThemeColor: TGUID = '{E59828F1-1E69-4B52-A285-223FB3A49EFB}';
  IID_IUIX_Sound: TGUID = '{A82ECA8E-A43C-42ED-948A-D51781B3348A}';
  IID_IUIX_RenderContext: TGUID = '{68983D9D-21E5-4A11-9928-74C284E8059A}';
  IID_IUIX_ColorsTable: TGUID = '{E65E7C74-576B-4787-87FF-04A2C7D94A0C}';
  IID_IUIX_DrawStringTags: TGUID = '{E69DA83A-83F1-470E-9757-13061E9EBB8F}';
  IID_IUIX_DrawStringCache: TGUID = '{B613BD03-128F-48C1-8BB3-5A9BDC2E08AC}';
  IID_IUIX_Brush: TGUID = '{D5ACE0A2-82B7-4F9D-B829-559723F29245}';
  IID_IUIX_Pen: TGUID = '{70A6F1DF-EB19-4B19-BAE1-577138C2E8CA}';
  IID_IUIX_PolyPolygonSrc: TGUID = '{F5EDFBBC-19C5-44FE-8D12-4B11AF121F9E}';
  IID_IUIX_PolygonSrc: TGUID = '{0CCA1C2F-7549-466C-8B67-19F5E3F53C2B}';
  IID_IUIX_DrawStringHighlight: TGUID = '{9CEAC8B7-F4D2-43FF-9AE7-3716C6837079}';
  IID_IUIX_ThemeClassPartState: TGUID = '{B8A76996-A36A-4FDE-93E4-2CAEE328C1C6}';
  IID_IUIX_ThemeBkgnd: TGUID = '{386883A3-3BD5-4897-864B-E9F968A6BF11}';
  IID_IUIX_ThemeClassPart: TGUID = '{FCFE0011-C751-4491-BD2C-30050987620D}';
  IID_IUIX_ThreadContext: TGUID = '{E0AAB4D6-161B-4ED0-8BA2-BDD15BF79C47}';
  IID_IUIX_CmdManager: TGUID = '{88D5604A-0C19-4F47-BD4A-969D740A5B16}';
  IID_IUIX_CmdCollection: TGUID = '{E31522CE-AB58-45E5-95CC-D51B4429C8EB}';
  IID_IUIX_Cmd: TGUID = '{C11678C5-B6D8-4321-944C-ED576708886A}';
  IID_IUIX_CmdHandler: TGUID = '{157CA85B-4378-4A20-B060-37C61DED02A9}';
  IID_IUIX_ObjImpl: TGUID = '{A4F44B54-E71F-41F9-95E7-401437931922}';
  IID_IUIX_CmdBar: TGUID = '{87CBE853-7868-4688-8847-BFE67802F826}';
  IID_IUIX_CmdItemBox: TGUID = '{6D513F74-9FC7-4179-A268-92E62D4F03A7}';
  IID_IUIX_CmdItem: TGUID = '{6F64923D-567C-4603-82D9-1AAABB307C20}';
  IID_IUIX_CmdMenu: TGUID = '{531DF7F3-0513-443E-BAD5-A1EF75A87C09}';
  IID_IUIX_CmdLine: TGUID = '{41B1AADD-61EE-406C-A8C6-FC02BA66CA67}';
  IID_IUIX_CmdPane: TGUID = '{9764FFB4-99C8-4FE5-BF07-225580214F60}';
  IID_IUIX_CmdRibbonTabs: TGUID = '{5B539001-204C-4960-9AE6-9246D044961F}';
  IID_IUIX_CmdRibbonTab: TGUID = '{081DC047-58D5-42E2-B263-2477CE37D502}';
  IID_IUIX_CmdAccelTargetCallback: TGUID = '{374C9D37-9198-463D-8EEE-6B82581DD413}';
  IID_IUIX_Inst: TGUID = '{D5CABA2F-B413-4C6F-94B6-0B573AFD07EB}';
  IID_IUIX_ContextHelpHandler: TGUID = '{237F6B6F-DAB7-4230-B2E9-49D5C6AB9243}';
  IID_IUIX_ThemeLoadMonitor: TGUID = '{3AFA83C4-4932-491C-849C-A605B11B7B42}';
  IID_IUIX_CharFormat: TGUID = '{092DCFE6-4B0E-4392-A71A-137E9F5DBF17}';
  IID_IUIX_ParaFormat: TGUID = '{13A68D58-65AC-43B2-A0D6-A3D9DFA47170}';
  IID_IUIX_TextTabStops: TGUID = '{29A02EF5-5573-44CA-B272-D8AD94ABFA08}';
  IID_IUIX_TabStopFormat: TGUID = '{E3B7703D-456F-4B3B-B3F4-1B207653B25F}';
  IID_IUIX_NumEditFilterConvTbl: TGUID = '{C2AFD4D9-48E5-430C-827B-7356C1BEA319}';
  IID_IUIX_EditFilterCallbacks: TGUID = '{DD0435A3-CB83-4FE1-AC39-D8F1E2BA47BE}';
  IID_IUIX_NumEditFilter: TGUID = '{E3B769D7-49DD-4FD9-8CEC-B524F910B7EB}';
  IID_IUIX_Edit: TGUID = '{BD7FAFAA-9748-4CFC-B134-D3B2CA96B4F8}';
  IID_IUIX_EditCallbacks: TGUID = '{D67A9099-8C4A-49AD-BA3C-E92F58C86A63}';
  IID_IUIX_MsgBoxCallback: TGUID = '{DC986623-173C-43D4-B32E-D5F49C85E33A}';
  IID_IUIX_Dialog: TGUID = '{B1987CCA-CF31-47CE-932A-A19A07AFBAB2}';
  IID_IUIX_Button: TGUID = '{6EBB31E2-2E6A-4463-B53B-EA7C502D564D}';
  IID_IUIX_ColorPicker: TGUID = '{374870A4-B4C3-45F6-8253-4E880ECD9B61}';
  IID_IUIX_Picture: TGUID = '{7EC7DCD5-6BCF-45EF-9D8B-10C69174FFC5}';
  IID_IUIX_ScrollBar: TGUID = '{4C5BB3E9-6AFE-4894-BA80-5B774BE40011}';
  IID_IUIX_ScrollContainer: TGUID = '{91F594C1-7C1A-465D-BC9C-004E2FD7C6C4}';
  IID_IUIX_Label: TGUID = '{CF3EA9CF-3882-4A6A-A9A4-BC56D8B5B083}';
  IID_IUIX_Combo: TGUID = '{27F3CABC-31C1-4B29-A782-B68D4F4EA61A}';
  IID_IUIX_List: TGUID = '{C8D5F404-EDB5-400C-92CD-4DD4180C13BB}';
  IID_IUIX_ListCallbacks: TGUID = '{1FFC36B5-0925-42F7-AB1A-DB148305ECF1}';
  IID_IUIX_Tooltip: TGUID = '{F3BBC168-3896-467E-9C5D-D46845C0E25E}';
  IID_IUIX_ListGetSelCallback: TGUID = '{FA0F52E6-82DC-4A5D-B0DC-2AF2319E716D}';
  IID_IUIX_Tree: TGUID = '{69E71C54-93FD-403B-BED2-E9B703EFCCF8}';
  IID_IUIX_TreeCallbacks: TGUID = '{513FAA1B-FB3F-405F-8883-E80EA094BE48}';
  IID_IUIX_TreeItem: TGUID = '{8B148BBD-F357-4166-A073-16B44503B6AC}';
  IID_IUIX_TreeGetSelCallback: TGUID = '{56209213-99A9-4ACE-8BD2-2AB616FB3763}';
  IID_IUIX_PropSheets: TGUID = '{A5010807-2297-4FD6-AA36-269CEFD9B97E}';
  IID_IUIX_PropSheetPage: TGUID = '{756FF635-5F59-425B-B6C6-6BCDE1F7178E}';
  IID_IUIX_ValidatePropSheetsCallback: TGUID = '{E7F8074E-DF5C-4FB3-AA0B-E3EF63B926D8}';
  IID_IUIX_EnumPropSheetPagesCallback: TGUID = '{3400D21B-9F5A-4C0D-9D27-B91C9DBA6E51}';
  IID_IUIX_ComboButton: TGUID = '{77FC3DBC-DB44-48C6-AC03-51E54646A4D9}';
  IID_IUIX_LayoutItem: TGUID = '{CD3E64CE-677F-4A57-89A3-08250712CCF2}';
  IID_IUIX_InfoBtn: TGUID = '{BB35E2D7-12DB-4DD7-AE5E-43B6E2B9D163}';
  IID_IUIX_PopupsHolder: TGUID = '{5834AB57-13A8-41BF-BE06-506EEAC4D15F}';
  IID_IDataObject: TGUID = '{0000010E-0000-0000-C000-000000000046}';
  IID_IEnumFORMATETC: TGUID = '{00000103-0000-0000-C000-000000000046}';
  IID_IAdviseSink: TGUID = '{0000010F-0000-0000-C000-000000000046}';
  IID_IPersist: TGUID = '{0000010C-0000-0000-C000-000000000046}';
  IID_IPersistStream: TGUID = '{00000109-0000-0000-C000-000000000046}';
  IID_IMoniker: TGUID = '{0000000F-0000-0000-C000-000000000046}';
  IID_IBindCtx: TGUID = '{0000000E-0000-0000-C000-000000000046}';
  IID_IRunningObjectTable: TGUID = '{00000010-0000-0000-C000-000000000046}';
  IID_IEnumMoniker: TGUID = '{00000102-0000-0000-C000-000000000046}';
  IID_IEnumString: TGUID = '{00000101-0000-0000-C000-000000000046}';
  IID_IEnumSTATDATA: TGUID = '{00000105-0000-0000-C000-000000000046}';
  IID_IDropSource: TGUID = '{00000121-0000-0000-C000-000000000046}';
  IID_IUIX_Progress: TGUID = '{4EDC5163-6E6C-411C-994F-FD3FD74483DE}';
  IID_IUIX_EventMonitor: TGUID = '{D083D8FD-73C0-4467-B913-43FAE1F15FD4}';
  IID_IUIX_InputFocusMonitor: TGUID = '{7BB3E2D5-EC9F-468F-834C-4CEC84FB2325}';
  IID_IUIX_MouseOverMonitor: TGUID = '{7AE52AAD-8807-46DA-8EF6-C20E2E8AEF2D}';
  IID_IUIX_MouseCaptureMonitor: TGUID = '{5A908F79-E673-4776-8CFC-AF29DE009BCD}';
  IID_IUIX_EventLoopMonitor: TGUID = '{DF67F023-1C25-481D-8EE2-D522FC578CC5}';
  IID_IDropTarget: TGUID = '{00000122-0000-0000-C000-000000000046}';
  IID_IUIX_ObjCollection: TGUID = '{2A6B0EFB-F95A-4D9B-87F3-8BDAFB073E77}';
  IID_IUIX_LayoutLoadCallback: TGUID = '{FAF26053-1649-4FED-82A4-9941C93B463E}';
  IID_IUIX_Layout: TGUID = '{79A56420-B280-448E-B2DC-9ECF68F82A34}';
  IID_IUIX_IndProgress: TGUID = '{1F3AF5ED-2318-4412-8EAD-758ACE549097}';
  IID_IUIX_ToggleBtn: TGUID = '{8C5A57C2-81CA-4F69-BC52-A86F244934AF}';
  IID_IUIX_DropTargetSupport: TGUID = '{F3A88E81-7D24-4B55-828E-B4BBC5EA6D8F}';
  IID_IUIX_DragSourceSupport: TGUID = '{EDFB5A01-2429-4274-9039-4CB2F5D190CA}';
  IID_IUIX_DropData: TGUID = '{05967C74-C2AB-4944-80E9-B21159D3748B}';
  IID_IUIX_RibbonFrameWindow: TGUID = '{40294E36-4581-49A9-9DA5-61B829DCEA7C}';
  IID_IUIX_Frame: TGUID = '{C0265291-1DFC-4377-B60D-7AE9CA536A73}';
  IID_IUIX_Spin: TGUID = '{FECBB317-0A10-475D-886A-1345F764D242}';
  IID_IUIX_Slider: TGUID = '{B0F82C35-358D-436A-94E3-2CB028BDC438}';
  IID_IUIX_RangesNavigator: TGUID = '{B55EFD3A-7639-45F0-A33E-12971B7DAAB7}';
  IID_IUIX_DrawThumbnailCallback: TGUID = '{4AE13C75-9A10-411D-A797-1D21591BEE13}';
  IID_IUIX_CustomLabelsProvider: TGUID = '{748A819D-A866-4DB9-ACC2-563DD2774E20}';
  IID_IUIX_Ruler: TGUID = '{999A6C12-A602-4601-9866-0B9AE973B7F2}';
  IID_IUIX_IndexNavigator: TGUID = '{6CCBAA52-8111-4806-B7EA-E0672F8382CD}';
  IID_IUIX_IndexNavigatorCallbacks: TGUID = '{2ABDF7CA-2EAD-4BCE-969F-64921A8741B4}';
  IID_IUIX_OriginSelector: TGUID = '{73075CBA-0FA9-4A85-9922-EE773B6C9FDC}';
  IID_IUIX_Group: TGUID = '{C3E2C472-5A54-4169-98DE-CED5FEDB39F2}';
  IID_IUIX_CmdColorBtn: TGUID = '{A527388D-E382-4227-BDAA-D8278C7B1924}';
  IID_IUIX_ControlsLock: TGUID = '{78874680-AE90-4F97-8236-5016AFFE6569}';
  IID_IUIX_PropHost: TGUID = '{E887AB04-2321-45FC-9BA0-2C9C8F42FB78}';
  IID_IUIX_PropInfo: TGUID = '{F253D679-1459-448D-B283-662005819BCB}';
  IID_IUIX_PropList: TGUID = '{34C6E22F-8BE0-454F-9BEB-0AA6BAD031D0}';
  IID_ICabbedObject: TGUID = '{825CEFB3-61C7-439C-90C2-4E102005DFB5}';
  IID_ICabbedObjectClass: TGUID = '{EA9637FA-8440-48E8-8C39-9F92B1E2A87A}';
  IID_ICabTemplate: TGUID = '{53D6E3DD-6F2C-45BC-8B43-D74267B6BBB8}';
  CLASS_CoAUX_Cab: TGUID = '{C0CBD784-C097-4EA2-858E-5F4B223C5C4F}';
  IID_IPXV_Inst: TGUID = '{D726366D-34D6-49FC-A341-7B84C54CCA3E}';
  IID_IPXV_MainFrame: TGUID = '{058487BC-FAB1-43E1-B9E0-77E7ADB97460}';
  IID_IPXV_View: TGUID = '{92E704C0-CC84-41F2-97CB-EDCCA380EC25}';
  IID_IPXV_MainView: TGUID = '{DB0C40F0-B92F-4B55-84BD-FFB6BC8B93DA}';
  IID_IPXV_ViewPanesCollection: TGUID = '{D0BCE7AC-1387-4C70-9184-912EB94AE3ED}';
  IID_IPXV_DocumentViewsArea: TGUID = '{0647EED6-CE73-4167-8D0C-541654EADA08}';
  IID_IPXV_DocumentView: TGUID = '{FB8E43A8-D47B-4C41-B39D-52DD8D17E77C}';
  IID_IPXV_Document: TGUID = '{A31C9941-4A55-43F6-87BC-0738234B5CAB}';
  IID_IPXV_DocSelection: TGUID = '{3405AD2D-C01C-4EE7-B551-5613AABFEFF2}';
  IID_IPXV_DocSelectionHandler: TGUID = '{D8CB3982-DD8C-4738-936D-7F5F9472EAC7}';
  IID_IPXV_Tool: TGUID = '{211AAF91-E97A-454C-9669-EDAEC904E16D}';
  IID_IPXV_PagesView: TGUID = '{209EE7F1-1F4F-49EE-9F26-01D7118E48D1}';
  IID_IPXV_PagesLayoutManager: TGUID = '{7BC78153-C932-4893-9095-26451DE68267}';
  IID_IPXV_PagesLayoutRegions: TGUID = '{6AAB6ED7-39C3-41FF-B009-A0E9ABA01A92}';
  IID_IPXV_PagesLayoutManagerNotifyHandler: TGUID = '{25462D4C-AA1B-4C0C-BDA7-99125BA8B8CE}';
  IID_IPXV_PagesViewDrawCallback: TGUID = '{FEEC0658-F359-4199-91D8-52DA801E5049}';
  IID_IPXV_InvalidatePagesInfo: TGUID = '{56A0DC76-234B-4AA2-8E89-712A14031C46}';
  IID_IPXV_EnumViewsCallback: TGUID = '{3C341E89-9DC0-4DDA-94D1-BE06A410FC14}';
  IID_IPXV_AnnotsList: TGUID = '{A6946FB1-A6AF-4F23-86F3-D86042125A33}';
  IID_IPXV_BookmList: TGUID = '{800CE6D3-E641-43D6-AB1B-D011D75D476C}';
  IID_IPXV_DocContentsChangesInfo: TGUID = '{7B27E7FF-6279-49DA-AE6B-8E13AD665B1F}';
  IID_IPXV_DocHighlighter: TGUID = '{8CD00BD8-331B-42A2-AEFB-B5F031FD69A1}';
  IID_IPXV_DocHighlightItems: TGUID = '{206530FD-ED79-48C5-A590-4FC73CF3BD58}';
  IID_IPXV_DocHighlightItem: TGUID = '{3E2CB9CC-C8AB-4B22-A9E2-362861350CA7}';
  IID_IPXV_FormatConverter: TGUID = '{BFE82037-0239-4A0D-80EF-83F8073E8DBA}';
  IID_IPXV_ExportConverter: TGUID = '{05BAF564-4ED5-4486-8A92-CD55DFD38427}';
  IID_IPXV_PagesRegions: TGUID = '{701DB470-B5AE-441C-B0DD-30EB08295310}';
  IID_IPXV_PageRegion: TGUID = '{49237A9D-448A-484D-9036-73E1E6C36628}';
  IID_IPXV_FormFieldsList: TGUID = '{D14D8C84-A4A9-4CC4-AD61-441F949A360A}';
  IID_IPXV_DocInfoBar: TGUID = '{69534F03-007C-47C1-80F2-A5856E982AB2}';
  IID_IPXV_DocInfoBarCallbacks: TGUID = '{2762E5E6-2E16-4032-AF9D-3A7B5ABAAB55}';
  IID_IPXV_TextEditor: TGUID = '{191E504F-B880-41BE-8F4E-C6B9A3C8B1A3}';
  IID_IPXV_BookmarksView: TGUID = '{98D7F239-5146-4B3D-884D-9008721C75B7}';
  IID_IPXV_PageThumbnailsView: TGUID = '{9BC27C16-F681-4800-9135-6572B6DCDA7A}';
  IID_IPXV_AttachmentsView: TGUID = '{31BA7C6D-BDC2-46A3-AFDB-B49835E96E00}';
  IID_IPXV_SignaturesView: TGUID = '{55767E02-2E2D-47FB-A666-BB6B3498521D}';
  IID_IPXV_CommentsView: TGUID = '{2A36038D-FA98-43A7-8DF0-5A9916167753}';
  IID_IPXV_LayersView: TGUID = '{E2E97905-34F9-45A0-B8AD-1431BC1CA79D}';
  IID_IPXV_PDFNamedDestsView: TGUID = '{1DA36BE4-B5F2-4B33-9D8C-72593FEBDF99}';
  IID_IPXV_ContentsView: TGUID = '{6A48F242-109E-4BB0-BE84-A4B5A461CCDF}';
  IID_IPXV_DocViewsList: TGUID = '{2F114962-0BD3-46E4-9128-B8AE21D8BA5D}';
  IID_IPXV_DocList: TGUID = '{21CEE151-F458-4B54-B6DB-45285E04AEC1}';
  IID_IPXV_Plugin: TGUID = '{3077CBDA-34BB-4DBE-BE4D-4DA035CB49BA}';
  IID_IPXV_ActionHandler: TGUID = '{B743E77C-BFB8-4085-B85B-6AC6FE3655AC}';
  IID_IPXV_ViewCreator: TGUID = '{F16D4312-0B2D-4C64-9FC7-DBC648B9B3AA}';
  IID_IPXV_OpenFilesDlgRes: TGUID = '{74CB8E24-D85D-4A6D-BE72-AF57F21A1034}';
  IID_IPXV_SaveFileDlgRes: TGUID = '{FBF7619D-DEB5-4F9E-9E15-3F26E28028AE}';
  IID_IPXV_TimerHandler: TGUID = '{2B2F02BD-1509-445B-A8E6-5EBD3579E06E}';
  IID_IPXV_AnnotHandler: TGUID = '{6E6FE3DF-9FA7-43BB-B325-0E38C9D989BD}';
  IID_IPXV_ImportConverter: TGUID = '{752AF886-51BB-45B7-9A8F-2B3D71431E90}';
  IID_IPXV_AnnotStateModelManager: TGUID = '{293A0493-B16F-4D1D-A762-CA5D0C73DCDE}';
  IID_IPXV_AnnotStateModel: TGUID = '{A064D69C-33D7-4219-AFFE-0A79C7600605}';
  IID_IPXV_AnnotStateItem: TGUID = '{87EA6AAB-ED6E-4141-8C41-521E704DFA42}';
  IID_IPXV_ThreadSafeCallback: TGUID = '{A596F9E0-844F-41F9-88C6-66B506963A60}';
  IID_IPXV_OperationsCreator: TGUID = '{317180B9-97BE-4A18-B989-52CC150926DD}';
  IID_IPXV_CommentStylesManager: TGUID = '{D1921AE6-B919-4E2D-B019-96426759E268}';
  IID_IPXV_CommentStylesEnumCallback: TGUID = '{BB118C7A-60AF-4BD5-9EED-ED8A2D312AD5}';
  IID_IPXV_CommentStyleGetIcon: TGUID = '{F1DD13A5-171A-4E72-BA67-E8CC3C5654A4}';
  IID_IPXV_AsyncDoCallback: TGUID = '{BC48FE46-8885-4F5A-B1E3-265E0814FF58}';
  IID_IPXV_PresetsIoCallbacks: TGUID = '{3B70F3CA-317D-4240-B67D-0AE8667C0849}';
  IID_IPXV_PresetsListCallbacks: TGUID = '{A7B61AF9-F50F-4C86-BF2A-E4558D2E1F15}';
  IID_IPXV_PresetsButton: TGUID = '{DC514689-5F9F-464A-92B1-16B5A2FC5646}';
  IID_IPXV_PageSizeCtl: TGUID = '{F1B4807E-65DB-4FE7-88FE-DB703CF57807}';
  IID_IPXV_RangeCtl: TGUID = '{79586BD0-9628-4216-BEA9-41186DFD9C78}';
  IID_IPXV_UILanguages: TGUID = '{E80DDA0B-E21C-4579-A7C3-E47F1980DC64}';
  IID_IPXV_SignatureProvider: TGUID = '{3EFC0206-21BB-442A-AA81-9DD63C2938FE}';
  IID_IPXV_PagesPreviewCtl: TGUID = '{7A9134A9-20F7-4D8D-806D-8DEFDF70029F}';
  IID_IPXV_PagesPreviewDrawCallback: TGUID = '{2E8AC7EF-B583-4C9D-B20A-C2B0CC95B43A}';
  IID_IPXV_FileNamesProvider: TGUID = '{8738A4A4-5704-4164-8898-14ED17876751}';
  IID_IPXV_AttachList: TGUID = '{3E6A9E70-4B40-48C5-A77E-1E6489C96521}';
  IID_IPXV_MacroHelper: TGUID = '{B9C95130-BAB2-411C-947C-F5E35A0CD384}';
  IID_IPXV_JSValue: TGUID = '{555C4721-774B-4E81-9BA5-62D7ED4E5B87}';
  IID_IPXV_JSCodeSnippetsStorage: TGUID = '{C25C73EF-6444-4403-B699-8F95CE14CE85}';
  IID_IPXV_JSCodeSnippet: TGUID = '{35A751A3-6421-43CE-A2C3-AF90882A8875}';
  IID_IPXV_SpellChecker: TGUID = '{E8E82DD1-B650-4AE7-A008-73151EACB44C}';
  IID_IPXV_OCRExtension: TGUID = '{A1ADACB7-046D-4A85-99EB-FE931BB18F3A}';
  IID_IPXV_OCRTask: TGUID = '{4371CA1E-0525-4374-A701-3246127B0C35}';
  IID_IPXV_OCRRegions: TGUID = '{7BC3C910-8539-4424-98A3-560DF51822EE}';
  IID_IPXV_OCRRegion: TGUID = '{57513BC7-DF60-499A-AF33-4829B8C5C2A5}';
  IID_IPXV_OCRResult: TGUID = '{EBAC8939-DB1A-45FB-B6AA-7BF47E81D2A9}';
  IID_IPXV_OCRExtLanguages: TGUID = '{7AD11BA4-3DEE-4354-AF77-4387D9F1DE2B}';
  IID_IPXV_OCRExtAccuracyLevels: TGUID = '{13AF8256-F779-4337-9C0B-9B675A6E09EB}';
  IID_IPXV_BeforeShowContextMenuEvent: TGUID = '{4C8238AD-4C2C-480B-8945-747DACCD06EE}';
  IID_IPXV_TextSelection: TGUID = '{D934750D-E5CF-49BD-B949-525E56FA1A69}';
  IID_IPXV_PageTextSelection: TGUID = '{70D206C9-FCB2-465A-BD9D-D857FDD01AC6}';
  IID_IPXV_PagesSelection: TGUID = '{C8C67FBD-6B9B-4FC3-A92A-99661D085A0A}';
  IID_IPXV_PageIndexesList: TGUID = '{D120B16B-2707-43F5-B176-009DF6500069}';
  IID_IPXV_DocContentsChangedEvent: TGUID = '{553CF597-98AA-41A3-B2F0-9C6101A6DFA6}';
  IID_IPXV_BeforePrintEvent: TGUID = '{79A9AD9C-3D6B-496B-B8E4-C09E54E21156}';
  IID_IPrintTarget: TGUID = '{6D671A1D-8B34-443A-9DCA-56B80C93439B}';
  IID_IDevMode: TGUID = '{C9C943A8-4361-4DC7-8DDE-2909FCF3C118}';
  IID_IPXV_AnnotSelection: TGUID = '{F2AAC138-7C1A-4152-BA03-A323B908D72F}';
  IID_IPXV_BookmSelection: TGUID = '{7F6F8356-1AB8-40AD-81E4-E1E3E71B4BCD}';
  IID_IPXV_ContentItemsSelection: TGUID = '{D649A087-D8E2-4D6A-917A-625726293308}';
  IID_IPXV_ContentItemEntry: TGUID = '{4B8B7763-B570-4725-BC4B-7537A752C57D}';
  IID_IPXV_PDFNamedDestsSelection: TGUID = '{7ED881CB-9DA1-4D56-94E6-5DDE88D5E844}';
  IID_IPXV_AttachSelection: TGUID = '{7B430FB9-7FBB-4645-94BC-76E917FFCE42}';
  IID_IPXV_PageRectSelection: TGUID = '{9CCBEF77-C177-4CC5-AC3E-18B08E29D628}';
  IID_IPXV_GuideSelection: TGUID = '{03BC249B-B8BF-49DA-861E-654CEA4B5D2B}';
  IID_IPXV_OCSelection: TGUID = '{B2D544A1-449E-46A1-83EB-DD4A261BA283}';
  IID_IPXV_OCOrderElementsList: TGUID = '{5E71F605-B8D3-4478-BDBA-7021069C464F}';
  IID_IPXV_InvalidatePagesEvent: TGUID = '{D98CFAA7-4EA7-4046-AA77-6A553D4A52C4}';
  IID_IPXV_PagesLayoutChangedEvent: TGUID = '{61C9E343-F9E1-40AE-9A0F-627E07B0145C}';
  IID_IPXV_PagesVisibilityChangedEvent: TGUID = '{7C1F0D81-0338-4F9F-BED8-C873A0A9A03E}';
  IID_IPXV_GotoActionEvent: TGUID = '{BFC953AC-03BE-4DFB-9BC9-ED9A45EF3E28}';
  IID_IPXV_DocSaveEvent: TGUID = '{5CC12C51-E255-427D-8385-10304C887256}';
  IID_IPXV_CommentStylesChangedEvent: TGUID = '{9642931B-D1F7-4C17-85B1-A34129EE6F7F}';
  IID_IPXV_AppSettingsEvent: TGUID = '{70026DA6-0CB8-4F47-8789-5DEF9F2BC4A1}';
  IID_IPXV_DocActionEvent: TGUID = '{48F9A6AB-3AE5-4516-84CE-AD99FEAA234B}';
  IID_IPXV_AnnotsEvent: TGUID = '{76F6C77B-0FFF-43F5-8DE3-0715163D80DD}';
  IID_IPXV_BookmEvent: TGUID = '{5CED0F57-B96A-4CF2-83B8-130E544A2644}';
  IID_IPXV_FormFieldsEvent: TGUID = '{78527649-463C-49AA-8EA8-8DC10505FB31}';
  IID_IPXV_SearchCallback: TGUID = '{D8358299-C482-4B68-89D0-125597A8AC91}';
  IID_IPXV_SearchPtr: TGUID = '{B205D3B1-A92F-4831-ABA8-224296DED408}';
  IID_IPXV_FileAttachmentPtr: TGUID = '{D7F442C9-1278-4E60-B63D-A2B89BEEDF29}';
  IID_IPXV_SearchEntry: TGUID = '{4234CE63-38FC-4DFE-9CA3-9FDCFD8801BE}';
  IID_IPXV_SearchEntryItem: TGUID = '{2AE8D184-B0DE-4209-A94A-05D3CE1606BC}';
  IID_IPXV_UIEvent: TGUID = '{A018E70A-4E56-44ED-8E14-BB82ED650C38}';
  IID_IXPS2PDFConverter: TGUID = '{E703F59E-DE71-4A00-A2DA-BE337A6FB256}';
  IID_IPXV_SearchView: TGUID = '{C6D17E84-23E1-461E-BF56-5E5DD195B53F}';
  IID_IPXV_LoupeView: TGUID = '{95ABC066-9919-4571-8387-7A7CFB5FAEEF}';
  IID_IPXV_PanZoomView: TGUID = '{09CAC0A6-B45E-4427-B5FD-55409587447E}';
  IID_IPXV_XFATreeView: TGUID = '{3116D512-3C69-454E-9040-8EE1652886C8}';
  IID_IPXV_DocCollection: TGUID = '{C7A3EBDB-C571-4D46-A3C5-50CC391F8C83}';
  IID_IPXV_DocCollectionNav: TGUID = '{450B1778-11BF-4B47-96BC-BEB4B8C0B19B}';
  IID_IPXV_ShowPropsCallback: TGUID = '{E697B3C4-06A0-4CFD-BA0C-66B40B7A6F5F}';
  IID_IPXV_SoundManager: TGUID = '{6FD43773-8B86-4D79-BCDC-FA0F32F4F26E}';
  IID_IPXV_CommentStylesPropList: TGUID = '{B1E82C97-84D1-4741-8841-8AC3C4517193}';
  IID_IPXV_EnumFolderCallback: TGUID = '{B9AB8580-DB4E-441B-8BF5-541460AD603D}';
  IID_IPXV_PrivateDataStorage: TGUID = '{C6C31E1B-68BC-45D7-BE8A-6699B151C540}';
  IID_IPXV_Annot3DContext: TGUID = '{B14A9D2F-F6A5-4DDC-8886-86E002886466}';
  IID_IPXV_3DModelTreeItem: TGUID = '{C22E9AF0-FE3A-409E-AE1C-F80AEE057DC2}';
  IID_IPXV_3D: TGUID = '{6A7F1FD3-FC4C-40C1-AF2C-D25CBB527C8E}';
  CLASS_PXV_Inst: TGUID = '{973BF60B-4CC6-4BE0-B408-3D80E07FC2E6}';
  DIID__IPXV_ControlEvents: TGUID = '{CF87328C-B7C8-4FC8-8DE6-043E83F25A17}';
  IID_IPXV_Control: TGUID = '{71300D43-687F-436A-A699-2B37448D0803}';
  CLASS_PXV_Control: TGUID = '{A1149909-4EDC-4421-B9E5-E93C25A000A1}';

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
// Constants for enum CabDataTypeID
type
  CabDataTypeID = TOleEnum;
const
  dt_Invalid = $00000000;
  dt_Undefined = $00000000;
  dt_Bool = $00000001;
  dt_Int = $00000002;
  dt_Int64 = $00000003;
  dt_Double = $00000004;
  dt_String = $00000005;
  dt_Stream = $00000006;
  dt_IUnknown = $00000007;
  dt_Container = $00001000;
  dt_Array = $00001001;
  dt_Dictionary = $00001002;

// Constants for enum CabExportFormat
type
  CabExportFormat = TOleEnum;
const
  cab_export_PDF = $00000000;
  cab_export_JSON = $00000001;

// Constants for enum CabExportFlags
type
  CabExportFlags = TOleEnum;
const
  cab_export_skipDefaults = $00000001;
  cab_export_NamedValues = $00000002;

// Constants for enum ColorType
type
  ColorType = TOleEnum;
const
  ColorType_Auto = $FFFFFFFD;
  ColorType_Default = $FFFFFFFE;
  ColorType_None = $FFFFFFFF;
  ColorType_RGB = $00000000;
  ColorType_CMYK = $00000001;
  ColorType_Gray = $00000002;

// Constants for enum COMThreadingModel
type
  COMThreadingModel = TOleEnum;
const
  COMThreadingModel_None = $00000000;
  COMThreadingModel_STA = $00000001;
  COMThreadingModel_MTA = $00000002;
  COMThreadingModel_Any = $00000003;

// Constants for enum RangeType
type
  RangeType = TOleEnum;
const
  RangeType_Auto = $FFFFFFFF;
  RangeType_None = $00000000;
  RangeType_All = $00000001;
  RangeType_First = $00000002;
  RangeType_Last = $00000003;
  RangeType_Odd = $00000004;
  RangeType_Even = $00000005;
  RangeType_Exact = $00000006;
  RangeType_Array = $00000007;
  RangeType_Current = $00000008;
  RangeType_CurrentRect = $00000009;
  RangeType_CustomRect = $0000000A;
  _RangeType_Max_ = $0000000B;

// Constants for enum StdPaperID
type
  StdPaperID = TOleEnum;
const
  StdPaper_A0 = $00000000;
  StdPaper_A1 = $00000001;
  StdPaper_A2 = $00000002;
  StdPaper_A3 = $00000003;
  StdPaper_A4 = $00000004;
  StdPaper_A5 = $00000005;
  StdPaper_B0 = $00000006;
  StdPaper_B1 = $00000007;
  StdPaper_B2 = $00000008;
  StdPaper_B4 = $00000009;
  StdPaper_B5 = $0000000A;
  StdPaper_ANSI_A = $0000000B;
  StdPaper_ANSI_B = $0000000C;
  StdPaper_ANSI_Super_B = $0000000D;
  StdPaper_ANSI_C = $0000000E;
  StdPaper_ANSI_D = $0000000F;
  StdPaper_ANSI_E = $00000010;
  StdPaper_ANSI_F = $00000011;
  StdPaper_US_Legal = $00000012;
  StdPaper_Statement = $00000013;
  StdPaper_Executive = $00000014;
  StdPaper_Folio = $00000015;
  StdPaper_Quarto = $00000016;
  StdPaper_Note = $00000017;
  StdPaper_Envelope_9 = $00000018;
  StdPaper_Envelope_10 = $00000019;
  StdPaper_Envelope_11 = $0000001A;
  StdPaper_Envelope_14 = $0000001B;
  StdPaper_Envelope_DL = $0000001C;
  StdPaper_Envelope_C5 = $0000001D;
  StdPaper_Envelope_C3 = $0000001E;
  StdPaper_Envelope_C4 = $0000001F;
  StdPaper_Envelope_C6 = $00000020;
  StdPaper_Envelope_C65 = $00000021;
  StdPaper_Envelope_B4 = $00000022;
  StdPaper_Envelope_B5 = $00000023;
  StdPaper_Envelope_B6 = $00000024;
  StdPaper_Envelope_Monarch = $00000025;
  StdPaper_Envelope_Personal = $00000026;
  StdPaper_JIS_B0 = $00000027;
  StdPaper_JIS_B1 = $00000028;
  StdPaper_JIS_B2 = $00000029;
  StdPaper_JIS_B3 = $0000002A;
  StdPaper_JIS_B4 = $0000002B;
  StdPaper_JIS_B5 = $0000002C;
  StdPaper_JIS_B6 = $0000002D;
  StdPaper_JIS_B7 = $0000002E;
  StdPaper_18x24 = $0000002F;
  StdPaper_24x36 = $00000030;
  StdPaper_30x42 = $00000031;
  _StdPaper_Max_ = $00000032;

// Constants for enum StdPaperGroupID
type
  StdPaperGroupID = TOleEnum;
const
  StdPaperGroup_ISO = $00000000;
  StdPaperGroup_ANSI = $00000001;
  StdPaperGroup_Envelope = $00000002;
  StdPaperGroup_JIS = $00000003;
  StdPaperGroup_Misc = $00000004;
  _StdPaperGroup_Max_ = $00000005;

// Constants for enum LogMsgType
type
  LogMsgType = TOleEnum;
const
  LogMsg_Unknown = $00000000;
  LogMsg_Error = $00000001;
  LogMsg_Warning = $00000002;
  LogMsg_Info = $00000003;
  LogMsg_Debug = $00000004;
  LogMsg_Verbose = $00000005;
  _LogMsg_Max_ = $00000006;

// Constants for enum EventHandlerFlags
type
  EventHandlerFlags = TOleEnum;
const
  EventHandler_SyncCall = $00000001;

// Constants for enum OpExecFlags
type
  OpExecFlags = TOleEnum;
const
  OpExecFlag_NoUI = $00000001;
  OpExecFlag_NoProgress = $00000002;
  OpExecFlag_ForceNonUndo = $00000004;
  OpExecFlag_StopOnNonCriticalErr = $00000008;
  OpExecFlag_AllowMergeHist = $00000010;
  OpExecFlag_DoQuietUndo = $00000020;
  OpExecFlag_BatchMode = $00008000;

// Constants for enum OpHistItemAddFlags
type
  OpHistItemAddFlags = TOleEnum;
const
  OpHistItemAdd_AllowMerge = $00000001;

// Constants for enum OpSetupUIFlags
type
  OpSetupUIFlags = TOleEnum;
const
  OpSetupUIFlag_BatchMode = $00008000;

// Constants for enum SpellCheckResult
type
  SpellCheckResult = TOleEnum;
const
  SpellCheckRes_Unknown = $00000000;
  SpellCheckRes_OK = $00000001;
  SpellCheckRes_NoLang = $00000002;
  SpellCheckRes_LangPending = $00000003;
  SpellCheckRes_SpellDisabled = $00000004;
  SpellCheckRes_NoChecker = $00000005;

// Constants for enum SpellCheckCaps
type
  SpellCheckCaps = TOleEnum;
const
  SpellCheck_Spelling = $00000001;
  SpellCheck_Hyphenation = $00000002;

// Constants for enum ProgressStyleFlags
type
  ProgressStyleFlags = TOleEnum;
const
  ProgressStyle_Normal = $00000000;
  ProgressStyle_Paused = $00000001;
  ProgressStyle_Error = $00000002;
  ProgressStyle_StateMask = $00000003;
  ProgressStyle_Indeterminate = $00000010;
  ProgressStyle_AllowCancel = $00000020;

// Constants for enum CreateStdRangeProgressMonFlags
type
  CreateStdRangeProgressMonFlags = TOleEnum;
const
  CSRPM_KeepTitle = $00000001;
  CSRPM_KeepText = $00000002;
  CSRPM_KeepStatusText = $00000004;
  CSRPM_KeepButtonTitle = $00000008;
  CSRPM_KeepAllText = $0000000F;

// Constants for enum MailType
type
  MailType = TOleEnum;
const
  MailType_Client = $00000000;
  MailType_SMTP = $00000001;

// Constants for enum MailRecip
type
  MailRecip = TOleEnum;
const
  MailRecip_Author = $00000000;
  MailRecip_To = $00000001;
  MailRecip_Cc = $00000002;
  MailRecip_BCc = $00000003;

// Constants for enum MailFlags
type
  MailFlags = TOleEnum;
const
  MailFlag_NeedAuth = $00000001;
  MailFlag_NeedTLS = $00000002;
  MailFlag_UseSSL = $00000004;

// Constants for enum MailSendFlags
type
  MailSendFlags = TOleEnum;
const
  MailSFlag_MAPI_SendDialog = $00000008;
  MailSFlag_MAPI_NoLogon = $00001000;
  MailSFlag_MAPI_NoResolve = $00002000;

// Constants for enum MailPriority
type
  MailPriority = TOleEnum;
const
  MailPriority_Low = $00000000;
  MailPriority_Normal = $00000001;
  MailPriority_High = $00000002;

// Constants for enum RangeFeatures
type
  RangeFeatures = TOleEnum;
const
  RangeFeature_AllowReversed = $00000001;
  RangeFeature_AllowCurrent = $00000002;
  RangeFeature_AllowCurrentRect = $00000006;
  RangeFeature_AllowCustomRect = $00000008;
  RangeFeature_AllowArray = $00000010;
  RangeFeature_AllowFilter = $00000020;
  RangeFeature_AllowAll = $00000040;
  RangeFeature_Dialog = $80000000;

// Constants for enum LogAreaType
type
  LogAreaType = TOleEnum;
const
  LogArea_Common = $00000000;
  LogArea_Doc = $00000001;
  LogArea_Annot = $00000002;
  LogArea_Page = $00000003;
  LogArea_User = $00002710;

// Constants for enum LogCtxType
type
  LogCtxType = TOleEnum;
const
  LogCtx_Unknown = $00000000;
  LogCtx_User = $00002710;

// Constants for enum LogObjType
type
  LogObjType = TOleEnum;
const
  LogObj_Unknown = $00000000;
  LogObj_User = $00002710;

// Constants for enum OpAddToHistoryMode
type
  OpAddToHistoryMode = TOleEnum;
const
  OpA2H_ClearAndAdd = $00000000;
  OpA2H_Add = $00000001;
  OpA2H_NoAdd = $00000002;

// Constants for enum AFS_OriginTypes
type
  AFS_OriginTypes = TOleEnum;
const
  AFS_Origin_Begin = $00000000;
  AFS_Origin_Current = $00000001;
  AFS_Origin_End = $00000002;

// Constants for enum AFS_OpenFileFlags
type
  AFS_OpenFileFlags = TOleEnum;
const
  AFS_OpenFile_Read = $00000001;
  AFS_OpenFile_Write = $00000002;
  AFS_OpenFile_CreateNew = $00000004;
  AFS_OpenFile_CreateAlways = $00000008;
  AFS_OpenFile_OpenExisting = $00000010;
  AFS_OpenFile_OpenAlways = $00000020;
  AFS_OpenFile_ShareRead = $00000040;
  AFS_OpenFile_ShareWrite = $00000080;
  AFS_OpenFile_ShareDelete = $00000100;
  AFS_OpenFile_Cache = $00000200;
  AFS_OpenFile_SyncCache = $00000400;
  AFS_OpenFile_FullCache = $00000800;
  AFS_OpenFile_PrivateCache = $00001000;
  AFS_OpenFile_CheckOut = $00002000;
  AFS_OpenFile_AllowUI = $00004000;

// Constants for enum AFS_CloseFileFlags
type
  AFS_CloseFileFlags = TOleEnum;
const
  AFS_CloseFile_AllowUI = $00000001;
  AFS_CloseFile_CheckIn = $00000002;
  AFS_CloseFile_DiscardCheckOut = $00000004;

// Constants for enum AFS_FileIoModeFlags
type
  AFS_FileIoModeFlags = TOleEnum;
const
  AFS_FileIoMode_RandomRead = $00000001;
  AFS_FileIoMode_RandomWrite = $00000002;

// Constants for enum AFS_FileAttributes
type
  AFS_FileAttributes = TOleEnum;
const
  AFS_FileAttribute_Folder = $00100000;
  AFS_FileAttribute_ReadOnly = $00200000;
  AFS_FileAttribute_Hidden = $00400000;
  AFS_FileAttribute_System = $00800000;
  AFS_FileAttribute_Archive = $01000000;
  AFS_FileAttribute_Temporary = $02000000;
  AFS_FileAttribute_Virtual = $04000000;

// Constants for enum AFS_String2NameFlags
type
  AFS_String2NameFlags = TOleEnum;
const
  AFS_String2Name_DIPath = $00000001;
  AFS_String2Name_Test = $00000002;
  AFS_String2Name_FullTest = $00000004;

// Constants for enum AFS_Name2StringFlags
type
  AFS_Name2StringFlags = TOleEnum;
const
  AFS_Name2String_DIPath = $00000001;
  AFS_Name2String_DIPathNoDrive = $00000002;
  AFS_Name2String_URL = $00000004;
  AFS_Name2String_ForDisplay = $00000008;

// Constants for enum AFS_BindFlags
type
  AFS_BindFlags = TOleEnum;
const
  AFS_Bind_ReadOnly = $00000001;
  AFS_Bind_CreateNew = $00000002;
  AFS_Bind_DIPath = $00000004;

// Constants for enum AFS_BindContextFlags
type
  AFS_BindContextFlags = TOleEnum;
const
  AFS_BindContext_NoUI = $00000001;

// Constants for enum AFS_DlgTypes
type
  AFS_DlgTypes = TOleEnum;
const
  AFS_Dlg_OpenFiles = $00000001;
  AFS_Dlg_SaveFile = $00000002;
  AFS_Dlg_SelectFolder = $00000003;

// Constants for enum AFS_DlgFlags
type
  AFS_DlgFlags = TOleEnum;
const
  AFS_DlgFlag_AllowMultSel = $00000001;
  AFS_DlgFlag_ForceShowHidden = $00000002;
  AFS_DlgFlag_OverwritePrompt = $00000004;
  AFS_DlgFlag_NoNewFolderBtn = $00000008;
  AFS_DlgFlag_AlwaysDefExt = $00000010;

// Constants for enum AFS_FeaturesFlags
type
  AFS_FeaturesFlags = TOleEnum;
const
  AFS_FileSys_EnumFolder = $00000001;
  AFS_FileSys_CreateFolder = $00000002;
  AFS_FileSys_DeleteFolder = $00000004;
  AFS_FileSys_RenameFolder = $00000008;
  AFS_FileSys_CreateFile = $00000010;
  AFS_FileSys_DeleteFile = $00000020;
  AFS_FileSys_ReopenFile = $00000040;
  AFS_FileSys_RenameFile = $00000080;
  AFS_FileSys_CopyFile = $00000100;
  AFS_FileSys_ReadFile = $00000200;
  AFS_FileSys_WriteFile = $00000400;
  AFS_FileSys_RandomReadFile = $00000800;
  AFS_FileSys_RandomWriteFile = $00001000;
  AFS_FileSys_FileIoCache = $00002000;
  AFS_FileSys_BrowsableURL = $00004000;
  AFS_FileSys_CreateAccount = $00008000;
  AFS_FileSys_Remote = $10000000;
  AFS_FileSys_Slow = $20000000;
  AFS_FileSys_Transactional = $40000000;
  AFS_FileSys_ReadOnly = $80000000;

// Constants for enum IXC_BlendMode
type
  IXC_BlendMode = TOleEnum;
const
  Blend_Normal = $00000000;
  Blend_Multiply = $00000001;
  Blend_Screen = $00000002;
  Blend_Darken = $00000003;
  Blend_ColorDodge = $00000004;
  Blend_ColorBurn = $00000005;
  Blend_Exclusion = $00000006;
  Blend_Overlay = $00000007;
  Blend_HardLight = $00000008;
  Blend_SoftLight = $00000009;
  Blend_XOR = $0000000A;

// Constants for enum IXC_CallbackStage
type
  IXC_CallbackStage = TOleEnum;
const
  CallbackStage_Start = $00000001;
  CallbackStage_Processing = $00000002;
  CallbackStage_Finish = $00000003;

// Constants for enum IXC_Channel
type
  IXC_Channel = TOleEnum;
const
  Channel_B = $00000000;
  Channel_G = $00000001;
  Channel_R = $00000002;
  Channel_A = $00000003;
  Channel_Gray = $00000000;

// Constants for enum IXC_ColorFlags
type
  IXC_ColorFlags = TOleEnum;
const
  Color_Index = $00000001;
  Color_Nearest = $00000002;
  Color_Grayscale = $00000002;
  Color_AddColor = $00000003;
  Color_UseAlpha = $00000004;

// Constants for enum IXC_ColorReductionMethod
type
  IXC_ColorReductionMethod = TOleEnum;
const
  Reduce_FixedPalette = $00000000;
  Reduce_Adaptive = $00000001;

// Constants for enum IXC_CopyClipboard
type
  IXC_CopyClipboard = TOleEnum;
const
  CopyClipboard_Bitmap = $00000001;
  CopyClipboard_DIB = $00000002;
  CopyClipboard_Palette = $00000004;
  CopyClipboard_PNG = $00000008;
  CopyClipboard_EmptyClipboard = $00001000;

// Constants for enum IXC_CorrectSaveParamsFlags
type
  IXC_CorrectSaveParamsFlags = TOleEnum;
const
  ISPF_UPDATE_DEF_VALS = $00000001;

// Constants for enum IXC_CreationDisposition
type
  IXC_CreationDisposition = TOleEnum;
const
  CreationDisposition_Skip = $00000001;
  CreationDisposition_Overwrite = $00000002;

// Constants for enum IXC_DitherMethod
type
  IXC_DitherMethod = TOleEnum;
const
  Dither_None = $00000000;
  Dither_Floyd_Steinberg = $00000001;

// Constants for enum IXC_DrawFlags
type
  IXC_DrawFlags = TOleEnum;
const
  DrawFlags_FillBackGround = $00000001;
  DrawFlags_UseTransparentColor = $00000002;
  DrawFlags_IgnorePageAlpha = $00000010;
  DrawFlags_No_B_Channel = $00000100;
  DrawFlags_No_G_Channel = $00000200;
  DrawFlags_No_R_Channel = $00000400;
  DrawFlags_IgnoreAlphaChannel = $00000800;

// Constants for enum IXC_FastRotate
type
  IXC_FastRotate = TOleEnum;
const
  Rotate_90CCW = $00000000;
  Rotate_180 = $00000001;
  Rotate_270CCW = $00000002;
  Rotate_90CW = $00000002;
  Rotate_270CW = $00000000;

// Constants for enum IXC_FilterFlags
type
  IXC_FilterFlags = TOleEnum;
const
  Filter_ProcessAlpha = $00000004;

// Constants for enum IXC_FormatFlags
type
  IXC_FormatFlags = TOleEnum;
const
  FMTF_CAN_Decode = $00000010;
  FMTF_CAN_Encode = $00000020;
  FMTF_Vector = $00000100;
  FMTF_Multipage = $00800000;
  FMTF_InsertPages = $00400000;
  FMTF_MovePages = $00200000;
  FMTF_DeletePages = $00100000;

// Constants for enum IXC_FormatParametersIDS
type
  IXC_FormatParametersIDS = TOleEnum;
const
  FP_ID_FORMAT = $464D5420;
  FP_ID_ITYPE = $49545950;
  FP_ID_IMG_SUBTYPE = $53545950;
  FP_ID_COMP_TYPE = $434F4D50;
  FP_ID_COMP_LEVEL = $434C4556;
  FP_ID_JPEG_QUALITY = $4A514C54;
  FP_ID_LOSSLESS = $4C534C53;
  FP_ID_DITHER = $44495448;
  FP_ID_GRAY = $47524159;
  FP_ID_INTERLACE = $494E524C;
  FP_ID_XDPI = $44504958;
  FP_ID_YDPI = $44504959;
  FP_ID_PAGE_DELAY = $44454C41;
  FP_ID_ALPHA = $414C4641;
  FP_ID_GAMMA = $47414D4D;
  FP_ID_EXIF = $45584946;
  FP_ID_XMP = $584D5020;
  FP_ID_TEXT00 = $54583030;
  FP_ID_TEXT01 = $54583031;
  FP_ID_TEXT02 = $54583032;
  FP_ID_TEXT03 = $54583033;
  FP_ID_TEXT04 = $54583034;
  FP_ID_TEXT05 = $54583035;
  FP_ID_TEXT06 = $54583036;
  FP_ID_TEXT07 = $54583037;
  FP_ID_TEXT08 = $54583038;
  FP_ID_TEXT09 = $54583039;
  FP_ID_TEXT0A = $54583041;
  FP_ID_TEXT0B = $54583042;
  FP_ID_TEXT_FF = $54584646;
  FP_ID_TITLE = $54583030;
  FP_ID_AUTHOR = $54583031;
  FP_ID_DESCRIPTION = $54583032;
  FP_ID_COPYRIGHT = $54583033;
  FP_ID_CREATION_TIME = $54583034;
  FP_ID_SOFTWARE = $54583035;
  FP_ID_DISCLAIMER = $54583036;
  FP_ID_WARNING = $54583037;
  FP_ID_SOURCE = $54583038;
  FP_ID_COMMENT = $54583039;
  FP_ID_ANNOTATION = $54583041;
  FP_ID_URL = $54583042;
  FP_ID_TEXT = $54584646;
  FP_ID_BPP = $42505020;
  FP_ID_BPC = $42504320;
  FP_ID_CHANNELS = $4348414E;
  FP_ID_ISTHUMBNAIL = $5448554D;
  FP_ID_ACCESS = $41434320;
  FP_ID_FILTER = $46494C54;
  FP_ID_JP2K_CODESTRMTYPE = $4A325354;
  FP_ID_COLORSPACE = $434C5253;
  FP_ID_ALPHA_TYPE = $41545950;
  FP_ID_ALPHA_JPEG_QUALITY = $414A5156;
  FP_ID_YSUBSAMPLING = $59535542;

// Constants for enum IXC_FreeRotate
type
  IXC_FreeRotate = TOleEnum;
const
  FreeRotate_Fast = $00000000;
  FreeRotate_Antialiasing = $00000001;

// Constants for enum IXC_ImageFileCompressionTypes
type
  IXC_ImageFileCompressionTypes = TOleEnum;
const
  IComp_Default = $00000000;
  IComp_None = $00000001;
  IComp_LZW = $00000005;
  IComp_JPEG = $00000007;
  IComp_ZIP = $00000008;
  IComp_RLE = $00008005;
  IComp_PackBits = $00008005;
  IComp_CCITTRLE = $00000002;
  IComp_CCITTFax3 = $00000003;
  IComp_CCITTFax4 = $00000004;
  IComp_CCITTRLEW = $00008003;
  IComp_OldJPEG = $00000006;
  IComp_ThunderScan = $00008029;
  IComp_SGILog = $00008774;
  IComp_SGILog24 = $00008775;
  IComp_JBIG = $00000009;
  IComp_Reserved2 = $0000000A;
  IComp_ABIC = $00007D0A;

// Constants for enum IXC_ImageFileFormatIDs
type
  IXC_ImageFileFormatIDs = TOleEnum;
const
  FMT_INVALID_FORMAT_ID = $FFFFFFFF;
  FMT_BMP_ID = $424D5020;
  FMT_GIF_ID = $47494620;
  FMT_PNG_ID = $504E4720;
  FMT_JNG_ID = $4A4E4720;
  FMT_JPEG_ID = $4A504547;
  FMT_ICO_ID = $49434F20;
  FMT_PBM_ID = $50424D20;
  FMT_PGM_ID = $50474D20;
  FMT_PPM_ID = $50504D20;
  FMT_JBIG_ID = $4A424947;
  FMT_JBIG2_ID = $4A424732;
  FMT_JPEG2K_ID = $4A50324B;
  FMT_WBMP_ID = $57424D50;
  FMT_PCX_ID = $50435820;
  FMT_DCX_ID = $44435820;
  FMT_TGA_ID = $54474120;
  FMT_TIFF_ID = $54494646;
  FMT_DNG_ID = $444E4720;
  FMT_WMF_ID = $574D4620;
  FMT_AMF_ID = $414D4620;
  FMT_EMF_ID = $454D4620;

// Constants for enum IXC_ImageLoadFlags
type
  IXC_ImageLoadFlags = TOleEnum;
const
  ImageLoad_Deferred = $00000001;

// Constants for enum IXC_MemoryType
type
  IXC_MemoryType = TOleEnum;
const
  MemoryType_1bpp = $00000001;
  MemoryType_4bpp = $00000002;
  MemoryType_8bpp = $00000003;
  MemoryType_16bpp = $00000004;
  MemoryType_24bpp = $00000005;
  MemoryType_32bpp = $00000006;
  MemoryType_4RLE = $00000007;
  MemoryType_8RLE = $00000008;

// Constants for enum IXC_MosaicType
type
  IXC_MosaicType = TOleEnum;
const
  MosaicType_Simple = $00000000;
  MosaicType_Average = $00000001;

// Constants for enum IXC_NoiseType
type
  IXC_NoiseType = TOleEnum;
const
  NoiseType_Simple = $00000000;
  NoiseType_Monochromatic = $00000001;

// Constants for enum IXC_OpenFilterFlags
type
  IXC_OpenFilterFlags = TOleEnum;
const
  OpenFilterFlags_NoRaster = $00000001;
  OpenFilterFlags_NoVector = $00000002;
  OpenFilterFlags_NoAllFiles = $00000004;
  OpenFilterFlags_NoSinglePaged = $00000008;
  OpenFilterFlags_NoMultiPaged = $00000010;
  OpenFilterFlags_NoAllSupported = $00000020;
  OpenFilterFlags_NoIndividial = $00000040;
  OpenFilterFlags_UseVertSepator = $00001000;
  OpenFilterFlags_NoAdvRastVectFilters = $00002000;
  OpenFilterFlags_NoTitles = $00004000;

// Constants for enum IXC_OpenSaveDialogOptions
type
  IXC_OpenSaveDialogOptions = TOleEnum;
const
  OpenSaveDialog_NoRaster = $00000001;
  OpenSaveDialog_NoVector = $00000002;
  OpenSaveDialog_NoSinglePaged = $00000008;
  OpenSaveDialog_NoMultiPaged = $00000010;
  OpenDialog_NoAllFiles = $00000004;
  OpenDialog_NoAllSupported = $00000020;
  OpenDialog_NoPreview = $00010000;
  SaveDialog_NoOptions = $00010000;

// Constants for enum IXC_PageBlockLockFlags
type
  IXC_PageBlockLockFlags = TOleEnum;
const
  PageBlock_ModeRead = $00000001;
  PageBlock_ModeWrite = $00000002;
  PageBlock_ModeRW = $00000003;
  PageBlock_UserBuf = $00000004;

// Constants for enum IXC_PageFormat
type
  IXC_PageFormat = TOleEnum;
const
  PageFormat_Empty = $00000000;
  PageFormat_1Indexed = $00000001;
  PageFormat_8Indexed = $00000002;
  PageFormat_8Gray = $00000003;
  PageFormat_8AlphaGray = $00000004;
  PageFormat_8RGB = $00000005;
  PageFormat_8ARGB = $00000006;
  PageFormat_16Gray = $00000007;
  PageFormat_16AlphaGray = $00000008;
  PageFormat_16RGB = $00000009;
  PageFormat_16ARGB = $0000000A;
  PageFormat_Vector = $00008000;

// Constants for enum IXC_PageStateFlags
type
  IXC_PageStateFlags = TOleEnum;
const
  PageState_NotDecoded = $00000001;
  PageState_DCinUse = $00000002;
  PageState_BlockInUse = $00000004;

// Constants for enum IXC_PageSwappingMode
type
  IXC_PageSwappingMode = TOleEnum;
const
  PSWP_Auto = $00000000;
  PSWP_ForceSwap = $00000001;
  PSWP_ForceMemory = $00000002;

// Constants for enum IXC_SaveFilterFlags
type
  IXC_SaveFilterFlags = TOleEnum;
const
  SaveFilterFlags_NoRaster = $00000001;
  SaveFilterFlags_NoVector = $00000002;
  SaveFilterFlags_NoSinglePaged = $00000008;
  SaveFilterFlags_NoMultiPaged = $00000010;

// Constants for enum IXC_ScaleMethod
type
  IXC_ScaleMethod = TOleEnum;
const
  ScaleMethod_Linear = $00000000;
  ScaleMethod_Bilinear = $00000001;
  ScaleMethod_Bicubic = $00000002;

// Constants for enum IXC_Shear
type
  IXC_Shear = TOleEnum;
const
  Shear_Fast = $00000000;
  Shear_Antialiasing = $00000001;

// Constants for enum IXC_Split3Mode
type
  IXC_Split3Mode = TOleEnum;
const
  Split3_RGB = $00000000;
  Split3_HLS = $00000001;
  Split3_YUV = $00000002;
  Split3_YIQ = $00000003;
  Split3_XYZ = $00000004;

// Constants for enum IXC_StandardMatrixfilters
type
  IXC_StandardMatrixfilters = TOleEnum;
const
  DI_FILTER_Smooth = $00000000;
  DI_FILTER_Gaussian_Blur = $00000001;
  DI_FILTER_Sharpen = $00000002;
  DI_FILTER_Mean_Removal = $00000003;
  DI_FILTER_Emboss_Laplascian = $00000004;
  DI_FILTER_Emboss_Horz_Vertical = $00000005;
  DI_FILTER_Emboss_All_Directions = $00000006;
  DI_FILTER_Emboss_Lossy = $00000007;
  DI_FILTER_Edge_Detect = $00000008;

// Constants for enum IXC_SwapChannels
type
  IXC_SwapChannels = TOleEnum;
const
  SwapChannels_RGB2RGB = $00000000;
  SwapChannels_RGB2RBG = $00000001;
  SwapChannels_RGB2BGR = $00000002;
  SwapChannels_RGB2BRG = $00000003;
  SwapChannels_RGB2GRB = $00000004;
  SwapChannels_RGB2GBR = $00000005;

// Constants for enum PXS_CryptState
type
  PXS_CryptState = TOleEnum;
const
  State_Ok = $00000000;
  State_NeedInBuffer = $00000001;
  State_NeedOutBuffer = $00000002;

// Constants for enum PXS_PDFAtomDefs
type
  PXS_PDFAtomDefs = TOleEnum;
const
  INVALID_PDF_ATOM = $00000000;

// Constants for enum PXS_PDFVariantType
type
  PXS_PDFVariantType = TOleEnum;
const
  PVT_INVALID = $FFFFFFFF;
  PVT_Null = $00000000;
  PVT_Integer = $00000001;
  PVT_Double = $00000002;
  PVT_Boolean = $00000003;
  PVT_Name = $00000004;
  PVT_String = $00000005;
  PVT_Dictionary = $00000006;
  PVT_Array = $00000007;
  PVT_Stream = $00000008;

// Constants for enum PXS_StreamSetDataFlags
type
  PXS_StreamSetDataFlags = TOleEnum;
const
  SetDataFlag_RawData = $00001000;

// Constants for enum PXS_StreamEncodeDecodeFlags
type
  PXS_StreamEncodeDecodeFlags = TOleEnum;
const
  SEDF_Default = $00000000;
  SEDF_ByteMode = $00000001;
  SEDF_IgnoreFKey = $00000002;
  SEDF_ConvertYCbCr = $00000004;
  SEDF_ReplaceLZWByZIP = $00000010;
  SEDF_LossLess = $00000020;

// Constants for enum PXS_StreamDecodeDepth
type
  PXS_StreamDecodeDepth = TOleEnum;
const
  DecodeDepth_All = $FFFFFFFE;
  DecodeDepth_Raw = $FFFFFFFF;
  DecodeDepth_DecryptOnly = $00000000;

// Constants for enum PXS_StreamFilterFlags
type
  PXS_StreamFilterFlags = TOleEnum;
const
  SFF_Identity = $00000001;
  SFF_Crypt = $00000002;
  SFF_SupportByteMode = $00000010;
  SFF_LossLess = $00000020;
  SFF_Image = $00000040;
  SFF_HasParams = $00000080;
  SFF_ParamsAreOptional = $00000100;

// Constants for enum PXS_StreamType
type
  PXS_StreamType = TOleEnum;
const
  Stream_Generic = $00000000;
  Stream_Content = $00000001;
  Stream_Image = $00000002;
  Stream_InlineImage = $00000003;
  Stream_Metadata = $00000004;

// Constants for enum PXS_DoublePrecision
type
  PXS_DoublePrecision = TOleEnum;
const
  Precision_Auto = $00000000;
  Precision_Default = $00000006;
  Precision_Max = $0000000F;

// Constants for enum PXS_StructureValidationFlags
type
  PXS_StructureValidationFlags = TOleEnum;
const
  SVF_Valid = $00000000;
  SVF_XRefChunkNotFound = $00000001;
  SVF_ErrorsInXRef = $00000002;
  SVF_ErrorsInXRefNonCritical = $00000004;
  SVF_InvalidObjRef = $00000008;
  SVF_BrokenObj = $00000010;
  SVF_BrokenObjNonCritical = $00000020;
  SVF_MissalignedObj = $00000040;
  SVF_BrokenObjStream = $00000080;
  SVF_ErrorsInTrailer = $00000100;
  SVF_UnrecoveredErrorsInTrailer = $00000200;
  SVF_LargerFileNotTruncated = $00000400;
  SVF_IoReadFailed = $00400000;
  SVF_FailLoadValidObject = $00800000;
  SVF_WarnFutureObjRef = $01000000;
  SVF_ObjStreamNeedReparce = $40000000;
  SVF_Corrected = $80000000;

// Constants for enum PXS_CryptMethod
type
  PXS_CryptMethod = TOleEnum;
const
  CF_METHOD_Identity = $00000000;
  CF_METHOD_NONE = $00000001;
  CF_METHOD_RC4_V2 = $00000002;
  CF_METHOD_AES_V1 = $00000005;
  CF_METHOD_AES_V2 = $00000006;
  CF_METHOD_AES_V3 = $00000007;

// Constants for enum PXC_Action_Sound_Flags
type
  PXC_Action_Sound_Flags = TOleEnum;
const
  SoundFlag_Synchronous = $00000001;
  SoundFlag_Repeat = $00000002;
  SoundFlag_Mix = $00000004;

// Constants for enum PXC_AnnotAppType
type
  PXC_AnnotAppType = TOleEnum;
const
  AAT_Normal = $00000000;
  AAT_Rollover = $00000001;
  AAT_Down = $00000002;
  _AAT_Last_ = $00000003;

// Constants for enum PXC_AnnotBorderEffect
type
  PXC_AnnotBorderEffect = TOleEnum;
const
  ABE_Standard = $00000000;
  ABE_Cloudy = $00000001;
  _ABE_Last_ = $00000002;

// Constants for enum PXC_AnnotBorderStyle
type
  PXC_AnnotBorderStyle = TOleEnum;
const
  ABS_Solid = $00000000;
  ABS_Dashed = $00000001;
  ABS_Beveled = $00000002;
  ABS_Inset = $00000003;
  ABS_Underline = $00000004;
  _ABS_Last_ = $00000005;

// Constants for enum PXC_AnnotCaretSymbol
type
  PXC_AnnotCaretSymbol = TOleEnum;
const
  CaretSymbol_None = $00000000;
  CaretSymbol_Paragraph = $00000001;
  CaretSymbol_Space = $00000002;

// Constants for enum PXC_AnnotFeature
type
  PXC_AnnotFeature = TOleEnum;
const
  AFE_Move = $00000001;
  AFE_Scale = $00000002;
  AFE_ScaleFree = $00000003;
  AFE_Rotate90 = $00000004;
  AFE_RotateFree = $00000005;
  AFE_FColor = $00000006;
  AFE_SColor = $00000007;
  AFE_CanNoStroke = $00000008;
  AFE_CanNoFill = $00000009;
  AFE_Cloud = $0000000A;
  AFE_Opacity = $0000000B;
  AFE_BlendMode = $0000000C;
  AFE_LineStart = $0000000D;
  AFE_LineEnd = $0000000E;
  AFE_LineStart_Scale = $0000000F;
  AFE_LineEnd_Scale = $00000010;
  AFE_HighlightMode = $00000011;
  AFE_UnderlineStyle = $00000012;
  AFE_NoteIcon = $00000013;
  AFE_LLL = $00000014;
  AFE_LLE = $00000015;
  AFE_LLO = $00000016;
  AFE_LCV = $00000017;
  AFE_LCI = $00000018;
  AFE_BW = $00000019;
  AFE_BS = $0000001A;
  AFE_BS_Dashed = $0000001B;
  AFE_BS_Cloudy = $0000001C;
  AFE_BS_Underline = $0000001D;
  AFE_BS_Widget = $0000001E;
  AFE_Measure = $0000001F;
  AFE_Subject = $00000020;
  AFE__MAX_ = $00000021;

// Constants for enum PXC_AnnotFlag
type
  PXC_AnnotFlag = TOleEnum;
const
  AF_Invisible = $00000001;
  AF_Hidden = $00000002;
  AF_Print = $00000004;
  AF_NoZoom = $00000008;
  AF_NoRotate = $00000010;
  AF_NoView = $00000020;
  AF_ReadOnly = $00000040;
  AF_Locked = $00000080;
  AF_ToggleNoView = $00000100;
  AF_ContentLocked = $00000200;

// Constants for enum PXC_AnnotHighlightMode
type
  PXC_AnnotHighlightMode = TOleEnum;
const
  AHM_None = $00000000;
  AHM_Invert = $00000001;
  AHM_Outline = $00000002;
  AHM_Push = $00000003;
  _AHM_Last_ = $00000004;

// Constants for enum PXC_AnnotLineEndingStyle
type
  PXC_AnnotLineEndingStyle = TOleEnum;
const
  LE_None = $00000000;
  LE_Square = $00000001;
  LE_Circle = $00000002;
  LE_Diamond = $00000003;
  LE_OpenArrow = $00000004;
  LE_ClosedArrow = $00000005;
  LE_Butt = $00000006;
  LE_ROpenArrow = $00000007;
  LE_RClosedArrow = $00000008;
  LE_Slash = $00000009;
  _LE_Last_ = $0000000A;

// Constants for enum PXC_AnnotLineCaptionPos
type
  PXC_AnnotLineCaptionPos = TOleEnum;
const
  LCP_Inline = $00000000;
  LCP_Top = $00000001;
  _LCP_Last_ = $00000002;

// Constants for enum PXC_AnnotVisibility
type
  PXC_AnnotVisibility = TOleEnum;
const
  AVS_Default = $00000000;
  AVS_Visible = $00000001;
  AVS_Hidden = $00000002;

// Constants for enum PXC_AppStyleFlags
type
  PXC_AppStyleFlags = TOleEnum;
const
  AppStyleFlag_Highlighted = $00000001;
  AppStyleFlag_NoRender = $00000002;
  AppStyleFlag_IndicateOverflow = $00000004;
  AppStyleFlag_Focused = $00000008;

// Constants for enum PXC_BackgroundFlags
type
  PXC_BackgroundFlags = TOleEnum;
const
  BackgroundFlag_Default = $00000000;
  BackgroundFlag_OffsetsInPercent = $00000001;
  BackgroundFlag_ScaleToPage = $00000002;
  BackgroundFlag_InvisibleOnView = $00000100;
  BackgroundFlag_InvisibleOnPrint = $00000200;
  BackgroundFlag_InvisibleOnExport = $00000400;

// Constants for enum PXC_BackgroundType
type
  PXC_BackgroundType = TOleEnum;
const
  Background_Color = $00000000;
  Background_Image = $00000001;
  Background_PDF = $00000002;

// Constants for enum PXC_BlackPointCompensation
type
  PXC_BlackPointCompensation = TOleEnum;
const
  BlackPointCompensation_Default = $00000000;
  BlackPointCompensation_On = $00000001;
  BlackPointCompensation_Off = $00000002;

// Constants for enum PXC_BlendMode
type
  PXC_BlendMode = TOleEnum;
const
  BlendMode_Normal = $00000000;
  BlendMode_Multiply = $00000001;
  BlendMode_Screen = $00000002;
  BlendMode_Overlay = $00000003;
  BlendMode_Darken = $00000004;
  BlendMode_Lighten = $00000005;
  BlendMode_ColorDodge = $00000006;
  BlendMode_ColorBurn = $00000007;
  BlendMode_HardLight = $00000008;
  BlendMode_SoftLight = $00000009;
  BlendMode_Difference = $0000000A;
  BlendMode_Exclusion = $0000000B;
  BlendMode_Hue = $0000000C;
  BlendMode_Saturation = $0000000D;
  BlendMode_Color = $0000000E;
  BlendMode_Luminosity = $0000000F;
  _BlendMode_Last_ = $00000010;

// Constants for enum PXC_BoxType
type
  PXC_BoxType = TOleEnum;
const
  PBox_PrintBox = $FFFFFFFE;
  PBox_ViewBox = $FFFFFFFF;
  PBox_MediaBox = $00000000;
  PBox_CropBox = $00000001;
  PBox_BleedBox = $00000002;
  PBox_TrimBox = $00000003;
  PBox_ArtBox = $00000004;
  PBox_BBox = $00000005;
  PBox_PageBox = $00000006;

// Constants for enum PXC_CI_PathPaintOp
type
  PXC_CI_PathPaintOp = TOleEnum;
const
  POP_None = $00000000;
  POP_Stroke = $00000001;
  POP_Fill = $00000002;
  POP_Close = $00000004;
  POP_EvenOdd = $00000008;

// Constants for enum PXC_CharFormatMask
type
  PXC_CharFormatMask = TOleEnum;
const
  CFM_Font = $00000001;
  CFM_FontSize = $00000002;
  CFM_BkColor = $00000004;
  CFM_FColor = $00000008;
  CFM_SColor = $00000010;
  CFM_Effects = $00000020;
  CFM_HScale = $00000040;
  CFM_VScale = $00000080;
  CFM_CharSpacing = $00000100;
  CFM_OffsetY = $00000200;
  CFM_StrokeWidth = $00000400;
  CFM_RenderingMode = $00000800;

// Constants for enum PXC_CollectionFieldType
type
  PXC_CollectionFieldType = TOleEnum;
const
  CFType_Unknown = $FFFFFFFF;
  CFType_String = $00000000;
  CFType_Date = $00000001;
  CFType_Number = $00000002;
  CFType_FileName = $00000003;
  CFType_Description = $00000004;
  CFType_ModificationDate = $00000005;
  CFType_CreationDate = $00000006;
  CFType_Size = $00000007;
  CFType_CompressedSize = $00000008;

// Constants for enum PXC_CollectionFieldFlag
type
  PXC_CollectionFieldFlag = TOleEnum;
const
  CFFlag_Visible = $00000001;
  CFFlag_Editable = $00000002;

// Constants for enum PXC_ColorManagementFlags
type
  PXC_ColorManagementFlags = TOleEnum;
const
  CMSF_BlackPointCompensation = $00000001;

// Constants for enum PXC_ColorTransformDataFormat
type
  PXC_ColorTransformDataFormat = TOleEnum;
const
  CF_8Bit = $00000000;
  CF_16Bit = $00000001;
  CF_Float = $00000002;

// Constants for enum PXC_ColorSpaceType
type
  PXC_ColorSpaceType = TOleEnum;
const
  CS_none = $FFFFFFFF;
  CS_DeviceRGB = $00000000;
  CS_DeviceCMYK = $00000001;
  CS_DeviceGray = $00000002;
  CS_CalRGB = $00000003;
  CS_CalGray = $00000004;
  CS_Lab = $00000005;
  CS_ICCBased = $00000006;
  CS_Separation = $00000007;
  CS_DeviceN = $00000008;
  CS_Indexed = $00000009;
  CS_PatternCS = $0000000A;
  CS_ImageMask = $0000000B;
  CS_SMaskY = $0000000C;
  _CS_Last_ = $0000000D;

// Constants for enum PXC_ContentAccessMode
type
  PXC_ContentAccessMode = TOleEnum;
const
  CAccessMode_Readonly = $00000000;
  CAccessMode_WeakClone = $00000001;
  CAccessMode_FullClone = $00000002;

// Constants for enum PXC_ContentPlaceMode
type
  PXC_ContentPlaceMode = TOleEnum;
const
  cpm_Left = $00000000;
  cpm_Middle = $00000001;
  cpm_Right = $00000002;
  cpm_Fit = $00000003;
  cpm_Top = $00000000;
  cpm_Bottom = $00000002;

// Constants for enum PXC_ConvertRCFlags
type
  PXC_ConvertRCFlags = TOleEnum;
const
  PXC_ConvertRC_AnnotText = $00000001;
  PXC_ConvertRC_FieldText = $00000002;

// Constants for enum PXC_CreateFontFlags
type
  PXC_CreateFontFlags = TOleEnum;
const
  CreateFont_Italic = $00000001;
  CreateFont_Serif = $00000002;
  CreateFont_Monospaced = $00000004;

// Constants for enum PXC_DestType
type
  PXC_DestType = TOleEnum;
const
  Dest_XYZ = $00000000;
  Dest_Fit = $00000001;
  Dest_FitH = $00000002;
  Dest_FitV = $00000003;
  Dest_FitR = $00000004;
  Dest_FitB = $00000005;
  Dest_FitBH = $00000006;
  Dest_FitBV = $00000007;
  _Dest_Last_ = $00000008;

// Constants for enum PXC_DocModifyType
type
  PXC_DocModifyType = TOleEnum;
const
  DocModify_Undo = $00000000;
  DocModify_Redo = $00000001;
  DocModify_Do = $00000002;

// Constants for enum PXC_DocumentInfoKey
type
  PXC_DocumentInfoKey = TOleEnum;
const
  DocInfo_Title = $00000000;
  DocInfo_Author = $00000001;
  DocInfo_Subject = $00000002;
  DocInfo_Keywords = $00000003;
  DocInfo_Creator = $00000004;
  DocInfo_Producer = $00000005;
  DocInfo_CreatorTool = $00000006;
  DocInfo_CreationDate = $00000007;
  DocInfo_ModDate = $00000008;
  _DocInfo_Last_ = $00000009;

// Constants for enum PXC_DocumentOpenFlags
type
  PXC_DocumentOpenFlags = TOleEnum;
const
  DocOpenFlag_Preview = $00000001;
  DocOpenFlag_IgnoreXFA = $00000002;
  DocOpenFlag_NeedOwnerPerms = $00000004;
  DocOpenFlag_NoAuthUI = $00000008;

// Constants for enum PXC_DocumentViewFlags
type
  PXC_DocumentViewFlags = TOleEnum;
const
  DocViewFlag_HideToolbar = $00000000;
  DocViewFlag_HideMenubar = $00000001;
  DocViewFlag_HideWindowUI = $00000002;
  DocViewFlag_FitWindow = $00000003;
  DocViewFlag_CenterWindow = $00000004;
  DocViewFlag_DisplayDocTitle = $00000005;

// Constants for enum PXC_DocumentWriteFlags
type
  PXC_DocumentWriteFlags = TOleEnum;
const
  DocWriteFlag_SwitchToDest = $00000001;
  DocWriteFlag_Incremental = $00000002;
  DocWriteFlag_NonIncremental = $00000004;
  DocWriteFlag_UseTempFile = $00000008;
  DocWriteFlag_DestDIPath = $00000010;
  DocWriteFlag_SkipDocInfoAndXMP = $00000020;
  DocWriteFlag_RemoveUR3Restrictions = $00000040;

// Constants for enum PXC_DrawFlags
type
  PXC_DrawFlags = TOleEnum;
const
  kDF_Erase = $00000001;
  kDF_IsPrint = $00000002;
  kDF_UseVectorRenderer = $00000004;

// Constants for enum PXC_DrawFormat
type
  PXC_DrawFormat = TOleEnum;
const
  kDrawFormat_Gray = $00000000;
  kDrawFormat_BGR = $00000001;
  kDrawFormat_CMYK = $00000002;
  kDrawFormat_GrayAlpha = $00000004;
  kDrawFormat_BGRA = $00000005;

// Constants for enum PXC_DrawTextFlags
type
  PXC_DrawTextFlags = TOleEnum;
const
  DTF_CalcSizeOnly = $00000001;
  DTF_SingleLine = $00000010;
  DTF_NoWordWrap = $00000020;
  DTF_AllowPartial = $00000040;
  DTF_Left = $00000000;
  DTF_Center = $00000100;
  DTF_Right = $00000200;
  DTF_Justify = $00000400;
  DTF_JustifyAll = $00000800;
  DTF_Top = $00000000;
  DTF_VCenter = $00001000;
  DTF_Bottom = $00002000;
  DTF_AlignMask = $00003F00;
  DTF_FirstPara = $00010000;
  DTF_LastPara = $00020000;
  DTF_RichText = $00100000;
  DTF_Hyphenate = $00200000;
  DTF_IgnoreSoftHyphens = $00400000;
  DTF_IgnoreSoftReturns = $00800000;
  DTF_AddClip = $01000000;
  DTF_NoBreakBeforeFirstPara = $02000000;

// Constants for enum PXC_DrawTextModeFlags
type
  PXC_DrawTextModeFlags = TOleEnum;
const
  DTMF_None = $00000000;
  DTMF_Fill = $00000001;
  DTMF_Stroke = $00000002;

// Constants for enum PXC_DrawToDeviceFlags
type
  PXC_DrawToDeviceFlags = TOleEnum;
const
  DDF_AsVector = $00000001;
  DDF_AsGrayscale = $00000002;
  DDF_ForceAsColor = $00000004;
  DDF_EmbeddedFontAsCurves = $00000010;
  DDF_AllFontsAsCuves = $00000030;

// Constants for enum PXC_ExportFormFlags
type
  PXC_ExportFormFlags = TOleEnum;
const
  FormExport_Default = $00000000;
  FormExport_IncludeEmpty = $00000001;
  FormExport_IncludePassword = $00000002;
  FormExport_CheckRequired = $00000004;
  FormExport_IgnoreNoExport = $00000008;

// Constants for enum PXC_FillRule
type
  PXC_FillRule = TOleEnum;
const
  FillRule_Winding = $00000000;
  FillRule_EvenOdd = $00000001;

// Constants for enum PXC_FontType
type
  PXC_FontType = TOleEnum;
const
  PFT_PDE = $00000000;
  PFT_PDF = $00000001;

// Constants for enum PXC_FormFieldFlag
type
  PXC_FormFieldFlag = TOleEnum;
const
  FFF_ReadOnly = $00000001;
  FFF_Required = $00000002;
  FFF_NoExport = $00000004;
  BFF_NoToggleToOff = $00004000;
  BFF_IsRadio = $00008000;
  BFF_IsPushbutton = $00010000;
  BFF_RadioInUnison = $02000000;
  TFF_Date = $00000800;
  TFF_MultiLine = $00001000;
  TFF_Password = $00002000;
  TFF_FileSelect = $00100000;
  TFF_DoNotSpellCheck = $00400000;
  TFF_DoNotScroll = $00800000;
  TFF_Comb = $01000000;
  TFF_RichText = $02000000;
  TFF_RTL = $10000000;
  CFF_IsCombo = $00020000;
  CFF_HasEdit = $00040000;
  CFF_Sort = $00080000;
  CFF_MultiSelect = $00200000;
  CFF_DoNotSpellCheck = $00400000;
  CFF_CommitOnSelChange = $04000000;

// Constants for enum PXC_FormFieldType
type
  PXC_FormFieldType = TOleEnum;
const
  FFT_Unknown = $00000000;
  FFT_PushButton = $00000001;
  FFT_RadioButton = $00000002;
  FFT_CheckBox = $00000003;
  FFT_Text = $00000004;
  FFT_ComboBox = $00000005;
  FFT_ListBox = $00000006;
  FFT_Signature = $00000007;
  FFT_Barcode = $00000008;
  FFT_TypeMax = $00000009;

// Constants for enum PXC_FormSigFlag
type
  PXC_FormSigFlag = TOleEnum;
const
  FormSig_HasSignature = $00000001;
  FormSig_AppendOnly = $00000002;

// Constants for enum PXC_FunctionType
type
  PXC_FunctionType = TOleEnum;
const
  FT_Identity = $FFFFFFFF;
  FT_Sampled = $00000000;
  FT_Exponential = $00000002;
  FT_Stitching = $00000003;
  FT_Postscript = $00000004;

// Constants for enum PXC_GCHTextType
type
  PXC_GCHTextType = TOleEnum;
const
  TType_PDFName = $FFFFFFFE;
  TType_UIName = $FFFFFFFF;
  TType_TipText = $00000001;
  TType_MiniText = $00000002;
  TType_LargeText = $00000003;

// Constants for enum PXC_GetNewRectCallbackFlags
type
  PXC_GetNewRectCallbackFlags = TOleEnum;
const
  GNRF_NewCC = $00000001;
  GNRF_AddClip = $00000002;
  GNRF_NoBreakBeforeFirstPara = $00000004;

// Constants for enum PXC_GetNewTextCallbackFlags
type
  PXC_GetNewTextCallbackFlags = TOleEnum;
const
  GNTF_LastParaIncomplete = $00000001;

// Constants for enum PXC_GetPageTextOptionsFlags
type
  PXC_GetPageTextOptionsFlags = TOleEnum;
const
  GPTOF_Simple = $00000001;
  GPTOF_LigaturesExpTblOnly = $00000002;
  GPTOF_TrustNBSpace = $00000004;
  GPTOF_PlainTextOnly = $00000008;
  GPTOF_SkipRedundantChars = $00000010;
  GPTOF_AllowCharReordering = $00000020;
  GPTOF_WordSepTblOnly = $00000040;
  GPTOF_IncludeHiddenText = $00000080;
  GPTOF_CollectSourceInfo = $00000100;
  GPTOF_DetectUnderlineStrikeout = $00000200;

// Constants for enum PXC_HeaderAndFooterFlags
type
  PXC_HeaderAndFooterFlags = TOleEnum;
const
  HAFFlag_Default = $00000000;
  HAFFlag_ShrinkDocument = $00000001;
  HAFFlag_KeepConstSizeAndPosition = $00000002;

// Constants for enum PXC_ImageDataType
type
  PXC_ImageDataType = TOleEnum;
const
  kIDT_Raw = $00000000;
  kIDT_1Indexed = $00000001;
  kIDT_8Indexed = $00000002;
  kIDT_8GrayScale = $00000003;
  kIDT_24RGB = $00000004;

// Constants for enum PXC_ImageFlags
type
  PXC_ImageFlags = TOleEnum;
const
  kIF_IsMask = $00000001;
  kIF_IsSoftMask = $00000002;
  kIF_IsIndexed = $00000004;
  kIF_HasDecode = $00000008;
  kIF_HasMatte = $00000010;
  kIF_HasColorKeyMask = $00000020;
  kIF_HasStencilMask = $00000040;
  kIF_HasSoftMask = $00000080;
  kIF_SMaskInData = $00000100;
  kIF_JPX = $00000200;
  kIF_YCCTransform = $00000400;
  kIF_IsInline = $00000800;

// Constants for enum PXC_ImageToXObjectFlags
type
  PXC_ImageToXObjectFlags = TOleEnum;
const
  ITX_IgnoreAlpha = $00000001;
  ITX_NoCompression = $00000002;
  ITX_DonotModifySrc = $00000004;
  ITX_NoOptimizeColors = $00000008;
  ITX_RestoreAlpha = $00000100;

// Constants for enum PXC_ImgMemType
type
  PXC_ImgMemType = TOleEnum;
const
  ImgMemoryType_1gray = $00000000;
  ImgMemoryType_8gray = $00000001;
  ImgMemoryType_24RGB = $00000002;
  ImgMemoryType_32RGBA = $00000003;

// Constants for enum PXC_InsertPagesFlags
type
  PXC_InsertPagesFlags = TOleEnum;
const
  IPF_Annots_Copy = $00000000;
  IPF_Annots_Flatten = $00000001;
  IPF_Annots_DoNotCopy = $00000002;
  IPF_Annots_Mask = $0000000F;
  IPF_Annots_Shift = $00000000;
  IPF_Widgets_Copy = $00000000;
  IPF_Widgets_Flatten = $00000010;
  IPF_Widgets_DoNotCopy = $00000020;
  IPF_Widgets_CopyWithRename = $00000040;
  IPF_Widgets_Mask = $000000F0;
  IPF_Widgets_Shift = $00000004;
  IPF_Bookmarks_DoNotCopy = $00000000;
  IPF_Bookmarks_CopyAll = $00000100;
  IPF_Bookmarks_CopyRelated = $00000200;
  IPF_Bookmarks_Mask = $00000300;
  IPF_Bookmarks_AddRoot = $00000400;
  IPF_Bookmarks_Shift = $00000008;
  IPF_OCG_DoNotCopy = $00001000;
  IPF_OCG_Flatten = $00002000;
  IPF_OCG_Copy = $00003000;
  IPF_OCG_CopyWithAddRoots = $00004000;
  IPF_OCG_Mask = $0000F000;
  IPF_OCG_Shift = $00000010;
  IPF_NamedDests_Copy = $00010000;

// Constants for enum PXC_LineCap
type
  PXC_LineCap = TOleEnum;
const
  LineCap_Butt = $00000000;
  LineCap_Round = $00000001;
  LineCap_Square = $00000002;

// Constants for enum PXC_LineJoin
type
  PXC_LineJoin = TOleEnum;
const
  LineJoin_Miter = $00000000;
  LineJoin_Round = $00000001;
  LineJoin_Bevel = $00000002;

// Constants for enum PXC_MeasureCoordinateSystem
type
  PXC_MeasureCoordinateSystem = TOleEnum;
const
  MCS_Unknown = $00000000;
  MCS_Rectilinear = $00000001;
  MCS_Geospatial = $00000002;

// Constants for enum PXC_MeasureFormatFlag
type
  PXC_MeasureFormatFlag = TOleEnum;
const
  MFF_UseOrigin = $00000001;
  MFF_UseFirst = $00000002;
  MFF_ClosedPerimeter = $00000004;

// Constants for enum PXC_MeasureFractionType
type
  PXC_MeasureFractionType = TOleEnum;
const
  MFT_AsDecimal = $00000000;
  MFT_AsFraction = $00000001;
  MFT_NoFraction_Nearest = $00000002;
  MFT_NoFraction_Floor = $00000003;

// Constants for enum PXC_MeasureType
type
  PXC_MeasureType = TOleEnum;
const
  MT_CoordX = $00000000;
  MT_CoordY = $00000001;
  MT_DeltaX = $00000002;
  MT_DeltaY = $00000003;
  MT_Distance = $00000004;
  MT_Perimeter = $00000005;
  MT_Area = $00000006;
  MT_Angle = $00000007;
  MT_Slope = $00000008;

// Constants for enum PXC_NoteIconType
type
  PXC_NoteIconType = TOleEnum;
const
  NI_Unknown = $00000000;
  NI_Checkmark = $00000001;
  NI_Circle = $00000002;
  NI_Comment = $00000003;
  NI_Cross = $00000004;
  NI_Help = $00000005;
  NI_Insert = $00000006;
  NI_Key = $00000007;
  NI_NewParagraph = $00000008;
  NI_TextNote = $00000009;
  NI_Paragraph = $0000000A;
  NI_RightArrow = $0000000B;
  NI_RightPointer = $0000000C;
  NI_Star = $0000000D;
  NI_UpArrow = $0000000E;
  NI_UpLeftArrow = $0000000F;
  _NI_Last_ = $00000010;

// Constants for enum PXC_OCConfigBaseState
type
  PXC_OCConfigBaseState = TOleEnum;
const
  OCConfig_OFF = $00000000;
  OCConfig_ON = $00000001;
  OCConfig_Unchanged = $00000002;

// Constants for enum PXC_OCConfigListMode
type
  PXC_OCConfigListMode = TOleEnum;
const
  OCConfig_ListAllPages = $00000000;
  OCConfig_ListVisiblePages = $00000001;

// Constants for enum PXC_OCContextInitPolicy
type
  PXC_OCContextInitPolicy = TOleEnum;
const
  OCInit_OFF = $00000000;
  OCInit_ON = $00000001;
  OCInit_Inherit = $00000002;
  OCInit_FromConfig = $00000003;

// Constants for enum PXC_OCGIntentFlags
type
  PXC_OCGIntentFlags = TOleEnum;
const
  OCIntent_View = $00000001;
  OCIntent_Design = $00000002;

// Constants for enum PXC_OCGUsageIntent
type
  PXC_OCGUsageIntent = TOleEnum;
const
  OCGUsage_Print = $00000000;
  OCGUsage_View = $00000001;
  OCGUsage_Export = $00000002;
  OCGUsage_User = $00000003;
  OCGUsage_Language = $00000004;
  OCGUsage_Zoom = $00000005;
  OCGUsage_PageElement = $00000006;
  OCGUsage_CreatorInfo = $00000007;

// Constants for enum PXC_OCMDVisibilityPolicy
type
  PXC_OCMDVisibilityPolicy = TOleEnum;
const
  OCMDVisibility_AllON = $00000000;
  OCMDVisibility_AnyON = $00000001;
  OCMDVisibility_AnyOFF = $00000002;
  OCMDVisibility_AllOFF = $00000003;

// Constants for enum PXC_OCOrderElementType
type
  PXC_OCOrderElementType = TOleEnum;
const
  OCO_ET_Array = $00000000;
  OCO_ET_OCG = $00000001;
  OCO_ET_Text = $00000002;

// Constants for enum PXC_OCSetStateMode
type
  PXC_OCSetStateMode = TOleEnum;
const
  OCSetState_OFF = $00000000;
  OCSetState_ON = $00000001;
  OCSetState_Toggle = $00000002;

// Constants for enum PXC_OCState
type
  PXC_OCState = TOleEnum;
const
  OCState_OFF = $00000000;
  OCState_ON = $00000001;
  OCState_Undefined = $00000002;

// Constants for enum PXC_OpModifyBookmMaskFlags
type
  PXC_OpModifyBookmMaskFlags = TOleEnum;
const
  OpModifyBookm_Title = $00000001;
  OpModifyBookm_Style = $00000002;
  OpModifyBookm_Color = $00000004;
  OpModifyBookm_Actions = $00000008;
  OpModifyBookm_Opened = $00000010;

// Constants for enum PXC_OverPrintMode
type
  PXC_OverPrintMode = TOleEnum;
const
  OPM_Normal = $00000000;
  OPM_NonZero = $00000001;

// Constants for enum PXC_PageTabOrder
type
  PXC_PageTabOrder = TOleEnum;
const
  PageTabOrder_Undefined = $00000000;
  PageTabOrder_RowOrder = $00000001;
  PageTabOrder_ColumnOrder = $00000002;
  PageTabOrder_StructureOrder = $00000003;
  PageTabOrder_AnnotsArrayOrder = $00000004;
  PageTabOrder_WidgetsOrder = $00000005;
  _PageTabOrder_Last_ = $00000006;

// Constants for enum PXC_PagesMode
type
  PXC_PagesMode = TOleEnum;
const
  PageMode_ViewerDefault = $FFFFFFFF;
  PageMode_UseNone = $00000000;
  PageMode_UseOutlines = $00000001;
  PageMode_UseThumbnails = $00000002;
  PageMode_UseOC = $00000003;
  PageMode_UseAttachments = $00000004;
  PageMode_FullScreen = $00000005;

// Constants for enum PXC_PagesLayout
type
  PXC_PagesLayout = TOleEnum;
const
  PageLayout_ViewerDefault = $FFFFFFFF;
  PageLayout_SinglePage = $00000000;
  PageLayout_OneColumn = $00000001;
  PageLayout_TwoColumns_Left = $00000002;
  PageLayout_TwoColumns_Right = $00000003;
  PageLayout_TwoPages_Left = $00000004;
  PageLayout_TwoPages_Right = $00000005;

// Constants for enum PXC_ParaFormatMask
type
  PXC_ParaFormatMask = TOleEnum;
const
  PFM_Align = $00000001;
  PFM_StartIndent = $00000002;
  PFM_LineSpacing = $00000004;
  PFM_MarginLeft = $00000008;
  PFM_MarginRight = $00000010;
  PFM_MarginTop = $00000020;
  PFM_MarginBottom = $00000040;
  PFM_DefTab = $00000080;
  PFM_TabStops = $00000100;
  PFM_Widows = $00000200;
  PFM_Orphans = $00000400;
  PFM_Radix = $00000800;

// Constants for enum PXC_PatternPaintType
type
  PXC_PatternPaintType = TOleEnum;
const
  Pattern_PaintColored = $00000001;
  Pattern_PaintUnColored = $00000002;

// Constants for enum PXC_PatternTilingType
type
  PXC_PatternTilingType = TOleEnum;
const
  PatternTiling_Constant = $00000001;
  PatternTiling_NoDistortion = $00000002;
  PatternTiling_Fastest = $00000003;

// Constants for enum PXC_PatternType
type
  PXC_PatternType = TOleEnum;
const
  Pattern_Tiling = $00000001;
  Pattern_Shading = $00000002;

// Constants for enum PXC_PDFStandard
type
  PXC_PDFStandard = TOleEnum;
const
  PDFS_None = $00000000;
  PDFS_PDFA = $00000100;
  PDFS_PDFA_Unknown = $00000100;
  PDFS_PDFA_1a = $00000101;
  PDFS_PDFA_1b = $00000102;
  PDFS_PDFA_2a = $00000103;
  PDFS_PDFA_2b = $00000104;
  PDFS_PDFA_2u = $00000105;
  PDFS_PDFA_3a = $00000106;
  PDFS_PDFA_3b = $00000107;
  PDFS_PDFA_3u = $00000108;

// Constants for enum PXC_PDFFormType
type
  PXC_PDFFormType = TOleEnum;
const
  PDFForm_None = $00000000;
  PDFForm_AcroForm = $00000001;
  PDFForm_StaticXFA = $00000002;
  PDFForm_DynamicXFA = $00000003;

// Constants for enum PXC_PermsFlags
type
  PXC_PermsFlags = TOleEnum;
const
  PermF_Open = $00000001;
  PermF_Secure = $00000002;
  PermF_Print = $00000004;
  PermF_Edit = $00000008;
  PermF_Copy = $00000010;
  PermF_EditNotes = $00000020;
  PermF_SaveAs = $00000040;
  PermF_Ext = $00000080;
  PrivPermF_FillandSign = $00000100;
  PrivPermF_Accessible = $00000200;
  PrivPermF_DocAssembly = $00000400;
  PrivPermF_HighPrint = $00000800;
  PermF_Owner = $00008000;
  PrivPermF_FormSubmit = $00010000;
  PrivPermF_FormSpawnTempl = $00020000;
  PermF_All = $FFFFFFFF;
  PermF_Settable = $0000003C;
  PermF_User = $FFFFFFFC;

// Constants for enum PXC_PermStatus
type
  PXC_PermStatus = TOleEnum;
const
  Perm_ReqDenied = $00000000;
  Perm_ReqGranted = $00000001;
  Perm_ReqUnknownObject = $00000002;
  Perm_ReqUnknownOperation = $00000003;
  Perm_ReqOperationNA = $00000004;
  Perm_ReqPending = $00000005;

// Constants for enum PXC_PrintColorOverrideMode
type
  PXC_PrintColorOverrideMode = TOleEnum;
const
  PrintColorOverride_Auto = $00000000;
  PrintColorOverride_Gray = $00000001;
  PrintColorOverride_Mono = $00000002;
  PrintColorOverride_Color = $00000003;
  _PrintColorOverride_Last_ = $00000004;

// Constants for enum PXC_PlaceContentFlags
type
  PXC_PlaceContentFlags = TOleEnum;
const
  PlaceContent_After = $00000000;
  PlaceContent_Cancel = $00000001;
  PlaceContent_Replace = $00000002;
  PlaceContent_Before = $00000004;
  PlaceContent_NoBalance = $00000008;
  PlaceContent_ResetState = $00000010;

// Constants for enum PXC_PrintContentFlags
type
  PXC_PrintContentFlags = TOleEnum;
const
  PrintContent_Page = $00000001;
  PrintContent_Markups = $00000002;
  PrintContent_Stamps = $00000004;
  PrintContent_Widgets = $00000008;
  PrintContent_FieldsDataOnly = $00000010;
  PrintContent_Notes = $00000020;
  PrintContent_NotePopups = $00000040;
  PrintContent_Media = $00000080;
  PrintContent_PrintMarks = $00000100;

// Constants for enum PXC_PrintDuplexMode
type
  PXC_PrintDuplexMode = TOleEnum;
const
  PrintDuplex_Auto = $00000000;
  PrintDuplex_None = $00000001;
  PrintDuplex_LongEdge = $00000002;
  PrintDuplex_ShortEdge = $00000003;
  PrintDuplex_Max = $00000004;

// Constants for enum PXC_PrintTextModes
type
  PXC_PrintTextModes = TOleEnum;
const
  PrintText_Auto = $00000000;
  PrintText_OutlineForEmbeddFont = $00000001;
  PrintText_OutlineAlways = $00000002;
  PrintText_BitmapForEmbeddFont = $00000003;
  PrintText_BitmapAlways = $00000004;
  _PrintText_Last_ = $00000005;

// Constants for enum PXC_ProfileFlags
type
  PXC_ProfileFlags = TOleEnum;
const
  ProfileFlag_BuiltIn = $80000000;
  ProfileFlag_Input = $00010000;
  ProfileFlag_Output = $00020000;
  ProfileFlag_DotGain = $00040000;

// Constants for enum PXC_ProfileWorkingSpace
type
  PXC_ProfileWorkingSpace = TOleEnum;
const
  PWS_Gray = $00000000;
  PWS_RGB = $00000001;
  PWS_CMYK = $00000002;
  _PWS_Last_ = $00000003;

// Constants for enum PXC_RemoveXMPFlags
type
  PXC_RemoveXMPFlags = TOleEnum;
const
  RemoveXMP_Document = $00000001;
  RemoveXMP_DocInfo = $00000002;
  RemoveXMP_Pages = $00000004;
  RemoveXMP_Images = $00000008;
  RemoveXMP_XForms = $00000020;
  RemoveXMP_Fonts = $00000040;
  RemoveXMP_ColorSpace = $00000080;
  RemoveXMP_All = $00000FFF;

// Constants for enum PXC_RenderColor
type
  PXC_RenderColor = TOleEnum;
const
  RC_BackgroudColor = $00000000;
  RC_TextColor = $00000001;
  RC_LineArtStrokeColor = $00000002;
  RC_LineArtFillColor = $00000003;
  RC_FieldsHighlightFillColor = $00000004;
  RC_FieldsHighlightBorderColor = $00000005;
  RC_PageColor1 = $00000006;
  RC_PageColor2 = $00000007;

// Constants for enum PXC_RenderFlags
type
  PXC_RenderFlags = TOleEnum;
const
  RF_DisplayLargeImages = $00000001;
  RF_SmoothLineArts = $00000002;
  RF_SmoothImages = $00000004;
  RF_OverrideTextColor = $00000008;
  RF_OverrideLineArtColor = $00000010;
  RF_OverrideOnlyBlack = $00000020;
  RF_OverrideBackgroundColor = $00000040;
  RF_OverrideLineWidth = $00000080;
  RF_NoFillBackground = $00000100;
  RF_EnchanceThinLines = $00000200;

// Constants for enum PXC_RenderingIntent
type
  PXC_RenderingIntent = TOleEnum;
const
  RI_Perceptual = $00000000;
  RI_RelativeColorimetric = $00000001;
  RI_Saturation = $00000002;
  RI_AbsoluteColorimetric = $00000003;
  _RI_Last_ = $00000004;

// Constants for enum PXC_RenderType
type
  PXC_RenderType = TOleEnum;
const
  RenderType_ModeView = $00000000;
  RenderType_ModePrint = $00000001;
  RenderType_ModeExport = $00000002;
  RenderType_ModeInteractiveView = $00000003;
  RenderType_ModePrintPreview = $00000004;
  _RenderType_Last_ = $00000005;

// Constants for enum PXC_ReplyType
type
  PXC_ReplyType = TOleEnum;
const
  RT_None = $00000000;
  RT_Reply = $00000001;
  RT_State = $00000002;
  RT_Group = $00000003;
  _RT_Last_ = $00000004;

// Constants for enum PXC_RequestObj
type
  PXC_RequestObj = TOleEnum;
const
  Perm_ObjDoc = $00000001;
  Perm_ObjPage = $00000002;
  Perm_ObjLink = $00000003;
  Perm_ObjBookmark = $00000004;
  Perm_ObjThumbnail = $00000005;
  Perm_ObjAnnot = $00000006;
  Perm_ObjForm = $00000007;
  Perm_ObjSignature = $00000008;
  Perm_ObjEF = $00000009;
  Perm_ObjReaderAnnot = $0000000A;
  _Perm_ObjLast_ = $0000000B;

// Constants for enum PXC_RequestOper
type
  PXC_RequestOper = TOleEnum;
const
  Perm_OperAll = $00000001;
  Perm_OperCreate = $00000002;
  Perm_OperDelete = $00000003;
  Perm_OperModify = $00000004;
  Perm_OperCopy = $00000005;
  Perm_OperAccessible = $00000006;
  Perm_OperSelect = $00000007;
  Perm_OperOpen = $00000008;
  Perm_OperSecure = $00000009;
  Perm_OperPrintHigh = $0000000A;
  Perm_OperPrintLow = $0000000B;
  Perm_OperFillIn = $0000000C;
  Perm_OperRotate = $0000000D;
  Perm_OperCrop = $0000000E;
  Perm_OperSummarize = $0000000F;
  Perm_OperInsert = $00000010;
  Perm_OperReplace = $00000011;
  Perm_OperReorder = $00000012;
  Perm_OperFullSave = $00000013;
  Perm_OperImport = $00000014;
  Perm_OperExport = $00000015;
  Perm_OperAny = $00000016;
  Perm_OperUnknownOpr = $00000017;
  Perm_OperSubmitStandalone = $00000018;
  Perm_OperSpawnTemplate = $00000019;
  Perm_OperOnline = $0000001A;
  Perm_OperSummaryView = $0000001B;
  Perm_OperBarcodePlaintext = $0000001C;
  Perm_OperUIsave = $0000001D;
  Perm_OperUIprint = $0000001E;
  Perm_OperUIemail = $0000001F;
  Perm_OperSnapshot = $00000020;
  Perm_OperSearch = $00000021;
  _Perm_OperLast_ = $00000022;

// Constants for enum PXC_SecurityHandlerFeatures
type
  PXC_SecurityHandlerFeatures = TOleEnum;
const
  SecHandlerFeature_IsDRM = $00000001;
  SecHandlerFeature_CanCreate = $00000002;
  SecHandlerFeature_CanChangeSettings = $00000004;
  SecHandlerFeature_CanShowDetails = $00000008;
  SecHandlerFeature_Policy = $00000010;

// Constants for enum PXC_SecurityPermissions
type
  PXC_SecurityPermissions = TOleEnum;
const
  Permit_Printing = $00000004;
  Permit_Modification = $00000008;
  Permit_Copying_And_TextGraphicsExtractions = $00000010;
  Permit_Add_And_Modify_Annotations = $00000020;
  Permit_FormFilling = $00000100;
  Permit_TextGraphicsExtractions = $00000200;
  Permit_Assemble = $00000400;
  Permit_HighQualityPrinting = $00000800;
  Permit_Nothing = $FFFFF0C0;
  Permit_All = $FFFFFFFC;

// Constants for enum PXC_ShadingType
type
  PXC_ShadingType = TOleEnum;
const
  Shading_Unknown = $00000000;
  Shading_Function = $00000001;
  Shading_Axial = $00000002;
  Shading_Radial = $00000003;
  Shading_FreeForm = $00000004;
  Shading_LatticeForm = $00000005;
  Shading_Coons = $00000006;
  Shading_Tensor = $00000007;

// Constants for enum PXC_ShowTextLineFlags
type
  PXC_ShowTextLineFlags = TOleEnum;
const
  STLF_Default = $00000000;
  STLF_Top = $00000000;
  STLF_Middle = $00000001;
  STLF_Baseline = $00000002;
  STLF_Bottom = $00000003;
  STLF_Position_Mask = $00000003;
  STLF_AllowSubstitution = $00000100;

// Constants for enum PXC_SignDocumentFlags
type
  PXC_SignDocumentFlags = TOleEnum;
const
  Sign_GR_NoGraphics = $00000000;
  Sign_GR_Image = $00000001;
  Sign_GR_Name = $00000002;
  Sign_TextDir_Auto = $00000000;
  Sign_TextDir_LTR = $00000010;
  Sign_TextDir_RTL = $00000020;
  Sign_TX_Name = $00000100;
  Sign_TX_Date = $00000200;
  Sign_TX_Location = $00000400;
  Sign_TX_Reason = $00000800;
  Sign_TX_DName = $00001000;
  Sign_TX_Labels = $00002000;
  Sign_TX_Subject = $00004000;
  Sign_TX_Logo = $00008000;

// Constants for enum PXC_SMaskType
type
  PXC_SMaskType = TOleEnum;
const
  SMaskType_None = $00000000;
  SMaskType_Alpha = $00000001;
  SMaskType_Luminosity = $00000002;

// Constants for enum PXC_SortType
type
  PXC_SortType = TOleEnum;
const
  Sort_None = $00000000;
  Sort_Desc = $00000001;
  Sort_Asc = $00000002;
  Sort_Disabled = $00000003;
  _Sort_Last_ = $00000004;

// Constants for enum PXC_StdEncryptionMehtod
type
  PXC_StdEncryptionMehtod = TOleEnum;
const
  SEM_NoEncryption = $FFFFFFFF;
  SEM_AV3 = $00000000;
  SEM_AV5 = $00000001;
  SEM_AV6 = $00000002;
  SEM_AV7 = $00000003;
  SEM_AV9 = $00000004;
  SEM_AV10 = $00000005;

// Constants for enum PXC_StdPatternType
type
  PXC_StdPatternType = TOleEnum;
const
  StdPattern_CrossHatch = $00000000;
  StdPattern_CrossDiagonal = $00000001;
  StdPattern_DiagonalLeft = $00000002;
  StdPattern_DiagonalRight = $00000003;
  StdPattern_Horizontal = $00000004;
  StdPattern_Vertical = $00000005;
  StdPattern_Squiggly = $00000006;
  _StdPattern_Last_ = $00000007;

// Constants for enum PXC_SubmitFormActionFlags
type
  PXC_SubmitFormActionFlags = TOleEnum;
const
  FSAF_Exclude = $00000001;
  FSAF_IncludeNoValues = $00000002;
  FSAF_ExportAsHTML = $00000004;
  FSAF_Method_GET = $00000008;
  FSAF_Submit_Coords = $00000010;
  FSAF_XFDF = $00000020;
  FSAF_IncludeAppendSaves = $00000040;
  FSAF_IncludeAnnots = $00000080;
  FSAF_SubmitPDF = $00000100;
  FSAF_CanonicalDates = $00000200;
  FSAF_ExcludeNonUserAnnots = $00000400;
  FSAF_ExcludeFKey = $00000800;
  FSAF_EmbeddForm = $00002000;
  FSAF_Mask = $0000FFFF;
  FSAFE_IncludeNMKey = $10000000;

// Constants for enum PXC_ScaleAnnotFlags
type
  PXC_ScaleAnnotFlags = TOleEnum;
const
  SAF_ScaleFontSize = $00000001;

// Constants for enum PXC_TabStopAlign
type
  PXC_TabStopAlign = TOleEnum;
const
  TSA_Left = $00000000;
  TSA_Center = $00000001;
  TSA_Right = $00000002;
  TSA_After = $00000003;
  TSA_Before = $00000004;
  TSA_Decimal = $00000005;

// Constants for enum PXC_TabStopLeaderType
type
  PXC_TabStopLeaderType = TOleEnum;
const
  TSLT_Space = $00000000;
  TSLT_Dots = $00000001;
  TSLT_DashDots = $00000002;
  TSLT_Dash = $00000003;
  TSLT_Solid = $00000004;
  TSLT_Content = $00000005;

// Constants for enum PXC_TextCharFlags
type
  PXC_TextCharFlags = TOleEnum;
const
  TCF_WordSeparator = $00000001;
  TCF_Hyphen = $00000002;
  TCF_WhiteSpace = $00000004;
  TCF_SyntheticSpace = $00000008;
  TCF_WordBegin = $00000010;
  TCF_LineBegin = $00000020;
  TCF_ParaBegin = $00000040;
  TCF_SearchWordSeparator = $00000080;
  TCF_Hidden = $00000400;
  TCF_RTLChar = $00000800;
  TCF_FromLigature = $00001000;
  TCF_LigatureBegin = $00002000;
  TCF_Expanded = $00004000;
  TCF_ExpandedBegin = $00008000;

// Constants for enum PXC_TextCharStyleFlags
type
  PXC_TextCharStyleFlags = TOleEnum;
const
  TCSF_Normal = $00000001;
  TCSF_Shifted = $00000002;
  TCSF_SubScript = $00000004;
  TCSF_SuperScript = $00000008;
  TCSF_Underline = $00000010;
  TCSF_DblUnderline = $00000030;
  TCSF_Strikeout = $00000100;
  TCSF_DblStrikeout = $00000300;

// Constants for enum PXC_TextEffectFlags
type
  PXC_TextEffectFlags = TOleEnum;
const
  TEF_Underline = $00000001;
  TEF_StrikeOut = $00000002;
  TEF_StrikeOutWord = $00000012;
  TEF_StrikeOutDouble = $00000022;
  TEF_StrikeOutDoubleWord = $00000032;
  TEF_UnderlineWord = $00000101;
  TEF_UnderlineDouble = $00000201;
  TEF_UnderlineDoubleWord = $00000301;
  TEF_SuperScript = $00001000;
  TEF_SubScript = $00002000;
  TEF_UseKerning = $01000000;

// Constants for enum PXC_TextJustification
type
  PXC_TextJustification = TOleEnum;
const
  TJ_Default = $FFFFFFFF;
  TJ_Left = $00000000;
  TJ_Center = $00000001;
  TJ_Right = $00000002;
  TJ_Justify = $00000003;
  TJ_JustifyAll = $00000004;
  TJ_Radix = $00000005;
  TJ_Top = $00000000;
  TJ_Bottom = $00000002;
  TJ_Middle = $00000001;

// Constants for enum PXC_TextLineFlags
type
  PXC_TextLineFlags = TOleEnum;
const
  TLF_FreeRotate = $00000001;
  TLF_HasSkew = $00000002;
  TLF_MainLine = $00000004;
  TLF_HasExpandedLigatures = $00000008;
  TLF_HasSyntheticSpaces = $00000010;

// Constants for enum PXC_TextRenderingMode
type
  PXC_TextRenderingMode = TOleEnum;
const
  TRM_Fill = $00000000;
  TRM_Stroke = $00000001;
  TRM_FillStroke = $00000002;
  TRM_None = $00000003;
  TRM_Clip_Flag = $00000004;
  TRM_Clip_Fill = $00000004;
  TRM_Clip_Stroke = $00000005;
  TRM_Clip_FillStroke = $00000006;
  TRM_Clip = $00000007;

// Constants for enum PXC_TextSmoothMode
type
  PXC_TextSmoothMode = TOleEnum;
const
  TSM_None = $00000000;
  TSM_Antialias = $00000001;
  TSM_ClearType = $00000002;

// Constants for enum PXC_TextSpacingMode
type
  PXC_TextSpacingMode = TOleEnum;
const
  TSPM_Original = $00000000;
  TSPM_Single = $00000001;
  TSPM_Proportional = $00000002;
  _TSPM_Last_ = $00000003;

// Constants for enum PXC_TriggerType
type
  PXC_TriggerType = TOleEnum;
const
  Trigger_Unknown = $00000000;
  Trigger_Enter = $00000001;
  Trigger_Exit = $00000002;
  Trigger_Down = $00000003;
  Trigger_Up = $00000004;
  Trigger_GotInputFocus = $00000005;
  Trigger_LossInputFocus = $00000006;
  Trigger_AnnotationsPageOpened = $00000007;
  Trigger_AnnotationsPageClosed = $00000008;
  Trigger_AnnotationsPageStayVisible = $00000009;
  Trigger_AnnotationsPageStayInvisible = $0000000A;
  Trigger_PageOpened = $0000000B;
  Trigger_PageClosed = $0000000C;
  Trigger_Keystroke = $0000000D;
  Trigger_Format = $0000000E;
  Trigger_Validate = $0000000F;
  Trigger_Calculate = $00000010;
  Trigger_BeforeClosing = $00000011;
  Trigger_BeforeSaving = $00000012;
  Trigger_AfterSaving = $00000013;
  Trigger_BeforePrinting = $00000014;
  Trigger_AfterPrinting = $00000015;
  _Trigger_Last_ = $00000016;

// Constants for enum PXC_SoundDataEncodingType
type
  PXC_SoundDataEncodingType = TOleEnum;
const
  SoundEncoding_Unknown = $FFFFFFFF;
  SoundEncoding_Raw = $00000000;
  SoundEncoding_Signed = $00000001;
  SoundEncoding_muLaw = $00000002;
  SoundEncoding_ALaw = $00000003;
  _SoundEncoding_Last_ = $00000004;

// Constants for enum PXC_WatermarkFlags
type
  PXC_WatermarkFlags = TOleEnum;
const
  WatermarkFlag_Default = $00000000;
  WatermarkFlag_OffsetsInPercent = $00000001;
  WatermarkFlag_PlaceOnBackground = $00000002;
  WatermarkFlag_ScaleToPage = $00000004;
  WatermarkFlag_ImageKeepAspect = $00000008;
  WatermarkFlag_InvisibleOnView = $00000100;
  WatermarkFlag_InvisibleOnPrint = $00000200;
  WatermarkFlag_InvisibleOnExport = $00000400;

// Constants for enum PXC_WatermarkType
type
  PXC_WatermarkType = TOleEnum;
const
  Watermark_Text = $00000000;
  Watermark_Image = $00000001;
  Watermark_PDF = $00000002;

// Constants for enum PXC_WidgetButtonTextPosition
type
  PXC_WidgetButtonTextPosition = TOleEnum;
const
  WidgetText_TextOnly = $00000000;
  WidgetText_IconOnly = $00000001;
  WidgetText_IconTextV = $00000002;
  WidgetText_TextIconV = $00000003;
  WidgetText_IconTextH = $00000004;
  WidgetText_TextIconH = $00000005;
  WidgetText_Overlay = $00000006;

// Constants for enum PXC_WidgetIconScaleCondition
type
  PXC_WidgetIconScaleCondition = TOleEnum;
const
  WidgetScaleIcon_Always = $00000000;
  WidgetScaleIcon_Never = $00000001;
  WidgetScaleIcon_IconTooBig = $00000002;
  WidgetScaleIcon_IconTooSmall = $00000003;

// Constants for enum PXC_WidgetIconScaleType
type
  PXC_WidgetIconScaleType = TOleEnum;
const
  WidgetIcon_ScaleProportional = $00000000;
  WidgetIcon_ScaleAnamorphic = $00000001;

// Constants for enum PXC_XGroupType
type
  PXC_XGroupType = TOleEnum;
const
  XGT_Unknown = $FFFFFFFF;
  XGT_Transparency = $00000000;
  XGT__Max_ = $00000001;

// Constants for enum PXC_CIType
type
  PXC_CIType = TOleEnum;
const
  CIT_Unknown = $FFFFFFFF;
  CIT_Path = $00000000;
  CIT_Text = $00000001;
  CIT_Image = $00000002;
  CIT_InlineImage = $00000003;
  CIT_XForm = $00000004;
  CIT_Shading = $00000005;
  CIT_Container = $00000006;
  CIT_Place = $00000007;
  CIT_BeginContainer = $00000008;
  CIT_EndContainer = $00000009;
  CIT_Clip = $0000000A;
  CIT__Last_ = $0000000B;

// Constants for enum PXC_ColorSampleType
type
  PXC_ColorSampleType = TOleEnum;
const
  CST_Gray = $00000000;
  CST_RGB = $00000001;
  CST_CMYK = $00000002;
  _CST_Last_ = $00000003;

// Constants for enum PXC_CI_PathCommands
type
  PXC_CI_PathCommands = TOleEnum;
const
  PCmd_ClosePath = $00000000;
  PCmd_MoveTo = $00000001;
  PCmd_LineTo = $00000002;
  PCmd_BezierTo = $00000003;
  PCmd_V = $00000004;
  PCmd_Y = $00000005;
  PCmd_Rect = $00000006;
  PCmd_Last = $00000007;

// Constants for enum PXC_BookmarkStyle
type
  PXC_BookmarkStyle = TOleEnum;
const
  BookmarkFont_Normal = $00000000;
  BookmarkFont_Italic = $00000001;
  BookmarkFont_Bold = $00000002;
  BookmarkFont_BoldItalic = $00000003;

// Constants for enum PXC_DocumentMetaOper
type
  PXC_DocumentMetaOper = TOleEnum;
const
  DMO_AddDocAttach = $00000000;
  DMO__Last_ = $00000001;

// Constants for enum PXC_FontPolicy
type
  PXC_FontPolicy = TOleEnum;
const
  FontPolicy_Auto = $00000000;
  FontPolicy_Never = $00000001;
  FontPolicy_RequiredOnly = $00000002;
  FontPolicy_Always = $00000003;

// Constants for enum UIX_BrushType
type
  UIX_BrushType = TOleEnum;
const
  UIX_BrushType_Solid = $00000000;
  UIX_BrushType_Gradient = $00000001;
  UIX_BrushType_Chessboard = $00000002;
  UIX_BrushType_Hatched = $00000003;

// Constants for enum UIX_GradientType
type
  UIX_GradientType = TOleEnum;
const
  UIX_GradientType_Linear = $00000000;
  UIX_GradientType_Radial = $00000001;

// Constants for enum UIX_HatchType
type
  UIX_HatchType = TOleEnum;
const
  UIX_HatchType_BDiagonal = $00000000;
  UIX_HatchType_Cross = $00000001;
  UIX_HatchType_Diagcross = $00000002;
  UIX_HatchType_FDiagonal = $00000003;
  UIX_HatchType_Horizontal = $00000004;
  UIX_HatchType_Vertical = $00000005;

// Constants for enum UIX_BlendType
type
  UIX_BlendType = TOleEnum;
const
  UIX_BlendType_Normal = $00000000;
  UIX_BlendType_DestOver = $00000001;
  UIX_BlendType_Multiply = $00000002;
  UIX_BlendType_Screen = $00000003;
  UIX_BlendType_Overlay = $00000004;
  UIX_BlendType_Darken = $00000005;
  UIX_BlendType_Lighten = $00000006;
  UIX_BlendType_ColorDodge = $00000007;
  UIX_BlendType_ColorBurn = $00000008;
  UIX_BlendType_HardLigth = $00000009;
  UIX_BlendType_SoftLigth = $0000000A;
  UIX_BlendType_Difference = $0000000B;
  UIX_BlendType_Exclusion = $0000000C;
  UIX_BlendType_Contrast = $0000000D;
  UIX_BlendType_Invert = $0000000E;
  UIX_BlendType_XOR = $0000000F;
  UIX_BlendType_Plus = $00000010;
  UIX_BlendType_Minus = $00000011;

// Constants for enum UIX_LineJoinType
type
  UIX_LineJoinType = TOleEnum;
const
  UIX_LineJoin_Miter = $00000000;
  UIX_LineJoin_Round = $00000001;
  UIX_LineJoin_Bevel = $00000002;

// Constants for enum UIX_LineEndType
type
  UIX_LineEndType = TOleEnum;
const
  UIX_LineEnd_Butt = $00000000;
  UIX_LineEnd_Round = $00000001;
  UIX_LineEnd_Square = $00000002;

// Constants for enum UIX_DrawOvalMode
type
  UIX_DrawOvalMode = TOleEnum;
const
  UIX_DrawOval_Ellipse = $00000000;
  UIX_DrawOval_Chord = $00000001;
  UIX_DrawOval_Arc = $00000002;
  UIX_DrawOval_Segment = $00000003;
  UIX_DrawOval_Pie = $00000004;

// Constants for enum UIX_StdColor
type
  UIX_StdColor = TOleEnum;
const
  UIX_StdColor_Base = $00000000;
  UIX_StdColor_BaseLight = $00000001;
  UIX_StdColor_BaseDark = $00000002;
  UIX_StdColor_Window = $00000003;
  UIX_StdColor_CtlBg = $00000004;
  UIX_StdColor_Text = $00000005;
  UIX_StdColor_GrayText = $00000006;
  UIX_StdColor_DlgGrayText = $00000007;
  UIX_StdColor_DlgSemiGrayText = $00000008;
  UIX_StdColor_CtlGrayText = $00000009;
  UIX_StdColor_CtlSel = $0000000A;
  UIX_StdColor_CtlSelInactive = $0000000B;
  UIX_StdColor_CtlHot = $0000000C;
  UIX_StdColor_Tip = $0000000D;
  UIX_StdColor_TipLight = $0000000E;
  UIX_StdColor_CueText = $0000000F;
  UIX_StdColor_Header = $00000010;
  UIX_StdColor_HeaderDisabled = $00000011;
  UIX_StdColor_MainBg = $00000012;
  UIX_StdColor_DlgBg = $00000013;
  UIX_StdColor_PgBg = $00000014;
  _UIX_StdColor_End_ = $00000015;

// Constants for enum UIX_StdFont
type
  UIX_StdFont = TOleEnum;
const
  UIX_StdFont_Default = $00000000;
  UIX_StdFont_Dialog = $00000001;
  UIX_StdFont_Command = $00000002;
  UIX_StdFont_Normal = $00000003;
  UIX_StdFont_Bold = $00000004;
  UIX_StdFont_Italic = $00000005;
  UIX_StdFont_BoldItalic = $00000006;
  UIX_StdFont_NormalUnderline = $00000007;
  UIX_StdFont_DlgNormal = $00000008;
  UIX_StdFont_DlgBold = $00000009;
  UIX_StdFont_DlgItalic = $0000000A;
  UIX_StdFont_DlgBoldItalic = $0000000B;
  UIX_StdFont_CmdNormal = $0000000C;
  UIX_StdFont_CmdBold = $0000000D;
  UIX_StdFont_Arial12 = $0000000E;
  _UIX_StdFont_End_ = $0000000F;

// Constants for enum UIX_CmdItemSize
type
  UIX_CmdItemSize = TOleEnum;
const
  UIX_CmdItemSize_Small = $00000000;
  UIX_CmdItemSize_Medium = $00000001;
  UIX_CmdItemSize_Large = $00000002;
  _UIX_CmdItemSize_Max_ = $00000003;

// Constants for enum UIX_QABarPos
type
  UIX_QABarPos = TOleEnum;
const
  UIX_QABarPos_Top = $00000000;
  UIX_QABarPos_Bottom = $00000001;

// Constants for enum UIX_CmdBarSize
type
  UIX_CmdBarSize = TOleEnum;
const
  UIX_CmdBarSize_Normal = $00000000;
  UIX_CmdBarSize_Large = $00000001;
  _UIX_CmdBarSize_Max_ = $00000002;

// Constants for enum UIX_TextAlign
type
  UIX_TextAlign = TOleEnum;
const
  UIX_TextAlign_Unknown = $00000000;
  UIX_TextAlign_Right = $00000001;
  UIX_TextAlign_Left = $00000002;
  UIX_TextAlign_Center = $00000003;
  UIX_TextAlign_Justify = $00000004;
  UIX_TextAlign_JustifyAll = $00000005;
  UIX_TextAlign_Radix = $00000006;

// Constants for enum UIX_TextDir
type
  UIX_TextDir = TOleEnum;
const
  UIX_TextDir_LTR = $00000000;
  UIX_TextDir_RTL = $00000001;
  UIX_TextDir_Mixed = $00000002;

// Constants for enum UIX_TabStopAlign
type
  UIX_TabStopAlign = TOleEnum;
const
  UIX_TSA_Left = $00000000;
  UIX_TSA_Center = $00000001;
  UIX_TSA_Right = $00000002;
  UIX_TSA_After = $00000003;
  UIX_TSA_Before = $00000004;
  UIX_TSA_Decimal = $00000005;

// Constants for enum UIX_TabStopLeaderType
type
  UIX_TabStopLeaderType = TOleEnum;
const
  UIX_TSLT_Space = $00000000;
  UIX_TSLT_Dots = $00000001;
  UIX_TSLT_DashDots = $00000002;
  UIX_TSLT_Dash = $00000003;
  UIX_TSLT_Solid = $00000004;
  UIX_TSLT_Content = $00000005;

// Constants for enum UIX_TextVAlign
type
  UIX_TextVAlign = TOleEnum;
const
  UIX_TextVAlign_Unk = $00000000;
  UIX_TextVAlign_Top = $00000001;
  UIX_TextVAlign_Middle = $00000002;
  UIX_TextVAlign_Bottom = $00000003;

// Constants for enum UIX_RichTextType
type
  UIX_RichTextType = TOleEnum;
const
  UIX_RichText_Native = $00000000;
  UIX_RichText_RTF = $00000001;
  UIX_RichText_XFA = $00000002;

// Constants for enum UIX_CmdPaneSides
type
  UIX_CmdPaneSides = TOleEnum;
const
  UIX_CmdPaneSide_Top = $00000000;
  UIX_CmdPaneSide_Bottom = $00000001;
  UIX_CmdPaneSide_Left = $00000002;
  UIX_CmdPaneSide_Right = $00000003;
  _UIX_CmdPaneSide_Last_ = $00000004;

// Constants for enum UIX_StdCursor
type
  UIX_StdCursor = TOleEnum;
const
  UIX_StdCursor_Arrow = $00000001;
  UIX_StdCursor_IBeam = $00000002;
  UIX_StdCursor_Wait = $00000003;
  UIX_StdCursor_Cross = $00000004;
  UIX_StdCursor_UpArrow = $00000005;
  UIX_StdCursor_SizeNWSE = $00000006;
  UIX_StdCursor_SizeNESW = $00000007;
  UIX_StdCursor_SizeWE = $00000008;
  UIX_StdCursor_SizeNS = $00000009;
  UIX_StdCursor_SizeAll = $0000000A;
  UIX_StdCursor_No = $0000000B;
  UIX_StdCursor_Hand = $0000000C;
  UIX_StdCursor_AppStarting = $0000000D;
  UIX_StdCursor_Help = $0000000E;
  _UIX_StdCursor_Max_ = $0000000F;

// Constants for enum UIX_PenMonitorType
type
  UIX_PenMonitorType = TOleEnum;
const
  UIX_PenMonitor_None = $00000000;
  UIX_PenMonitor_WinTab = $00000001;
  UIX_PenMonitor_WinPointer = $00000002;

// Constants for enum UIX_EventCodes
type
  UIX_EventCodes = TOleEnum;
const
  e_First = $00001938;
  e_BeforeDestroy = $00001939;
  e_Last = $0000193A;
  e_MouseEnter = $0000193B;
  e_MouseExit = $0000193C;
  e_MouseCaptureGained = $0000193D;
  e_MouseCaptureLost = $0000193E;
  e_InputFocusGained = $0000193F;
  e_InputFocusLost = $00001940;
  e_PositionChanged = $00001941;
  e_StyleChanging = $00001942;
  e_StyleChanged = $00001943;
  e_Render = $00001944;
  e_PostRender = $00001945;
  e_HitTest = $00001946;
  e_ThemeChanged = $00001947;
  e_Visible = $00001948;
  e_Enabled = $00001949;
  e_VisibleCondition = $0000194A;
  e_EnableCondition = $0000194B;
  e_Command = $0000194C;
  e_Scroll = $0000194D;
  e_ScrollChanged = $0000194E;
  e_GetScrollTarget = $0000194F;
  e_Animation = $00001950;
  e_Timer = $00001951;
  e_Notify = $00001952;
  e_GetPopupSize = $00001953;
  e_GetSize = $00001954;
  e_ChildRemoved = $00001955;
  e_AllChildrenRemoved = $00001956;
  e_SetFont = $00001957;
  e_GetFont = $00001958;
  e_FontChanged = $00001959;
  e_InitDialog = $0000195A;
  e_SpellCheckerChanged = $0000195B;
  e_GetPaneMargins = $0000195C;
  e_GetPaneThumbnail = $0000195D;
  e_GetPaneSaveData = $0000195E;
  e_GetObj = $0000195F;
  e_GetTouchService = $00001960;
  e_Gesture = $00001961;
  e_TouchBegin = $00001962;
  e_TouchEnd = $00001963;
  e_LanguageChanged = $00001964;
  e_BeginModal = $00001965;
  e_ShowModal = $00001966;
  e_PreEndModal = $00001967;
  e_EndModal = $00001968;
  e_SetText = $00001969;
  e_GetText = $0000196A;
  e_ContextHelp = $0000196B;
  e_BeforeShowNestedModal = $0000196C;
  e_ShowKeyboardCues = $0000196D;
  e_Custom = $0000196E;
  e_QueryDropTarget = $0000196F;
  e_Zoom = $00001970;
  e_Rotate = $00001971;
  e_ShowFloats = $00001972;
  e_SelMenuItem = $00001973;
  e_PrintClient = $00001974;
  e_SetReadOnly = $00001975;
  e_Drop = $00001976;
  e_PostThemeChanged = $00001977;
  e_PreThemeChanged = $00001978;
  e_LazyUpdateWindow = $00001979;
  e_SafeChar = $0000197A;
  e_GetModalPosition = $0000197B;
  e_QueryUiaProvider = $0000197C;
  e_QueryUiaPatternProvider = $0000197D;
  e_QueryUiaPropertyValue = $0000197E;
  e_UiaNavigate = $0000197F;
  e_QueryUiaProviderFromPt = $00001980;
  e_GetCmdCtlSize = $00001981;
  e_EnsureContentLoaded = $00001982;
  e_TouchModeChanged = $00001983;
  e_GetOptimalFocus = $00001984;
  e_ShowOnScreenKeyboard = $00001985;
  e_GetNotifyTarget = $00001986;
  e_UpdateCmdPanes = $00001987;
  e_PenModeChanged = $00001988;
  e_PrepareForFadeShow = $00001989;
  _UIX_EventCodes_End_ = $0000198A;

// Constants for enum UIX_NotifyCodes
type
  UIX_NotifyCodes = TOleEnum;
const
  _UIX_Notify_Base_First_ = $00000000;
  UIX_Notify_Click = $00000001;
  UIX_Notify_DblClick = $00000002;
  UIX_Notify_Clicked = $00000003;
  UIX_Notify_DblClicked = $00000004;
  UIX_Notify_Changed = $00000005;
  UIX_Notify_SelChanged = $00000006;
  UIX_Notify_SelChanging = $00000007;
  UIX_Notify_InputFocusChanged = $00000008;
  UIX_Notify_BeforeShowPopup = $00000009;
  UIX_Notify_PopupShowed = $0000000A;
  UIX_Notify_BeforeHidePopup = $0000000B;
  UIX_Notify_PopupClosed = $0000000C;
  UIX_Notify_KeyDown = $0000000D;
  UIX_Notify_Char = $0000000E;
  UIX_Notify_KeyUp = $0000000F;
  UIX_Notify_SysKeyDown = $00000010;
  UIX_Notify_SysKeyUp = $00000011;
  UIX_Notify_MouseWheel = $00000012;
  UIX_Notify_Commit = $00000013;
  UIX_Notify_Update = $00000014;
  UIX_Notify_ItemToggled = $00000015;
  UIX_Notify_ItemChecked = $00000016;
  UIX_Notify_ContextMenu = $00000017;
  UIX_Notify_BeginTrack = $00000018;
  UIX_Notify_EndTrack = $00000019;
  UIX_Notify_HotItemChanged = $0000001A;
  UIX_Notify_ScrollChanged = $0000001B;
  UIX_Notify_MouseEnter = $0000001C;
  UIX_Notify_MouseExit = $0000001D;
  UIX_Notify_PropSheetPage_Validate = $0000001E;
  UIX_Notify_PropSheetPage_BeforeDeactivate = $0000001F;
  UIX_Notify_PropSheetPage_Activated = $00000020;
  UIX_Notify_PropSheetPage_Apply = $00000021;
  UIX_Notify_ComboEdit_Changed = $00000022;
  UIX_Notify_ComboEdit_SelChanged = $00000023;
  UIX_Notify_ComboEdit_SelChanging = $00000024;
  UIX_Notify_ExecCmd = $00000025;
  UIX_Notify_CmdLine_Minimized = $00000026;
  UIX_Notify_CmdLine_Expanded = $00000027;
  UIX_Notify_CmdPane_Minimized = $00000028;
  UIX_Notify_CmdPane_Expanded = $00000029;
  UIX_Notify_MenuItemClicked = $0000002A;
  UIX_Notify_CmdBar_Expanded = $0000002B;
  UIX_Notify_CmdBar_Minimized = $0000002C;
  UIX_Notify_RibbonExpanded = $0000002D;
  UIX_Notify_RibbonMinimized = $0000002E;
  UIX_Notify_RibbonTabActivated = $0000002F;
  UIX_Notify_AppMenuVisibilityChanged = $00000030;
  UIX_Notify_RClick = $00000062;
  UIX_Notify_RClicked = $00000063;
  _UIX_Notify_Base_Last_ = $00000064;
  _UIX_Notify_Layout_First_ = $00000065;
  UIX_Notify_Layout_ItemActivated = $00000066;
  UIX_Notify_Layout_BeforeHideItem = $00000067;
  UIX_Notify_Layout_ItemHidden = $00000068;
  UIX_Notify_Layout_AddNewTabs = $00000069;
  UIX_Notify_Layout_ShowSortedTabs = $0000006A;
  UIX_Notify_Layout_ShowTabsThumbs = $0000006B;
  UIX_Notify_Layout_ShowContextMenu = $0000006C;
  UIX_Notify_Layout_BeginDragItem = $0000006D;
  UIX_Notify_Layout_EndDragItem = $0000006E;
  UIX_Notify_Layout_NewParents = $0000006F;
  UIX_Notify_Layout_Changed = $00000070;
  UIX_Notify_Layout_BeginFullScreen = $00000071;
  UIX_Notify_Layout_PreEndFullScreen = $00000072;
  UIX_Notify_Layout_EndFullScreen = $00000073;
  _UIX_Notify_Layout_Last_ = $00000096;
  _UIX_Notify_PropList_First_ = $00000097;
  UIX_Notify_PropList_ItemClicked = $00000098;
  UIX_Notify_PropList_ItemDblClicked = $00000099;
  UIX_Notify_PropList_ItemKeyDown = $0000009A;
  _UIX_Notify_PropList_Last_ = $000000C8;
  UIX_Notify_CmdCustomized = $000000C9;
  UIX_Notify_RangesNavigator_BeforeDeleteRange = $000000CA;
  UIX_Notify_RangesNavigator_AfterDeleteRange = $000000CB;
  UIX_Notify_RangesNavigator_BeforeAddNewRange = $000000CC;
  UIX_Notify_RangesNavigator_AfterAddNewRange = $000000CD;
  UIX_Notify_RangesNavigator_CannotDeleteFirstRange = $000000CE;
  UIX_Notify_RangeChanged = $000000CF;
  UIX_Notify_PropSheetPage_Disable = $000000D0;
  _UIX_Notify_End_ = $000000D1;

// Constants for enum UIX_ScrollNotifyTypes
type
  UIX_ScrollNotifyTypes = TOleEnum;
const
  UIX_ScrollNotify_Line = $00000001;
  UIX_ScrollNotify_Page = $00000002;
  UIX_ScrollNotify_NewPos = $00000003;
  UIX_ScrollNotify_Delta = $00000004;
  UIX_ScrollNotify_Dropdown = $00000005;

// Constants for enum UIX_ObjStyleFlags
type
  UIX_ObjStyleFlags = TOleEnum;
const
  UIX_ObjStyle_NeedPreEvent = $00000001;
  UIX_ObjStyle_TabStop = $00000002;
  UIX_ObjStyle_NoBorder = $00000004;
  UIX_ObjStyle_NoScrollDevice = $00000008;
  UIX_ObjStyle_Transparent = $00000010;
  UIX_ObjStyle_NoInnerShadow = $00000020;
  UIX_ObjStyle_NoBackground = $00000040;
  UIX_ObjStyle_NeedPostEvent = $00000080;
  _UIX_ObjStyle_Last_ = $00000080;

// Constants for enum UIX_ObjStyleExFlags
type
  UIX_ObjStyleExFlags = TOleEnum;
const
  UIX_ObjStyleEx_NeedPostRenderEvent = $00000001;
  UIX_ObjStyleEx_SimpleWndWrapper = $00000002;
  UIX_ObjStyleEx_DropTarget = $00000004;
  UIX_ObjStyleEx_DragSource = $00000008;
  UIX_ObjStyleEx_CustomPaintWnd = $00000010;
  _UIX_ObjStyleEx_Last_ = $00000800;

// Constants for enum UIX_CreateObjFlags
type
  UIX_CreateObjFlags = TOleEnum;
const
  UIX_CreateObj_Windowed = $00000001;
  UIX_CreateObj_Hidden = $00000002;
  UIX_CreateObj_Disabled = $00000004;
  UIX_CreateObj_InsertBefore = $00000008;
  UIX_CreateObj_TouchWindow = $00000010;
  UIX_CreateObj_WndNoClose = $00000020;
  UIX_CreateObj_WndNoDropTarget = $00000040;
  UIX_CreateObj_MakeClientForParent = $00000080;

// Constants for enum UIX_GraphicEngines
type
  UIX_GraphicEngines = TOleEnum;
const
  UIX_GraphicEngine_Native = $00000000;
  UIX_GraphicEngine_Software = $00000001;
  UIX_GraphicEngine_OpenGL = $00000002;

// Constants for enum UIX_DrawStringFlags
type
  UIX_DrawStringFlags = TOleEnum;
const
  UIX_DrawString_MultiLine = $00000001;
  UIX_DrawString_WordWrap = $00000002;
  UIX_DrawString_Right = $00000004;
  UIX_DrawString_Bottom = $00000008;
  UIX_DrawString_Center = $00000010;
  UIX_DrawString_VCenter = $00000020;
  UIX_DrawString_Vertical = $00000040;
  UIX_DrawString_CalcSize = $00000080;
  UIX_DrawString_ShowPrefix = $00000100;
  UIX_DrawString_HidePrefix = $00000200;
  UIX_DrawString_EndEllipsis = $00000400;
  UIX_DrawString_PathEllipsis = $00000800;
  UIX_DrawString_Tagged = $00001000;
  UIX_DrawString_RTL = $00002000;
  UIX_DrawString_ShortEllipsis = $00004000;
  UIX_DrawString_CalcOptSize = $00008000;
  UIX_DrawString_HighlightOnly = $00010000;
  UIX_DrawString_KeepWordsOnWrap = $00020000;
  UIX_DrawString_SmallLineSpacing = $00040000;

// Constants for enum UIX_DrawIconFlags
type
  UIX_DrawIconFlags = TOleEnum;
const
  UIX_DrawIcon_Center = $00000001;
  UIX_DrawIcon_VCenter = $00000002;
  UIX_DrawIcon_Right = $00000004;
  UIX_DrawIcon_Bottom = $00000008;
  UIX_DrawIcon_FitTooLarge = $00000010;
  UIX_DrawIcon_NoFixTopLeft = $00000020;

// Constants for enum UIX_ShowPopupFlags
type
  UIX_ShowPopupFlags = TOleEnum;
const
  UIX_ShowPopup_Align_LL = $00000001;
  UIX_ShowPopup_Align_TB = $00000000;
  UIX_ShowPopup_Align_LR = $00000002;
  UIX_ShowPopup_Align_RR = $00000004;
  UIX_ShowPopup_Align_RL = $00000008;
  UIX_ShowPopup_Align_BT = $00000010;
  UIX_ShowPopup_Align_TT = $00000020;
  UIX_ShowPopup_Align_BB = $00000040;
  UIX_ShowPopup_Align_Mask = $000000FF;
  UIX_ShowPopup_NoChild = $00000100;
  UIX_ShowPopup_NoAnim = $00000200;
  UIX_ShowPopup_NoBorder = $00000400;
  UIX_ShowPopup_DestroyContentOnClose = $00000800;
  UIX_ShowPopup_Modal = $00001000;
  UIX_ShowPopup_Inside = $00002000;
  UIX_ShowPopup_FreePos = $00004000;
  UIX_ShowPopup_KeepContextInfo = $00008000;
  UIX_ShowPopup_NoMargins = $00010000;
  UIX_ShowPopup_SetMinWidth = $00020000;

// Constants for enum UIX_StdClasses
type
  UIX_StdClasses = TOleEnum;
const
  UIX_StdClass_Blank = $00000000;
  UIX_StdClass_Dialog = $00000001;
  UIX_StdClass_Button = $00000002;
  UIX_StdClass_ScrollBar = $00000003;
  UIX_StdClass_ScrollContainer = $00000004;
  UIX_StdClass_Edit = $00000005;
  UIX_StdClass_List = $00000006;
  UIX_StdClass_Label = $00000007;
  UIX_StdClass_PopupContainer = $00000008;
  UIX_StdClass_ComboButton = $00000009;
  UIX_StdClass_Combo = $0000000A;
  UIX_StdClass_Picture = $0000000B;
  UIX_StdClass_OriginSelector = $0000000C;
  UIX_StdClass_ControlsLock = $0000000D;
  UIX_StdClass_Group = $0000000E;
  UIX_StdClass_Frame = $0000000F;
  UIX_StdClass_Layout = $00000010;
  UIX_StdClass_Spin = $00000011;
  UIX_StdClass_Tooltip = $00000012;
  UIX_StdClass_CmdBar = $00000013;
  UIX_StdClass_CmdPane = $00000014;
  UIX_StdClass_Tree = $00000015;
  UIX_StdClass_Ruler = $00000016;
  UIX_StdClass_Slider = $00000017;
  UIX_StdClass_IndexNavigator = $00000018;
  UIX_StdClass_ColorPicker = $00000019;
  UIX_StdClass_PropSheetPage = $0000001A;
  UIX_StdClass_PropSheets = $0000001B;
  UIX_StdClass_CmdColorBtn = $0000001C;
  UIX_StdClass_Progress = $0000001D;
  UIX_StdClass_GuideLinesBtn = $0000001E;
  UIX_StdClass_InfoBtn = $0000001F;
  UIX_StdClass_PropList = $00000020;
  UIX_StdClass_RangesNavigator = $00000021;
  UIX_StdClass_IndProgress = $00000022;
  UIX_StdClass_ToggleBtn = $00000023;
  UIX_StdClass_RibbonFrameWindow = $00000024;
  UIX_StdClass_CmdRibbonTabs = $00000025;
  _UIX_StdClass_End_ = $00000026;

// Constants for enum UIX_IconScaleTypes
type
  UIX_IconScaleTypes = TOleEnum;
const
  UIX_IconScale_Auto = $00000000;
  UIX_IconScale_Nearest = $00000001;
  UIX_IconScale_Upsample = $00000002;
  UIX_IconScale_Downsample = $00000003;
  UIX_IconScale_Lower = $00000004;

// Constants for enum UIX_ImageScaleTypes
type
  UIX_ImageScaleTypes = TOleEnum;
const
  UIX_ImageScale_None = $00000000;
  UIX_ImageScale_Tile = $00000001;
  UIX_ImageScale_Stretch = $00000002;

// Constants for enum UIX_ImageStretchMethods
type
  UIX_ImageStretchMethods = TOleEnum;
const
  UIX_ImageStretch_Linear = $00000000;
  UIX_ImageStretch_Bilinear = $00000001;
  UIX_ImageStretch_Bicubic = $00000002;

// Constants for enum UIX_ObjModalFlags
type
  UIX_ObjModalFlags = TOleEnum;
const
  UIX_ObjModal_AppModal = $00000001;
  UIX_ObjModal_NoCenterByOwner = $00000002;
  UIX_ObjModal_CenterByScreen = $00000004;

// Constants for enum UIX_CreateFontFlags
type
  UIX_CreateFontFlags = TOleEnum;
const
  UIX_CreateFont_Bold = $00000001;
  UIX_CreateFont_Italic = $00000002;
  UIX_CreateFont_Underline = $00000004;
  UIX_CreateFont_StrikeOut = $00000008;
  UIX_CreateFont_SizeInPx = $00000010;

// Constants for enum UIX_MsgBoxStyleFlags
type
  UIX_MsgBoxStyleFlags = TOleEnum;
const
  UIX_MsgBox_OK = $00000001;
  UIX_MsgBox_OkCancel = $00000002;
  UIX_MsgBox_YesNo = $00000003;
  UIX_MsgBox_RetryCancel = $00000004;
  UIX_MsgBox_Cancel = $00000005;
  UIX_MsgBox_Close = $00000006;
  UIX_MsgBox_YesNoCancel = $00000010;
  UIX_MsgBox_AbortRetryIgnore = $00000020;
  UIX_MsgBox_CancelTryContinue = $00000030;
  UIX_MsgBox_IgnoreIgnoreAllAbort = $00000040;
  UIX_MsgBox_YesYesToAllNoNoToAllCancel = $00000050;
  UIX_MsgBox_IgnoreCancel = $00000060;
  UIX_MsgBox_YesCancel = $00000070;
  UIX_MsgBox_ButtonsMask = $000000FF;
  UIX_MsgBox_IconInfo = $00000100;
  UIX_MsgBox_IconQuestion = $00000200;
  UIX_MsgBox_IconWarning = $00000300;
  UIX_MsgBox_IconError = $00000400;
  UIX_MsgBox_IconMask = $00000F00;
  UIX_MsgBox_PlainText = $00001000;
  UIX_MsgBox_PlainHeader = $00002000;
  UIX_MsgBox_PlainFooterText = $00004000;
  UIX_MsgBox_PlainRadioText = $00008000;
  UIX_MsgBox_PlainOptionText = $00010000;
  UIX_MsgBox_ReturnZeroOnEsc = $00020000;
  UIX_MsgBox_EditMultLine = $00040000;
  UIX_MsgBox_EditNoFocus = $00080000;
  UIX_MsgBox_OptionThreeState = $00100000;
  UIX_MsgBox_Edit = $00200000;
  UIX_MsgBox_PasswordEdit = $00400000;
  UIX_MsgBox_CustomButtonsNoStdIcon = $00800000;
  UIX_MsgBox_FooterNoStdIcon = $01000000;
  UIX_MsgBox_FitEdit = $02000000;
  UIX_MsgBox_EditTextRequired = $04000000;
  UIX_MsgBox_NoWndClose = $08000000;
  UIX_MsgBox_CustomButtonsAsCommands = $10000000;
  UIX_MsgBox_StdButtonsAsCommands = $20000000;
  UIX_MsgBox_CanMinimize = $40000000;
  UIX_MsgBox_AppModal = $80000000;

// Constants for enum UIX_MsgBoxResult
type
  UIX_MsgBoxResult = TOleEnum;
const
  UIX_OK = $00000001;
  UIX_Cancel = $00000002;
  UIX_Abort = $00000003;
  UIX_Retry = $00000004;
  UIX_Ignore = $00000005;
  UIX_Yes = $00000006;
  UIX_No = $00000007;
  UIX_Close = $00000008;
  UIX_Help = $00000009;
  UIX_Try = $0000000A;
  UIX_Continue = $0000000B;
  UIX_IgnoreAll = $0000000C;
  UIX_YesToAll = $0000000D;
  UIX_NoToAll = $0000000E;
  _UIX_MsgBox_MaxRes_ = $0000000F;

// Constants for enum UIX_IconSizeType
type
  UIX_IconSizeType = TOleEnum;
const
  UIX_IconSize_Small = $00000000;
  UIX_IconSize_Medium = $00000001;
  UIX_IconSize_Large = $00000002;

// Constants for enum UIX_ButtonStyleFlags
type
  UIX_ButtonStyleFlags = TOleEnum;
const
  UIX_ButtonStyle_Splitted = $00000100;
  UIX_ButtonStyle_Left = $00000200;
  UIX_ButtonStyle_Right = $00000400;
  UIX_ButtonStyle_Top = $00000800;
  UIX_ButtonStyle_Bottom = $00001000;
  UIX_ButtonStyle_WrapText = $00002000;
  UIX_ButtonStyle_WrapHeader = $00004000;
  UIX_ButtonStyle_TextBelowIcon = $00008000;
  UIX_ButtonStyle_ColorPicker = $00010000;
  UIX_ButtonStyle_DropDown = $00020000;
  UIX_ButtonStyle_WholeDropDown = $00040000;
  UIX_ButtonStyle_Default = $00080000;
  UIX_ButtonStyle_SemitranspHeader = $00100000;
  UIX_ButtonStyle_OneTextRow = $00200000;
  UIX_ButtonStyle_Flat = $00800000;
  UIX_ButtonStyle_ReturnMenuNotify = $01000000;
  UIX_ButtonStyle_IconNoGaps = $02000000;
  UIX_ButtonStyle_FlatBorder = $04000000;
  UIX_ButtonStyle_NoInputFocus = $08000000;
  UIX_ButtonStyle_NoAutoMnemonics = $10000000;

// Constants for enum UIX_ScrollBarStyleFlags
type
  UIX_ScrollBarStyleFlags = TOleEnum;
const
  UIX_ScrollBarStyle_Horz = $00000100;
  UIX_ScrollBarStyle_Simple = $00000200;
  UIX_ScrollBarStyle_Gallery = $00000400;

// Constants for enum UIX_SpinStyleFlags
type
  UIX_SpinStyleFlags = TOleEnum;
const
  UIX_SpinStyle_Horz = $00000100;
  UIX_SpinStyle_Flat = $00000200;

// Constants for enum UIX_ScrollStyleFlags
type
  UIX_ScrollStyleFlags = TOleEnum;
const
  UIX_ScrollStyle_Vert = $00000100;
  UIX_ScrollStyle_Horz = $00000200;
  UIX_ScrollStyle_VertPerm = $00000400;
  UIX_ScrollStyle_HorzPerm = $00000800;
  UIX_ScrollStyle_AllPerm = $00000C00;
  UIX_ScrollStyle_VertLeft = $00001000;
  UIX_ScrollStyle_HorzTop = $00002000;
  UIX_ScrollStyle_VertDisabled = $00004000;
  UIX_ScrollStyle_HorzDisabled = $00008000;
  UIX_ScrollStyle_VertHidden = $00010000;
  UIX_ScrollStyle_HorzHidden = $00020000;
  UIX_ScrollStyle_Custom = $00040000;
  UIX_ScrollStyle_HideNClients = $00080000;

// Constants for enum UIX_ScrollContainerSideTypes
type
  UIX_ScrollContainerSideTypes = TOleEnum;
const
  UIX_ScrollContainerSide_ScrollVert = $00000001;
  UIX_ScrollContainerSide_ScrollHorz = $00000002;
  UIX_ScrollContainerSide_ScrollCorn = $00000003;
  UIX_ScrollContainerSide_Top = $00000004;
  UIX_ScrollContainerSide_Bottom = $00000005;
  UIX_ScrollContainerSide_Left = $00000006;
  UIX_ScrollContainerSide_Right = $00000007;
  UIX_ScrollContainerSide_TopIn = $00000008;
  UIX_ScrollContainerSide_BottomIn = $00000009;
  UIX_ScrollContainerSide_LeftIn = $0000000A;
  UIX_ScrollContainerSide_RightIn = $0000000B;

// Constants for enum UIX_ListStyleFlags
type
  UIX_ListStyleFlags = TOleEnum;
const
  UIX_ListStyle_ShowHeader = $00000100;
  UIX_ListStyle_ShowGroupTitles = $00000200;
  UIX_ListStyle_MultSel = $00000400;
  UIX_ListStyle_AutoSizeColumns = $00000800;
  UIX_ListStyle_TilesView = $00001000;
  UIX_ListStyle_TextBelowTile = $00002000;
  UIX_ListStyle_ImageVCenter = $00004000;
  UIX_ListStyle_UpdateAllOnResize = $00008000;
  UIX_ListStyle_StaticHeader = $00010000;
  UIX_ListStyle_KeepSel = $00020000;
  UIX_ListStyle_SingleColumnFitByClient = $00040000;
  UIX_ListStyle_ShowCheckBoxes = $00080000;
  UIX_ListStyle_ExternalCheckStates = $00100000;
  UIX_ListStyle_NoToggleGroups = $00200000;
  UIX_ListStyle_GroupTitlesNoSel = $00400000;
  UIX_ListStyle_StaticGroupTitles = $00800000;
  UIX_ListStyle_NoInputFocus = $01000000;
  UIX_ListStyle_ExternalSelection = $02000000;
  UIX_ListStyle_AllowSelByMouseUp = $04000000;
  UIX_ListStyle_NoSortHeader = $08000000;
  UIX_ListStyle_GroupTitlesNoBold = $10000000;
  UIX_ListStyle_NoToggleEmptyGroups = $20000000;
  UIX_ListStyle_GridLines = $40000000;
  UIX_ListStyle_ShowThumbFrame = $80000000;

// Constants for enum UIX_ListStyleExFlags
type
  UIX_ListStyleExFlags = TOleEnum;
const
  UIX_ListStyleEx_InteractiveColSplitters = $00001000;
  UIX_ListStyleEx_AllowSelByMouseDown = $00002000;
  UIX_ListStyleEx_AllowSelHiddenGroupTitles = $00004000;
  UIX_ListStyleEx_IgnoreStdShortcuts = $00008000;
  UIX_ListStyleEx_HighlightThumbFrameOnly = $00010000;
  UIX_ListStyleEx_EditText = $00020000;
  UIX_ListStyleEx_GroupTitleNoBkgnd = $00040000;
  UIX_ListStyleEx_HideSel = $00080000;

// Constants for enum UIX_ListItemHTFlags
type
  UIX_ListItemHTFlags = TOleEnum;
const
  UIX_ListItemHT_Item = $00000001;
  UIX_ListItemHT_Image = $00000002;
  UIX_ListItemHT_Text = $00000004;
  UIX_ListItemHT_Toggle = $00000008;
  UIX_ListItemHT_CheckBox = $00000010;

// Constants for enum UIX_ListDrawStages
type
  UIX_ListDrawStages = TOleEnum;
const
  UIX_ListDrawStage_Begin = $00000000;
  UIX_ListDrawStage_Bkgnd = $00000001;
  UIX_ListDrawStage_AfterBkgnd = $00000002;
  UIX_ListDrawStage_AfterContent = $00000003;
  UIX_ListDrawStage_End = $00000004;

// Constants for enum UIX_EditStyleFlags
type
  UIX_EditStyleFlags = TOleEnum;
const
  UIX_EditStyle_Multiline = $00000100;
  UIX_EditStyle_WordWrap = $00000200;
  UIX_EditStyle_RichText = $00000400;
  UIX_EditStyle_TextDragnDrop = $00000800;
  UIX_EditStyle_NoShortcuts = $00001000;
  UIX_EditStyle_NoHideSel = $00002000;
  UIX_EditStyle_ReadOnly = $00004000;
  UIX_EditStyle_Password = $00008000;
  UIX_EditStyle_SpellCheck = $00010000;
  UIX_EditStyle_UseEmbeddedFontForEditing = $00020000;
  UIX_EditStyle_HasSpin = $00040000;
  UIX_EditStyle_AutoFitFontSize = $00080000;
  UIX_EditStyle_WantReturn = $00100000;
  UIX_EditStyle_WantTabs = $00200000;
  UIX_EditStyle_Hyphenate = $00400000;
  UIX_EditStyle_HyphenationManaged = $00800000;
  UIX_EditStyle_IgnoreSoftHyphens = $01000000;
  UIX_EditStyle_IgnoreSoftReturns = $02000000;
  UIX_EditStyle_NoRTL = $04000000;
  UIX_EditStyle_NoCopy = $08000000;
  UIX_EditStyle_IgnoreThemeFmtChanges = $10000000;
  UIX_EditStyle_IgnoreNewLines = $20000000;
  UIX_EditStyle_NoSoftReturns = $40000000;

// Constants for enum UIX_CharFormatMask
type
  UIX_CharFormatMask = TOleEnum;
const
  UIX_CharFormat_FontSize = $00000001;
  UIX_CharFormat_FontName = $00000002;
  UIX_CharFormat_FontWeight = $00000004;
  UIX_CharFormat_FontStyle = $00000008;
  UIX_CharFormat_OffsetY = $00000010;
  UIX_CharFormat_CharSpacing = $00000020;
  UIX_CharFormat_VScale = $00000040;
  UIX_CharFormat_HScale = $00000080;
  UIX_CharFormat_TextColor = $00000100;
  UIX_CharFormat_BackColor = $00000200;
  UIX_CharFormat_FontStretch = $00000400;
  UIX_CharFormat_FontID = $00000800;
  UIX_CharFormat_BaseLineDelta = $00001000;
  UIX_CharFormat_StrokeWidth = $00002000;
  UIX_CharFormat_StrokeColor = $00004000;
  UIX_CharFormat_FontSizeDelta = $00008000;
  UIX_CharFormat_LinkID = $00010000;

// Constants for enum UIX_FontStyle
type
  UIX_FontStyle = TOleEnum;
const
  UIX_FontStyle_Normal = $00000000;
  UIX_FontStyle_Italic = $00000002;
  UIX_FontStyle_Underline = $00000004;
  UIX_FontStyle_StrikeOut = $00000008;
  UIX_FontStyle_AutoBackColor = $00001000;
  UIX_FontStyle_SuperScript = $00002000;
  UIX_FontStyle_SubScript = $00004000;

// Constants for enum UIX_ParaFormatMask
type
  UIX_ParaFormatMask = TOleEnum;
const
  UIX_ParaFormat_Align = $00000001;
  UIX_ParaFormat_StartIndent = $00000002;
  UIX_ParaFormat_HangingIndent = $00000004;
  UIX_ParaFormat_LineSpacing = $00000008;
  UIX_ParaFormat_MarginTop = $00000010;
  UIX_ParaFormat_MarginBottom = $00000020;
  UIX_ParaFormat_MarginLeft = $00000040;
  UIX_ParaFormat_MarginRight = $00000080;
  UIX_ParaFormat_DefTab = $00000100;
  UIX_ParaFormat_TabStops = $00000200;
  UIX_ParaFormat_VAlign = $00008000;
  UIX_ParaFormat_Radix = $00010000;
  UIX_ParaFormat_TextDir = $00020000;

// Constants for enum UIX_EditDrawStages
type
  UIX_EditDrawStages = TOleEnum;
const
  UIX_EditDrawStage_Bkgnd = $00000000;
  UIX_EditDrawStage_AfterBkgnd = $00000001;
  UIX_EditDrawStage_AfterContent = $00000002;

// Constants for enum UIX_LabelStyleFlags
type
  UIX_LabelStyleFlags = TOleEnum;
const
  UIX_LabelStyle_CheckBox = $00000100;
  UIX_LabelStyle_RadioBox = $00000200;
  UIX_LabelStyle_ThreeCheck = $00000400;
  UIX_LabelStyle_PlainTags = $00000800;
  UIX_LabelStyle_NoDrawStringCache = $00001000;
  UIX_LabelStyle_TextBold = $00002000;
  UIX_LabelStyle_TextLarge = $00004000;
  UIX_LabelStyle_TextExtraLarge = $00008000;
  UIX_LabelStyle_HandCursor = $00010000;
  UIX_LabelStyle_OpaqueHitTest = $00020000;
  UIX_LabelStyle_NoAutoMnemonics = $00040000;

// Constants for enum UIX_ComboStyleFlags
type
  UIX_ComboStyleFlags = TOleEnum;
const
  UIX_ComboStyle_Editable = $00000100;
  UIX_ComboStyle_NoAutoSel = $00000200;
  UIX_ComboStyle_ReadOnly = $00000400;
  UIX_ComboStyle_CheckList = $00000800;

// Constants for enum UIX_ComboItemStyleFlags
type
  UIX_ComboItemStyleFlags = TOleEnum;
const
  UIX_ComboItemStyle_Separator = $00000001;
  UIX_ComboItemStyle_Disabled = $00000002;
  UIX_ComboItemStyle_Bold = $00000004;

// Constants for enum UIX_PictureStyleFlags
type
  UIX_PictureStyleFlags = TOleEnum;
const
  UIX_PictureStyle_Right = $00000100;
  UIX_PictureStyle_Bottom = $00000200;
  UIX_PictureStyle_Center = $00000400;
  UIX_PictureStyle_VCenter = $00000800;
  UIX_PictureStyle_Line = $00001000;
  UIX_PictureStyle_LineVert = $00003000;
  UIX_PictureStyle_Frame = $00004000;
  UIX_PictureStyle_HandCursor = $00008000;
  UIX_PictureStyle_MouseTransp = $00010000;

// Constants for enum UIX_TooltipStyleFlags
type
  UIX_TooltipStyleFlags = TOleEnum;
const
  UIX_TooltipStyle_Balloon = $00000100;
  UIX_TooltipStyle_FreePos = $00000200;

// Constants for enum UIX_LayoutItemStyleFlags
type
  UIX_LayoutItemStyleFlags = TOleEnum;
const
  UIX_LayoutItemStyle_NoClose = $00000001;
  UIX_LayoutItemStyle_NoDock = $00000002;
  UIX_LayoutItemStyle_NoFloat = $00000004;
  UIX_LayoutItemStyle_NoDropTarget = $00000008;
  UIX_LayoutItemStyle_NoCaption = $00000010;
  UIX_LayoutItemStyle_FixedSize = $00000020;
  UIX_LayoutItemStyle_NoRootGaps = $00000040;
  UIX_LayoutItemStyle_NoPaneGaps = $00000080;
  UIX_LayoutItemStyle_NoTabBar = $00000100;
  UIX_LayoutItemStyle_HideOneTab = $00000200;
  UIX_LayoutItemStyle_TabBarBottom = $00000400;
  UIX_LayoutItemStyle_HideCloseTabsBtn = $00000800;
  UIX_LayoutItemStyle_CloseActiveTabBtn = $00001000;
  UIX_LayoutItemStyle_TabsNoScroll = $00002000;
  UIX_LayoutItemStyle_NoTabBarGripperBtn = $00004000;
  UIX_LayoutItemStyle_AddNewTabBtn = $00008000;
  UIX_LayoutItemStyle_ShowSortedTabsBtn = $00010000;
  UIX_LayoutItemStyle_ShowTabsThumbsBtn = $00020000;
  UIX_LayoutItemStyle_TabsNoReorder = $00040000;
  UIX_LayoutItemStyle_TabsNoShrink = $00080000;
  UIX_LayoutItemStyle_Splitted = $02000000;
  UIX_LayoutItemStyle_VertSplitters = $04000000;
  UIX_LayoutItemStyle_StaticSplitters = $08000000;

// Constants for enum UIX_LayoutStyleFlags
type
  UIX_LayoutStyleFlags = TOleEnum;
const
  UIX_LayoutStyle_TabContainerRequired = $00000100;
  UIX_LayoutStyle_ShowRootGaps = $00000200;
  UIX_LayoutStyle_PanesNoReorder = $00000400;
  UIX_LayoutStyle_StaticSplitters = $00000800;
  UIX_LayoutStyle_PanesNoClose = $00001000;
  UIX_LayoutStyle_ClipByClient = $00002000;
  UIX_LayoutStyle_AllowCloseTabsByMClick = $00004000;
  UIX_LayoutStyle_NoSplitToggles = $00008000;
  UIX_LayoutStyle_Flat = $00010000;

// Constants for enum UIX_LayoutLoadFlags
type
  UIX_LayoutLoadFlags = TOleEnum;
const
  UIX_LayoutLoad_KeepClient = $00000001;
  UIX_LayoutLoad_KeepFloatsXY = $00000002;
  UIX_LayoutLoad_KeepFloatsWH = $00000004;

// Constants for enum UIX_CmdItemState
type
  UIX_CmdItemState = TOleEnum;
const
  UIX_CmdItemState_Normal = $00000000;
  UIX_CmdItemState_Checked = $00000001;
  UIX_CmdItemState_Disabled = $00000002;
  UIX_CmdItemState_CheckedInd = $00000005;
  UIX_CmdItemState_NoAccel = $00000100;
  UIX_CmdItemState_Unknown = $FFFFFFFF;

// Constants for enum UIX_CmdItemUpdateFlags
type
  UIX_CmdItemUpdateFlags = TOleEnum;
const
  UIX_CmdItemUpdate_State = $00000001;
  UIX_CmdItemUpdate_Title = $00000002;
  UIX_CmdItemUpdate_Icon = $00000004;
  UIX_CmdItemUpdate_Style = $00000008;
  UIX_CmdItemUpdate_Shortcut = $00000010;
  UIX_CmdItemUpdate_CtlSize = $00000020;
  UIX_CmdItemUpdate_CtlContent = $00000040;
  UIX_CmdItemUpdate_All = $000000FF;
  UIX_CmdItemUpdate_Sync = $10000000;
  UIX_CmdItemUpdate_Quick = $20000000;

// Constants for enum UIX_CmdBarStyleFlags
type
  UIX_CmdBarStyleFlags = TOleEnum;
const
  UIX_CmdBarStyle_Minimized = $00000100;
  UIX_CmdBarStyle_NoGripper = $00000200;
  UIX_CmdBarStyle_NoFloat = $00000400;
  UIX_CmdBarStyle_NoToggleBtn = $00000800;
  UIX_CmdBarStyle_Customizable = $00001000;
  UIX_CmdBarStyle_MenuBar = $00002000;
  UIX_CmdBarStyle_Hidden = $00010000;
  UIX_CmdBarStyle_Center = $00020000;
  UIX_CmdBarStyle_Right = $00040000;
  UIX_CmdBarStyle_ChevronAllowed = $00080000;

// Constants for enum UIX_CmdItemHighlightFlags
type
  UIX_CmdItemHighlightFlags = TOleEnum;
const
  UIX_CmdItemHighlight_Blink = $00000001;
  UIX_CmdItemHighlight_StayOn = $00000002;
  UIX_CmdItemHighlight_ForceStayOn = $00000004;

// Constants for enum UIX_BorderStyle
type
  UIX_BorderStyle = TOleEnum;
const
  UIX_BorderStyle_Top = $00000001;
  UIX_BorderStyle_Bottom = $00000002;
  UIX_BorderStyle_Left = $00000004;
  UIX_BorderStyle_Right = $00000008;

// Constants for enum UIX_CmdPaneStyleFlags
type
  UIX_CmdPaneStyleFlags = TOleEnum;
const
  UIX_CmdPaneStyle_Minimized = $00000100;
  UIX_CmdPaneStyle_NoToggleBtn = $00000200;
  UIX_CmdPaneStyle_LinesNoResize = $00000400;
  UIX_CmdPaneStyle_LinesNoToggle = $00001000;
  UIX_CmdPaneStyle_Customizable = $00002000;
  UIX_CmdPaneStyle_Hidden = $00010000;
  UIX_CmdPaneStyle_Docked = $00020000;
  UIX_CmdPaneStyle_NoToggleRbBtn = $00040000;
  UIX_CmdPaneStyle_RibbonMinimized = $00080000;

// Constants for enum UIX_ObjShowThroughFlags
type
  UIX_ObjShowThroughFlags = TOleEnum;
const
  UIX_ObjShowThrough_SkipTop = $00000001;
  UIX_ObjShowThrough_SkipEmbeddedTop = $00000002;
  UIX_ObjShowThrough_ActivateTop = $00000004;

// Constants for enum UIX_DeleteCmdItemsFlags
type
  UIX_DeleteCmdItemsFlags = TOleEnum;
const
  UIX_DeleteCmdItems_KeepOnToolbars = $00000001;
  UIX_DeleteCmdItems_KeepInMenus = $00000002;
  UIX_DeleteCmdItems_FirstOnly = $00000004;

// Constants for enum UIX_InfoBtnStyleFlags
type
  UIX_InfoBtnStyleFlags = TOleEnum;
const
  UIX_InfoBtnStyle_EmbeddedSmall = $00000100;

// Constants for enum UIX_GetNextDlgItemFlags
type
  UIX_GetNextDlgItemFlags = TOleEnum;
const
  UIX_GetNextDlgItem_Reversed = $00000001;
  UIX_GetNextDlgItem_TabStopOnly = $00000002;
  UIX_GetNextDlgItem_AccessibleOnly = $00000004;
  UIX_GetNextDlgItem_AllowHidden = $00000008;
  UIX_GetNextDlgItem_NoCycle = $00000010;
  UIX_GetNextDlgItem_Global = $40000000;

// Constants for enum UIX_ProgressStyleFlags
type
  UIX_ProgressStyleFlags = TOleEnum;
const
  UIX_ProgressStyle_Indeterminate = $00000100;

// Constants for enum UIX_ComboBtnStyleFlags
type
  UIX_ComboBtnStyleFlags = TOleEnum;
const
  UIX_ComboBtnStyle_Ellipsis = $00000100;
  UIX_ComboBtnStyle_SeparatorBefore = $00000200;

// Constants for enum UIX_ProgressState
type
  UIX_ProgressState = TOleEnum;
const
  UIX_ProgressState_Normal = $00000000;
  UIX_ProgressState_Warning = $00000001;
  UIX_ProgressState_Error = $00000002;

// Constants for enum UIX_PropType
type
  UIX_PropType = TOleEnum;
const
  UIX_PropType_Bool = $00000000;
  UIX_PropType_BoolYesNo = $00000001;
  UIX_PropType_String = $00000002;
  UIX_PropType_Int = $00000003;
  UIX_PropType_Int64 = $00000004;
  UIX_PropType_Double = $00000005;
  UIX_PropType_Color = $00000006;
  UIX_PropType_NamedValues = $00000007;
  UIX_PropType_Custom = $00000008;
  _UIX_PropType_Last_ = $00000009;

// Constants for enum UIX_PropStyleFlags
type
  UIX_PropStyleFlags = TOleEnum;
const
  UIX_PropStyle_Disabled = $00000001;
  UIX_PropStyle_ReadOnly = $00000002;
  UIX_PropStyle_Static = $00000004;
  UIX_PropStyle_StaticEdit = $00000200;
  UIX_PropStyle_HasButton = $00000008;
  UIX_PropStyle_HasSpin = $00000010;
  UIX_PropStyle_SpellCheck = $00000020;
  UIX_PropStyle_ButtonAlwaysEnabled = $00000040;
  UIX_PropStyle_TextBold = $00000080;
  UIX_PropStyle_TextGray = $00000100;
  UIX_PropStyle_MultiLine = $00000400;
  UIX_PropStyle_CommitOnSelChange = $00001000;
  UIX_PropStyle_NotifyChangeOnSpin = $00002000;
  UIX_PropStyle_Hint_Warning = $00010000;
  UIX_PropStyle_Hint_Info = $00020000;
  UIX_PropStyle_Hint__Mask_ = $000F0000;
  UIX_PropStyle_Hint__Shift_ = $00000010;

// Constants for enum UIX_OriginPointName
type
  UIX_OriginPointName = TOleEnum;
const
  UIX_Origin_TopLeft = $00000000;
  UIX_Origin_TopMiddle = $00000001;
  UIX_Origin_TopRight = $00000002;
  UIX_Origin_MiddleRight = $00000003;
  UIX_Origin_BottomRight = $00000004;
  UIX_Origin_BottomMiddle = $00000005;
  UIX_Origin_BottomLeft = $00000006;
  UIX_Origin_MiddleLeft = $00000007;
  UIX_Origin_MiddleMiddle = $00000008;
  _UIX_Origin_End = $00000009;

// Constants for enum UIX_CmdItemStyleFlags
type
  UIX_CmdItemStyleFlags = TOleEnum;
const
  UIX_CmdItemStyle_Normal = $00000000;
  UIX_CmdItemStyle_HideIcon = $00000001;
  UIX_CmdItemStyle_HideTitle = $00000002;
  UIX_CmdItemStyle_HideTitle_Medium = $00000004;
  UIX_CmdItemStyle_HideTitle_Large = $00000008;
  UIX_CmdItemStyle_HideTitle_NormalBar = $00000010;
  UIX_CmdItemStyle_HideTitle_LargeBar = $00000020;
  UIX_CmdItemStyle_HideIconInMenu = $00000040;
  UIX_CmdItemStyle_HideTitleInMenu = $00000080;
  UIX_CmdItemStyle_HasPopup = $00000100;
  UIX_CmdItemStyle_WholePopup = $00000200;
  UIX_CmdItemStyle_Static = $00000400;
  UIX_CmdItemStyle_HideCtl = $00000800;
  UIX_CmdItemStyle_HideCtlInMenu = $00001000;
  UIX_CmdItemStyle_PulseButton = $00002000;
  UIX_CmdItemStyle_CustomIcon = $00004000;
  UIX_CmdItemStyle_StaticCtl = $00008000;
  UIX_CmdItemStyle_CtlLikeIcon = $00010000;
  UIX_CmdItemStyle_CtlNoWholeMenuWidth = $00020000;
  UIX_CmdItemStyle_ToolSet = $00040000;
  UIX_CmdItemStyle_Tool = $00080000;
  UIX_CmdItemStyle_CompactPopupSymb = $00100000;
  UIX_CmdItemStyle_Separator = $00200000;
  UIX_CmdItemStyle_NonBreakSeparator = $00400000;
  UIX_CmdItemStyle_HardBreakSeparator = $00800000;
  UIX_CmdItemStyle_InvisibleSeparator = $01000000;
  UIX_CmdItemStyle_NonCustomizablePopup = $02000000;
  UIX_CmdItemStyle_TitleBold = $04000000;
  UIX_CmdItemStyle_KeepPopupsOnExec = $08000000;
  UIX_CmdItemStyle_CtlWholeBoxHeight = $10000000;
  UIX_CmdItemStyle_AlwaysLarge = $20000000;
  UIX_CmdItemStyle_KeepAppMenuOnExec = $40000000;
  UIX_CmdItemStyle_Hidden = $80000000;

// Constants for enum UIX_ItemFlags
type
  UIX_ItemFlags = TOleEnum;
const
  UIX_ItemFlag_Disabled = $00000001;
  UIX_ItemFlag_Static = $00000002;
  UIX_ItemFlag_Highlighted = $00000004;

// Constants for enum UIX_ItemClickedFlags
type
  UIX_ItemClickedFlags = TOleEnum;
const
  UIX_ItemClicked_Normal = $00000001;
  UIX_ItemClicked_Double = $00000002;

// Constants for enum UIX_TreeStyleFlags
type
  UIX_TreeStyleFlags = TOleEnum;
const
  UIX_TreeStyle_MultSel = $00000100;
  UIX_TreeStyle_UpdateAllOnResize = $00000200;
  UIX_TreeStyle_KeepSel = $00000400;
  UIX_TreeStyle_ShowCheckBoxes = $00000800;
  UIX_TreeStyle_ExternalCheckStates = $00001000;
  UIX_TreeStyle_AlwaysShowRootsToggles = $00002000;
  UIX_TreeStyle_FullRowSel = $00004000;
  UIX_TreeStyle_ExternalSelection = $00008000;
  UIX_TreeStyle_GridLines = $00010000;
  UIX_TreeStyle_ThreeChecks = $00020000;
  UIX_TreeStyle_SmallIndent = $00040000;
  UIX_TreeStyle_HideRootsCheckBoxes = $00080000;
  UIX_TreeStyle_NoInputFocus = $00100000;

// Constants for enum UIX_ListColumnStyle
type
  UIX_ListColumnStyle = TOleEnum;
const
  UIX_ListColumnStyle_IconDown = $00000001;
  UIX_ListColumnStyle_IconUp = $00000002;
  UIX_ListColumnStyle_SplitButton = $00000004;
  UIX_ListColumnStyle_Hidden = $00000008;

// Constants for enum UIX_FindItemByTextFlags
type
  UIX_FindItemByTextFlags = TOleEnum;
const
  UIX_FindItemByText_AllowPartial = $00000001;
  UIX_FindItemByText_CaseSensitive = $00000002;
  UIX_FindItemByText_MathGroupTitles = $00000004;
  UIX_FindItemByText_OneGroup = $00000008;
  UIX_FindItemByText_OneColumn = $00000010;

// Constants for enum UIX_CreateFTIconFlags
type
  UIX_CreateFTIconFlags = TOleEnum;
const
  UIX_CreateFTIcon_Small = $00000001;
  UIX_CreateFTIcon_Medium = $00000002;
  UIX_CreateFTIcon_Large = $00000004;
  UIX_CreateFTIcon_ExtraLarge = $00000008;
  UIX_CreateFTIcon_Jumbo = $00000010;
  UIX_CreateFTIcon_SizeMask = $0000001F;

// Constants for enum UIX_ColorPickerStyleFlags
type
  UIX_ColorPickerStyleFlags = TOleEnum;
const
  UIX_ColorPickerStyle_NoMoreColors = $00000100;
  UIX_ColorPickerStyle_NoStdColors = $00000200;
  UIX_ColorPickerStyle_NoCustomColors = $00000400;
  UIX_ColorPickerStyle_ShowAuto = $00000800;
  UIX_ColorPickerStyle_ShowDefault = $00001000;
  UIX_ColorPickerStyle_ShowNone = $00002000;
  UIX_ColorPickerStyle_HideRGBColors = $00004000;
  UIX_ColorPickerStyle_ShowCMYKColors = $00008000;
  UIX_ColorPickerStyle_ShowGrayColors = $00010000;
  UIX_ColorPickerStyle_Stroke = $00020000;
  UIX_ColorPickerStyle_LocalCustomColors = $00040000;

// Constants for enum UIX_PropSheetsStyleFlags
type
  UIX_PropSheetsStyleFlags = TOleEnum;
const
  UIX_PropSheetsStyle_ShowApplyBtn = $00000100;
  UIX_PropSheetsStyle_ShowAdvancedBtn = $00000200;

// Constants for enum UIX_RangesNavigatorStyleFlags
type
  UIX_RangesNavigatorStyleFlags = TOleEnum;
const
  UIX_RangesNavigatorStyle_NoUndoRedo = $00000100;
  UIX_RangesNavigatorStyle_NoLabels = $00000200;
  UIX_RangesNavigatorStyle_ZeroBasedLabels = $00000400;
  UIX_RangesNavigatorStyle_FixedRanges = $00000800;
  UIX_RangesNavigatorStyle_NoTooltip = $00001000;
  UIX_RangesNavigatorStyle_NoZoomByMouseWheel = $00002000;
  UIX_RangesNavigatorStyle_NoScrollByMouseWheel = $00004000;

// Constants for enum UIX_UpdatePropsFlags
type
  UIX_UpdatePropsFlags = TOleEnum;
const
  UIX_UpdateProps_PropIsGroup = $00000001;
  UIX_UpdateProps_ValueOnly = $00000002;
  UIX_UpdateProps_FullReload = $00000004;
  UIX_UpdateProps_KeepCtl = $00000008;
  UIX_UpdateProps_NoCommit = $00000010;
  UIX_UpdateProps_Sync = $00001000;

// Constants for enum UIX_CmdCustomizedFlags
type
  UIX_CmdCustomizedFlags = TOleEnum;
const
  UIX_CmdCustomized_Panes = $00000001;
  UIX_CmdCustomized_Lines = $00000002;
  UIX_CmdCustomized_Bars = $00000004;
  UIX_CmdCustomized_Items = $00000008;
  UIX_CmdCustomized_Commands = $00000010;

// Constants for enum UIX_CmdNotifyCodes
type
  UIX_CmdNotifyCodes = TOleEnum;
const
  UIX_CmdNotify_Exec = $00000001;
  UIX_CmdNotify_BeforeShowPopup = $00000002;
  UIX_CmdNotify_PopupShowed = $00000003;
  UIX_CmdNotify_BeforeHidePopup = $00000004;
  UIX_CmdNotify_PopupClosed = $00000005;
  UIX_CmdNotify_CtlNotify = $00000006;
  UIX_CmdNotify_LinkClicked = $00000007;

// Constants for enum UIX_SelMenuItemCmd
type
  UIX_SelMenuItemCmd = TOleEnum;
const
  UIX_SelMenuItemCmd_First = $00000000;
  UIX_SelMenuItemCmd_Last = $00000001;
  UIX_SelMenuItemCmd_FirstVisible = $00000002;
  UIX_SelMenuItemCmd_LastVisible = $00000003;
  UIX_SelMenuItemCmd_Up = $00000004;
  UIX_SelMenuItemCmd_Down = $00000005;
  UIX_SelMenuItemCmd_PageUp = $00000006;
  UIX_SelMenuItemCmd_PageDown = $00000007;
  UIX_SelMenuItemCmd_Unsel = $00000008;

// Constants for enum UIX_GestureStages
type
  UIX_GestureStages = TOleEnum;
const
  UIX_GestureStage_Begin = $00000000;
  UIX_GestureStage_Update = $00000001;
  UIX_GestureStage_End = $00000002;

// Constants for enum UIX_TouchProcState
type
  UIX_TouchProcState = TOleEnum;
const
  UIX_TouchProc_NoGesture = $00000000;
  UIX_TouchProc_DetectGesture = $00000001;
  UIX_TouchProc_Gesture = $00000002;

// Constants for enum UIX_TouchServiceFlags
type
  UIX_TouchServiceFlags = TOleEnum;
const
  UIX_TouchService_ContextMenu = $00000001;
  UIX_TouchService_ScrollByX = $00000002;
  UIX_TouchService_ScrollByY = $00000004;
  UIX_TouchService_ScrollByXY = $00000006;
  UIX_TouchService_InertialScroll = $00000008;
  UIX_TouchService_Rotate = $00000010;
  UIX_TouchService_Zoom = $00000020;
  UIX_TouchService_SimpleScroll = $00000040;

// Constants for enum UIX_AlignFlags
type
  UIX_AlignFlags = TOleEnum;
const
  UIX_Align_Center = $00000001;
  UIX_Align_VCenter = $00000002;
  UIX_Align_Right = $00000004;
  UIX_Align_Bottom = $00000008;
  UIX_Align_ValidMask = $0000000F;

// Constants for enum UIX_SoundPlayFlags
type
  UIX_SoundPlayFlags = TOleEnum;
const
  UIX_SoundPlay_Sync = $00000001;
  UIX_SoundPlay_Loop = $00000002;
  UIX_SoundPlay_NoStop = $00000004;

// Constants for enum UIX_IndProgressStyleFlags
type
  UIX_IndProgressStyleFlags = TOleEnum;
const
  UIX_IndProgressStyle_NoInnerCircle = $00000100;
  UIX_IndProgressStyle_W8Ring = $00000200;
  UIX_IndProgressStyle_W8Bar = $00000400;

// Constants for enum UIX_SliderStyleFlags
type
  UIX_SliderStyleFlags = TOleEnum;
const
  UIX_SliderStyle_Vertical = $00000100;
  UIX_SliderStyle_NoStick = $00000200;
  UIX_SliderStyle_HideTicks = $00000400;
  UIX_SliderStyle_IntPos = $00000800;
  UIX_SliderStyle_BottomRightTicks = $00001000;
  UIX_SliderStyle_TopLeftTicks = $00002000;
  UIX_SliderStyle_MiddleTicks = $00004000;

// Constants for enum UIX_IndexNavigatorColorType
type
  UIX_IndexNavigatorColorType = TOleEnum;
const
  UIX_IndexNavigatorColorType_Normal = $00000000;
  UIX_IndexNavigatorColorType_Hot = $00000001;
  UIX_IndexNavigatorColorType_Selected = $00000002;
  UIX_IndexNavigatorColorType_Max = $00000003;

// Constants for enum UIX_IndexNavigatorStyleFlags
type
  UIX_IndexNavigatorStyleFlags = TOleEnum;
const
  UIX_IndexNavigatorStyle_ShowEditBox = $00000100;
  UIX_IndexNavigatorStyle_ShowNavControls = $00000200;
  UIX_IndexNavigatorStyle_ZeroBasedLabels = $00000400;
  UIX_IndexNavigatorStyle_Top = $00000800;
  UIX_IndexNavigatorStyle_Bottom = $00001000;
  UIX_IndexNavigatorStyle_ShowCloseItemBtn = $00002000;
  UIX_IndexNavigatorStyle_ShowAddBtn = $00004000;

// Constants for enum UIX_RulerStyleFlags
type
  UIX_RulerStyleFlags = TOleEnum;
const
  UIX_RulerStyle_Vertical = $00000100;
  UIX_RulerStyle_ShowCursor = $00000200;
  UIX_RulerStyle_ShowMarkers = $00000400;
  UIX_RulerStyle_DragMarkers = $00000800;
  UIX_RulerStyle_ShowFractions = $00001000;
  UIX_RulerStyle_Inverted = $00002000;

// Constants for enum UIX_RulerMarkerFlags
type
  UIX_RulerMarkerFlags = TOleEnum;
const
  UIX_RulerMarker_ReadOnly = $00000001;

// Constants for enum UIX_ListHdrItemHTFlags
type
  UIX_ListHdrItemHTFlags = TOleEnum;
const
  UIX_ListHdrItemHT_Item = $00000001;
  UIX_ListHdrItemHT_Separator = $00000002;
  UIX_ListHdrItemHT_SplitButton = $00000004;

// Constants for enum UIX_ListColumnSetMask
type
  UIX_ListColumnSetMask = TOleEnum;
const
  UIX_ListColumnSet_Title = $00000001;
  UIX_ListColumnSet_Icon = $00000002;
  UIX_ListColumnSet_Tooltip = $00000004;
  UIX_ListColumnSet_Width = $00000008;
  UIX_ListColumnSet_Style = $00000010;
  UIX_ListColumnSet_Param = $00000020;

// Constants for enum UIX_TreeStyleExFlags
type
  UIX_TreeStyleExFlags = TOleEnum;
const
  UIX_TreeStyleEx_IgnoreStdShortcuts = $00008000;
  UIX_TreeStyleEx_EditText = $00020000;

// Constants for enum UIX_TreeItemHTFlags
type
  UIX_TreeItemHTFlags = TOleEnum;
const
  UIX_TreeItemHT_Item = $00000001;
  UIX_TreeItemHT_Image = $00000002;
  UIX_TreeItemHT_Text = $00000004;
  UIX_TreeItemHT_Toggle = $00000008;
  UIX_TreeItemHT_CheckBox = $00000010;

// Constants for enum UIX_TreeDrawStages
type
  UIX_TreeDrawStages = TOleEnum;
const
  UIX_TreeDrawStage_Begin = $00000000;
  UIX_TreeDrawStage_Bkgnd = $00000001;
  UIX_TreeDrawStage_AfterBkgnd = $00000002;
  UIX_TreeDrawStage_AfterContent = $00000003;
  UIX_TreeDrawStage_End = $00000004;

// Constants for enum UIX_TreeItemSDFlags
type
  UIX_TreeItemSDFlags = TOleEnum;
const
  UIX_TreeItemSD_Text = $00000001;
  UIX_TreeItemSD_Image = $00000002;

// Constants for enum UIX_ClearSelFlags
type
  UIX_ClearSelFlags = TOleEnum;
const
  UIX_ClearSel_SelChanged = $00000001;
  UIX_ClearSel_MultSelChanged = $00000003;
  UIX_ClearSel_NeedRedrawAll = $00000004;

// Constants for enum UIX_EditChangeFlags
type
  UIX_EditChangeFlags = TOleEnum;
const
  UIX_EditChange_Added = $00000001;
  UIX_EditChange_Deleted = $00000002;
  UIX_EditChange_NewCharFormat = $00000010;
  UIX_EditChange_NewParaFormat = $00000020;

// Constants for enum UIX_EditSelChangeFlags
type
  UIX_EditSelChangeFlags = TOleEnum;
const
  UIX_EditSelChanged_Caret = $00000001;
  UIX_EditSelChanged_Selection = $00000002;

// Constants for enum UIX_EditStateFlags
type
  UIX_EditStateFlags = TOleEnum;
const
  UIX_EditState_CanUndo = $00000001;
  UIX_EditState_CanRedo = $00000002;
  UIX_EditState_CanCopy = $00000004;
  UIX_EditState_CanPaste = $00000008;
  UIX_EditState_CanCut = $00000010;
  UIX_EditState_CanDelete = $00000020;
  UIX_EditState_CanSpell = $00000040;
  UIX_EditState_CanRichText = $00000080;
  UIX_EditState_CanHyphenate = $00000100;
  UIX_EditState_CanChange = $00008000;

// Constants for enum UIX_DialogStyleFlags
type
  UIX_DialogStyleFlags = TOleEnum;
const
  UIX_DialogStyle_NoSetDefaultFocus = $00000100;
  UIX_DialogStyle_DesignMode = $00000200;
  UIX_DialogStyle_MouseTranspBkgnd = $00000400;
  UIX_DialogStyle_NoOverlayShadow = $00000800;

// Constants for enum UIX_GroupStyleFlags
type
  UIX_GroupStyleFlags = TOleEnum;
const
  UIX_GroupStyle_AlwaysShowHeader = $00000100;
  UIX_GroupStyle_AlwaysShowFooter = $00000200;
  UIX_GroupStyle_Sunken = $00000400;

// Constants for enum UIX_LayoutChangesFlags
type
  UIX_LayoutChangesFlags = TOleEnum;
const
  UIX_LayoutChanged_ItemsAdded = $00000001;
  UIX_LayoutChanged_ItemsReodered = $00000002;
  UIX_LayoutChanged_ItemsRemoved = $00000004;
  UIX_LayoutChanged_ItemsVisibilityChanged = $00000008;
  UIX_LayoutChanged_ItemsChanged = $00000010;
  UIX_LayoutChanged_ItemsActivated = $00000020;
  UIX_LayoutChanged_NewSplitPos = $00000040;
  UIX_LayoutChanged_NewFloatPos = $00000080;
  UIX_LayoutChanged_New = $00000100;
  UIX_LayoutChanged_ItemsAppearanceChanged = $00000200;

// Constants for enum UIX_CmdItemRectIndex
type
  UIX_CmdItemRectIndex = TOleEnum;
const
  UIX_CmdItemRect_Item = $00000000;
  UIX_CmdItemRect_Icon = $00000001;
  UIX_CmdItemRect_Title = $00000002;
  UIX_CmdItemRect_Ctl = $00000003;
  UIX_CmdItemRect_PopupButton = $00000004;
  UIX_CmdItemRect_PopupArrow = $00000005;
  UIX_CmdItemRect_CompPopupIcon = $00000006;
  _UIX_CmdItemRect_Last_ = $00000007;

// Constants for enum UIX_CmdItemBoxStyleFlags
type
  UIX_CmdItemBoxStyleFlags = TOleEnum;
const
  UIX_CmdItemBoxStyle_Horizontal = $00000001;
  UIX_CmdItemBoxStyle_NoSeparatorBefore = $00000002;

// Constants for enum UIX_CmdRibbonTabStyleFlags
type
  UIX_CmdRibbonTabStyleFlags = TOleEnum;
const
  UIX_CmdRibbonTabStyle_Hidden = $00000001;
  UIX_CmdRibbonTabStyle_Customizable = $00000002;

// Constants for enum UIX_PropItemHTFlags
type
  UIX_PropItemHTFlags = TOleEnum;
const
  UIX_PropItemHT_Title = $00001000;
  UIX_PropItemHT_Value = $00002000;
  UIX_PropItemHT_Button = $00004000;
  UIX_PropItemHT_Hint = $00008000;

// Constants for enum UIX_SetDragDataFlags
type
  UIX_SetDragDataFlags = TOleEnum;
const
  UIX_SetDragData_NoCopy = $00000001;
  UIX_SetDragData_AllowDuplicates = $00000002;
  UIX_SetDragData_External = $00000004;

// Constants for enum UIX_CmdExtraOpts
type
  UIX_CmdExtraOpts = TOleEnum;
const
  UIX_CmdExtraOpt_HideTips = $00000001;
  UIX_CmdExtraOpt_HideShortcutsInMenusAndTips = $00000002;
  UIX_CmdExtraOpt_HideIconsInMenus = $00000004;
  UIX_CmdExtraOpt_HideLabelsInToolbars = $00000008;
  UIX_CmdExtraOpt_LockAllBars = $00000010;
  UIX_CmdExtraOpt_LockAllPanes = $00000020;
  UIX_CmdExtraOpt_DisableAccels = $00000040;
  UIX_CmdExtraOpt_DisableMenuCues = $00000080;
  UIX_CmdExtraOpt_ReduceLargeIcons = $00000100;
  UIX_CmdExtraOpt_HideBarRbTitles = $00000200;
  UIX_CmdExtraOpt_DenyKeyTipsInClassicUI = $00000400;

// Constants for enum CabNodeFlags
type
  CabNodeFlags = TOleEnum;
const
  cabNode_Temp = $00000001;

// Constants for enum CabNodeCmpFlags
type
  CabNodeCmpFlags = TOleEnum;
const
  cabNode_cmp_skipIStream = $00000001;
  cabNode_cmp_skipIUnknown = $00000002;
  cabNode_cmp_ignoreStringCase = $00000004;

// Constants for enum PXV_ZoomMode
type
  PXV_ZoomMode = TOleEnum;
const
  PXV_ZoomMode_Percent = $00000000;
  PXV_ZoomMode_Actual = $00000001;
  PXV_ZoomMode_FitWidth = $00000002;
  PXV_ZoomMode_FitHeight = $00000003;
  PXV_ZoomMode_FitPage = $00000004;
  PXV_ZoomMode_FitVisible = $00000005;
  _PXV_ZoomMode_Max_ = $00000006;

// Constants for enum PXV_VisibilityType
type
  PXV_VisibilityType = TOleEnum;
const
  VT_Invisible = $00000000;
  VT_Partial = $00000001;
  VT_Full = $00000002;

// Constants for enum PXV_PagesLayoutNavigateMode
type
  PXV_PagesLayoutNavigateMode = TOleEnum;
const
  PLNavigate_FirstPage = $00000000;
  PLNavigate_LastPage = $00000001;
  PLNavigate_PrevPage = $00000002;
  PLNavigate_NextPage = $00000003;
  PLNavigate_Backward = $00000004;
  PLNavigate_Forward = $00000005;
  PLNavigate__Last_ = $00000006;

// Constants for enum PXV_PagesViewDrawStage
type
  PXV_PagesViewDrawStage = TOleEnum;
const
  PXV_PagesViewDraw_Background = $00000000;
  PXV_PagesViewDraw_AfterBackground = $00000001;
  PXV_PagesViewDraw_BeforePages = $00000002;
  PXV_PagesViewDraw_AfterPages = $00000003;
  PXV_PagesViewDraw_Foreground = $00000004;

// Constants for enum PXV_DocHighlightType
type
  PXV_DocHighlightType = TOleEnum;
const
  PXV_DocHighlight_Unknown = $00000000;
  PXV_DocHighlight_Page = $00000001;
  PXV_DocHighlight_Bookmark = $00000002;
  _PXV_DocHighlight_Max_ = $00000003;

// Constants for enum PXV_ActionTriggerClass
type
  PXV_ActionTriggerClass = TOleEnum;
const
  PAEC_Unknown = $00000000;
  PAEC_App = $00000001;
  PAEC_Batch = $00000002;
  PAEC_Bookmark = $00000003;
  PAEC_Console = $00000004;
  PAEC_External = $00000005;
  PAEC_Doc = $00000006;
  PAEC_Field = $00000007;
  PAEC_Link = $00000008;
  PAEC_Page = $00000009;
  PAEC_Menu = $0000000A;
  PAEC_Annot = $0000000B;
  PAEC_Screen = $0000000C;
  PAEC_DynamicStamp = $0000000D;
  PAEC_XFA = $0000000E;
  PAEC_Last = $0000000F;

// Constants for enum PXV_ActionTriggerSubclass
type
  PXV_ActionTriggerSubclass = TOleEnum;
const
  PAESC_Keystroke = $00000000;
  PAESC_Validate = $00000001;
  PAESC_Focus = $00000002;
  PAESC_Blur = $00000003;
  PAESC_Format = $00000004;
  PAESC_Calculate = $00000005;
  PAESC_MouseUp = $00000006;
  PAESC_MouseDown = $00000007;
  PAESC_MouseEnter = $00000008;
  PAESC_MouseExit = $00000009;
  PAESC_WillPrint = $0000000A;
  PAESC_DidPrint = $0000000B;
  PAESC_WillSave = $0000000C;
  PAESC_DidSave = $0000000D;
  PAESC_Init = $0000000E;
  PAESC_Exec = $0000000F;
  PAESC_Open = $00000010;
  PAESC_WillClose = $00000011;
  PAESC_Close = $00000012;
  PAESC_InView = $00000013;
  PAESC_OutView = $00000014;
  PAESC_Last = $00000015;

// Constants for enum PXV_StdFolderID
type
  PXV_StdFolderID = TOleEnum;
const
  PXV_StdFolder_Root = $00000000;
  PXV_StdFolder_Preferences = $00000001;
  PXV_StdFolder_BatchSequences = $00000002;
  PXV_StdFolder_Documents = $00000003;
  PXV_StdFolder_JavaScripts = $00000004;
  PXV_StdFolder_Stamps = $00000005;
  PXV_StdFolder_Dictionaries = $00000006;
  PXV_StdFolder_Languages = $00000007;
  PXV_StdFolder_Themes = $00000008;
  PXV_StdFolder_Plugins = $00000009;
  PXV_StdFolder_Help = $0000000A;
  PXV_StdFolder_Temp = $0000000B;
  PXV_StdFolder_Resource = $0000000C;
  PXV_StdFolder_Update = $0000000D;
  PXV_StdFolder_XMPCustomDlg = $0000000E;
  PXV_StdFolder_SearchProviderIcons = $0000000F;
  PXV_StdFolder_Security = $00000010;
  PXV_StdFolder_PortfolioNavigators = $00000011;
  PXV_StdFolder_Presets = $00000012;
  PXV_StdFolder_PluginsData = $00000013;
  PXV_StdFolder_OCRLanguages = $00000014;
  PXV_StdFolder_Snippets = $00000015;
  _PXV_StdFolder_Max_ = $00000016;

// Constants for enum PXV_FmtCheckResult
type
  PXV_FmtCheckResult = TOleEnum;
const
  FmtCheckRes_Unknown = $00000000;
  FmtCheckRes_OK = $00000001;
  FmtCheckRes_Broken = $00000002;
  FmtCheckRes_CanTry = $00000003;

// Constants for enum PXV_AppPrefsChanges
type
  PXV_AppPrefsChanges = TOleEnum;
const
  PXV_AppPrefsChange_Common = $00000000;
  PXV_AppPrefsChange_ColorMan = $00000001;
  PXV_AppPrefsChange_Performance = $00000002;
  PXV_AppPrefsChange_Accessibility = $00000003;
  PXV_AppPrefsChange_Forms = $00000004;
  PXV_AppPrefsChange_PageDisplay = $00000005;
  PXV_AppPrefsChange_PageRendering = $00000006;
  PXV_AppPrefsChange_Measurement = $00000007;
  PXV_AppPrefsChange_TextEditor = $00000008;
  PXV_AppPrefsChange_Documents = $00000009;
  PXV_AppPrefsChange_Registration = $0000000A;
  PXV_AppPrefsChange_Commenting = $0000000B;
  PXV_AppPrefsChange_DetectTextLinks = $0000000C;
  PXV_AppPrefsChange_CopyPageText = $0000000D;
  PXV_AppPrefsChange_Identity = $0000000E;
  PXV_AppPrefsChange_FullScreen = $0000000F;
  PXV_AppPrefsChange_Update = $00000010;
  PXV_AppPrefsChange_Security = $00000011;
  PXV_AppPrefsChange_CustomUI = $00000012;
  PXV_AppPrefsChange_JavaScript = $00000013;
  PXV_AppPrefsChange_UILang = $00000014;
  PXV_AppPrefsChange_EMailSettings = $00000015;
  PXV_AppPrefsChange_InfoBar = $00000016;
  PXV_AppPrefsChange_Snapshot = $00000017;
  _PXV_AppPrefsChange_Max_ = $00000018;

// Constants for enum MeasureUnit
type
  MeasureUnit = TOleEnum;
const
  Unit_pt = $00000000;
  Unit_in = $00000001;
  Unit_cm = $00000002;
  Unit_mm = $00000003;
  Unit_pc = $00000004;
  _Unit_max_ = $00000005;

// Constants for enum PXV_PaperType
type
  PXV_PaperType = TOleEnum;
const
  PaperType_Undefined = $FFFFFFFF;
  PaperType_Document = $00000000;
  PaperType_Standard = $00000001;
  PaperType_Custom = $00000002;
  PaperType_BySource = $00000003;

// Constants for enum PXV_FileNamesProviderState
type
  PXV_FileNamesProviderState = TOleEnum;
const
  FNPS_Canceled = $FFFFFFFE;
  FNPS_Error = $FFFFFFFF;
  FNPS_Skipped = $00000000;
  FNPS_OK = $00000001;

// Constants for enum PXV_JSValueType
type
  PXV_JSValueType = TOleEnum;
const
  JSVT_Undefined = $FFFFFFFF;
  JSVT_Null = $00000000;
  JSVT_Bool = $00000001;
  JSVT_Number = $00000002;
  JSVT_String = $00000003;
  JSVT_Date = $00000004;
  JSVT_Object = $00000005;
  JSVT_Array = $00000006;

// Constants for enum PXV_OCRBlockType
type
  PXV_OCRBlockType = TOleEnum;
const
  PXV_OCRBlock_Text = $00000000;
  PXV_OCRBlock_Image = $00000001;
  PXV_OCRBlock_Table = $00000002;
  PXV_OCRBlock_Line = $00000003;

// Constants for enum PXV_OCRScriptDir
type
  PXV_OCRScriptDir = TOleEnum;
const
  PXV_OCRScriptDir_Neutral = $00000000;
  PXV_OCRScriptDir_LTR = $00000001;
  PXV_OCRScriptDir_RTL = $00000002;
  PXV_OCRScriptDir_Mix = $00000003;

// Constants for enum PXV_OCRTextAlignType
type
  PXV_OCRTextAlignType = TOleEnum;
const
  PXV_OCRTextAlign_Unknown = $00000000;
  PXV_OCRTextAlign_Left = $00000001;
  PXV_OCRTextAlign_Center = $00000002;
  PXV_OCRTextAlign_Right = $00000003;

// Constants for enum PXV_OCRBlockOrientation
type
  PXV_OCRBlockOrientation = TOleEnum;
const
  PXV_OCRBlockOrient_PageUp = $00000000;
  PXV_OCRBlockOrient_PageRight = $00000001;
  PXV_OCRBlockOrient_PageDown = $00000002;
  PXV_OCRBlockOrient_PageLeft = $00000003;

// Constants for enum PXV_AppSettingsOptions
type
  PXV_AppSettingsOptions = TOleEnum;
const
  PXV_AppSettingsOpt_None = $FFFFFFFF;
  PXV_AppSettingsOpt_Common = $00000000;
  PXV_AppSettingsOpt_Presets = $00000001;
  PXV_AppSettingsOpt_TrustedList = $00000002;
  PXV_AppSettingsOpt_Prompts = $00000003;
  PXV_AppSettingsOpt_UILang = $00000004;
  PXV_AppSettingsOpt_History = $00000005;
  PXV_AppSettingsOpt_MergeHistory = $00000006;
  PXV_AppSettingsOpt_Stamps = $00000007;
  PXV_AppSettingsOpt_DSATemplates = $00000008;
  PXV_AppSettingsOpt_PluginsData = $00000009;
  _PXV_AppSettingsOpt_Count_ = $0000000A;

// Constants for enum PXV_GoToSearchResultDir
type
  PXV_GoToSearchResultDir = TOleEnum;
const
  PXV_GoToSearchResult_First = $00000000;
  PXV_GoToSearchResult_Last = $00000001;
  PXV_GoToSearchResult_Next = $00000002;
  PXV_GoToSearchResult_Prev = $00000003;
  PXV_GoToSearchResult_Selected = $00000004;

// Constants for enum PXV_DocCloseFlags
type
  PXV_DocCloseFlags = TOleEnum;
const
  PXV_DocClose_AllowUI = $00000001;
  PXV_DocClose_AllowCancel = $00000002;
  PXV_DocClose_AllowSilentSave = $00000004;
  PXV_DocClose_AllowAsync = $00000008;

// Constants for enum PXV_DocSaveFlags
type
  PXV_DocSaveFlags = TOleEnum;
const
  PXV_DocSave_AllowUI = $00000001;
  PXV_DocSave_Copy = $00000002;
  PXV_DocSave_SwitchToDest = $00000004;
  PXV_DocSave_NoErrorMsg = $00000008;
  PXV_DocSave_NoProgress = $00000010;
  PXV_DocSave_NativeOnly = $00000020;
  PXV_DocSave_Incremental = $00000080;
  PXV_DocSave_NonIncremental = $00000100;
  PXV_DocSave_NoOverwritePrompt = $00000200;
  PXV_DocSave_SkipDocInfoAndXMP = $00000400;
  PXV_DocSave_RemoveRestriction = $00000800;

// Constants for enum PXV_DocContentChangesFlags
type
  PXV_DocContentChangesFlags = TOleEnum;
const
  DCCF_Deleted = $00000001;
  DCCF_Transformed = $00000002;
  DCCF_NewProps = $00000004;
  DCCF_Added = $00000008;
  DCCF_Reordered = $00000010;
  DCCF_Empty = $00000020;
  DCCF_New = $00008000;

// Constants for enum PXV_PluginFeatureFlag
type
  PXV_PluginFeatureFlag = TOleEnum;
const
  PFF_HasPreferences = $00000001;
  PFF_HasAdditionalData = $00000002;

// Constants for enum PXV_ChangeDocPropsFlag
type
  PXV_ChangeDocPropsFlag = TOleEnum;
const
  CDPF_Title = $00000001;
  CDPF_Author = $00000002;
  CDPF_Subject = $00000004;
  CDPF_Keywords = $00000008;
  CDPF_Creator = $00000010;
  CDPF_Producer = $00000020;
  CDPF_CreatorTool = $00000040;
  CDPF_CreationDate = $00000080;
  CDPF_ModDate = $00000100;
  CDPF_MetaData = $00000200;
  CDPF_Custom = $00000400;
  CDPF_Trap = $00000800;
  CDPF_InfoMask = $00000FFF;
  CDPF_PageLayout = $00001000;
  CDPF_PageMode = $00002000;
  CDPF_NonFullPageMode = $00004000;
  CDPF_OpenDestination = $00008000;
  CDPF_BaseURL = $00010000;
  CDPF_Language = $00020000;
  CDPF_Direction = $00040000;
  CDPF_ViewFlags = $00080000;
  CDPF_PrintScaling = $00100000;
  CDPF_Duplex = $00200000;
  CDPF_PageBySize = $00400000;
  CDPF_PrintRange = $00800000;
  CDPF_NumCopies = $01000000;
  CDPF_Action_WC = $02000000;
  CDPF_Action_WS = $04000000;
  CDPF_Action_DS = $08000000;
  CDPF_Action_WP = $10000000;
  CDPF_Action_DP = $20000000;

// Constants for enum PXV_PresetItemStyleFlags
type
  PXV_PresetItemStyleFlags = TOleEnum;
const
  PresetItemStyle_ReadOnly = $00000001;
  PresetItemStyle_NoDelete = $00000002;
  PresetItemStyle_NoClone = $00000020;
  PresetItemStyle_Std = $00008000;

// Constants for enum PXV_PresetsListStyleFlags
type
  PXV_PresetsListStyleFlags = TOleEnum;
const
  PresetsListStyle_ShowDesc = $00000001;
  PresetsListStyle_ShowIcons = $00000002;
  PresetsListStyle_CanSaveCurrent = $00000004;
  PresetsListStyle_CanDeleteItems = $00000008;
  PresetsListStyle_CanManageItems = $00000010;
  PresetsListStyle_CanCloneItems = $00000020;
  PresetsListStyle_CanReorderItems = $00000040;
  PresetsListStyle_CanAddNewItem = $00000080;
  PresetsListStyle_CanImportItems = $00000100;
  PresetsListStyle_CanExportItems = $00000200;

// Constants for enum PXV_FormatMeasureFlags
type
  PXV_FormatMeasureFlags = TOleEnum;
const
  PXV_FormatMeasure_NoUnitName = $00000001;
  PXV_FormatMeasure_LongUnitName = $00000002;
  PXV_FormatMeasure_KeepZeroTrailing = $00000004;

// Constants for enum PXV_CreateFileErrDlgFlags
type
  PXV_CreateFileErrDlgFlags = TOleEnum;
const
  PXV_CreateFileErrDlg_NoSaveAs = $00000001;
  PXV_CreateFileErrDlg_NoSkip = $00000002;
  PXV_CreateFileErrDlg_NoRetry = $00000004;
  PXV_CreateFileErrDlg_SaveStyle = $00000008;

// Constants for enum PXV_SearchFlags
type
  PXV_SearchFlags = TOleEnum;
const
  PXV_SearchFlag_WholeWords = $00000001;
  PXV_SearchFlag_CaseSensitive = $00000002;
  PXV_SearchFlag_IgnoreDiacritics = $00000004;
  PXV_SearchFlag_IncludePageText = $00000010;
  PXV_SearchFlag_IncludeAnnotations = $00000020;
  PXV_SearchFlag_IncludeFormFields = $00000040;
  PXV_SearchFlag_IncludeBookmarks = $00000080;
  PXV_SearchFlag_IncludeAttachments = $00000100;
  PXV_SearchFlag_IncludeDocInfo = $00000200;
  PXV_SearchFlag_IncludeJPEGExif = $00000400;
  PXV_SearchFlag_IncludeDocXMP = $00000800;
  PXV_SearchFlag_IncludeExternalLinks = $00001000;
  PXV_SearchFlag_IncludeHiddenAnnots = $00002000;
  PXV_SearchFlag_IncludesMask = $0000FFF0;
  PXV_SearchFlag_GetDispText = $00010000;
  PXV_SearchFlag_GetContextBookmarks = $00020000;
  PXV_SearchFlag_GetTextQuads = $00040000;
  PXV_SearchFlag_PreEstimateFolder = $00800000;
  PXV_SearchFlag_LookInSubFolders = $80000000;

// Constants for enum PXV_SearchProximity
type
  PXV_SearchProximity = TOleEnum;
const
  PXV_SearchProximity_Adjacent = $00000000;
  PXV_SearchProximity_SamePara = $00000001;
  PXV_SearchProximity_SamePage = $00000002;
  PXV_SearchProximity_SameDoc = $00000003;

// Constants for enum PXV_SearchPtrChunkType
type
  PXV_SearchPtrChunkType = TOleEnum;
const
  PXV_SearchPtrChunk_Document = $00000000;
  PXV_SearchPtrChunk_Page = $00000001;
  PXV_SearchPtrChunk_Bookmark = $00000002;
  PXV_SearchPtrChunk_Annotation = $00000003;
  PXV_SearchPtrChunk_DocInfo = $00000004;
  PXV_SearchPtrChunk_Attachment = $00000005;
  PXV_SearchPtrChunk_XMP = $00000010;
  PXV_SearchPtrChunk_JPEGExif = $00000020;
  PXV_SearchPtrChunk_Object = $00000030;
  _PXV_SearchPtrChunk_Max_ = $00000031;

// Constants for enum PXV_FmtConverterFlags
type
  PXV_FmtConverterFlags = TOleEnum;
const
  FmtConverter_HasGlobalPrefs = $00000001;
  FmtConverter_Multipaged = $00000002;
  FmtConverter_Raster = $00000004;
  FmtConverter_Hidden = $00000008;
  FmtConverter_SuppPrefsPerSrc = $00000010;
  FmtConverter_Excluded = $00000020;
  FmtConverter_Image = $00000080;
  FmtConverter_PDF = $00000100;
  FmtConverter_Imp_SuppAppendToDoc = $00001000;
  FmtConverter_Exp_SuppPagesRange = $00100000;
  FmtConverter_Exp_SuppPageRect = $00200000;

// Constants for enum PXV_PluginResetSettingsFlags
type
  PXV_PluginResetSettingsFlags = TOleEnum;
const
  PRSF_KeepOptions = $00000001;
  PRSF_KeepPresets = $00000002;

// Constants for enum PXV_ResetCmdCustomizationFlags
type
  PXV_ResetCmdCustomizationFlags = TOleEnum;
const
  PXV_ResetCmdCustomization_KeepUserCmds = $00000001;
  PXV_ResetCmdCustomization_KeepStdCmds = $00000002;
  PXV_ResetCmdCustomization_KeepMainLayout = $00000004;
  PXV_ResetCmdCustomization_KeepMainBars = $00000008;
  PXV_ResetCmdCustomization_KeepDocLayout = $00000010;
  PXV_ResetCmdCustomization_KeepDocBars = $00000020;
  PXV_ResetCmdCustomization_KeepUserBars = $00000040;

// Constants for enum PXV_VisibleCmdPanes
type
  PXV_VisibleCmdPanes = TOleEnum;
const
  PXV_VisibleCmdPanes_MainView = $00000001;
  PXV_VisibleCmdPanes_PagesView = $00000002;
  PXV_VisibleCmdPanes_All = $00000003;

// Constants for enum PXV_VisibleCmdBars
type
  PXV_VisibleCmdBars = TOleEnum;
const
  PXV_VisibleCmdBars_MainView = $00000001;
  PXV_VisibleCmdBars_PagesView = $00000002;
  PXV_VisibleCmdBars_All = $00000003;

// Constants for enum PXV_CreateMainFrmFlags
type
  PXV_CreateMainFrmFlags = TOleEnum;
const
  PXV_CreateMainFrm_Hidden = $00000001;
  PXV_CreateMainFrm_Popup = $00000002;

// Constants for enum PXV_PagesLayoutManagerFlags
type
  PXV_PagesLayoutManagerFlags = TOleEnum;
const
  PLMF_Horizontal = $00000001;
  PLMF_SupportFloatZoom = $00000002;

// Constants for enum PXV_PagesLayoutManagerAppFlags
type
  PXV_PagesLayoutManagerAppFlags = TOleEnum;
const
  PLMAF_NoShadows = $00000001;
  PLMAF_NoPageGaps = $00000002;
  PLMAF_NoFloatZoom = $00000004;
  PLMAF_RTL = $00000008;

// Constants for enum PXV_ActionHandlerFlags
type
  PXV_ActionHandlerFlags = TOleEnum;
const
  AHF_Hidden = $00000001;

// Constants for enum PXV_ActionHandlerEditFlags
type
  PXV_ActionHandlerEditFlags = TOleEnum;
const
  AHEF_ReadOnly = $00000001;
  AHEF_NewAction = $00000002;

// Constants for enum PXV_AnnotStateModelFlag
type
  PXV_AnnotStateModelFlag = TOleEnum;
const
  ASMF_BuiltIn = $00000001;
  ASMF_Hidden = $00000002;
  ASMF_History = $00000004;

// Constants for enum PXV_SnapType
type
  PXV_SnapType = TOleEnum;
const
  SnapType_Unknown = $00000000;
  SnapType_GuideV = $00000001;
  SnapType_GuideH = $00000002;
  SnapType_GridV = $00000003;
  SnapType_GridH = $00000004;
  SnapType_Obj_EndPoint = $00000005;
  SnapType_Obj_Edge = $00000006;
  SnapType_Obj_MidPoint = $00000007;
  SnapType_Obj_Center = $00000008;
  SnapType_Obj_Intersect = $00000009;

// Constants for enum PXV_SnapFlag
type
  PXV_SnapFlag = TOleEnum;
const
  SnapFlag_GuideV = $00000002;
  SnapFlag_GuideH = $00000004;
  SnapFlag_GridV = $00000008;
  SnapFlag_GridH = $00000010;
  SnapFlag_Obj_EndPoint = $00000020;
  SnapFlag_Obj_Edge = $00000040;
  SnapFlag_Obj_MidPoint = $00000080;
  SnapFlag_Obj_Center = $00000100;
  SnapFlag_Obj_Intersect = $00000200;
  SnapFlag_Orto = $00010000;
  SnapFlag_GridNodesOnly = $00020000;
  SnapFlag_AnnotsOnly = $00040000;
  SnapFlag_SkipAnnots = $00080000;
  SnapFlag_OuterSide = $00100000;
  SnapFlag_Guide_Modes = $00000006;
  SnapFlag_Grid_Modes = $00000018;
  SnapFlag_Obj_Modes = $001003E0;
  SnapFlag_Guide_Mask = $00000006;
  SnapFlag_Grid_Mask = $00020018;
  SnapFlag_Obj_Mask = $001403E0;
  SnapFlag_UseMask = $001003FE;
  SnapFlag_Res_NewX = $40000000;
  SnapFlag_Res_NewY = $80000000;
  SnapFlag_Res_NewXY = $C0000000;

// Constants for enum PXV_InvalidatePageFlags
type
  PXV_InvalidatePageFlags = TOleEnum;
const
  PXV_InvalidatePage_KeepContentLayer = $00000001;
  PXV_InvalidatePage_KeepAnnotsLayer = $00000002;

// Constants for enum PXV_DocHighlightFlags
type
  PXV_DocHighlightFlags = TOleEnum;
const
  PXV_DocHighlightFlag_ShareBrush = $00000001;
  PXV_DocHighlightFlag_SharePen = $00000002;
  PXV_DocHighlightFlag_MakeVisible = $00000004;

// Constants for enum PXV_ActivateToolFlags
type
  PXV_ActivateToolFlags = TOleEnum;
const
  PXV_ActivateTool_ReActivating = $00000001;

// Constants for enum PXV_PagesLayoutRegionFlags
type
  PXV_PagesLayoutRegionFlags = TOleEnum;
const
  PXV_PagesLayoutRegion_FirstInRow = $00000001;

// Constants for enum PXV_PagesLayoutChangesFlags
type
  PXV_PagesLayoutChangesFlags = TOleEnum;
const
  PXV_PagesLayoutChange_NewZoom = $00000001;
  PXV_PagesLayoutChange_NewCurPage = $00000002;
  PXV_PagesLayoutChange_NewCurPos = $00000004;
  PXV_PagesLayoutChange_LayoutModeChanged = $00000008;
  PXV_PagesLayoutChange_NeedRecalcMask = $000000FF;
  PXV_PagesLayoutChange_NewScrollSize = $00000100;
  PXV_PagesLayoutChange_NewScrollPos = $00000200;
  PXV_PagesLayoutChange_NeedInvalidate = $00000400;
  PXV_PagesLayoutChange_Changed = $00000800;

// Constants for enum PXV_GotoDestinationFlags
type
  PXV_GotoDestinationFlags = TOleEnum;
const
  GotoDestFlag_IgnoreZoomChange = $00000001;

// Constants for enum PXV_AnnotHitTest
type
  PXV_AnnotHitTest = TOleEnum;
const
  AHT_None = $00000000;
  AHT_LT = $FFFFFFF4;
  AHT_MT = $FFFFFFF5;
  AHT_RT = $FFFFFFF6;
  AHT_MR = $FFFFFFF7;
  AHT_RB = $FFFFFFF8;
  AHT_MB = $FFFFFFF9;
  AHT_LB = $FFFFFFFA;
  AHT_ML = $FFFFFFFB;
  AHT_Rotate = $FFFFFFFC;
  AHT_Inside = $FFFFFFFD;
  AHT_Center = $FFFFFFFE;
  AHT_Edge = $FFFFFFFF;
  AHT_FirstCP = $00000001;

// Constants for enum PXV_TimerFlags
type
  PXV_TimerFlags = TOleEnum;
const
  PXV_TimerFlag_Once = $00000001;
  PXV_TimerFlag_MM = $00000002;

// Constants for enum PXV_CommentStylesChangesFlags
type
  PXV_CommentStylesChangesFlags = TOleEnum;
const
  PXV_CommentStyles_Deleted = $00000001;
  PXV_CommentStyles_Added = $00000002;
  PXV_CommentStyles_NewProps = $00000004;
  PXV_CommentStyles_NewIcons = $00000008;
  PXV_CommentStyles_Current = $00000010;
  PXV_CommentStyles_Custom = $00000020;
  PXV_CommentStyles_NewName = $00000040;
  PXV_CommentStyles_NewDesc = $00000080;

// Constants for enum PXV_InstStateFlags
type
  PXV_InstStateFlags = TOleEnum;
const
  PXV_InstState_Initializing = $00000001;
  PXV_InstState_Initialized = $00000002;
  PXV_InstState_ShuttingDown = $00000004;
  PXV_InstState_ShutDown = $00000008;
  PXV_InstState_LoadingPlugins = $00000010;
  PXV_InstState_PluginsLoaded = $00000020;
  PXV_InstState_RegisteringExts = $00000040;
  PXV_InstState_ExtsRegistered = $00000080;
  PXV_InstState_PluginsInitializing = $00000100;
  PXV_InstState_PluginsInitialized = $00000200;
  PXV_InstState_SettingsExporting = $00001000;

// Constants for enum PXV_AppTypeFlags
type
  PXV_AppTypeFlags = TOleEnum;
const
  PXV_AppType_Editor = $00000000;
  PXV_AppType_BrowserPlugin = $00000001;
  PXV_AppType_SDK = $00000002;
  PXV_AppType_Tools = $00000003;
  PXV_AppType_TypeMask = $0000000F;
  PXV_AppType_Installed = $00000010;
  PXV_AppType_Portable = $00000020;
  PXV_AppType_IEPlugin = $00000080;

// Constants for enum PXV_PagesPreviewStyleFlags
type
  PXV_PagesPreviewStyleFlags = TOleEnum;
const
  PXV_PagesPreviewStyle_TransparentContent = $00000100;
  PXV_PagesPreviewStyle_NoScrollBars = $00000200;
  PXV_PagesPreviewStyle_NoPagesBackground = $00000400;
  PXV_PagesPreviewStyle_NoPagesShadow = $00000800;
  PXV_PagesPreviewStyle_NoEmptyTip = $00001000;
  PXV_PagesPreviewStyle_NoPageSelMode = $00002000;
  PXV_PagesPreviewStyle_BigPageShadow = $00004000;
  PXV_PagesPreviewStyle_InteractiveLayout = $00008000;
  PXV_PagesPreviewStyle_NoZoomChange = $00010000;
  PXV_PagesPreviewStyle_NoLayoutRowChange = $00020000;
  PXV_PagesPreviewStyle_NoHandTool = $00040000;
  PXV_PagesPreviewStyle_NonInertialHand = $00080000;
  PXV_PagesPreviewStyle_NoScrollThroughPagesInSP = $00100000;

// Constants for enum PXV_FileNamesProviderFlags
type
  PXV_FileNamesProviderFlags = TOleEnum;
const
  FNPF_SkipAllOverwrites = $00000001;
  FNPF_OverwriteAll = $00000002;
  FNPF_SingleFile = $00000004;
  FNPF_NoUI = $00000008;
  FNPF_NewFileGenerated = $00000010;
  FNPF_AllowAutoNumbering = $00000020;
  FNPF_AskForDestFolder = $00000040;
  FNPF_UseSrcFolderAsDest = $00000080;

// Constants for enum PXV_FmtConvertFlags
type
  PXV_FmtConvertFlags = TOleEnum;
const
  FmtConvert_NoUI = $00000001;
  FmtConvert_ForPreview = $00000002;

// Constants for enum PXV_FmtCheckFlags
type
  PXV_FmtCheckFlags = TOleEnum;
const
  FmtCheck_NoUI = $00000001;

// Constants for enum PXV_OCRExtensionFeatures
type
  PXV_OCRExtensionFeatures = TOleEnum;
const
  PXV_OCRFeature_CanSetupTaskParams = $00000001;

// Constants for enum PXV_OCRSymbolFlags
type
  PXV_OCRSymbolFlags = TOleEnum;
const
  PXV_OCRSymbol_Italic = $00000001;
  PXV_OCRSymbol_Bold = $00000002;
  PXV_OCRSymbol_Underline = $00000004;
  PXV_OCRSymbol_Serif = $00000008;
  PXV_OCRSymbol_Monospace = $00000010;
  PXV_OCRSymbol_SmallCaps = $00000020;
  PXV_OCRSymbol_Superscript = $00000040;
  PXV_OCRSymbol_Subscript = $00000080;
  PXV_OCRSymbol_Dropcap = $00000100;

// Constants for enum PXV_OCRParaFlags
type
  PXV_OCRParaFlags = TOleEnum;
const
  PXV_OCRPara_Subsequent = $00000001;
  PXV_OCRPara_ListItem = $00000002;

// Constants for enum PXV_DocCollectionViewType
type
  PXV_DocCollectionViewType = TOleEnum;
const
  PXV_DocCollectionViewType_D = $00000001;
  PXV_DocCollectionViewType_T = $00000002;
  PXV_DocCollectionViewType_H = $00000004;
  PXV_DocCollectionViewType_C = $00000008;

// Constants for enum PXV_DocCollectionColorTypes
type
  PXV_DocCollectionColorTypes = TOleEnum;
const
  PXV_DocCollectionColorType_Back = $00000000;
  PXV_DocCollectionColorType_CardBack = $00000001;
  PXV_DocCollectionColorType_CardBorder = $00000002;
  PXV_DocCollectionColorType_PrimText = $00000003;
  PXV_DocCollectionColorType_SecText = $00000004;
  PXV_DocCollectionColorType_Count = $00000005;

// Constants for enum PXV_CommentStyleIconSizes
type
  PXV_CommentStyleIconSizes = TOleEnum;
const
  PXV_CommentStyleIcon_Small = $00000001;
  PXV_CommentStyleIcon_Medium = $00000002;
  PXV_CommentStyleIcon_Large = $00000004;
  PXV_CommentStyleIcon_ExtraLarge = $00000008;
  PXV_CommentStyleIcon_Thumbnail = $00000010;
  _PXV_CommentStyleIcon_ValidMask_ = $0000001F;

// Constants for enum PXV_ControlDispIDs
type
  PXV_ControlDispIDs = TOleEnum;
const
  DISPID_Src = $00000064;
  DISPID_VisibleCmdPanes = $00000065;
  DISPID_VisibleScrollbars = $00000066;
  DISPID_AllowedShortcuts = $00000067;
  DISPID_LockedCmdBars = $00000068;
  DISPID_LockedCmdPanes = $00000069;
  DISPID_Inst = $0000006A;
  DISPID_Frame = $0000006B;
  DISPID_VisibleCmdBars = $0000006C;

// Constants for enum PXV_DocInfoSpanFlags
type
  PXV_DocInfoSpanFlags = TOleEnum;
const
  PXV_DocInfoSpan_Minimized = $00000001;

// Constants for enum PXV_DocInfoBtnFlags
type
  PXV_DocInfoBtnFlags = TOleEnum;
const
  PXV_DocInfoBtn_LikeCommand = $00000001;
  PXV_DocInfoBtn_WholePopup = $00000002;

// Constants for enum PXV_DocInfoHighlightFlags
type
  PXV_DocInfoHighlightFlags = TOleEnum;
const
  PXV_DocInfoHighlight_AutoRepeatOnlyWhenMin = $00000001;

// Constants for enum PXV_ExpandFileFilterAliasFlags
type
  PXV_ExpandFileFilterAliasFlags = TOleEnum;
const
  EFFAF_Full = $00000001;
  EFFAF_NoComplexItem = $00000002;
  EFFAF_AliasesOnly = $00000004;

// Constants for enum PXV_PageTransitionOperMask
type
  PXV_PageTransitionOperMask = TOleEnum;
const
  PXV_PTO_TransitionType = $00000001;
  PXV_PTO_TransitionDuration = $00000002;
  PXV_PTO_PageDuration = $00000004;
  PXV_PTO_All = $00000007;

// Constants for enum PXV_JSCodeSnippetFlag
type
  PXV_JSCodeSnippetFlag = TOleEnum;
const
  JSCSF_BuiltIn = $00000001;
  JSCSF_PublicMask = $00FFFFFF;
  JSCSF_New = $01000000;
  JSCSF_Modified = $02000000;
  JSCSF_Deleted = $04000000;

// Constants for enum PXV_PrivateDataStorageFlags
type
  PXV_PrivateDataStorageFlags = TOleEnum;
const
  PXV_PrivateDataStorage_NoUI = $00000001;

// Constants for enum PXV_OpModifyAnnotMaskFlags
type
  PXV_OpModifyAnnotMaskFlags = TOleEnum;
const
  OpModifyAnnot_BorderWidth = $00000001;
  OpModifyAnnot_BorderStyle = $00000002;
  OpModifyAnnot_Border = $00000003;
  OpModifyAnnot_SColor = $00000008;
  OpModifyAnnot_FColor = $00000010;
  OpModifyAnnot_NoteIcon = $00000020;
  OpModifyAnnot_Opacity = $00000040;
  OpModifyAnnot_Author = $00000080;
  OpModifyAnnot_Subject = $00000100;
  OpModifyAnnot_Text = $00000200;
  OpModifyAnnot_RichText = $00000400;
  OpModifyAnnot_LS = $00000800;
  OpModifyAnnot_LE = $00001000;
  OpModifyAnnot_LLO = $00002000;
  OpModifyAnnot_LLL = $00004000;
  OpModifyAnnot_LLE = $00008000;
  OpModifyAnnot_LCV = $00010000;
  OpModifyAnnot_LCO = $00020000;
  OpModifyAnnot_LCI = $00040000;
  OpModifyAnnot_HighlightMode = $00080000;
  OpModifyAnnot_Actions = $00100000;
  OpModifyAnnot_BlendMode = $00200000;
  OpModifyAnnot_Flags = $00400000;
  OpModifyAnnot_UnderlineStyle = $00800000;
  OpModifyAnnot_Name = $01000000;
  OpModifyAnnot_ModDate = $02000000;
  OpModifyAnnot_Rotation = $04000000;
  OpModifyAnnot_Measure = $08000000;
  OpModifyAnnot_DefStyle = $10000000;
  OpModifyAnnot_Layer = $20000000;
  OpModifyAnnot_LineLength = $40000000;
  OpModifyAnnot_Opened = $80000000;

// Constants for enum PXV_OpModifyAnnotMaskExFlags
type
  PXV_OpModifyAnnotMaskExFlags = TOleEnum;
const
  OpModifyAnnotEx_OFC = $00000001;
  OpModifyAnnotEx_OT = $00000002;
  OpModifyAnnotEx_ORT = $00000004;
  OpModifyAnnotEx_DefFont = $00000010;
  OpModifyAnnotEx_DefFontSize = $00000020;
  OpModifyAnnotEx_DefTextColor = $00000040;
  OpModifyAnnotEx_DefTextAlign = $00000080;
  OpModifyAnnotEx_LSS = $00000100;
  OpModifyAnnotEx_LES = $00000200;
  OpModifyAnnotEx_ContentRotation = $00000400;

// Constants for enum PXV_OpModifyFieldMaskFlags
type
  PXV_OpModifyFieldMaskFlags = TOleEnum;
const
  OpModifyField_MaxLen = $00000008;
  OpModifyField_TopIndex = $00000010;
  OpModifyField_OptList = $00000040;
  OpModifyField_RichValue = $00000080;
  OpModifyField_Value = $00000100;
  OpModifyField_DefValue = $00000200;
  OpModifyField_DateTimeValue = $00000400;
  OpModifyField_SelectedIndices = $00000800;
  OpModifyField_FlagsMask = $00000FFF;

// Constants for enum UIX_InsertCmdItemFlags
type
  UIX_InsertCmdItemFlags = TOleEnum;
const
  UIX_InsertCmdItem_InsertAfter = $00000001;
  UIX_InsertCmdItem_EnsureSepBefore = $00000002;
  UIX_InsertCmdItem_EnsureSepAfter = $00000004;
  UIX_InsertCmdItem_CopySubMenu = $00000008;

// Constants for enum PXV_ShowOpenSaveDialogFlags
type
  PXV_ShowOpenSaveDialogFlags = TOleEnum;
const
  PXV_ShowOpenSaveDialogFlags_None = $FFFFFFFF;
  PXV_ShowOpenSaveDialogFlags_Save = $00000000;
  PXV_ShowOpenSaveDialogFlags_Open = $00000001;
  PXV_ShowOpenSaveDialogFlags_Folder = $00000002;
  PXV_ShowOpenSaveDialogFlags_Count_ = $00000003;

type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  IAUX_Inst = interface;
  IAUX_InstDisp = dispinterface;
  ICab = interface;
  ICabDisp = dispinterface;
  ICabNode = interface;
  ICabNodeDisp = dispinterface;
  ISequentialStream = interface;
  IStream = interface;
  IMemBlock = interface;
  IBitSet = interface;
  IBitSetDisp = dispinterface;
  IColor = interface;
  IColorDisp = dispinterface;
  IOperationList = interface;
  IOperationListDisp = dispinterface;
  IOperation = interface;
  IOperationDisp = dispinterface;
  IOpInputItem = interface;
  IOpInputItemDisp = dispinterface;
  IOperationHistory = interface;
  IOperationHistoryDisp = dispinterface;
  IOperationHistoryItem = interface;
  IOperationHistoryItemDisp = dispinterface;
  IOperationHistoryChangesMon = interface;
  IObjCollection = interface;
  IObjCollectionDisp = dispinterface;
  IWords = interface;
  IWordsDisp = dispinterface;
  IUniqueStrings = interface;
  IUniqueStringsDisp = dispinterface;
  IProgressMon = interface;
  IFlag = interface;
  IFlagDisp = dispinterface;
  IString = interface;
  IStringDisp = dispinterface;
  INumArray = interface;
  INumArrayDisp = dispinterface;
  IRangeHelper = interface;
  IRangeHelperDisp = dispinterface;
  IDblArray = interface;
  IDblArrayDisp = dispinterface;
  ILogServer = interface;
  ILogListener = interface;
  ILogMsg = interface;
  IMathHelper = interface;
  IScopeTable = interface;
  IScopeTableDisp = dispinterface;
  IFastScopeTable = interface;
  IFastScopeTableDisp = dispinterface;
  IEventsRegistry = interface;
  IEventsRegistryDisp = dispinterface;
  IEventCreator = interface;
  IEventCreatorDisp = dispinterface;
  IEvent = interface;
  IEventDisp = dispinterface;
  IEventHandler = interface;
  IEventHandlerDisp = dispinterface;
  IEventServer = interface;
  IEventServerDisp = dispinterface;
  ISpellCheckCallbacks = interface;
  IOpOutputCallback = interface;
  IAFS_Name = interface;
  IAFS_FileSys = interface;
  IAFS_FileSysDisp = dispinterface;
  IAFS_BindContext = interface;
  IAFS_BindPromptCallback = interface;
  IAFS_EnumFolder = interface;
  IAFS_EnumFolderDisp = dispinterface;
  IAFS_FileInfo = interface;
  IAFS_FileInfoDisp = dispinterface;
  IAFS_EnumFolderItem = interface;
  IAFS_EnumFolderItemDisp = dispinterface;
  IAFS_File = interface;
  IAFS_NamesCollection = interface;
  IAFS_NamesCollectionDisp = dispinterface;
  IAFS_ProgressMon = interface;
  IAFS_AccountData = interface;
  IAFS_AccountDataDisp = dispinterface;
  IAFS_Inst = interface;
  IAFS_InstDisp = dispinterface;
  IAFS_FileCachesMap = interface;
  IAFS_FileCacheEntry = interface;
  IAFS_FileCache = interface;
  IAFS_FileCacheCallbacks = interface;
  IAFS_DlgSettingsBtnCallbacks = interface;
  IAFS_DlgSettingsBtnCallbacksDisp = dispinterface;
  IIXC_Image = interface;
  IIXC_Page = interface;
  IIXC_MatrixFilterDefinition = interface;
  IIXC_ImageFmtParams = interface;
  IIXC_FormatInfo = interface;
  IIXC_Inst = interface;
  IPXS_PDFVariant = interface;
  IPXS_Document = interface;
  IPXS_pdfStreamCoder = interface;
  IPXS_pdfStringCoder = interface;
  IPXS_DecodeFilter = interface;
  IPXS_EncodeFiltersArray = interface;
  IPXS_EncodeFilter = interface;
  IPXS_Inst = interface;
  IPXS_InstDisp = dispinterface;
  IPXS_StreamFiltersFactory = interface;
  ICabDataProvider = interface;
  IPXC_AcroForm = interface;
  IPXC_AcroFormDisp = dispinterface;
  IPXC_Document = interface;
  IPXC_DocumentDisp = dispinterface;
  IPXC_Pages = interface;
  IPXC_Page = interface;
  IPXC_Content = interface;
  IPXC_ContentItems = interface;
  IPXC_ContentItem = interface;
  IPXC_GState = interface;
  IPXC_CState = interface;
  IPXC_Color = interface;
  IPXC_ColorSpace = interface;
  IPXC_TState = interface;
  IPXC_Font = interface;
  IPXC_DocFontsInfo = interface;
  IPXC_CMap = interface;
  IPXC_EState = interface;
  IPXC_SoftMask = interface;
  IPXC_Function = interface;
  IPXC_XForm = interface;
  IPXC_XGroup = interface;
  IPXC_TransferFunction = interface;
  IPXC_Image = interface;
  IPXC_GetPageTextOptions = interface;
  IPXC_PageText = interface;
  IPXC_TextBlockInfo = interface;
  IPXC_QuadsF = interface;
  IPXC_QuadsFDisp = dispinterface;
  IPXC_Annotation = interface;
  IPXC_ActionsList = interface;
  IPXC_Action = interface;
  IPXC_RemapCallback = interface;
  IPXC_AnnotData = interface;
  IPXC_AnnotHandler = interface;
  IPXC_OCContext = interface;
  IPXC_AnnotsVisibilityCallback = interface;
  IPXC_CIVisibilityCallback = interface;
  IPXC_OCG = interface;
  IPXC_OCMD = interface;
  IPXC_FormField = interface;
  IPXC_FormFieldDisp = dispinterface;
  IPXC_AnnotsList = interface;
  IPXC_AnnotsListDisp = dispinterface;
  IPXC_PageRenderParams = interface;
  IPXC_RedactInfo = interface;
  IPXC_RedactEntry = interface;
  IPXC_RedactOverlayParams = interface;
  IPXC_UndoRedoData = interface;
  IPXC_Transition = interface;
  IPXC_PagesOverlayInfo = interface;
  IPXC_Bookmark = interface;
  IPXC_DocumentProps = interface;
  IPXC_DocumentInfo = interface;
  IPXC_XMPMetadata = interface;
  IPXC_Articles = interface;
  IPXC_Article = interface;
  IPXC_FileSpec = interface;
  IPXC_EmbeddedFileStream = interface;
  IPXC_Collection = interface;
  IPXC_CollectionFolder = interface;
  IPXC_CollectionSchema = interface;
  IPXC_NameTree = interface;
  IPXC_SecurityHandler = interface;
  IPXS_CryptInterface = interface;
  IPXC_SecurityPolicy = interface;
  IPXC_WatermarkParams = interface;
  IPXC_PageContentCallback = interface;
  IPXC_ContentCreator = interface;
  IPXC_CharFormat = interface;
  IPXC_ParaFormat = interface;
  IPXC_TextTabStops = interface;
  IPXC_TabStopFormat = interface;
  IPXC_DrawTextCallbacks = interface;
  IPXC_Rects = interface;
  IPXC_RectsDisp = dispinterface;
  IPXC_Pattern = interface;
  IPXC_Shading = interface;
  IPXC_FontInfoCallback = interface;
  IPXC_DocSrcInfo = interface;
  IPXC_DocSrcInfoDisp = dispinterface;
  IPXC_GradientStops = interface;
  IPXC_HeaderAndFooterParams = interface;
  IPXC_BackgroundParams = interface;
  IPXC_BatesNumberingParams = interface;
  IPXC_FontEnumCallback = interface;
  IPXC_DocAuthCallback = interface;
  IPXC_DocAuthCallbackDisp = dispinterface;
  IPXC_Action_Goto = interface;
  IPXC_GoToETargetPath = interface;
  IPXC_GoToETargetItem = interface;
  IPXC_Action_Launch = interface;
  IPXC_Action_Thread = interface;
  IPXC_Action_URI = interface;
  IPXC_Action_Sound = interface;
  IPXC_Sound = interface;
  IPXC_Action_Movie = interface;
  IPXC_Action_Hide = interface;
  IPXC_Action_Named = interface;
  IPXC_Action_SetOCGState = interface;
  IPXC_Action_Rendition = interface;
  IPXC_Action_Transition = interface;
  IPXC_Action_Goto3DView = interface;
  IPXC_Action_JavaScript = interface;
  IPXC_Action_RichMediaExecute = interface;
  IPXC_Action_SubmitForm = interface;
  IPXC_Action_ResetForm = interface;
  IPXC_Action_ImportForm = interface;
  IPXC_ActionHandler = interface;
  IPXC_AnnotData_Markup = interface;
  IPXC_AnnotData_Caret = interface;
  IPXC_AnnotData_FileAttachment = interface;
  IPXC_AnnotData_FreeText = interface;
  IPXC_AnnotData_Ink = interface;
  IPXC_PolyPolygonSrcF = interface;
  IPXC_PolyPolygonSrcFDisp = dispinterface;
  IPXC_PolygonSrcF = interface;
  IPXC_PolygonSrcFDisp = dispinterface;
  IPXC_AnnotData_Line = interface;
  IPXC_Measure = interface;
  IPXC_AnnotData_Link = interface;
  IPXC_AnnotData_Poly = interface;
  IPXC_AnnotData_Popup = interface;
  IPXC_AnnotData_Redaction = interface;
  IPXC_AnnotData_Sound = interface;
  IPXC_AnnotData_Stamp = interface;
  IPXC_AnnotData_SquareCircle = interface;
  IPXC_AnnotData_Text = interface;
  IPXC_AnnotData_TextMarkup = interface;
  IPXC_AnnotData_Watermark = interface;
  IPXC_AnnotData_Widget = interface;
  IPXC_FileSpecHandler = interface;
  IPXC_MeasureRL = interface;
  IPXC_NumberFormatArray = interface;
  IPXC_NumberFormatItem = interface;
  IPXC_NumberTree = interface;
  IPXC_OCConfig = interface;
  IPXC_OCOrderElement = interface;
  IPXC_PageLabel = interface;
  IPXC_RectsF = interface;
  IPXC_RectsFDisp = dispinterface;
  IPXC_StampInfo = interface;
  IPXC_StampsCollection = interface;
  IPXC_StampsManager = interface;
  IPXC_Inst = interface;
  IPXC_InstDisp = dispinterface;
  IPXC_ColorManager = interface;
  IPXC_ColorSettings = interface;
  IUIX_Event = interface;
  IUIX_EventDisp = dispinterface;
  IUIX_Obj = interface;
  IUIX_ObjDisp = dispinterface;
  IUIX_ThemeClass = interface;
  IUIX_Theme = interface;
  IUIX_ThemeDisp = dispinterface;
  IUIX_Font = interface;
  IUIX_Icon = interface;
  IUIX_ImageData = interface;
  IUIX_ThemeShape = interface;
  IUIX_ThemeColor = interface;
  IUIX_Sound = interface;
  IUIX_RenderContext = interface;
  IUIX_RenderContextDisp = dispinterface;
  IUIX_ColorsTable = interface;
  IUIX_DrawStringTags = interface;
  IUIX_DrawStringCache = interface;
  IUIX_Brush = interface;
  IUIX_Pen = interface;
  IUIX_PolyPolygonSrc = interface;
  IUIX_PolyPolygonSrcDisp = dispinterface;
  IUIX_PolygonSrc = interface;
  IUIX_PolygonSrcDisp = dispinterface;
  IUIX_DrawStringHighlight = interface;
  IUIX_ThemeClassPartState = interface;
  IUIX_ThemeBkgnd = interface;
  IUIX_ThemeClassPart = interface;
  IUIX_ThreadContext = interface;
  IUIX_ThreadContextDisp = dispinterface;
  IUIX_CmdManager = interface;
  IUIX_CmdManagerDisp = dispinterface;
  IUIX_CmdCollection = interface;
  IUIX_CmdCollectionDisp = dispinterface;
  IUIX_Cmd = interface;
  IUIX_CmdDisp = dispinterface;
  IUIX_CmdHandler = interface;
  IUIX_ObjImpl = interface;
  IUIX_ObjImplDisp = dispinterface;
  IUIX_CmdBar = interface;
  IUIX_CmdBarDisp = dispinterface;
  IUIX_CmdItemBox = interface;
  IUIX_CmdItemBoxDisp = dispinterface;
  IUIX_CmdItem = interface;
  IUIX_CmdItemDisp = dispinterface;
  IUIX_CmdMenu = interface;
  IUIX_CmdMenuDisp = dispinterface;
  IUIX_CmdLine = interface;
  IUIX_CmdLineDisp = dispinterface;
  IUIX_CmdPane = interface;
  IUIX_CmdPaneDisp = dispinterface;
  IUIX_CmdRibbonTabs = interface;
  IUIX_CmdRibbonTabsDisp = dispinterface;
  IUIX_CmdRibbonTab = interface;
  IUIX_CmdRibbonTabDisp = dispinterface;
  IUIX_CmdAccelTargetCallback = interface;
  IUIX_Inst = interface;
  IUIX_InstDisp = dispinterface;
  IUIX_ContextHelpHandler = interface;
  IUIX_ContextHelpHandlerDisp = dispinterface;
  IUIX_ThemeLoadMonitor = interface;
  IUIX_CharFormat = interface;
  IUIX_CharFormatDisp = dispinterface;
  IUIX_ParaFormat = interface;
  IUIX_ParaFormatDisp = dispinterface;
  IUIX_TextTabStops = interface;
  IUIX_TextTabStopsDisp = dispinterface;
  IUIX_TabStopFormat = interface;
  IUIX_TabStopFormatDisp = dispinterface;
  IUIX_NumEditFilterConvTbl = interface;
  IUIX_EditFilterCallbacks = interface;
  IUIX_NumEditFilter = interface;
  IUIX_Edit = interface;
  IUIX_EditDisp = dispinterface;
  IUIX_EditCallbacks = interface;
  IUIX_MsgBoxCallback = interface;
  IUIX_Dialog = interface;
  IUIX_DialogDisp = dispinterface;
  IUIX_Button = interface;
  IUIX_ButtonDisp = dispinterface;
  IUIX_ColorPicker = interface;
  IUIX_ColorPickerDisp = dispinterface;
  IUIX_Picture = interface;
  IUIX_PictureDisp = dispinterface;
  IUIX_ScrollBar = interface;
  IUIX_ScrollBarDisp = dispinterface;
  IUIX_ScrollContainer = interface;
  IUIX_ScrollContainerDisp = dispinterface;
  IUIX_Label = interface;
  IUIX_LabelDisp = dispinterface;
  IUIX_Combo = interface;
  IUIX_ComboDisp = dispinterface;
  IUIX_List = interface;
  IUIX_ListDisp = dispinterface;
  IUIX_ListCallbacks = interface;
  IUIX_Tooltip = interface;
  IUIX_TooltipDisp = dispinterface;
  IUIX_ListGetSelCallback = interface;
  IUIX_Tree = interface;
  IUIX_TreeDisp = dispinterface;
  IUIX_TreeCallbacks = interface;
  IUIX_TreeItem = interface;
  IUIX_TreeItemDisp = dispinterface;
  IUIX_TreeGetSelCallback = interface;
  IUIX_PropSheets = interface;
  IUIX_PropSheetsDisp = dispinterface;
  IUIX_PropSheetPage = interface;
  IUIX_ValidatePropSheetsCallback = interface;
  IUIX_EnumPropSheetPagesCallback = interface;
  IUIX_ComboButton = interface;
  IUIX_ComboButtonDisp = dispinterface;
  IUIX_LayoutItem = interface;
  IUIX_LayoutItemDisp = dispinterface;
  IUIX_InfoBtn = interface;
  IUIX_InfoBtnDisp = dispinterface;
  IUIX_PopupsHolder = interface;
  IDataObject = interface;
  IEnumFORMATETC = interface;
  IAdviseSink = interface;
  IPersist = interface;
  IPersistStream = interface;
  IMoniker = interface;
  IBindCtx = interface;
  IRunningObjectTable = interface;
  IEnumMoniker = interface;
  IEnumString = interface;
  IEnumSTATDATA = interface;
  IDropSource = interface;
  IUIX_Progress = interface;
  IUIX_ProgressDisp = dispinterface;
  IUIX_EventMonitor = interface;
  IUIX_InputFocusMonitor = interface;
  IUIX_MouseOverMonitor = interface;
  IUIX_MouseCaptureMonitor = interface;
  IUIX_MouseCaptureMonitorDisp = dispinterface;
  IUIX_EventLoopMonitor = interface;
  IDropTarget = interface;
  IUIX_ObjCollection = interface;
  IUIX_ObjCollectionDisp = dispinterface;
  IUIX_LayoutLoadCallback = interface;
  IUIX_Layout = interface;
  IUIX_LayoutDisp = dispinterface;
  IUIX_IndProgress = interface;
  IUIX_IndProgressDisp = dispinterface;
  IUIX_ToggleBtn = interface;
  IUIX_ToggleBtnDisp = dispinterface;
  IUIX_DropTargetSupport = interface;
  IUIX_DragSourceSupport = interface;
  IUIX_DropData = interface;
  IUIX_RibbonFrameWindow = interface;
  IUIX_RibbonFrameWindowDisp = dispinterface;
  IUIX_Frame = interface;
  IUIX_FrameDisp = dispinterface;
  IUIX_Spin = interface;
  IUIX_SpinDisp = dispinterface;
  IUIX_Slider = interface;
  IUIX_SliderDisp = dispinterface;
  IUIX_RangesNavigator = interface;
  IUIX_RangesNavigatorDisp = dispinterface;
  IUIX_DrawThumbnailCallback = interface;
  IUIX_CustomLabelsProvider = interface;
  IUIX_Ruler = interface;
  IUIX_RulerDisp = dispinterface;
  IUIX_IndexNavigator = interface;
  IUIX_IndexNavigatorDisp = dispinterface;
  IUIX_IndexNavigatorCallbacks = interface;
  IUIX_OriginSelector = interface;
  IUIX_OriginSelectorDisp = dispinterface;
  IUIX_Group = interface;
  IUIX_GroupDisp = dispinterface;
  IUIX_CmdColorBtn = interface;
  IUIX_CmdColorBtnDisp = dispinterface;
  IUIX_ControlsLock = interface;
  IUIX_ControlsLockDisp = dispinterface;
  IUIX_PropHost = interface;
  IUIX_PropInfo = interface;
  IUIX_PropList = interface;
  IUIX_PropListDisp = dispinterface;
  ICabbedObject = interface;
  ICabbedObjectClass = interface;
  ICabTemplate = interface;
  ICabTemplateDisp = dispinterface;
  IPXV_Inst = interface;
  IPXV_InstDisp = dispinterface;
  IPXV_MainFrame = interface;
  IPXV_MainFrameDisp = dispinterface;
  IPXV_View = interface;
  IPXV_ViewDisp = dispinterface;
  IPXV_MainView = interface;
  IPXV_MainViewDisp = dispinterface;
  IPXV_ViewPanesCollection = interface;
  IPXV_ViewPanesCollectionDisp = dispinterface;
  IPXV_DocumentViewsArea = interface;
  IPXV_DocumentViewsAreaDisp = dispinterface;
  IPXV_DocumentView = interface;
  IPXV_DocumentViewDisp = dispinterface;
  IPXV_Document = interface;
  IPXV_DocumentDisp = dispinterface;
  IPXV_DocSelection = interface;
  IPXV_DocSelectionDisp = dispinterface;
  IPXV_DocSelectionHandler = interface;
  IPXV_Tool = interface;
  IPXV_ToolDisp = dispinterface;
  IPXV_PagesView = interface;
  IPXV_PagesViewDisp = dispinterface;
  IPXV_PagesLayoutManager = interface;
  IPXV_PagesLayoutRegions = interface;
  IPXV_PagesLayoutManagerNotifyHandler = interface;
  IPXV_PagesViewDrawCallback = interface;
  IPXV_InvalidatePagesInfo = interface;
  IPXV_EnumViewsCallback = interface;
  IPXV_EnumViewsCallbackDisp = dispinterface;
  IPXV_AnnotsList = interface;
  IPXV_AnnotsListDisp = dispinterface;
  IPXV_BookmList = interface;
  IPXV_BookmListDisp = dispinterface;
  IPXV_DocContentsChangesInfo = interface;
  IPXV_DocContentsChangesInfoDisp = dispinterface;
  IPXV_DocHighlighter = interface;
  IPXV_DocHighlighterDisp = dispinterface;
  IPXV_DocHighlightItems = interface;
  IPXV_DocHighlightItemsDisp = dispinterface;
  IPXV_DocHighlightItem = interface;
  IPXV_DocHighlightItemDisp = dispinterface;
  IPXV_FormatConverter = interface;
  IPXV_ExportConverter = interface;
  IPXV_PagesRegions = interface;
  IPXV_PagesRegionsDisp = dispinterface;
  IPXV_PageRegion = interface;
  IPXV_PageRegionDisp = dispinterface;
  IPXV_FormFieldsList = interface;
  IPXV_FormFieldsListDisp = dispinterface;
  IPXV_DocInfoBar = interface;
  IPXV_DocInfoBarCallbacks = interface;
  IPXV_TextEditor = interface;
  IPXV_BookmarksView = interface;
  IPXV_BookmarksViewDisp = dispinterface;
  IPXV_PageThumbnailsView = interface;
  IPXV_PageThumbnailsViewDisp = dispinterface;
  IPXV_AttachmentsView = interface;
  IPXV_AttachmentsViewDisp = dispinterface;
  IPXV_SignaturesView = interface;
  IPXV_SignaturesViewDisp = dispinterface;
  IPXV_CommentsView = interface;
  IPXV_CommentsViewDisp = dispinterface;
  IPXV_LayersView = interface;
  IPXV_LayersViewDisp = dispinterface;
  IPXV_PDFNamedDestsView = interface;
  IPXV_PDFNamedDestsViewDisp = dispinterface;
  IPXV_ContentsView = interface;
  IPXV_ContentsViewDisp = dispinterface;
  IPXV_DocViewsList = interface;
  IPXV_DocViewsListDisp = dispinterface;
  IPXV_DocList = interface;
  IPXV_DocListDisp = dispinterface;
  IPXV_Plugin = interface;
  IPXV_ActionHandler = interface;
  IPXV_ViewCreator = interface;
  IPXV_ViewCreatorDisp = dispinterface;
  IPXV_OpenFilesDlgRes = interface;
  IPXV_OpenFilesDlgResDisp = dispinterface;
  IPXV_SaveFileDlgRes = interface;
  IPXV_SaveFileDlgResDisp = dispinterface;
  IPXV_TimerHandler = interface;
  IPXV_AnnotHandler = interface;
  IPXV_AnnotHandlerDisp = dispinterface;
  IPXV_ImportConverter = interface;
  IPXV_AnnotStateModelManager = interface;
  IPXV_AnnotStateModel = interface;
  IPXV_AnnotStateItem = interface;
  IPXV_ThreadSafeCallback = interface;
  IPXV_OperationsCreator = interface;
  IPXV_CommentStylesManager = interface;
  IPXV_CommentStylesEnumCallback = interface;
  IPXV_CommentStyleGetIcon = interface;
  IPXV_AsyncDoCallback = interface;
  IPXV_PresetsIoCallbacks = interface;
  IPXV_PresetsListCallbacks = interface;
  IPXV_PresetsButton = interface;
  IPXV_PageSizeCtl = interface;
  IPXV_PageSizeCtlDisp = dispinterface;
  IPXV_RangeCtl = interface;
  IPXV_RangeCtlDisp = dispinterface;
  IPXV_UILanguages = interface;
  IPXV_UILanguagesDisp = dispinterface;
  IPXV_SignatureProvider = interface;
  IPXV_PagesPreviewCtl = interface;
  IPXV_PagesPreviewCtlDisp = dispinterface;
  IPXV_PagesPreviewDrawCallback = interface;
  IPXV_FileNamesProvider = interface;
  IPXV_AttachList = interface;
  IPXV_AttachListDisp = dispinterface;
  IPXV_MacroHelper = interface;
  IPXV_JSValue = interface;
  IPXV_JSValueDisp = dispinterface;
  IPXV_JSCodeSnippetsStorage = interface;
  IPXV_JSCodeSnippetsStorageDisp = dispinterface;
  IPXV_JSCodeSnippet = interface;
  IPXV_JSCodeSnippetDisp = dispinterface;
  IPXV_SpellChecker = interface;
  IPXV_OCRExtension = interface;
  IPXV_OCRTask = interface;
  IPXV_OCRRegions = interface;
  IPXV_OCRRegion = interface;
  IPXV_OCRResult = interface;
  IPXV_OCRExtLanguages = interface;
  IPXV_OCRExtAccuracyLevels = interface;
  IPXV_BeforeShowContextMenuEvent = interface;
  IPXV_BeforeShowContextMenuEventDisp = dispinterface;
  IPXV_TextSelection = interface;
  IPXV_TextSelectionDisp = dispinterface;
  IPXV_PageTextSelection = interface;
  IPXV_PagesSelection = interface;
  IPXV_PagesSelectionDisp = dispinterface;
  IPXV_PageIndexesList = interface;
  IPXV_PageIndexesListDisp = dispinterface;
  IPXV_DocContentsChangedEvent = interface;
  IPXV_DocContentsChangedEventDisp = dispinterface;
  IPXV_BeforePrintEvent = interface;
  IPXV_BeforePrintEventDisp = dispinterface;
  IPrintTarget = interface;
  IDevMode = interface;
  IPXV_AnnotSelection = interface;
  IPXV_AnnotSelectionDisp = dispinterface;
  IPXV_BookmSelection = interface;
  IPXV_BookmSelectionDisp = dispinterface;
  IPXV_ContentItemsSelection = interface;
  IPXV_ContentItemsSelectionDisp = dispinterface;
  IPXV_ContentItemEntry = interface;
  IPXV_PDFNamedDestsSelection = interface;
  IPXV_PDFNamedDestsSelectionDisp = dispinterface;
  IPXV_AttachSelection = interface;
  IPXV_AttachSelectionDisp = dispinterface;
  IPXV_PageRectSelection = interface;
  IPXV_PageRectSelectionDisp = dispinterface;
  IPXV_GuideSelection = interface;
  IPXV_GuideSelectionDisp = dispinterface;
  IPXV_OCSelection = interface;
  IPXV_OCSelectionDisp = dispinterface;
  IPXV_OCOrderElementsList = interface;
  IPXV_OCOrderElementsListDisp = dispinterface;
  IPXV_InvalidatePagesEvent = interface;
  IPXV_InvalidatePagesEventDisp = dispinterface;
  IPXV_PagesLayoutChangedEvent = interface;
  IPXV_PagesLayoutChangedEventDisp = dispinterface;
  IPXV_PagesVisibilityChangedEvent = interface;
  IPXV_PagesVisibilityChangedEventDisp = dispinterface;
  IPXV_GotoActionEvent = interface;
  IPXV_GotoActionEventDisp = dispinterface;
  IPXV_DocSaveEvent = interface;
  IPXV_DocSaveEventDisp = dispinterface;
  IPXV_CommentStylesChangedEvent = interface;
  IPXV_CommentStylesChangedEventDisp = dispinterface;
  IPXV_AppSettingsEvent = interface;
  IPXV_AppSettingsEventDisp = dispinterface;
  IPXV_DocActionEvent = interface;
  IPXV_DocActionEventDisp = dispinterface;
  IPXV_AnnotsEvent = interface;
  IPXV_AnnotsEventDisp = dispinterface;
  IPXV_BookmEvent = interface;
  IPXV_BookmEventDisp = dispinterface;
  IPXV_FormFieldsEvent = interface;
  IPXV_FormFieldsEventDisp = dispinterface;
  IPXV_SearchCallback = interface;
  IPXV_SearchPtr = interface;
  IPXV_FileAttachmentPtr = interface;
  IPXV_SearchEntry = interface;
  IPXV_SearchEntryItem = interface;
  IPXV_UIEvent = interface;
  IPXV_UIEventDisp = dispinterface;
  IXPS2PDFConverter = interface;
  IPXV_SearchView = interface;
  IPXV_SearchViewDisp = dispinterface;
  IPXV_LoupeView = interface;
  IPXV_LoupeViewDisp = dispinterface;
  IPXV_PanZoomView = interface;
  IPXV_PanZoomViewDisp = dispinterface;
  IPXV_XFATreeView = interface;
  IPXV_XFATreeViewDisp = dispinterface;
  IPXV_DocCollection = interface;
  IPXV_DocCollectionDisp = dispinterface;
  IPXV_DocCollectionNav = interface;
  IPXV_DocCollectionNavDisp = dispinterface;
  IPXV_ShowPropsCallback = interface;
  IPXV_SoundManager = interface;
  IPXV_CommentStylesPropList = interface;
  IPXV_EnumFolderCallback = interface;
  IPXV_PrivateDataStorage = interface;
  IPXV_Annot3DContext = interface;
  IPXV_Annot3DContextDisp = dispinterface;
  IPXV_3DModelTreeItem = interface;
  IPXV_3D = interface;
  IPXV_3DDisp = dispinterface;
  _IPXV_ControlEvents = dispinterface;
  IPXV_Control = interface;
  IPXV_ControlDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  PXC_Inst = IPXC_Inst;
  CoAUX_Cab = ICabNode;
  PXV_Inst = IPXV_Inst;
  PXV_Control = IPXV_Control;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  wireHICON = ^_RemotableHandle; 
  wireCLIPFORMAT = ^_userCLIPFORMAT; 
  wireSTGMEDIUM = ^_userSTGMEDIUM; 
  wireFLAG_STGMEDIUM = ^_userFLAG_STGMEDIUM; 
  wireASYNC_STGMEDIUM = ^_userSTGMEDIUM; 
  PByte1 = ^Byte; {*}
  PInteger1 = ^Integer; {*}
  PUserType1 = ^PXC_Rect; {*}
  PDouble1 = ^Double; {*}
  PUserType2 = ^PXC_Matrix; {*}
  PUserType3 = ^PXC_MatrixF; {*}
  PUserType4 = ^PXC_Point; {*}
  PUserType5 = ^PXC_PointF; {*}
  PUserType6 = ^PXC_RectF; {*}
  PUserType7 = ^PXC_Quad; {*}
  PUserType8 = ^PXC_QuadF; {*}
  PUserType9 = ^tagRECT; {*}
  PUserType10 = ^IXC_PageBlockData; {*}
  PUINT1 = ^LongWord; {*}
  PUINT2 = ^ULONG_T; {*}
  PSingle1 = ^Single; {*}
  PUserType11 = ^PXS_StreamInfo; {*}
  PUserType12 = ^PXS_StreamEncoderParamStruct; {*}
  POleVariant1 = ^OleVariant; {*}
  PUserType13 = ^PXC_Destination; {*}
  PUserType14 = ^_CERT_CONTEXT; {*}
  PUserType15 = ^PXC_CI_PathCommands; {*}
  PWord1 = ^Word; {*}
  PUserType16 = ^PXC_AnnotBorder; {*}
  PUserType17 = ^PXC_Size; {*}
  PUserType18 = ^PXC_CalRGB; {*}
  PUserType19 = ^PXC_CalGray; {*}
  PUserType20 = ^PXC_CalLab; {*}
  PUserType21 = ^UIX_RawEvent; {*}
  PUserType22 = ^tagPOINT; {*}
  PUserType23 = ^TGUID; {*}
  PUserType24 = ^tagSIZE; {*}
  PUserType25 = ^tagPOINTF; {*}
  PPUserType1 = ^IUIX_Obj; {*}
  PUserType26 = ^UIX_CmdAccel; {*}
  PPUserType2 = ^IUIX_CmdRibbonTab; {*}
  PUserType27 = ^UIX_CreateObjParams; {*}
  PUserType28 = ^UIX_MsgBoxConfig; {*}
  PUserType29 = ^tagFORMATETC; {*}
  PPUserType3 = ^wireSTGMEDIUM; {*}
  PUserType30 = ^UIX_EditTextPos; {*}
  PUserType31 = ^UIX_NotifyInfo; {*}
  PUserType32 = ^UIX_ScrollBarInfo; {*}
  PUINT3 = ^PARAM_T; {*}
  PUserType33 = ^UIX_ListItemID; {*}
  PPUserType4 = ^wireFLAG_STGMEDIUM; {*}
  PPUserType5 = ^wireASYNC_STGMEDIUM; {*}
  PUserType34 = ^tagBIND_OPTS2; {*}
  PUserType35 = ^_FILETIME; {*}
  PPUserType6 = ^IUIX_NumEditFilterConvTbl; {*}
  PUserType36 = ^PXV_SnapParams; {*}
  PUserType37 = ^PXV_GridParams; {*}
  PUserType38 = ^PXV_SnapInfo; {*}
  PUserType39 = ^PXV_VirtualPoint; {*}
  PUserType40 = ^PXV_DocHighlightAdvanced; {*}
  PPUserType7 = ^IUIX_Icon; {*}
  PWideString1 = ^WideString; {*}
  PWordBool1 = ^WordBool; {*}

  ULONG_PTR = LongWord; 

{$ALIGN 8}
  _LARGE_INTEGER = record
    QuadPart: Int64;
  end;

  _ULARGE_INTEGER = record
    QuadPart: Largeuint;
  end;

{$ALIGN 4}
  _FILETIME = record
    dwLowDateTime: LongWord;
    dwHighDateTime: LongWord;
  end;

{$ALIGN 8}
  tagSTATSTG = record
    pwcsName: PWideChar;
    type_: LongWord;
    cbSize: _ULARGE_INTEGER;
    mtime: _FILETIME;
    ctime: _FILETIME;
    atime: _FILETIME;
    grfMode: LongWord;
    grfLocksSupported: LongWord;
    clsid: TGUID;
    grfStateBits: LongWord;
    reserved: LongWord;
  end;

  ULONG_T = LongWord; 
  PARAM_T = ULONG_PTR; 
  HANDLE_T = ULONG_PTR; 

  PXC_Rect = record
    left: Double;
    bottom: Double;
    right: Double;
    top: Double;
  end;

  PXC_Matrix = record
    a: Double;
    b: Double;
    c: Double;
    d: Double;
    e: Double;
    f: Double;
  end;

{$ALIGN 4}
  PXC_MatrixF = record
    a: Single;
    b: Single;
    c: Single;
    d: Single;
    e: Single;
    f: Single;
  end;

{$ALIGN 8}
  PXC_Point = record
    x: Double;
    y: Double;
  end;

{$ALIGN 4}
  PXC_PointF = record
    x: Single;
    y: Single;
  end;

  PXC_RectF = record
    left: Single;
    bottom: Single;
    right: Single;
    top: Single;
  end;

{$ALIGN 8}
  PXC_Quad = record
    pt: array[0..3] of PXC_Point;
  end;

{$ALIGN 4}
  PXC_QuadF = record
    pt: array[0..3] of PXC_PointF;
  end;

{$ALIGN 8}
  PXC_Size = record
    cx: Double;
    cy: Double;
  end;

{$ALIGN 4}
  PXC_SizeF = record
    cx: Single;
    cy: Single;
  end;

  IXC_PageBlockData = record
    Width: ULONG_T;
    Height: ULONG_T;
    Stride: Integer;
    reserved: ULONG_T;
    pData: ^Byte;
  end;

  tagRECT = record
    left: Integer;
    top: Integer;
    right: Integer;
    bottom: Integer;
  end;

  PXS_StreamInfo = record
    nType: PXS_StreamType;
    pDict: IPXS_PDFVariant;
    nWidth: ULONG_T;
    nHeight: ULONG_T;
    nComponents: ULONG_T;
  end;

  PXS_StreamEncoderParamStruct = record
    m_nObjNumber: ULONG_T;
    m_nRevNumber: ULONG_T;
    m_StreamType: ULONG_T;
    m_bCryptInFilter: WordBool;
    m_bNeedCrypt: WordBool;
    m_CryptFilterParams: IPXS_PDFVariant;
    m_NewCryptParams: IPXS_PDFVariant;
  end;

  PXC_AnnotBorder = record
    nStyle: PXC_AnnotBorderStyle;
    nEffect: PXC_AnnotBorderEffect;
    nWidth: Single;
    nDashCount: ULONG_T;
    DashArray: array[0..9] of Single;
    nEffectLevel: Single;
  end;

  PXC_CharExtra = record
    nLineIndex: ULONG_T;
    nStyleIndex: ULONG_T;
    nDrawStyleIndex: ULONG_T;
    nVisualIndex: ULONG_T;
    xPos: Single;
    nWidth: Single;
    nVisualWidth: Single;
  end;

  PXC_CharDrawStyle = record
    nFillColorIndex: ULONG_T;
    nStrokeColorIndex: ULONG_T;
    nDrawMode: ULONG_T;
    nStrokeWidth: Single;
  end;

  PXC_CharStyle = record
    nFontHandle: ULONG_T;
    nFontSize: Single;
    nAscent: Single;
    nDescent: Single;
    nHorzScale: Single;
    nBaseOffset: Single;
    nSymItalicCoef: Single;
    nFlags: ULONG_T;
  end;

{$ALIGN 8}
  PXC_Destination = record
    nPageNum: ULONG_T;
    nType: PXC_DestType;
    nNullFlags: ULONG_T;
    dValues: array[0..3] of Double;
  end;

  PXC_TextLineInfo = record
    Matrix: PXC_Matrix;
    rcBBox: PXC_RectF;
    nFirstCharIndex: ULONG_T;
    nCharsCount: ULONG_T;
    nFlags: ULONG_T;
    nBlockIndex: ULONG_T;
    nParaIndex: ULONG_T;
  end;

{$ALIGN 4}
  PXC_TextParaInfo = record
    nFirstLineIndex: ULONG_T;
    nLinesCount: ULONG_T;
    nTextAlign: PXC_TextJustification;
    rcBBox: PXC_RectF;
  end;

{$ALIGN 8}
  PXC_XYZColor = record
    n_X: Double;
    n_Y: Double;
    n_Z: Double;
  end;

  PXC_CalGray = record
    n_gamma: Double;
    kWhite: PXC_XYZColor;
    kBlack: PXC_XYZColor;
  end;

  PXC_CalRGB = record
    gamma_red: Double;
    gamma_green: Double;
    gamma_blue: Double;
    matrix_red: PXC_XYZColor;
    matrix_green: PXC_XYZColor;
    matrix_blue: PXC_XYZColor;
    kWhite: PXC_XYZColor;
    kBlack: PXC_XYZColor;
  end;

  PXC_CalLab = record
    min_a: Double;
    max_a: Double;
    min_b: Double;
    max_b: Double;
    kWhite: PXC_XYZColor;
    kBlack: PXC_XYZColor;
  end;

{$ALIGN 4}
  _CRYPTOAPI_BLOB = record
    cbData: LongWord;
    pbData: ^Byte;
  end;

  _CRYPT_ALGORITHM_IDENTIFIER = record
    pszObjId: PAnsiChar;
    Parameters: _CRYPTOAPI_BLOB;
  end;

  _CRYPT_BIT_BLOB = record
    cbData: LongWord;
    pbData: ^Byte;
    cUnusedBits: LongWord;
  end;

  _CERT_PUBLIC_KEY_INFO = record
    Algorithm: _CRYPT_ALGORITHM_IDENTIFIER;
    PublicKey: _CRYPT_BIT_BLOB;
  end;

  _CERT_EXTENSION = record
    pszObjId: PAnsiChar;
    fCritical: Integer;
    Value: _CRYPTOAPI_BLOB;
  end;

  _CERT_INFO = record
    dwVersion: LongWord;
    SerialNumber: _CRYPTOAPI_BLOB;
    SignatureAlgorithm: _CRYPT_ALGORITHM_IDENTIFIER;
    Issuer: _CRYPTOAPI_BLOB;
    NotBefore: _FILETIME;
    NotAfter: _FILETIME;
    Subject: _CRYPTOAPI_BLOB;
    SubjectPublicKeyInfo: _CERT_PUBLIC_KEY_INFO;
    IssuerUniqueId: _CRYPT_BIT_BLOB;
    SubjectUniqueId: _CRYPT_BIT_BLOB;
    cExtension: LongWord;
    rgExtension: ^_CERT_EXTENSION;
  end;

  _CERT_CONTEXT = record
    dwCertEncodingType: LongWord;
    pbCertEncoded: ^Byte;
    cbCertEncoded: LongWord;
    pCertInfo: ^_CERT_INFO;
    hCertStore: Pointer;
  end;

  tagPOINT = record
    x: Integer;
    y: Integer;
  end;

  UIX_RawEvent = record
    nParam1: PARAM_T;
    nParam2: PARAM_T;
    nResult: PARAM_T;
    nCode: Integer;
    bHandled: Integer;
    pt: tagPOINT;
  end;

  tagSIZE = record
    cx: Integer;
    cy: Integer;
  end;

  tagPOINTF = record
    x: Single;
    y: Single;
  end;

  UIX_CmdAccel = record
    nMod: Integer;
    nKey: Integer;
  end;

  UIX_EditTextPos = record
    nPara: Integer;
    nChar: Integer;
  end;

{$ALIGN 8}
  UIX_CreateObjParams = record
    pParent: IUIX_Obj;
    hWndParent: HANDLE_T;
    pImpl: IUnknown;
    nStdClass: Integer;
    nObjStyle: Int64;
    nCreateFlags: Int64;
    pThemeClassID: PWideChar;
    rc: tagRECT;
    pDlgTemplates: PAnsiChar;
    cbDlgTemplates: Integer;
    pID: PWideChar;
    HWND_: HANDLE_T;
    nInsertBefore: Integer;
    nWndStyle: Integer;
    nWndStyleEx: Integer;
    pWndClassName: PWideChar;
  end;

  LONG_PTR = Integer; 

{$ALIGN 4}
  UIX_MsgBoxButton = record
    pID: PWideChar;
    pText: PWideChar;
    pIconID: PWideChar;
    pIcon: IUnknown;
  end;

  UIX_MsgBoxConfig = record
    nSize: Integer;
    hWndParent: HANDLE_T;
    nStyle: Integer;
    pTitle: PWideChar;
    pIconID: PWideChar;
    pIcon: IUnknown;
    pHeader: PWideChar;
    pText: PWideChar;
    pThumbID: PWideChar;
    pThumb: IUnknown;
    pThumbText: PWideChar;
    nRadioButtons: Integer;
    pRadioButtons: ^UIX_MsgBoxButton;
    nSelectedRadioID: Integer;
    nCustomButtons: Integer;
    pCustomButtons: ^UIX_MsgBoxButton;
    pOptionText: PWideChar;
    nOptionState: Integer;
    pFooterText: PWideChar;
    pFooterIconID: PWideChar;
    pFooterIcon: IUnknown;
    pEditText: PWideChar;
    nDefautItemID: Integer;
    pHook: IUIX_ObjImpl;
    pCb: IUIX_MsgBoxCallback;
    nAutoClickTimeout: Integer;
    pPos: ^tagPOINT;
    pEditLabel: PWideChar;
  end;

  UIX_NotifyInfo = record
    nCode: Integer;
    nFromID: Integer;
    pFrom: IUIX_Obj;
    pFromImpl: IUIX_ObjImpl;
    pData: PARAM_T;
  end;


  __MIDL_IWinTypes_0009 = record
    case Integer of
      0: (hInproc: Integer);
      1: (hRemote: Integer);
  end;

  _RemotableHandle = record
    fContext: Integer;
    u: __MIDL_IWinTypes_0009;
  end;

  UIX_ScrollBarInfo = record
    nAllSize: Integer;
    nViewPos: Integer;
    nViewSize: Integer;
  end;

  UIX_ListItemID = record
    nGroup: Integer;
    nItem: Integer;
    nColumn: Integer;
    nParam: PARAM_T;
  end;


  tagDVTARGETDEVICE = record
    tdSize: LongWord;
    tdDriverNameOffset: Word;
    tdDeviceNameOffset: Word;
    tdPortNameOffset: Word;
    tdExtDevmodeOffset: Word;
    tdData: ^Byte;
  end;

  __MIDL_IWinTypes_0001 = record
    case Integer of
      0: (dwValue: LongWord);
      1: (pwszName: PWideChar);
  end;

  _userCLIPFORMAT = record
    fContext: Integer;
    u: __MIDL_IWinTypes_0001;
  end;

  tagFORMATETC = record
    cfFormat: wireCLIPFORMAT;
    ptd: ^tagDVTARGETDEVICE;
    dwAspect: LongWord;
    lindex: Integer;
    tymed: LongWord;
  end;


  _BYTE_BLOB = record
    clSize: LongWord;
    abData: ^Byte;
  end;

{$ALIGN 8}
  __MIDL_IWinTypes_0004 = record
    case Integer of
      0: (hInproc: Integer);
      1: (hRemote: ^_BYTE_BLOB);
      2: (hInproc64: Int64);
  end;

  _userHMETAFILE = record
    fContext: Integer;
    u: __MIDL_IWinTypes_0004;
  end;

{$ALIGN 4}
  _remoteMETAFILEPICT = record
    mm: Integer;
    xExt: Integer;
    yExt: Integer;
    hMF: ^_userHMETAFILE;
  end;

{$ALIGN 8}
  __MIDL_IWinTypes_0005 = record
    case Integer of
      0: (hInproc: Integer);
      1: (hRemote: ^_remoteMETAFILEPICT);
      2: (hInproc64: Int64);
  end;

  _userHMETAFILEPICT = record
    fContext: Integer;
    u: __MIDL_IWinTypes_0005;
  end;

  __MIDL_IWinTypes_0006 = record
    case Integer of
      0: (hInproc: Integer);
      1: (hRemote: ^_BYTE_BLOB);
      2: (hInproc64: Int64);
  end;

  _userHENHMETAFILE = record
    fContext: Integer;
    u: __MIDL_IWinTypes_0006;
  end;

{$ALIGN 4}
  _userBITMAP = record
    bmType: Integer;
    bmWidth: Integer;
    bmHeight: Integer;
    bmWidthBytes: Integer;
    bmPlanes: Word;
    bmBitsPixel: Word;
    cbSize: LongWord;
    pBuffer: ^Byte;
  end;

{$ALIGN 8}
  __MIDL_IWinTypes_0007 = record
    case Integer of
      0: (hInproc: Integer);
      1: (hRemote: ^_userBITMAP);
      2: (hInproc64: Int64);
  end;

  _userHBITMAP = record
    fContext: Integer;
    u: __MIDL_IWinTypes_0007;
  end;

{$ALIGN 1}
  tagPALETTEENTRY = record
    peRed: Byte;
    peGreen: Byte;
    peBlue: Byte;
    peFlags: Byte;
  end;

{$ALIGN 2}
  tagLOGPALETTE = record
    palVersion: Word;
    palNumEntries: Word;
    palPalEntry: ^tagPALETTEENTRY;
  end;

{$ALIGN 8}
  __MIDL_IWinTypes_0008 = record
    case Integer of
      0: (hInproc: Integer);
      1: (hRemote: ^tagLOGPALETTE);
      2: (hInproc64: Int64);
  end;

  _userHPALETTE = record
    fContext: Integer;
    u: __MIDL_IWinTypes_0008;
  end;

{$ALIGN 4}
  _FLAGGED_BYTE_BLOB = record
    fFlags: LongWord;
    clSize: LongWord;
    abData: ^Byte;
  end;

{$ALIGN 8}
  __MIDL_IWinTypes_0003 = record
    case Integer of
      0: (hInproc: Integer);
      1: (hRemote: ^_FLAGGED_BYTE_BLOB);
      2: (hInproc64: Int64);
  end;

  _userHGLOBAL = record
    fContext: Integer;
    u: __MIDL_IWinTypes_0003;
  end;

{$ALIGN 4}
  __MIDL_IAdviseSink_0002 = record
    case Integer of
      0: (hBitmap: ^_userHBITMAP);
      1: (hPalette: ^_userHPALETTE);
      2: (hGeneric: ^_userHGLOBAL);
  end;

  _GDI_OBJECT = record
    ObjectType: LongWord;
    u: __MIDL_IAdviseSink_0002;
  end;

  __MIDL_IAdviseSink_0003 = record
    case Integer of
      0: (hMetaFilePict: ^_userHMETAFILEPICT);
      1: (hHEnhMetaFile: ^_userHENHMETAFILE);
      2: (hGdiHandle: ^_GDI_OBJECT);
      3: (hGlobal: ^_userHGLOBAL);
      4: (lpszFileName: PWideChar);
      5: (pstm: ^_BYTE_BLOB);
      6: (pstg: ^_BYTE_BLOB);
  end;

  _STGMEDIUM_UNION = record
    tymed: LongWord;
    u: __MIDL_IAdviseSink_0003;
  end;

  _userSTGMEDIUM = record
    DUMMYUNIONNAME: _STGMEDIUM_UNION;
    pUnkForRelease: IUnknown;
  end;


  _userFLAG_STGMEDIUM = record
    ContextFlags: Integer;
    fPassOwnership: Integer;
    Stgmed: _userSTGMEDIUM;
  end;


  _COAUTHIDENTITY = record
    User: ^Word;
    UserLength: LongWord;
    Domain: ^Word;
    DomainLength: LongWord;
    Password: ^Word;
    PasswordLength: LongWord;
    Flags: LongWord;
  end;

  _COAUTHINFO = record
    dwAuthnSvc: LongWord;
    dwAuthzSvc: LongWord;
    pwszServerPrincName: PWideChar;
    dwAuthnLevel: LongWord;
    dwImpersonationLevel: LongWord;
    pAuthIdentityData: ^_COAUTHIDENTITY;
    dwCapabilities: LongWord;
  end;

  _COSERVERINFO = record
    dwReserved1: LongWord;
    pwszName: PWideChar;
    pAuthInfo: ^_COAUTHINFO;
    dwReserved2: LongWord;
  end;

  tagBIND_OPTS2 = record
    cbStruct: LongWord;
    grfFlags: LongWord;
    grfMode: LongWord;
    dwTickCountDeadline: LongWord;
    dwTrackFlags: LongWord;
    dwClassContext: LongWord;
    locale: LongWord;
    pServerInfo: ^_COSERVERINFO;
  end;

  tagSTATDATA = record
    formatetc: tagFORMATETC;
    advf: LongWord;
    pAdvSink: IAdviseSink;
    dwConnection: LongWord;
  end;

  _POINTL = record
    x: Integer;
    y: Integer;
  end;

  UIX_CmdCtlNotifyInfo = record
    Data: UIX_NotifyInfo;
    pEvent: IUIX_Event;
  end;

  UIX_CmdNotifyData = record
    nCode: Integer;
    pCmd: IUIX_Cmd;
    pItem: IUIX_CmdItem;
    pOwner: IUIX_Obj;
    pData: PARAM_T;
  end;

  UIX_ScrollNotifyData = record
    nType: Integer;
    ptViewPos: tagPOINT;
    bSmooth: Integer;
    bByKey: Integer;
  end;

  UIX_ObjPos = record
    nFlags: Integer;
    pParent: IUIX_Obj;
    nIndex: Integer;
    pRect: ^tagRECT;
  end;

{$ALIGN 8}
  UIX_ObjStyle = record
    nOldStyle: Int64;
    nNewStyle: Int64;
  end;

{$ALIGN 4}
  UIX_PopupMaxSize = record
    cx: Integer;
    cy: Integer;
    xWorkAreaCenter: Integer;
    yWorkAreaCenter: Integer;
  end;

{$ALIGN 8}
  UIX_GestureInfo = record
    nSize: Integer;
    nStage: Integer;
    dxScroll: Integer;
    dyScroll: Integer;
    pt: tagPOINT;
    nRotateAngle: Double;
    nZoomLevel: Double;
    nInertiaSpeedV: Double;
    nInertiaSpeedH: Double;
  end;

{$ALIGN 4}
  UIX_ScrollChangedNotifyData = record
    oldViewPos: tagPOINT;
    oldAllSize: tagSIZE;
  end;

{$ALIGN 8}
  UIX_ZoomNotifyData = record
    nZoomLevel: Double;
    ptCenter: tagPOINT;
  end;

  UIX_RotateNotifyData = record
    nRotateAngle: Double;
    ptCenter: tagPOINT;
  end;

  UIX_RulerNotifyData = record
    nTag: PARAM_T;
    nNewPos: Double;
    nOldPos: Double;
    nStartPos: Double;
    bVertical: WordBool;
  end;

  PXV_PagesLayoutRegion = record
    nFlags: ULONG_T;
    nPage: ULONG_T;
    rcVisibleRect: tagRECT;
    rcPageRect: tagRECT;
    rcTotalPageRect: tagRECT;
    ZoomLevel: Double;
    ViewRotation: Integer;
  end;

  PXV_VirtualPoint = record
    nRow: ULONG_T;
    xPos: Double;
    yPos: Double;
    xBorderPos: Integer;
    yBorderPos: Integer;
  end;

{$ALIGN 4}
  PXV_SnapParams = record
    nSize: ULONG_T;
    nGuidesThresholdX: Single;
    nGuidesThresholdY: Single;
    nGridThresholdX: Single;
    nGridThresholdY: Single;
    nObjectThresholdX: Single;
    nObjectThresholdY: Single;
  end;

  PXV_GridParams = record
    nSize: ULONG_T;
    nCellWidth: Single;
    nCellHeight: Single;
    nLeftOffset: Single;
    nTopOffset: Single;
    nCellDivs: ULONG_T;
  end;

  PXV_SnapInfo = record
    nSize: ULONG_T;
    nPage: ULONG_T;
    nFlags: ULONG_T;
    ptPage: PXC_PointF;
  end;

  PXV_DocHighlightAdvanced = record
    nSize: Integer;
    nTxtQuadsInflate: array[0..3] of Single;
    nRoundRadius: Integer;
  end;

  PXV_OCRSymbolInfo = record
    nWord: ULONG_T;
    nStyleID: ULONG_T;
    nConfidence: Single;
    ptPosition: PXC_PointF;
    Bounds: PXC_RectF;
  end;

  PXV_OCRWordInfo = record
    nLine: ULONG_T;
    nFirstSymbol: ULONG_T;
    nSymbolsCount: ULONG_T;
    nLangID: ULONG_T;
    nConfidence: Single;
    nDir: PXV_OCRScriptDir;
    Bounds: PXC_RectF;
  end;

{$ALIGN 8}
  PXV_OCRLineInfo = record
    nPara: ULONG_T;
    nFirstSymbol: ULONG_T;
    nSymbolsCount: ULONG_T;
    Matrix: PXC_Matrix;
    Bounds: PXC_RectF;
  end;

{$ALIGN 4}
  PXV_OCRParaInfo = record
    nBlock: ULONG_T;
    nFirstLine: ULONG_T;
    nLinesCount: ULONG_T;
    nTextAlign: PXV_OCRTextAlignType;
    nFlags: ULONG_T;
    nFirstLineIndent: Single;
    Bounds: PXC_RectF;
  end;

  PXV_OCRBlockInfo = record
    nType: PXV_OCRBlockType;
    nInputRegionIndex: ULONG_T;
    nOrientation: PXV_OCRBlockOrientation;
    nDeskewAngle: Single;
    nFirstPara: ULONG_T;
    nParasCount: ULONG_T;
    Bounds: PXC_RectF;
  end;

  PXV_OCRSymbolStyle = record
    nFlags: ULONG_T;
    nFontID: ULONG_T;
    nFontSize: Single;
    nColor: ULONG_T;
  end;

  PXV_SearchPtrChunk = record
    nType: ULONG_T;
    nValue: ULONG_T;
  end;

  PXV_PagesScrollDeltaInfo = record
    nUnits: Integer;
    nDeltaX: Integer;
    nDeltaY: Integer;
    bNoInvert: WordBool;
    bByKey: WordBool;
    bSmooth: WordBool;
  end;


// *********************************************************************//
// Interface: IAUX_Inst
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3F5231AB-AF92-4184-A361-5A3307A3464E}
// *********************************************************************//
  IAUX_Inst = interface(IDispatch)
    ['{3F5231AB-AF92-4184-A361-5A3307A3464E}']
    function Alloc(cb: ULONG_PTR): Pointer; safecall;
    function Realloc(p: Pointer; cb: ULONG_PTR): Pointer; safecall;
    procedure Free(p: Pointer); safecall;
    procedure HeapMinimize; safecall;
    function CreateEmptyCab: ICab; safecall;
    function CreateMemBlock(nBytesCount: ULONG_PTR): IMemBlock; safecall;
    function CreateBitSet(nBitsCount: ULONG_T): IBitSet; safecall;
    function CreateColor(nColorType: ColorType): IColor; safecall;
    function CreateOpList: IOperationList; safecall;
    function CreateOpHistory: IOperationHistory; safecall;
    function CreateObjCollection: IObjCollection; safecall;
    function CreateWordsList: IWords; safecall;
    function CreateUniqueStringsList: IUniqueStrings; safecall;
    function CreateStdRangeProgressMon(const pParent: IProgressMon; nRangeDuration: Double): IProgressMon; safecall;
    function CreateCabFromTemplate(pTemplateXml: Pointer; cbTemplateXml: Integer; 
                                   const sRootName: WideString): ICab; safecall;
    function CreateString(const sInitial: WideString): IString; safecall;
    function CreateFlag: IFlag; safecall;
    function CreateNumArray: INumArray; safecall;
    function CreateRangeHelper: IRangeHelper; safecall;
    function ExtractWords(const sText: WideString): IWords; safecall;
    function CreateCabFromTemplate2(const pTemplateXml: IStream; const sRootName: WideString): ICab; safecall;
    function FormatHRESULT(nErrCode: HResult; nFlags: ULONG_T): WideString; safecall;
    function IsUserBreak(nErrCode: HResult): WordBool; safecall;
    function IsInvalidArg(nErrCode: HResult): WordBool; safecall;
    function IsNotImpl(nErrCode: HResult): WordBool; safecall;
    procedure GetStdPaperInfo(nPaperID: StdPaperID; out nGroup: StdPaperGroupID; 
                              out nWidth: Double; out nHeight: Double); safecall;
    function GetInputItemsCount(const pOp: IOperation): ULONG_T; safecall;
    function GetInputItem(const pOp: IOperation; nIndex: ULONG_T): IUnknown; safecall;
    procedure AddInputItem(const pOp: IOperation; const pItem: IUnknown); safecall;
    procedure ClearInput(const pOp: IOperation); safecall;
    function GetOutputItemsCount(const pOp: IOperation): ULONG_T; safecall;
    function GetOutputItem(const pOp: IOperation; nIndex: ULONG_T): IUnknown; safecall;
    procedure AddOutputItem(const pOp: IOperation; const pItem: IUnknown); safecall;
    procedure ClearOutput(const pOp: IOperation); safecall;
    procedure OpenFolderAndSelectFiles(sFolderName: PWideChar; const pFileNames: IUniqueStrings; 
                                       bAbsFileNames: WordBool); safecall;
    function CreateDblArray: IDblArray; safecall;
    function Get_LogServer: ILogServer; safecall;
    function Get_MathHelper: IMathHelper; safecall;
    function BuildScopeTable(pSource: PWideChar; nMin: Integer; nMax: Integer; nDef: Integer; 
                             pKeyPrefix: PWideChar; bCaseSensitive: WordBool): IScopeTable; safecall;
    function BuildFastScopeTable(pSource: PWideChar; nMin: Integer; nMax: Integer; nDef: Integer; 
                                 pKeyPrefix: PWideChar; bCaseSensitive: WordBool): IFastScopeTable; safecall;
    function CreateStdRangeProgressMonEx(const pParent: IProgressMon; nRangeDuration: Double; 
                                         nStyleFilter: ULONG_T; nFlags: ULONG_T): IProgressMon; safecall;
    function PreprocessCabTemplate(const pStream: IStream): IUnknown; safecall;
    function CreateCabFromPreprocessedTemplate(const pTemplate: IUnknown; 
                                               const sRootName: WideString): ICab; safecall;
    function GetDefPaperID: StdPaperID; safecall;
    property LogServer: ILogServer read Get_LogServer;
    property MathHelper: IMathHelper read Get_MathHelper;
  end;

// *********************************************************************//
// DispIntf:  IAUX_InstDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3F5231AB-AF92-4184-A361-5A3307A3464E}
// *********************************************************************//
  IAUX_InstDisp = dispinterface
    ['{3F5231AB-AF92-4184-A361-5A3307A3464E}']
    function Alloc(cb: ULONG_PTR): {NOT_OLEAUTO(Pointer)}OleVariant; dispid 1610743808;
    function Realloc(p: {NOT_OLEAUTO(Pointer)}OleVariant; cb: ULONG_PTR): {NOT_OLEAUTO(Pointer)}OleVariant; dispid 1610743809;
    procedure Free(p: {NOT_OLEAUTO(Pointer)}OleVariant); dispid 1610743810;
    procedure HeapMinimize; dispid 1610743811;
    function CreateEmptyCab: ICab; dispid 1610743812;
    function CreateMemBlock(nBytesCount: ULONG_PTR): IMemBlock; dispid 1610743813;
    function CreateBitSet(nBitsCount: ULONG_T): IBitSet; dispid 1610743814;
    function CreateColor(nColorType: ColorType): IColor; dispid 1610743815;
    function CreateOpList: IOperationList; dispid 1610743816;
    function CreateOpHistory: IOperationHistory; dispid 1610743817;
    function CreateObjCollection: IObjCollection; dispid 1610743818;
    function CreateWordsList: IWords; dispid 1610743819;
    function CreateUniqueStringsList: IUniqueStrings; dispid 1610743820;
    function CreateStdRangeProgressMon(const pParent: IProgressMon; nRangeDuration: Double): IProgressMon; dispid 1610743821;
    function CreateCabFromTemplate(pTemplateXml: {NOT_OLEAUTO(Pointer)}OleVariant; 
                                   cbTemplateXml: Integer; const sRootName: WideString): ICab; dispid 1610743822;
    function CreateString(const sInitial: WideString): IString; dispid 1610743823;
    function CreateFlag: IFlag; dispid 1610743824;
    function CreateNumArray: INumArray; dispid 1610743825;
    function CreateRangeHelper: IRangeHelper; dispid 1610743826;
    function ExtractWords(const sText: WideString): IWords; dispid 1610743827;
    function CreateCabFromTemplate2(const pTemplateXml: IStream; const sRootName: WideString): ICab; dispid 1610743828;
    function FormatHRESULT(nErrCode: HResult; nFlags: ULONG_T): WideString; dispid 1610743829;
    function IsUserBreak(nErrCode: HResult): WordBool; dispid 1610743830;
    function IsInvalidArg(nErrCode: HResult): WordBool; dispid 1610743831;
    function IsNotImpl(nErrCode: HResult): WordBool; dispid 1610743832;
    procedure GetStdPaperInfo(nPaperID: StdPaperID; out nGroup: StdPaperGroupID; 
                              out nWidth: Double; out nHeight: Double); dispid 1610743833;
    function GetInputItemsCount(const pOp: IOperation): ULONG_T; dispid 1610743834;
    function GetInputItem(const pOp: IOperation; nIndex: ULONG_T): IUnknown; dispid 1610743835;
    procedure AddInputItem(const pOp: IOperation; const pItem: IUnknown); dispid 1610743836;
    procedure ClearInput(const pOp: IOperation); dispid 1610743837;
    function GetOutputItemsCount(const pOp: IOperation): ULONG_T; dispid 1610743838;
    function GetOutputItem(const pOp: IOperation; nIndex: ULONG_T): IUnknown; dispid 1610743839;
    procedure AddOutputItem(const pOp: IOperation; const pItem: IUnknown); dispid 1610743840;
    procedure ClearOutput(const pOp: IOperation); dispid 1610743841;
    procedure OpenFolderAndSelectFiles(sFolderName: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                       const pFileNames: IUniqueStrings; bAbsFileNames: WordBool); dispid 1610743842;
    function CreateDblArray: IDblArray; dispid 1610743843;
    property LogServer: ILogServer readonly dispid 1610743844;
    property MathHelper: IMathHelper readonly dispid 1610743845;
    function BuildScopeTable(pSource: {NOT_OLEAUTO(PWideChar)}OleVariant; nMin: Integer; 
                             nMax: Integer; nDef: Integer; 
                             pKeyPrefix: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                             bCaseSensitive: WordBool): IScopeTable; dispid 1610743846;
    function BuildFastScopeTable(pSource: {NOT_OLEAUTO(PWideChar)}OleVariant; nMin: Integer; 
                                 nMax: Integer; nDef: Integer; 
                                 pKeyPrefix: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                 bCaseSensitive: WordBool): IFastScopeTable; dispid 1610743847;
    function CreateStdRangeProgressMonEx(const pParent: IProgressMon; nRangeDuration: Double; 
                                         nStyleFilter: ULONG_T; nFlags: ULONG_T): IProgressMon; dispid 1610743848;
    function PreprocessCabTemplate(const pStream: IStream): IUnknown; dispid 1610743849;
    function CreateCabFromPreprocessedTemplate(const pTemplate: IUnknown; 
                                               const sRootName: WideString): ICab; dispid 1610743850;
    function GetDefPaperID: StdPaperID; dispid 1610743851;
  end;

// *********************************************************************//
// Interface: ICab
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4A690B54-0046-47E7-960E-9C2630770D20}
// *********************************************************************//
  ICab = interface(IDispatch)
    ['{4A690B54-0046-47E7-960E-9C2630770D20}']
    function Get_Root: ICabNode; safecall;
    procedure Reset; safecall;
    procedure Load(const pSource: IStream; bDetachFromSource: WordBool); safecall;
    procedure Save(const pDest: IStream); safecall;
    procedure LoadFromRegistry(sSrcPath: PWideChar; nSrcRoot: HANDLE_T); safecall;
    procedure SaveToRegistry(sDestPath: PWideChar; nDestRoot: HANDLE_T); safecall;
    function Get_ModCounter: Integer; safecall;
    function Export(nFormat: CabExportFormat; nFlags: CabExportFlags): IStream; safecall;
    procedure Import(const pDataStream: IStream; nFormat: CabExportFormat); safecall;
    procedure LoadFromJSON(const pJSON: WideString); safecall;
    function SaveToJSON(nFlags: CabExportFlags): WideString; safecall;
    property Root: ICabNode read Get_Root;
    property ModCounter: Integer read Get_ModCounter;
  end;

// *********************************************************************//
// DispIntf:  ICabDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4A690B54-0046-47E7-960E-9C2630770D20}
// *********************************************************************//
  ICabDisp = dispinterface
    ['{4A690B54-0046-47E7-960E-9C2630770D20}']
    property Root: ICabNode readonly dispid 1610743808;
    procedure Reset; dispid 1610743809;
    procedure Load(const pSource: IStream; bDetachFromSource: WordBool); dispid 1610743810;
    procedure Save(const pDest: IStream); dispid 1610743811;
    procedure LoadFromRegistry(sSrcPath: {NOT_OLEAUTO(PWideChar)}OleVariant; nSrcRoot: HANDLE_T); dispid 1610743812;
    procedure SaveToRegistry(sDestPath: {NOT_OLEAUTO(PWideChar)}OleVariant; nDestRoot: HANDLE_T); dispid 1610743813;
    property ModCounter: Integer readonly dispid 1610743814;
    function Export(nFormat: CabExportFormat; nFlags: CabExportFlags): IStream; dispid 1610743815;
    procedure Import(const pDataStream: IStream; nFormat: CabExportFormat); dispid 1610743816;
    procedure LoadFromJSON(const pJSON: WideString); dispid 1610743817;
    function SaveToJSON(nFlags: CabExportFlags): WideString; dispid 1610743818;
  end;

// *********************************************************************//
// Interface: ICabNode
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EDEE1C3-AA36-4DAA-8C8E-58AAD6EEC086}
// *********************************************************************//
  ICabNode = interface(IDispatch)
    ['{3EDEE1C3-AA36-4DAA-8C8E-58AAD6EEC086}']
    function Get_type_: CabDataTypeID; safecall;
    procedure Set_type_(nType: CabDataTypeID); safecall;
    function Get_Valid: WordBool; safecall;
    function Get_Bool: WordBool; safecall;
    procedure Set_Bool(bVal: WordBool); safecall;
    function Get_Int: SYSINT; safecall;
    procedure Set_Int(nVal: SYSINT); safecall;
    function Get_Int64: Int64; safecall;
    procedure Set_Int64(nVal: Int64); safecall;
    function Get_Double: Double; safecall;
    procedure Set_Double(nVal: Double); safecall;
    function Get_String_: WideString; safecall;
    procedure Set_String_(const sVal: WideString); safecall;
    function Get_Stream: IStream; safecall;
    procedure Set_Stream(const pVal: IStream); safecall;
    function Get_Unknown: IUnknown; safecall;
    procedure Set_Unknown(const pVal: IUnknown); safecall;
    function Get_v: OleVariant; safecall;
    procedure Set_v(Val: OleVariant); safecall;
    function GetBool(sKey: PWideChar; bDefVal: WordBool): WordBool; safecall;
    function GetInt(sKey: PWideChar; nDefVal: SYSINT): SYSINT; safecall;
    function GetInt64(sKey: PWideChar; nDefVal: Int64): Int64; safecall;
    function GetDouble(sKey: PWideChar; nDefVal: Double): Double; safecall;
    function GetString(sKey: PWideChar; sDefVal: PWideChar): WideString; safecall;
    function GetStream(sKey: PWideChar; const pDefVal: IStream): IStream; safecall;
    function GetUnknown(sKey: PWideChar; const pDefVal: IUnknown): IUnknown; safecall;
    procedure SetBool(sKey: PWideChar; bVal: WordBool); safecall;
    procedure SetInt(sKey: PWideChar; nVal: SYSINT); safecall;
    procedure SetInt64(sKey: PWideChar; nVal: Int64); safecall;
    procedure SetDouble(sKey: PWideChar; nVal: Double); safecall;
    procedure SetString(sKey: PWideChar; sVal: PWideChar); safecall;
    procedure SetStream(sKey: PWideChar; const pVal: IStream); safecall;
    procedure SetUnknown(sKey: PWideChar; const pVal: IUnknown); safecall;
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(itemIdentity: OleVariant): ICabNode; safecall;
    function Get_Count: SYSINT; safecall;
    procedure Remove(itemIdentity: OleVariant); safecall;
    procedure Clear; safecall;
    function Insert(itemIdentity: OleVariant; nType: CabDataTypeID): ICabNode; safecall;
    function Add(nType: CabDataTypeID): ICabNode; safecall;
    procedure Copy(const pSrc: ICabNode); safecall;
    procedure MoveBlock(nCurIndex: Integer; nNewIndex: Integer; nCount: Integer); safecall;
    procedure RemoveBlock(nStartIndex: Integer; nCount: Integer); safecall;
    function Get_LastError: HResult; safecall;
    function Get_Flags: ULONG_T; safecall;
    procedure Set_Flags(nValue: ULONG_T); safecall;
    procedure SetTemplate(const pNode: ICabNode); safecall;
    procedure SetTemplate2(pTemplateXml: Pointer; cbTemplateXml: Integer; sRootName: PWideChar); safecall;
    function Get_ItemKey(nIndex: Integer): WideString; safecall;
    function AddValue(itemIdentity: OleVariant; Value: OleVariant; nType: CabDataTypeID; 
                      bForcePath: WordBool): ICabNode; safecall;
    function Get_SubNode(itemIdentity: OleVariant; nType: CabDataTypeID): ICabNode; safecall;
    function Get_StringPtr: PARAM_T; safecall;
    function ItemExists(sItemIdentity: PWideChar; nType: CabDataTypeID): WordBool; safecall;
    function Equals(const pAnotherCabNode: ICabNode; nOptions: ULONG_T): WordBool; safecall;
    procedure SetTemplate3(const pTemplateXmlStream: IStream; sRootName: PWideChar); safecall;
    property type_: CabDataTypeID read Get_type_ write Set_type_;
    property Valid: WordBool read Get_Valid;
    property Bool: WordBool read Get_Bool write Set_Bool;
    property Int: SYSINT read Get_Int write Set_Int;
    property Int64: Int64 read Get_Int64 write Set_Int64;
    property Double: Double read Get_Double write Set_Double;
    property String_: WideString read Get_String_ write Set_String_;
    property Stream: IStream read Get_Stream write Set_Stream;
    property Unknown: IUnknown read Get_Unknown write Set_Unknown;
    property v: OleVariant read Get_v write Set_v;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[itemIdentity: OleVariant]: ICabNode read Get_Item; default;
    property Count: SYSINT read Get_Count;
    property LastError: HResult read Get_LastError;
    property Flags: ULONG_T read Get_Flags write Set_Flags;
    property ItemKey[nIndex: Integer]: WideString read Get_ItemKey;
    property SubNode[itemIdentity: OleVariant; nType: CabDataTypeID]: ICabNode read Get_SubNode;
    property StringPtr: PARAM_T read Get_StringPtr;
  end;

// *********************************************************************//
// DispIntf:  ICabNodeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3EDEE1C3-AA36-4DAA-8C8E-58AAD6EEC086}
// *********************************************************************//
  ICabNodeDisp = dispinterface
    ['{3EDEE1C3-AA36-4DAA-8C8E-58AAD6EEC086}']
    property type_: CabDataTypeID dispid 1610743808;
    property Valid: WordBool readonly dispid 1610743810;
    property Bool: WordBool dispid 1610743811;
    property Int: SYSINT dispid 1610743813;
    property Int64: Int64 dispid 1610743815;
    property Double: Double dispid 1610743817;
    property String_: WideString dispid 1610743819;
    property Stream: IStream dispid 1610743821;
    property Unknown: IUnknown dispid 1610743823;
    property v: OleVariant dispid 1610743825;
    function GetBool(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; bDefVal: WordBool): WordBool; dispid 1610743827;
    function GetInt(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; nDefVal: SYSINT): SYSINT; dispid 1610743828;
    function GetInt64(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; nDefVal: Int64): Int64; dispid 1610743829;
    function GetDouble(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; nDefVal: Double): Double; dispid 1610743830;
    function GetString(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                       sDefVal: {NOT_OLEAUTO(PWideChar)}OleVariant): WideString; dispid 1610743831;
    function GetStream(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; const pDefVal: IStream): IStream; dispid 1610743832;
    function GetUnknown(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; const pDefVal: IUnknown): IUnknown; dispid 1610743833;
    procedure SetBool(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; bVal: WordBool); dispid 1610743834;
    procedure SetInt(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; nVal: SYSINT); dispid 1610743835;
    procedure SetInt64(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; nVal: Int64); dispid 1610743836;
    procedure SetDouble(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; nVal: Double); dispid 1610743837;
    procedure SetString(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                        sVal: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743838;
    procedure SetStream(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; const pVal: IStream); dispid 1610743839;
    procedure SetUnknown(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant; const pVal: IUnknown); dispid 1610743840;
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[itemIdentity: OleVariant]: ICabNode readonly dispid 0; default;
    property Count: SYSINT readonly dispid 1;
    procedure Remove(itemIdentity: OleVariant); dispid 1610743844;
    procedure Clear; dispid 1610743845;
    function Insert(itemIdentity: OleVariant; nType: CabDataTypeID): ICabNode; dispid 1610743846;
    function Add(nType: CabDataTypeID): ICabNode; dispid 1610743847;
    procedure Copy(const pSrc: ICabNode); dispid 1610743848;
    procedure MoveBlock(nCurIndex: Integer; nNewIndex: Integer; nCount: Integer); dispid 1610743849;
    procedure RemoveBlock(nStartIndex: Integer; nCount: Integer); dispid 1610743850;
    property LastError: HResult readonly dispid 1610743851;
    property Flags: ULONG_T dispid 1610743852;
    procedure SetTemplate(const pNode: ICabNode); dispid 1610743854;
    procedure SetTemplate2(pTemplateXml: {NOT_OLEAUTO(Pointer)}OleVariant; cbTemplateXml: Integer; 
                           sRootName: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743855;
    property ItemKey[nIndex: Integer]: WideString readonly dispid 1610743856;
    function AddValue(itemIdentity: OleVariant; Value: OleVariant; nType: CabDataTypeID; 
                      bForcePath: WordBool): ICabNode; dispid 1610743857;
    property SubNode[itemIdentity: OleVariant; nType: CabDataTypeID]: ICabNode readonly dispid 1610743858;
    property StringPtr: PARAM_T readonly dispid 1610743859;
    function ItemExists(sItemIdentity: {NOT_OLEAUTO(PWideChar)}OleVariant; nType: CabDataTypeID): WordBool; dispid 1610743860;
    function Equals(const pAnotherCabNode: ICabNode; nOptions: ULONG_T): WordBool; dispid 1610743861;
    procedure SetTemplate3(const pTemplateXmlStream: IStream; 
                           sRootName: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743862;
  end;

// *********************************************************************//
// Interface: ISequentialStream
// Flags:     (0)
// GUID:      {0C733A30-2A1C-11CE-ADE5-00AA0044773D}
// *********************************************************************//
  ISequentialStream = interface(IUnknown)
    ['{0C733A30-2A1C-11CE-ADE5-00AA0044773D}']
    function RemoteRead(out pv: Byte; cb: LongWord; out pcbRead: LongWord): HResult; stdcall;
    function RemoteWrite(var pv: Byte; cb: LongWord; out pcbWritten: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IStream
// Flags:     (0)
// GUID:      {0000000C-0000-0000-C000-000000000046}
// *********************************************************************//
  IStream = interface(ISequentialStream)
    ['{0000000C-0000-0000-C000-000000000046}']
    function RemoteSeek(dlibMove: _LARGE_INTEGER; dwOrigin: LongWord; 
                        out plibNewPosition: _ULARGE_INTEGER): HResult; stdcall;
    function SetSize(libNewSize: _ULARGE_INTEGER): HResult; stdcall;
    function RemoteCopyTo(const pstm: IStream; cb: _ULARGE_INTEGER; out pcbRead: _ULARGE_INTEGER; 
                          out pcbWritten: _ULARGE_INTEGER): HResult; stdcall;
    function Commit(grfCommitFlags: LongWord): HResult; stdcall;
    function Revert: HResult; stdcall;
    function LockRegion(libOffset: _ULARGE_INTEGER; cb: _ULARGE_INTEGER; dwLockType: LongWord): HResult; stdcall;
    function UnlockRegion(libOffset: _ULARGE_INTEGER; cb: _ULARGE_INTEGER; dwLockType: LongWord): HResult; stdcall;
    function Stat(out pstatstg: tagSTATSTG; grfStatFlag: LongWord): HResult; stdcall;
    function Clone(out ppstm: IStream): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IMemBlock
// Flags:     (0)
// GUID:      {65BCC286-157D-4D50-A3D6-6DFA9337311B}
// *********************************************************************//
  IMemBlock = interface(IUnknown)
    ['{65BCC286-157D-4D50-A3D6-6DFA9337311B}']
    function Get_Data(out pData: Pointer): HResult; stdcall;
    function Get_Size(out nBytesCount: ULONG_PTR): HResult; stdcall;
    function Get_Capacity(out nTotalBytesCount: ULONG_PTR): HResult; stdcall;
    function Resize(nNewSize: ULONG_PTR; bAutoCompact: WordBool): HResult; stdcall;
    function Compact: HResult; stdcall;
    function Free: HResult; stdcall;
    function Append(pData: Pointer; nDataSize: ULONG_PTR): HResult; stdcall;
    function SetData(pData: Pointer; nDataSize: ULONG_PTR): HResult; stdcall;
    function Grow(nNewCapacity: ULONG_PTR): HResult; stdcall;
    function GrowToAdd(nAddCapacity: ULONG_PTR): HResult; stdcall;
    function Read(nOffset: ULONG_PTR; pDest: Pointer; nDestSize: ULONG_PTR; out nReadSize: ULONG_PTR): HResult; stdcall;
    function Write(nOffset: ULONG_PTR; pSrc: Pointer; nSrcSize: ULONG_PTR): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IBitSet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E18E8434-3DF3-4A20-BFDC-F1F5272F162E}
// *********************************************************************//
  IBitSet = interface(IDispatch)
    ['{E18E8434-3DF3-4A20-BFDC-F1F5272F162E}']
    function Get_Item(nIndex: ULONG_T): WordBool; safecall;
    procedure Set_Item(nIndex: ULONG_T; bVal: WordBool); safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_IsClear: WordBool; safecall;
    function Get_HasSet: WordBool; safecall;
    procedure SetSize(nNewCount: ULONG_T); safecall;
    procedure Set_(nStartIndex: ULONG_T; nCount: ULONG_T; bOn: WordBool); safecall;
    procedure SetWithGrow(nIndex: ULONG_T; bOn: WordBool); safecall;
    procedure Copy(const pSource: IBitSet); safecall;
    procedure Union(const pSource: IBitSet); safecall;
    procedure Intersection(const pSource: IBitSet); safecall;
    function HasIntersection(const pSource: IBitSet): WordBool; safecall;
    procedure Difference(const pSource: IBitSet); safecall;
    function IsEqual(const pSource: IBitSet): WordBool; safecall;
    function GetNumberOfSet(nStartPos: ULONG_T; nEndPos: ULONG_T): ULONG_T; safecall;
    property Item[nIndex: ULONG_T]: WordBool read Get_Item write Set_Item; default;
    property Count: ULONG_T read Get_Count;
    property IsClear: WordBool read Get_IsClear;
    property HasSet: WordBool read Get_HasSet;
  end;

// *********************************************************************//
// DispIntf:  IBitSetDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E18E8434-3DF3-4A20-BFDC-F1F5272F162E}
// *********************************************************************//
  IBitSetDisp = dispinterface
    ['{E18E8434-3DF3-4A20-BFDC-F1F5272F162E}']
    property Item[nIndex: ULONG_T]: WordBool dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    property IsClear: WordBool readonly dispid 1610743811;
    property HasSet: WordBool readonly dispid 1610743812;
    procedure SetSize(nNewCount: ULONG_T); dispid 1610743813;
    procedure Set_(nStartIndex: ULONG_T; nCount: ULONG_T; bOn: WordBool); dispid 1610743814;
    procedure SetWithGrow(nIndex: ULONG_T; bOn: WordBool); dispid 1610743815;
    procedure Copy(const pSource: IBitSet); dispid 1610743816;
    procedure Union(const pSource: IBitSet); dispid 1610743817;
    procedure Intersection(const pSource: IBitSet); dispid 1610743818;
    function HasIntersection(const pSource: IBitSet): WordBool; dispid 1610743819;
    procedure Difference(const pSource: IBitSet); dispid 1610743820;
    function IsEqual(const pSource: IBitSet): WordBool; dispid 1610743821;
    function GetNumberOfSet(nStartPos: ULONG_T; nEndPos: ULONG_T): ULONG_T; dispid 1610743822;
  end;

// *********************************************************************//
// Interface: IColor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DFA5BEFF-8BDD-4AE1-AD40-6D11FAD0CA1C}
// *********************************************************************//
  IColor = interface(IDispatch)
    ['{DFA5BEFF-8BDD-4AE1-AD40-6D11FAD0CA1C}']
    function Get_type_: ColorType; safecall;
    procedure Set_type_(nType: ColorType); safecall;
    function Get_Value: WideString; safecall;
    procedure Set_Value(const sValue: WideString); safecall;
    function Get_RGB: ULONG_T; safecall;
    procedure Set_RGB(nRGB: ULONG_T); safecall;
    function Get_Abstract: WordBool; safecall;
    procedure GetRGB(out nR: Single; out nG: Single; out nB: Single); safecall;
    procedure SetRGB(nR: Single; nG: Single; nB: Single); safecall;
    procedure GetCMYK(out nC: Single; out nM: Single; out nY: Single; out nK: Single); safecall;
    procedure SetCMYK(nC: Single; nM: Single; nY: Single; nK: Single); safecall;
    procedure GetGray(out nVal: Single); safecall;
    procedure SetGray(nVal: Single); safecall;
    procedure GetValue(out nV0: Single; out nV1: Single; out nV2: Single; out nV3: Single); safecall;
    procedure CopyFrom(const pSrc: IColor); safecall;
    function Clone: IColor; safecall;
    function IsEqual(const pColor: IColor): WordBool; safecall;
    property type_: ColorType read Get_type_ write Set_type_;
    property Value: WideString read Get_Value write Set_Value;
    property RGB: ULONG_T read Get_RGB write Set_RGB;
    property Abstract: WordBool read Get_Abstract;
  end;

// *********************************************************************//
// DispIntf:  IColorDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DFA5BEFF-8BDD-4AE1-AD40-6D11FAD0CA1C}
// *********************************************************************//
  IColorDisp = dispinterface
    ['{DFA5BEFF-8BDD-4AE1-AD40-6D11FAD0CA1C}']
    property type_: ColorType dispid 1610743808;
    property Value: WideString dispid 1610743810;
    property RGB: ULONG_T dispid 1610743812;
    property Abstract: WordBool readonly dispid 1610743814;
    procedure GetRGB(out nR: Single; out nG: Single; out nB: Single); dispid 1610743815;
    procedure SetRGB(nR: Single; nG: Single; nB: Single); dispid 1610743816;
    procedure GetCMYK(out nC: Single; out nM: Single; out nY: Single; out nK: Single); dispid 1610743817;
    procedure SetCMYK(nC: Single; nM: Single; nY: Single; nK: Single); dispid 1610743818;
    procedure GetGray(out nVal: Single); dispid 1610743819;
    procedure SetGray(nVal: Single); dispid 1610743820;
    procedure GetValue(out nV0: Single; out nV1: Single; out nV2: Single; out nV3: Single); dispid 1610743821;
    procedure CopyFrom(const pSrc: IColor); dispid 1610743822;
    function Clone: IColor; dispid 1610743823;
    function IsEqual(const pColor: IColor): WordBool; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: IOperationList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {874C499C-FA85-4B0C-A5E9-CA8F022CAC9F}
// *********************************************************************//
  IOperationList = interface(IDispatch)
    ['{874C499C-FA85-4B0C-A5E9-CA8F022CAC9F}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IOperation; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(const pItem: IOperation; nIndex: ULONG_T); safecall;
    function Find(nOperationID: Integer; var nIndex: Integer): IOperation; safecall;
    procedure Do_(nFlags: Integer); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IOperation read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IOperationListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {874C499C-FA85-4B0C-A5E9-CA8F022CAC9F}
// *********************************************************************//
  IOperationListDisp = dispinterface
    ['{874C499C-FA85-4B0C-A5E9-CA8F022CAC9F}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IOperation readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Insert(const pItem: IOperation; nIndex: ULONG_T); dispid 1610743813;
    function Find(nOperationID: Integer; var nIndex: Integer): IOperation; dispid 1610743814;
    procedure Do_(nFlags: Integer); dispid 1610743815;
  end;

// *********************************************************************//
// Interface: IOperation
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {96B2AE5F-BFDE-426A-A8C5-A7489C64F0C0}
// *********************************************************************//
  IOperation = interface(IDispatch)
    ['{96B2AE5F-BFDE-426A-A8C5-A7489C64F0C0}']
    function Get_ID: Integer; safecall;
    function Get_Params: ICab; safecall;
    function Get_COMThreadingModel: COMThreadingModel; safecall;
    procedure Do_(nFlags: Integer); safecall;
    procedure ShowSetupUI(hWndParent: HANDLE_T; nFlags: Integer); safecall;
    function CreateInputItem(const pSrc: IUnknown): IOpInputItem; safecall;
    property ID: Integer read Get_ID;
    property Params: ICab read Get_Params;
    property COMThreadingModel: COMThreadingModel read Get_COMThreadingModel;
  end;

// *********************************************************************//
// DispIntf:  IOperationDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {96B2AE5F-BFDE-426A-A8C5-A7489C64F0C0}
// *********************************************************************//
  IOperationDisp = dispinterface
    ['{96B2AE5F-BFDE-426A-A8C5-A7489C64F0C0}']
    property ID: Integer readonly dispid 1610743808;
    property Params: ICab readonly dispid 1610743809;
    property COMThreadingModel: COMThreadingModel readonly dispid 1610743810;
    procedure Do_(nFlags: Integer); dispid 1610743811;
    procedure ShowSetupUI(hWndParent: HANDLE_T; nFlags: Integer); dispid 1610743812;
    function CreateInputItem(const pSrc: IUnknown): IOpInputItem; dispid 1610743813;
  end;

// *********************************************************************//
// Interface: IOpInputItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5E0B2A7A-D5A8-4E0E-8D8C-5AF893269E44}
// *********************************************************************//
  IOpInputItem = interface(IDispatch)
    ['{5E0B2A7A-D5A8-4E0E-8D8C-5AF893269E44}']
    function Get_Src: IUnknown; safecall;
    procedure Set_Src(const pSrc: IUnknown); safecall;
    function Get_Params: ICab; safecall;
    property Src: IUnknown read Get_Src write Set_Src;
    property Params: ICab read Get_Params;
  end;

// *********************************************************************//
// DispIntf:  IOpInputItemDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5E0B2A7A-D5A8-4E0E-8D8C-5AF893269E44}
// *********************************************************************//
  IOpInputItemDisp = dispinterface
    ['{5E0B2A7A-D5A8-4E0E-8D8C-5AF893269E44}']
    property Src: IUnknown dispid 1610743808;
    property Params: ICab readonly dispid 1610743810;
  end;

// *********************************************************************//
// Interface: IOperationHistory
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6C5CE95F-3FC4-4FE8-8159-21D550451AF8}
// *********************************************************************//
  IOperationHistory = interface(IDispatch)
    ['{6C5CE95F-3FC4-4FE8-8159-21D550451AF8}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IOperationHistoryItem; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_MaxCount: ULONG_T; safecall;
    procedure Set_MaxCount(nMaxCount: ULONG_T); safecall;
    function Get_MaxUsedMemSize: Largeuint; safecall;
    procedure Set_MaxUsedMemSize(nMaxUsedMemSize: Largeuint); safecall;
    procedure OnNewUILang; safecall;
    function Get_Current: Integer; safecall;
    function Get_CanUndo: WordBool; safecall;
    function Get_CanRedo: WordBool; safecall;
    procedure Undo(nCount: ULONG_T; nFlags: Integer); safecall;
    procedure Redo(nCount: ULONG_T; nFlags: Integer); safecall;
    procedure Clear; safecall;
    procedure Lock; safecall;
    procedure Unlock; safecall;
    procedure AddNew(const pNewItem: IOperationHistoryItem; nFlags: Integer); safecall;
    function Get_IsMacroStarted: WordBool; safecall;
    procedure BeginMacro(const sTitle: WideString; const sUndoTitle: WideString; 
                         const sRedoTitle: WideString); safecall;
    procedure BeginMacro2(nTitleStrID: Integer; nUndoTitleStrID: Integer; nRedoTitleStrID: Integer); safecall;
    procedure EndMacro(bCancel: WordBool); safecall;
    procedure ClearRedo; safecall;
    function Get_ChangesCount: Integer; safecall;
    function Get_LocksCount: ULONG_T; safecall;
    function Get_ChangesMon: IOperationHistoryChangesMon; safecall;
    procedure Set_ChangesMon(const ppChangesMon: IOperationHistoryChangesMon); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IOperationHistoryItem read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property MaxCount: ULONG_T read Get_MaxCount write Set_MaxCount;
    property MaxUsedMemSize: Largeuint read Get_MaxUsedMemSize write Set_MaxUsedMemSize;
    property Current: Integer read Get_Current;
    property CanUndo: WordBool read Get_CanUndo;
    property CanRedo: WordBool read Get_CanRedo;
    property IsMacroStarted: WordBool read Get_IsMacroStarted;
    property ChangesCount: Integer read Get_ChangesCount;
    property LocksCount: ULONG_T read Get_LocksCount;
    property ChangesMon: IOperationHistoryChangesMon read Get_ChangesMon write Set_ChangesMon;
  end;

// *********************************************************************//
// DispIntf:  IOperationHistoryDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6C5CE95F-3FC4-4FE8-8159-21D550451AF8}
// *********************************************************************//
  IOperationHistoryDisp = dispinterface
    ['{6C5CE95F-3FC4-4FE8-8159-21D550451AF8}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IOperationHistoryItem readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    property MaxCount: ULONG_T dispid 1610743811;
    property MaxUsedMemSize: Largeuint dispid 1610743813;
    procedure OnNewUILang; dispid 1610743815;
    property Current: Integer readonly dispid 1610743816;
    property CanUndo: WordBool readonly dispid 1610743817;
    property CanRedo: WordBool readonly dispid 1610743818;
    procedure Undo(nCount: ULONG_T; nFlags: Integer); dispid 1610743819;
    procedure Redo(nCount: ULONG_T; nFlags: Integer); dispid 1610743820;
    procedure Clear; dispid 1610743821;
    procedure Lock; dispid 1610743822;
    procedure Unlock; dispid 1610743823;
    procedure AddNew(const pNewItem: IOperationHistoryItem; nFlags: Integer); dispid 1610743824;
    property IsMacroStarted: WordBool readonly dispid 1610743825;
    procedure BeginMacro(const sTitle: WideString; const sUndoTitle: WideString; 
                         const sRedoTitle: WideString); dispid 1610743826;
    procedure BeginMacro2(nTitleStrID: Integer; nUndoTitleStrID: Integer; nRedoTitleStrID: Integer); dispid 1610743827;
    procedure EndMacro(bCancel: WordBool); dispid 1610743828;
    procedure ClearRedo; dispid 1610743829;
    property ChangesCount: Integer readonly dispid 1610743830;
    property LocksCount: ULONG_T readonly dispid 1610743831;
    property ChangesMon: IOperationHistoryChangesMon dispid 1610743832;
  end;

// *********************************************************************//
// Interface: IOperationHistoryItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A9E334D7-43CC-411D-8F86-1398203326C1}
// *********************************************************************//
  IOperationHistoryItem = interface(IDispatch)
    ['{A9E334D7-43CC-411D-8F86-1398203326C1}']
    function Get_Title: WideString; safecall;
    function Get_UndoTitle: WideString; safecall;
    function Get_RedoTitle: WideString; safecall;
    function Get_UsedMemSize: Largeuint; safecall;
    procedure OnNewUILang; safecall;
    procedure MergeWith(const pOp: IOperationHistoryItem); safecall;
    procedure Redo(nFlags: Integer); safecall;
    procedure Undo(nFlags: Integer); safecall;
    property Title: WideString read Get_Title;
    property UndoTitle: WideString read Get_UndoTitle;
    property RedoTitle: WideString read Get_RedoTitle;
    property UsedMemSize: Largeuint read Get_UsedMemSize;
  end;

// *********************************************************************//
// DispIntf:  IOperationHistoryItemDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A9E334D7-43CC-411D-8F86-1398203326C1}
// *********************************************************************//
  IOperationHistoryItemDisp = dispinterface
    ['{A9E334D7-43CC-411D-8F86-1398203326C1}']
    property Title: WideString readonly dispid 1610743808;
    property UndoTitle: WideString readonly dispid 1610743809;
    property RedoTitle: WideString readonly dispid 1610743810;
    property UsedMemSize: Largeuint readonly dispid 1610743811;
    procedure OnNewUILang; dispid 1610743812;
    procedure MergeWith(const pOp: IOperationHistoryItem); dispid 1610743813;
    procedure Redo(nFlags: Integer); dispid 1610743814;
    procedure Undo(nFlags: Integer); dispid 1610743815;
  end;

// *********************************************************************//
// Interface: IOperationHistoryChangesMon
// Flags:     (0)
// GUID:      {2033B880-7331-462F-9F67-553BA0BE2A6A}
// *********************************************************************//
  IOperationHistoryChangesMon = interface(IUnknown)
    ['{2033B880-7331-462F-9F67-553BA0BE2A6A}']
    function OnOperationHistoryChanged(const pHist: IOperationHistory): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IObjCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4B1C806E-791F-4D81-AD28-28C84A7F9626}
// *********************************************************************//
  IObjCollection = interface(IDispatch)
    ['{4B1C806E-791F-4D81-AD28-28C84A7F9626}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUnknown; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Remove2(const pItem: IUnknown); safecall;
    procedure Insert(const pItem: IUnknown; nIndex: ULONG_T); safecall;
    function Find(const pItem: IUnknown): Integer; safecall;
    procedure InsertFrom(const pSrc: IObjCollection; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IObjCollection); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUnknown read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IObjCollectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4B1C806E-791F-4D81-AD28-28C84A7F9626}
// *********************************************************************//
  IObjCollectionDisp = dispinterface
    ['{4B1C806E-791F-4D81-AD28-28C84A7F9626}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUnknown readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Remove2(const pItem: IUnknown); dispid 1610743813;
    procedure Insert(const pItem: IUnknown; nIndex: ULONG_T); dispid 1610743814;
    function Find(const pItem: IUnknown): Integer; dispid 1610743815;
    procedure InsertFrom(const pSrc: IObjCollection; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743816;
    procedure CopyFrom(const pSrc: IObjCollection); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IWords
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {05917844-D520-4B9C-9557-0A9219652549}
// *********************************************************************//
  IWords = interface(IDispatch)
    ['{05917844-D520-4B9C-9557-0A9219652549}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): WideString; safecall;
    procedure Set_Item(nIndex: ULONG_T; const sItem: WideString); safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(const sItem: WideString; nIndex: ULONG_T); safecall;
    procedure InsertFrom(const pSrc: IWords; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IWords); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: WideString read Get_Item write Set_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IWordsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {05917844-D520-4B9C-9557-0A9219652549}
// *********************************************************************//
  IWordsDisp = dispinterface
    ['{05917844-D520-4B9C-9557-0A9219652549}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: WideString dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743811;
    procedure Clear; dispid 1610743812;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743813;
    procedure Insert(const sItem: WideString; nIndex: ULONG_T); dispid 1610743814;
    procedure InsertFrom(const pSrc: IWords; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); dispid 1610743815;
    procedure CopyFrom(const pSrc: IWords); dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IUniqueStrings
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BCBDCD6D-0C0A-4040-A69C-2008C35B7525}
// *********************************************************************//
  IUniqueStrings = interface(IDispatch)
    ['{BCBDCD6D-0C0A-4040-A69C-2008C35B7525}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): WideString; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(const sItem: WideString); safecall;
    function Find(const sItem: WideString): Integer; safecall;
    procedure InsertFrom(const pSrc: IUniqueStrings; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IUniqueStrings); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: WideString read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IUniqueStringsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BCBDCD6D-0C0A-4040-A69C-2008C35B7525}
// *********************************************************************//
  IUniqueStringsDisp = dispinterface
    ['{BCBDCD6D-0C0A-4040-A69C-2008C35B7525}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: WideString readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Insert(const sItem: WideString); dispid 1610743813;
    function Find(const sItem: WideString): Integer; dispid 1610743814;
    procedure InsertFrom(const pSrc: IUniqueStrings; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T); dispid 1610743815;
    procedure CopyFrom(const pSrc: IUniqueStrings); dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IProgressMon
// Flags:     (128) NonExtensible
// GUID:      {E663B47E-D10C-4690-B1EE-1BDB10C73EBE}
// *********************************************************************//
  IProgressMon = interface(IUnknown)
    ['{E663B47E-D10C-4690-B1EE-1BDB10C73EBE}']
    function Get_Duration(out nDuration: Double): HResult; stdcall;
    function Set_Duration(nDuration: Double): HResult; stdcall;
    function Get_Pos(out nPos: Double): HResult; stdcall;
    function Set_Pos(nPos: Double): HResult; stdcall;
    function SetText(const sText: WideString): HResult; stdcall;
    function SetTitle(const sTitle: WideString): HResult; stdcall;
    function SetStatusText(const sStatusText: WideString): HResult; stdcall;
    function SetButtonTitle(const sButtonTitle: WideString): HResult; stdcall;
    function Get_Style(out nStyle: ULONG_T): HResult; stdcall;
    function Set_Style(nStyle: ULONG_T): HResult; stdcall;
    function SetStyle(nStyle: ULONG_T; nStyleMask: ULONG_T): HResult; stdcall;
    function Start: HResult; stdcall;
    function Stop: HResult; stdcall;
    function Get_Canceled(out bCanceled: WordBool): HResult; stdcall;
    function Get_CancelFlag(out pCancelFlag: IFlag): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFlag
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5B1CB5B5-8FC9-426B-B0D0-42BCADFE3935}
// *********************************************************************//
  IFlag = interface(IDispatch)
    ['{5B1CB5B5-8FC9-426B-B0D0-42BCADFE3935}']
    function Get_Value: WordBool; safecall;
    procedure Set_Value(bVal: WordBool); safecall;
    function Get_Handle: HANDLE_T; safecall;
    property Value: WordBool read Get_Value write Set_Value;
    property Handle: HANDLE_T read Get_Handle;
  end;

// *********************************************************************//
// DispIntf:  IFlagDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5B1CB5B5-8FC9-426B-B0D0-42BCADFE3935}
// *********************************************************************//
  IFlagDisp = dispinterface
    ['{5B1CB5B5-8FC9-426B-B0D0-42BCADFE3935}']
    property Value: WordBool dispid 1610743808;
    property Handle: HANDLE_T readonly dispid 1610743810;
  end;

// *********************************************************************//
// Interface: IString
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D1CB9426-FA08-4829-8470-C8C7FF7F7A00}
// *********************************************************************//
  IString = interface(IDispatch)
    ['{D1CB9426-FA08-4829-8470-C8C7FF7F7A00}']
    function Get_Value: WideString; safecall;
    procedure Set_Value(const sVal: WideString); safecall;
    function Get_IsEmpty: WordBool; safecall;
    procedure Empty; safecall;
    property Value: WideString read Get_Value write Set_Value;
    property IsEmpty: WordBool read Get_IsEmpty;
  end;

// *********************************************************************//
// DispIntf:  IStringDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D1CB9426-FA08-4829-8470-C8C7FF7F7A00}
// *********************************************************************//
  IStringDisp = dispinterface
    ['{D1CB9426-FA08-4829-8470-C8C7FF7F7A00}']
    property Value: WideString dispid 1610743808;
    property IsEmpty: WordBool readonly dispid 1610743810;
    procedure Empty; dispid 1610743811;
  end;

// *********************************************************************//
// Interface: INumArray
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F25D53D5-5F88-4FDD-BB3F-88EFC7E7C2CE}
// *********************************************************************//
  INumArray = interface(IDispatch)
    ['{F25D53D5-5F88-4FDD-BB3F-88EFC7E7C2CE}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): Integer; safecall;
    procedure Set_Item(nIndex: ULONG_T; nItem: Integer); safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(nItem: Integer; nIndex: ULONG_T); safecall;
    procedure Insert2(var nSrcItems: Integer; nSrcItemCount: ULONG_T; nIndex: ULONG_T); safecall;
    procedure InsertFrom(const pSrc: INumArray; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: INumArray); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: Integer read Get_Item write Set_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  INumArrayDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F25D53D5-5F88-4FDD-BB3F-88EFC7E7C2CE}
// *********************************************************************//
  INumArrayDisp = dispinterface
    ['{F25D53D5-5F88-4FDD-BB3F-88EFC7E7C2CE}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: Integer dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743811;
    procedure Clear; dispid 1610743812;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743813;
    procedure Insert(nItem: Integer; nIndex: ULONG_T); dispid 1610743814;
    procedure Insert2(var nSrcItems: Integer; nSrcItemCount: ULONG_T; nIndex: ULONG_T); dispid 1610743815;
    procedure InsertFrom(const pSrc: INumArray; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); dispid 1610743816;
    procedure CopyFrom(const pSrc: INumArray); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IRangeHelper
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7F6E91C4-12B5-4E2F-9C2B-479EF525A9F7}
// *********************************************************************//
  IRangeHelper = interface(IDispatch)
    ['{7F6E91C4-12B5-4E2F-9C2B-479EF525A9F7}']
    function Get_type_: RangeType; safecall;
    procedure Set_type_(nType: RangeType); safecall;
    function Get_Filter: RangeType; safecall;
    procedure Set_Filter(nType: RangeType); safecall;
    function Get_HasExact: WordBool; safecall;
    function Get_ExactStr: WideString; safecall;
    procedure Set_ExactStr(const sStr: WideString); safecall;
    function Get_InputExactStr: WideString; safecall;
    function Get_HasArray: WordBool; safecall;
    procedure GetArray(const pArr: INumArray); safecall;
    procedure SetArray(const pArr: INumArray); safecall;
    function Get_Current: ULONG_T; safecall;
    procedure Set_Current(nIndex: ULONG_T); safecall;
    function Get_CurrentRect: PXC_Rect; safecall;
    procedure Set_CurrentRect(stRect: PUserType1); safecall;
    function Get_HasCurrent: WordBool; safecall;
    function Get_HasCurrentRect: WordBool; safecall;
    procedure SetCustomRect(nIndex: ULONG_T; var stRect: PXC_Rect); safecall;
    procedure GetCustomRect(out nIndex: ULONG_T; out stRect: PXC_Rect); safecall;
    function Get_HasCustomRect: WordBool; safecall;
    procedure Set_Reversed(bRes: WordBool); safecall;
    function Get_Reversed: WordBool; safecall;
    function Get_MaxSize: ULONG_T; safecall;
    procedure Set_MaxSize(nMaxSize: ULONG_T); safecall;
    function Get_Size: ULONG_T; safecall;
    function Get_IsEmpty: WordBool; safecall;
    procedure Cleanup; safecall;
    procedure Fixup(nDefaultType: RangeType); safecall;
    procedure MakeSimple(nBegin: ULONG_T; nEnd: ULONG_T); safecall;
    procedure GetIndexes(const pBitSet: IBitSet); safecall;
    procedure GetIndexes2(const pIndexes: INumArray; bUniqueOnly: WordBool); safecall;
    function EnumIndexes(bStartEnum: WordBool; out nIndex: ULONG_T; out bNewRange: WordBool): WordBool; safecall;
    procedure Load(const pSrcParams: ICabNode; nRangeFeatures: ULONG_T); safecall;
    procedure Save(const pDstParams: ICabNode); safecall;
    procedure CopyFrom(const pSrc: IRangeHelper); safecall;
    property type_: RangeType read Get_type_ write Set_type_;
    property Filter: RangeType read Get_Filter write Set_Filter;
    property HasExact: WordBool read Get_HasExact;
    property ExactStr: WideString read Get_ExactStr write Set_ExactStr;
    property InputExactStr: WideString read Get_InputExactStr;
    property HasArray: WordBool read Get_HasArray;
    property Current: ULONG_T read Get_Current write Set_Current;
    // Skipped Property "CurrentRect"
    property HasCurrent: WordBool read Get_HasCurrent;
    property HasCurrentRect: WordBool read Get_HasCurrentRect;
    property HasCustomRect: WordBool read Get_HasCustomRect;
    property Reversed: WordBool read Get_Reversed write Set_Reversed;
    property MaxSize: ULONG_T read Get_MaxSize write Set_MaxSize;
    property Size: ULONG_T read Get_Size;
    property IsEmpty: WordBool read Get_IsEmpty;
  end;

// *********************************************************************//
// DispIntf:  IRangeHelperDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7F6E91C4-12B5-4E2F-9C2B-479EF525A9F7}
// *********************************************************************//
  IRangeHelperDisp = dispinterface
    ['{7F6E91C4-12B5-4E2F-9C2B-479EF525A9F7}']
    property type_: RangeType dispid 1610743808;
    property Filter: RangeType dispid 1610743810;
    property HasExact: WordBool readonly dispid 1610743812;
    property ExactStr: WideString dispid 1610743813;
    property InputExactStr: WideString readonly dispid 1610743815;
    property HasArray: WordBool readonly dispid 1610743816;
    procedure GetArray(const pArr: INumArray); dispid 1610743817;
    procedure SetArray(const pArr: INumArray); dispid 1610743818;
    property Current: ULONG_T dispid 1610743819;
    function CurrentRect: {NOT_OLEAUTO(PXC_Rect)}OleVariant; dispid 1610743821;
    property HasCurrent: WordBool readonly dispid 1610743823;
    property HasCurrentRect: WordBool readonly dispid 1610743824;
    procedure SetCustomRect(nIndex: ULONG_T; var stRect: {NOT_OLEAUTO(PXC_Rect)}OleVariant); dispid 1610743825;
    procedure GetCustomRect(out nIndex: ULONG_T; out stRect: {NOT_OLEAUTO(PXC_Rect)}OleVariant); dispid 1610743826;
    property HasCustomRect: WordBool readonly dispid 1610743827;
    property Reversed: WordBool dispid 1610743828;
    property MaxSize: ULONG_T dispid 1610743830;
    property Size: ULONG_T readonly dispid 1610743832;
    property IsEmpty: WordBool readonly dispid 1610743833;
    procedure Cleanup; dispid 1610743834;
    procedure Fixup(nDefaultType: RangeType); dispid 1610743835;
    procedure MakeSimple(nBegin: ULONG_T; nEnd: ULONG_T); dispid 1610743836;
    procedure GetIndexes(const pBitSet: IBitSet); dispid 1610743837;
    procedure GetIndexes2(const pIndexes: INumArray; bUniqueOnly: WordBool); dispid 1610743838;
    function EnumIndexes(bStartEnum: WordBool; out nIndex: ULONG_T; out bNewRange: WordBool): WordBool; dispid 1610743839;
    procedure Load(const pSrcParams: ICabNode; nRangeFeatures: ULONG_T); dispid 1610743840;
    procedure Save(const pDstParams: ICabNode); dispid 1610743841;
    procedure CopyFrom(const pSrc: IRangeHelper); dispid 1610743842;
  end;

// *********************************************************************//
// Interface: IDblArray
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7C0A30CF-1B2F-4091-AC7F-9D11D74326B0}
// *********************************************************************//
  IDblArray = interface(IDispatch)
    ['{7C0A30CF-1B2F-4091-AC7F-9D11D74326B0}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): Double; safecall;
    procedure Set_Item(nIndex: ULONG_T; nItem: Double); safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(nItem: Double; nIndex: ULONG_T); safecall;
    procedure Insert2(var nSrcItems: Double; nSrcItemCount: ULONG_T; nIndex: ULONG_T); safecall;
    procedure InsertFrom(const pSrc: IDblArray; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IDblArray); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: Double read Get_Item write Set_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IDblArrayDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7C0A30CF-1B2F-4091-AC7F-9D11D74326B0}
// *********************************************************************//
  IDblArrayDisp = dispinterface
    ['{7C0A30CF-1B2F-4091-AC7F-9D11D74326B0}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: Double dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743811;
    procedure Clear; dispid 1610743812;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743813;
    procedure Insert(nItem: Double; nIndex: ULONG_T); dispid 1610743814;
    procedure Insert2(var nSrcItems: Double; nSrcItemCount: ULONG_T; nIndex: ULONG_T); dispid 1610743815;
    procedure InsertFrom(const pSrc: IDblArray; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); dispid 1610743816;
    procedure CopyFrom(const pSrc: IDblArray); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: ILogServer
// Flags:     (0)
// GUID:      {4E50F5DD-AF02-4325-836F-AA750CAD8527}
// *********************************************************************//
  ILogServer = interface(IUnknown)
    ['{4E50F5DD-AF02-4325-836F-AA750CAD8527}']
    function RegisterListener(const pListener: ILogListener; nMaxLevel: Integer): HResult; stdcall;
    function UnregisterListener(const pListener: ILogListener): HResult; stdcall;
    function SetListenerMaxLevel(const pListener: ILogListener; nMaxLevel: Integer): HResult; stdcall;
    function Msg(nType: LogMsgType; sText: PWideChar; nArea: Integer; nCode: Integer; 
                 nCtxType: Integer; const pCtx: IUnknown; nObjType: Integer; const pObj: IUnknown): HResult; stdcall;
    function Msg2(nType: LogMsgType; sText: PWideChar; nArea: Integer; nCode: Integer): HResult; stdcall;
    function Msg3(nCode: Integer; nArea: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILogListener
// Flags:     (0)
// GUID:      {D6481642-A74B-42A2-B5D0-94247699EC12}
// *********************************************************************//
  ILogListener = interface(IUnknown)
    ['{D6481642-A74B-42A2-B5D0-94247699EC12}']
    function OnLogMsg(nType: LogMsgType; const pMsg: ILogMsg): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILogMsg
// Flags:     (0)
// GUID:      {D52738DB-591C-4B2E-97FB-A308866F0733}
// *********************************************************************//
  ILogMsg = interface(IUnknown)
    ['{D52738DB-591C-4B2E-97FB-A308866F0733}']
    function Get_type_(out nType: LogMsgType): HResult; stdcall;
    function Get_Area(out nArea: Integer): HResult; stdcall;
    function Get_Code(out nCode: Integer): HResult; stdcall;
    function Get_CtxType(out nType: Integer): HResult; stdcall;
    function Get_ObjType(out nType: Integer): HResult; stdcall;
    function Get_Text(out sText: WideString): HResult; stdcall;
    function Get_Ctx(out pCtx: IUnknown): HResult; stdcall;
    function Get_Obj(out pObj: IUnknown): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IMathHelper
// Flags:     (0)
// GUID:      {F6C02B27-4D99-4737-AB4C-A50830ECA67B}
// *********************************************************************//
  IMathHelper = interface(IUnknown)
    ['{F6C02B27-4D99-4737-AB4C-A50830ECA67B}']
    function Matrix_IsNull(var pMatrix: PXC_Matrix; out bRes: WordBool): HResult; stdcall;
    function Matrix_IsNullF(var pMatrix: PXC_MatrixF; out bRes: WordBool): HResult; stdcall;
    function Matrix_IsIdentity(var pMatrix: PXC_Matrix; out bRes: WordBool): HResult; stdcall;
    function Matrix_IsIdentityF(var pMatrix: PXC_MatrixF; out bRes: WordBool): HResult; stdcall;
    function Matrix_IsAffine(var pMatrix: PXC_Matrix; out bRes: WordBool): HResult; stdcall;
    function Matrix_IsAffineF(var pMatrix: PXC_MatrixF; out bRes: WordBool): HResult; stdcall;
    function Matrix_IsEqual(var pA: PXC_Matrix; var pB: PXC_Matrix; out bRes: WordBool): HResult; stdcall;
    function Matrix_IsEqualF(var pA: PXC_MatrixF; var pB: PXC_MatrixF; out bRes: WordBool): HResult; stdcall;
    function Matrix_GetDeterminant(var pMatrix: PXC_Matrix; out nDet: Double): HResult; stdcall;
    function Matrix_GetDeterminantF(var pMatrix: PXC_MatrixF; out nDet: Single): HResult; stdcall;
    function Matrix_GetScale(var pMatrix: PXC_Matrix; out nScale: Double): HResult; stdcall;
    function Matrix_GetScaleF(var pMatrix: PXC_MatrixF; out nScale: Single): HResult; stdcall;
    function Matrix_Reset(var pMatrix: PXC_Matrix): HResult; stdcall;
    function Matrix_ResetF(var pMatrix: PXC_MatrixF): HResult; stdcall;
    function Matrix_Invert(var pMatrix: PXC_Matrix; out pRes: PXC_Matrix): HResult; stdcall;
    function Matrix_InvertF(var pMatrix: PXC_MatrixF; out pRes: PXC_MatrixF): HResult; stdcall;
    function Matrix_Multiply(var pA: PXC_Matrix; var pB: PXC_Matrix; out pRes: PXC_Matrix): HResult; stdcall;
    function Matrix_MultiplyF(var pA: PXC_MatrixF; var pB: PXC_MatrixF; out pRes: PXC_MatrixF): HResult; stdcall;
    function Matrix_LineToLine(var ptA1: PXC_Point; var ptB1: PXC_Point; var ptA2: PXC_Point; 
                               var ptB2: PXC_Point; out pRes: PXC_Matrix): HResult; stdcall;
    function Matrix_LineToLineF(var ptA1: PXC_PointF; var ptB1: PXC_PointF; var ptA2: PXC_PointF; 
                                var ptB2: PXC_PointF; out pRes: PXC_MatrixF): HResult; stdcall;
    function Matrix_ParlToParl(var ptA1: PXC_Point; var ptB1: PXC_Point; var ptC1: PXC_Point; 
                               var ptA2: PXC_Point; var ptB2: PXC_Point; var ptC2: PXC_Point; 
                               out pRes: PXC_Matrix): HResult; stdcall;
    function Matrix_ParlToParlF(var ptA1: PXC_PointF; var ptB1: PXC_PointF; var ptC1: PXC_PointF; 
                                var ptA2: PXC_PointF; var ptB2: PXC_PointF; var ptC2: PXC_PointF; 
                                out pRes: PXC_MatrixF): HResult; stdcall;
    function Matrix_RectToRect(var rcFrom: PXC_Rect; var rcTo: PXC_Rect; out pRes: PXC_Matrix): HResult; stdcall;
    function Matrix_RectToRectF(var rcFrom: PXC_RectF; var rcTo: PXC_RectF; out pRes: PXC_MatrixF): HResult; stdcall;
    function Matrix_Rotate(var pMatrix: PXC_Matrix; nAngle: Double; out pRes: PXC_Matrix): HResult; stdcall;
    function Matrix_RotateF(var pMatrix: PXC_MatrixF; nAngle: Single; out pRes: PXC_MatrixF): HResult; stdcall;
    function Matrix_Scale(var pMatrix: PXC_Matrix; nScaleX: Double; nScaleY: Double; 
                          out pRes: PXC_Matrix): HResult; stdcall;
    function Matrix_ScaleF(var pMatrix: PXC_MatrixF; nScaleX: Single; nScaleY: Single; 
                           out pRes: PXC_MatrixF): HResult; stdcall;
    function Matrix_Skew(var pMatrix: PXC_Matrix; nAngleV: Double; nAngleH: Double; 
                         out pRes: PXC_Matrix): HResult; stdcall;
    function Matrix_SkewF(var pMatrix: PXC_MatrixF; nAngleV: Single; nAngleH: Single; 
                          out pRes: PXC_MatrixF): HResult; stdcall;
    function Matrix_Translate(var pMatrix: PXC_Matrix; nDX: Double; nDY: Double; 
                              out pRes: PXC_Matrix): HResult; stdcall;
    function Matrix_TranslateF(var pMatrix: PXC_MatrixF; nDX: Single; nDY: Single; 
                               out pRes: PXC_MatrixF): HResult; stdcall;
    function Matrix_Decompose(var pMatrix: PXC_Matrix; out nDX: Double; out nDY: Double; 
                              out nRotation: Double; out nScaleX: Double; out nScaleY: Double; 
                              out nSkew: Double): HResult; stdcall;
    function XY_Transform(var pMatrix: PXC_Matrix; var nX: Double; var nY: Double): HResult; stdcall;
    function XY_TransformF(var pMatrix: PXC_MatrixF; var nX: Single; var nY: Single): HResult; stdcall;
    function XY_TransformDF(var pMatrix: PXC_Matrix; var nX: Single; var nY: Single): HResult; stdcall;
    function Point_Transform(var pMatrix: PXC_Matrix; var pPoint: PXC_Point): HResult; stdcall;
    function Point_TransformF(var pMatrix: PXC_MatrixF; var pPoint: PXC_PointF): HResult; stdcall;
    function Point_TransformDF(var pMatrix: PXC_Matrix; var pPoint: PXC_PointF): HResult; stdcall;
    function Point_Transform2x2(var pMatrix: PXC_Matrix; var pPoint: PXC_Point): HResult; stdcall;
    function Point_Transform2x2F(var pMatrix: PXC_MatrixF; var pPoint: PXC_PointF): HResult; stdcall;
    function Point_Transform2x2DF(var pMatrix: PXC_Matrix; var pPoint: PXC_PointF): HResult; stdcall;
    function Rect_Transform(var pMatrix: PXC_Matrix; var pRect: PXC_Rect): HResult; stdcall;
    function Rect_TransformF(var pMatrix: PXC_MatrixF; var pRect: PXC_RectF): HResult; stdcall;
    function Rect_TransformDF(var pMatrix: PXC_Matrix; var pRect: PXC_RectF): HResult; stdcall;
    function Rect_Transform2x2(var pMatrix: PXC_Matrix; var pRect: PXC_Rect): HResult; stdcall;
    function Rect_Transform2x2F(var pMatrix: PXC_MatrixF; var pRect: PXC_RectF): HResult; stdcall;
    function Rect_Transform2x2DF(var pMatrix: PXC_Matrix; var pRect: PXC_RectF): HResult; stdcall;
    function Rect_Intersect(var pRect1: PXC_Rect; var pRect2: PXC_Rect; out pRes: PXC_Rect): HResult; stdcall;
    function Rect_IntersectF(var pRect1: PXC_RectF; var pRect2: PXC_RectF; out pRes: PXC_RectF): HResult; stdcall;
    function Rect_HasIntersect(var pRect1: PXC_Rect; var pRect2: PXC_Rect; out bRes: WordBool): HResult; stdcall;
    function Rect_HasIntersectF(var pRect1: PXC_RectF; var pRect2: PXC_RectF; out bRes: WordBool): HResult; stdcall;
    function Rect_Union(var pRect1: PXC_Rect; var pRect2: PXC_Rect; out pRes: PXC_Rect): HResult; stdcall;
    function Rect_UnionF(var pRect1: PXC_RectF; var pRect2: PXC_RectF; out pRes: PXC_RectF): HResult; stdcall;
    function Rect_IsEqual(var pRect1: PXC_Rect; var pRect2: PXC_Rect; out bRes: WordBool): HResult; stdcall;
    function Rect_IsEqualF(var pRect1: PXC_RectF; var pRect2: PXC_RectF; out bRes: WordBool): HResult; stdcall;
    function Rect_Normalize(var pRect: PXC_Rect): HResult; stdcall;
    function Rect_NormalizeF(var pRect: PXC_RectF): HResult; stdcall;
    function Rect_PtIn(var pRect: PXC_Rect; var pPoint: PXC_Point; out bRes: WordBool): HResult; stdcall;
    function Rect_PtInF(var pRect: PXC_RectF; var pPoint: PXC_PointF; out bRes: WordBool): HResult; stdcall;
    function Quad_Transform(var pMatrix: PXC_Matrix; var pQuad: PXC_Quad): HResult; stdcall;
    function Quad_TransformF(var pMatrix: PXC_MatrixF; var pQuad: PXC_QuadF): HResult; stdcall;
    function Quad_TransformDF(var pMatrix: PXC_Matrix; var pQuad: PXC_QuadF): HResult; stdcall;
    function Quad_PtIn(var pQuad: PXC_Quad; var pPoint: PXC_Point; out bRes: WordBool): HResult; stdcall;
    function Quad_PtInF(var pQuad: PXC_QuadF; var pPoint: PXC_PointF; out bRes: WordBool): HResult; stdcall;
    function Quad_HasIntersect(var pQuad1: PXC_Quad; var pQuad2: PXC_Quad; out bRes: WordBool): HResult; stdcall;
    function Quad_HasIntersectF(var pQuad1: PXC_QuadF; var pQuad2: PXC_QuadF; out bRes: WordBool): HResult; stdcall;
    function Rect_To_Quad(var pRect: PXC_Rect; out pQuad: PXC_Quad): HResult; stdcall;
    function Rect_To_QuadF(var pRect: PXC_RectF; out pQuad: PXC_QuadF): HResult; stdcall;
    function Quad_To_Rect(var pQuad: PXC_Quad; out pRect: PXC_Rect): HResult; stdcall;
    function Quad_To_RectF(var pQuad: PXC_QuadF; out pRect: PXC_RectF): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IScopeTable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AFE955F3-4ADE-4C79-B40A-8DD1955A328F}
// *********************************************************************//
  IScopeTable = interface(IDispatch)
    ['{AFE955F3-4ADE-4C79-B40A-8DD1955A328F}']
    function GetValue(sKey: PWideChar): Integer; safecall;
    function Get_DefValue: Integer; safecall;
    function Get_Count: Integer; safecall;
    procedure GetItem(nIndex: Integer; out sKey: WideString; out nValue: Integer); safecall;
    property DefValue: Integer read Get_DefValue;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IScopeTableDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {AFE955F3-4ADE-4C79-B40A-8DD1955A328F}
// *********************************************************************//
  IScopeTableDisp = dispinterface
    ['{AFE955F3-4ADE-4C79-B40A-8DD1955A328F}']
    function GetValue(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant): Integer; dispid 1610743808;
    property DefValue: Integer readonly dispid 1610743809;
    property Count: Integer readonly dispid 1610743810;
    procedure GetItem(nIndex: Integer; out sKey: WideString; out nValue: Integer); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IFastScopeTable
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8DF8461E-52D3-4E37-8AF6-3B5C1F6F7E87}
// *********************************************************************//
  IFastScopeTable = interface(IDispatch)
    ['{8DF8461E-52D3-4E37-8AF6-3B5C1F6F7E87}']
    function GetValue(nKey: Integer): Integer; safecall;
    function GetValue2(sKey: PWideChar): Integer; safecall;
    function Get_DefValue: Integer; safecall;
    function Get_Count: Integer; safecall;
    procedure GetItem(nIndex: Integer; out nKey: Integer; out nValue: Integer); safecall;
    property DefValue: Integer read Get_DefValue;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IFastScopeTableDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8DF8461E-52D3-4E37-8AF6-3B5C1F6F7E87}
// *********************************************************************//
  IFastScopeTableDisp = dispinterface
    ['{8DF8461E-52D3-4E37-8AF6-3B5C1F6F7E87}']
    function GetValue(nKey: Integer): Integer; dispid 1610743808;
    function GetValue2(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant): Integer; dispid 1610743809;
    property DefValue: Integer readonly dispid 1610743810;
    property Count: Integer readonly dispid 1610743811;
    procedure GetItem(nIndex: Integer; out nKey: Integer; out nValue: Integer); dispid 1610743812;
  end;

// *********************************************************************//
// Interface: IEventsRegistry
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E4F0EAD1-C256-40AD-9CCF-B9CD8872EC9A}
// *********************************************************************//
  IEventsRegistry = interface(IDispatch)
    ['{E4F0EAD1-C256-40AD-9CCF-B9CD8872EC9A}']
    function RegisterNewEvent(const sUniqueEventName: WideString; 
                              const pEventCreator: IEventCreator; const pEventClass: IBitSet): Integer; safecall;
    function CreateNewEvent(nEventID: Integer; nParam1: PARAM_T; nParam2: PARAM_T): IEvent; safecall;
    function GetEventCreator(nEventID: Integer): IEventCreator; safecall;
    function GetEventClass(nEventID: Integer): IBitSet; safecall;
  end;

// *********************************************************************//
// DispIntf:  IEventsRegistryDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E4F0EAD1-C256-40AD-9CCF-B9CD8872EC9A}
// *********************************************************************//
  IEventsRegistryDisp = dispinterface
    ['{E4F0EAD1-C256-40AD-9CCF-B9CD8872EC9A}']
    function RegisterNewEvent(const sUniqueEventName: WideString; 
                              const pEventCreator: IEventCreator; const pEventClass: IBitSet): Integer; dispid 1610743808;
    function CreateNewEvent(nEventID: Integer; nParam1: PARAM_T; nParam2: PARAM_T): IEvent; dispid 1610743809;
    function GetEventCreator(nEventID: Integer): IEventCreator; dispid 1610743810;
    function GetEventClass(nEventID: Integer): IBitSet; dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IEventCreator
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F3C2B51C-003A-4D39-A90A-BB4486BF1E2C}
// *********************************************************************//
  IEventCreator = interface(IDispatch)
    ['{F3C2B51C-003A-4D39-A90A-BB4486BF1E2C}']
    function CreateNewEvent(nEventID: Integer; nParam1: PARAM_T; nParam2: PARAM_T): IEvent; safecall;
  end;

// *********************************************************************//
// DispIntf:  IEventCreatorDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F3C2B51C-003A-4D39-A90A-BB4486BF1E2C}
// *********************************************************************//
  IEventCreatorDisp = dispinterface
    ['{F3C2B51C-003A-4D39-A90A-BB4486BF1E2C}']
    function CreateNewEvent(nEventID: Integer; nParam1: PARAM_T; nParam2: PARAM_T): IEvent; dispid 1610743808;
  end;

// *********************************************************************//
// Interface: IEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {63375FB3-4F89-42F0-8090-209E954EBA1A}
// *********************************************************************//
  IEvent = interface(IDispatch)
    ['{63375FB3-4F89-42F0-8090-209E954EBA1A}']
    function Get_ID: Integer; safecall;
    function Get_Handled: WordBool; safecall;
    procedure Set_Handled(bHandled: WordBool); safecall;
    function Get_Param1: PARAM_T; safecall;
    function Get_Param2: PARAM_T; safecall;
    function Get_ExData: ICab; safecall;
    function Get_Result: PARAM_T; safecall;
    procedure Set_Result(nResult: PARAM_T); safecall;
    property ID: Integer read Get_ID;
    property Handled: WordBool read Get_Handled write Set_Handled;
    property Param1: PARAM_T read Get_Param1;
    property Param2: PARAM_T read Get_Param2;
    property ExData: ICab read Get_ExData;
    property Result: PARAM_T read Get_Result write Set_Result;
  end;

// *********************************************************************//
// DispIntf:  IEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {63375FB3-4F89-42F0-8090-209E954EBA1A}
// *********************************************************************//
  IEventDisp = dispinterface
    ['{63375FB3-4F89-42F0-8090-209E954EBA1A}']
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IEventHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8D00937C-06B9-4B5C-9A94-A7E046336B01}
// *********************************************************************//
  IEventHandler = interface(IDispatch)
    ['{8D00937C-06B9-4B5C-9A94-A7E046336B01}']
    procedure OnEvent(nEventID: Integer; const pEvent: IEvent; const pFrom: IUnknown); safecall;
  end;

// *********************************************************************//
// DispIntf:  IEventHandlerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8D00937C-06B9-4B5C-9A94-A7E046336B01}
// *********************************************************************//
  IEventHandlerDisp = dispinterface
    ['{8D00937C-06B9-4B5C-9A94-A7E046336B01}']
    procedure OnEvent(nEventID: Integer; const pEvent: IEvent; const pFrom: IUnknown); dispid 1;
  end;

// *********************************************************************//
// Interface: IEventServer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {816CDC47-C3A9-4671-A17C-790D90CD38E5}
// *********************************************************************//
  IEventServer = interface(IDispatch)
    ['{816CDC47-C3A9-4671-A17C-790D90CD38E5}']
    function Get_HasEventHandlers(nEventID: Integer): WordBool; safecall;
    function CreateNewEvent(nEventID: Integer; nParam1: PARAM_T; nParam2: PARAM_T): IEvent; safecall;
    procedure RegisterEventHandler(nEventID: Integer; const pEventHandler: IDispatch; 
                                   nFlags: Integer); safecall;
    procedure UnregisterEventHandler(nEventID: Integer; const pEventHandler: IDispatch); safecall;
    procedure UnregisterEventHandler2(const pEventHandler: IDispatch); safecall;
    procedure RegisterNativeEventHandler(nEventID: Integer; const pEventHandler: IEventHandler; 
                                         nFlags: Integer); safecall;
    procedure UnregisterNativeEventHandler(nEventID: Integer; const pEventHandler: IEventHandler); safecall;
    procedure UnregisterNativeEventHandler2(const pEventHandler: IEventHandler); safecall;
    procedure FireEvent(const pEvent: IEvent; const pFrom: IUnknown); safecall;
    property HasEventHandlers[nEventID: Integer]: WordBool read Get_HasEventHandlers;
  end;

// *********************************************************************//
// DispIntf:  IEventServerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {816CDC47-C3A9-4671-A17C-790D90CD38E5}
// *********************************************************************//
  IEventServerDisp = dispinterface
    ['{816CDC47-C3A9-4671-A17C-790D90CD38E5}']
    property HasEventHandlers[nEventID: Integer]: WordBool readonly dispid 1610743808;
    function CreateNewEvent(nEventID: Integer; nParam1: PARAM_T; nParam2: PARAM_T): IEvent; dispid 1610743809;
    procedure RegisterEventHandler(nEventID: Integer; const pEventHandler: IDispatch; 
                                   nFlags: Integer); dispid 1610743810;
    procedure UnregisterEventHandler(nEventID: Integer; const pEventHandler: IDispatch); dispid 1610743811;
    procedure UnregisterEventHandler2(const pEventHandler: IDispatch); dispid 1610743812;
    procedure RegisterNativeEventHandler(nEventID: Integer; const pEventHandler: IEventHandler; 
                                         nFlags: Integer); dispid 1610743813;
    procedure UnregisterNativeEventHandler(nEventID: Integer; const pEventHandler: IEventHandler); dispid 1610743814;
    procedure UnregisterNativeEventHandler2(const pEventHandler: IEventHandler); dispid 1610743815;
    procedure FireEvent(const pEvent: IEvent; const pFrom: IUnknown); dispid 1610743816;
  end;

// *********************************************************************//
// Interface: ISpellCheckCallbacks
// Flags:     (128) NonExtensible
// GUID:      {3A72CF63-DFA2-4B82-9797-DD14EF321C51}
// *********************************************************************//
  ISpellCheckCallbacks = interface(IUnknown)
    ['{3A72CF63-DFA2-4B82-9797-DD14EF321C51}']
    function Get_Capabilities(out nCapabilities: Integer): HResult; stdcall;
    function CheckWord(nLangID: ULONG_T; const sWord: WideString; bAsyncCheck: WordBool; 
                       out nCheckRes: Integer): HResult; stdcall;
    function GetSuggestions(nLangID: ULONG_T; const sWord: WideString; out pSuggestions: IWords): HResult; stdcall;
    function AddNewWord(const sWord: WideString; bIgnore: WordBool): HResult; stdcall;
    function GetLang(sWord: PWideChar; nWordLen: Integer; nDesiredLangID: ULONG_T; 
                     out nLangID: ULONG_T): HResult; stdcall;
    function GetHyphens(sWord: PWideChar; nWordLen: Integer; nLangID: ULONG_T; 
                        const pPositions: IBitSet): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IOpOutputCallback
// Flags:     (128) NonExtensible
// GUID:      {826E210C-1895-4023-B3F6-7A382CF30968}
// *********************************************************************//
  IOpOutputCallback = interface(IUnknown)
    ['{826E210C-1895-4023-B3F6-7A382CF30968}']
    function OnOpOutput(nGroupID: Integer; const pObj: IUnknown): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAFS_Name
// Flags:     (128) NonExtensible
// GUID:      {5996675A-1E7C-40D2-ABF7-6B34ABC720B0}
// *********************************************************************//
  IAFS_Name = interface(IUnknown)
    ['{5996675A-1E7C-40D2-ABF7-6B34ABC720B0}']
    function Get_FileSys(out pFileSys: IAFS_FileSys): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAFS_FileSys
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FF53F225-0530-4DCA-A174-240E61969C6D}
// *********************************************************************//
  IAFS_FileSys = interface(IDispatch)
    ['{FF53F225-0530-4DCA-A174-240E61969C6D}']
    function Get_Name: WideString; safecall;
    function Get_Features(const pHostName: IAFS_Name): Integer; safecall;
    function Get_LocalTempFolder: WideString; safecall;
    procedure Set_LocalTempFolder(const sTempFolder: WideString); safecall;
    function Get_Prop(const pHostName: IAFS_Name; sPropName: PWideChar): OleVariant; safecall;
    procedure Set_Prop(const pHostName: IAFS_Name; sPropName: PWideChar; Value: OleVariant); safecall;
    procedure Exec(const pHostName: IAFS_Name; sCommand: PWideChar; DataIn: OleVariant; 
                   out DataOut: OleVariant; const pErrDetails: IString; const pCancelFlag: IFlag); safecall;
    function BindToPath(pPath: PWideChar; const pCtx: IAFS_BindContext; nFlags: Integer; 
                        const pErrDetails: IString; const pCancelFlag: IFlag): IAFS_Name; safecall;
    function BindToObject(const pObj: IUnknown; const pCtx: IAFS_BindContext; nFlags: Integer; 
                          const pErrDetails: IString; const pCancelFlag: IFlag): IAFS_Name; safecall;
    procedure BindFlush(const pHostName: IAFS_Name; const pDestObj: IUnknown; nFlags: Integer; 
                        const pErrDetails: IString; const pCancelFlag: IFlag); safecall;
    procedure BindClose(const pHostName: IAFS_Name; nFlags: Integer; const pErrDetails: IString; 
                        const pCancelFlag: IFlag); safecall;
    function EnumFolder(const pName: IAFS_Name; const pErrDetails: IString; const pCancelFlag: IFlag): IAFS_EnumFolder; safecall;
    function StringToName(sString: PWideChar; nFlags: Integer; const pParent: IAFS_Name): IAFS_Name; safecall;
    function NameToString(const pName: IAFS_Name; nFlags: Integer; const pParent: IAFS_Name): WideString; safecall;
    function NameGetParent(const pName: IAFS_Name): IAFS_Name; safecall;
    function NameIsChildOf(const pName: IAFS_Name; const pParent: IAFS_Name): WordBool; safecall;
    function NamesAreEqual(const pName1: IAFS_Name; const pName2: IAFS_Name): WordBool; safecall;
    function OpenFile(const pName: IAFS_Name; nOpenFlags: Integer; const pErrDetails: IString; 
                      const pCancelFlag: IFlag): IAFS_File; safecall;
    procedure CreateFolder(const pName: IAFS_Name; nFlags: Integer; const pErrDetails: IString; 
                           const pCancelFlag: IFlag); safecall;
    procedure Move(const pName: IAFS_Name; const pNewName: IAFS_Name; const pErrDetails: IString; 
                   const pCancelFlag: IFlag); safecall;
    procedure Copy(const pName: IAFS_Name; const pNewName: IAFS_Name; const pErrDetails: IString; 
                   const pCancelFlag: IFlag); safecall;
    procedure Rename(const pName: IAFS_Name; const pNewName: IAFS_Name; const pErrDetails: IString; 
                     const pCancelFlag: IFlag); safecall;
    procedure Delete(const pName: IAFS_Name; const pErrDetails: IString; const pCancelFlag: IFlag); safecall;
    function GetFileInfo(const pName: IAFS_Name; const pErrDetails: IString; 
                         const pCancelFlag: IFlag): IAFS_FileInfo; safecall;
    procedure GetVolumeSpace(const pName: IAFS_Name; out nTotalBytes: Int64; 
                             out nTotalFreeBytes: Int64; out nFreeBytesAvailable: Int64; 
                             const pErrDetails: IString; const pCancelFlag: IFlag); safecall;
    function CreateDlgParams(nDlgType: Integer; const pHostName: IAFS_Name): ICab; safecall;
    function ShowDlg(nDlgType: Integer; const pHostName: IAFS_Name; const pDlgParams: ICab; 
                     hWndParent: HANDLE_T; out pOutNames: IAFS_NamesCollection): Integer; safecall;
    procedure SetProgressMon(const pProgMon: IAFS_ProgressMon); safecall;
    function GetProgressMon(nThreadID: ULONG_T): IAFS_ProgressMon; safecall;
    function CreateAccount(const pSrc: ICabNode; nFlags: Integer; const pErrDetails: IString; 
                           const pCancelFlag: IFlag): IAFS_AccountData; safecall;
    function Get_DispName: WideString; safecall;
    function Get_Icon: IUnknown; safecall;
    property Name: WideString read Get_Name;
    property Features[const pHostName: IAFS_Name]: Integer read Get_Features;
    property LocalTempFolder: WideString read Get_LocalTempFolder write Set_LocalTempFolder;
    property Prop[const pHostName: IAFS_Name; sPropName: PWideChar]: OleVariant read Get_Prop write Set_Prop;
    property DispName: WideString read Get_DispName;
    property Icon: IUnknown read Get_Icon;
  end;

// *********************************************************************//
// DispIntf:  IAFS_FileSysDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FF53F225-0530-4DCA-A174-240E61969C6D}
// *********************************************************************//
  IAFS_FileSysDisp = dispinterface
    ['{FF53F225-0530-4DCA-A174-240E61969C6D}']
    property Name: WideString readonly dispid 1610743808;
    property Features[const pHostName: IAFS_Name]: Integer readonly dispid 1610743809;
    property LocalTempFolder: WideString dispid 1610743810;
    property Prop[const pHostName: IAFS_Name; sPropName: {NOT_OLEAUTO(PWideChar)}OleVariant]: OleVariant dispid 1610743812;
    procedure Exec(const pHostName: IAFS_Name; sCommand: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                   DataIn: OleVariant; out DataOut: OleVariant; const pErrDetails: IString; 
                   const pCancelFlag: IFlag); dispid 1610743814;
    function BindToPath(pPath: {NOT_OLEAUTO(PWideChar)}OleVariant; const pCtx: IAFS_BindContext; 
                        nFlags: Integer; const pErrDetails: IString; const pCancelFlag: IFlag): IAFS_Name; dispid 1610743815;
    function BindToObject(const pObj: IUnknown; const pCtx: IAFS_BindContext; nFlags: Integer; 
                          const pErrDetails: IString; const pCancelFlag: IFlag): IAFS_Name; dispid 1610743816;
    procedure BindFlush(const pHostName: IAFS_Name; const pDestObj: IUnknown; nFlags: Integer; 
                        const pErrDetails: IString; const pCancelFlag: IFlag); dispid 1610743817;
    procedure BindClose(const pHostName: IAFS_Name; nFlags: Integer; const pErrDetails: IString; 
                        const pCancelFlag: IFlag); dispid 1610743818;
    function EnumFolder(const pName: IAFS_Name; const pErrDetails: IString; const pCancelFlag: IFlag): IAFS_EnumFolder; dispid 1610743819;
    function StringToName(sString: {NOT_OLEAUTO(PWideChar)}OleVariant; nFlags: Integer; 
                          const pParent: IAFS_Name): IAFS_Name; dispid 1610743820;
    function NameToString(const pName: IAFS_Name; nFlags: Integer; const pParent: IAFS_Name): WideString; dispid 1610743821;
    function NameGetParent(const pName: IAFS_Name): IAFS_Name; dispid 1610743822;
    function NameIsChildOf(const pName: IAFS_Name; const pParent: IAFS_Name): WordBool; dispid 1610743823;
    function NamesAreEqual(const pName1: IAFS_Name; const pName2: IAFS_Name): WordBool; dispid 1610743824;
    function OpenFile(const pName: IAFS_Name; nOpenFlags: Integer; const pErrDetails: IString; 
                      const pCancelFlag: IFlag): IAFS_File; dispid 1610743825;
    procedure CreateFolder(const pName: IAFS_Name; nFlags: Integer; const pErrDetails: IString; 
                           const pCancelFlag: IFlag); dispid 1610743826;
    procedure Move(const pName: IAFS_Name; const pNewName: IAFS_Name; const pErrDetails: IString; 
                   const pCancelFlag: IFlag); dispid 1610743827;
    procedure Copy(const pName: IAFS_Name; const pNewName: IAFS_Name; const pErrDetails: IString; 
                   const pCancelFlag: IFlag); dispid 1610743828;
    procedure Rename(const pName: IAFS_Name; const pNewName: IAFS_Name; const pErrDetails: IString; 
                     const pCancelFlag: IFlag); dispid 1610743829;
    procedure Delete(const pName: IAFS_Name; const pErrDetails: IString; const pCancelFlag: IFlag); dispid 1610743830;
    function GetFileInfo(const pName: IAFS_Name; const pErrDetails: IString; 
                         const pCancelFlag: IFlag): IAFS_FileInfo; dispid 1610743831;
    procedure GetVolumeSpace(const pName: IAFS_Name; out nTotalBytes: Int64; 
                             out nTotalFreeBytes: Int64; out nFreeBytesAvailable: Int64; 
                             const pErrDetails: IString; const pCancelFlag: IFlag); dispid 1610743832;
    function CreateDlgParams(nDlgType: Integer; const pHostName: IAFS_Name): ICab; dispid 1610743833;
    function ShowDlg(nDlgType: Integer; const pHostName: IAFS_Name; const pDlgParams: ICab; 
                     hWndParent: HANDLE_T; out pOutNames: IAFS_NamesCollection): Integer; dispid 1610743834;
    procedure SetProgressMon(const pProgMon: IAFS_ProgressMon); dispid 1610743835;
    function GetProgressMon(nThreadID: ULONG_T): IAFS_ProgressMon; dispid 1610743836;
    function CreateAccount(const pSrc: ICabNode; nFlags: Integer; const pErrDetails: IString; 
                           const pCancelFlag: IFlag): IAFS_AccountData; dispid 1610743837;
    property DispName: WideString readonly dispid 1610743838;
    property Icon: IUnknown readonly dispid 1610743839;
  end;

// *********************************************************************//
// Interface: IAFS_BindContext
// Flags:     (128) NonExtensible
// GUID:      {5ADCA7E1-E508-41AD-8E12-77A9FC1B2437}
// *********************************************************************//
  IAFS_BindContext = interface(IUnknown)
    ['{5ADCA7E1-E508-41AD-8E12-77A9FC1B2437}']
    function OnGetUserAccount(const pName: IAFS_Name; sTitle: PWideChar; sText: PWideChar; 
                              sUserName: PWideChar; sPassword: PWideChar; 
                              out sUserNameOut: WideString; out sPasswordOut: WideString; 
                              const pIcon: IUnknown; nFlags: Integer): HResult; stdcall;
    function OnPrompt(const pCb: IAFS_BindPromptCallback): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAFS_BindPromptCallback
// Flags:     (128) NonExtensible
// GUID:      {F9FA7FE4-CBDE-4462-9A22-8A9EA0EEB7E8}
// *********************************************************************//
  IAFS_BindPromptCallback = interface(IUnknown)
    ['{F9FA7FE4-CBDE-4462-9A22-8A9EA0EEB7E8}']
    function OnBindPrompt: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAFS_EnumFolder
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6554EA2D-9436-4F25-8B11-A4CB7C2608DB}
// *********************************************************************//
  IAFS_EnumFolder = interface(IDispatch)
    ['{6554EA2D-9436-4F25-8B11-A4CB7C2608DB}']
    function Get_Name: IAFS_Name; safecall;
    function Next: IAFS_EnumFolderItem; safecall;
    procedure Reset(const pErrDetails: IString; const pCancelFlag: IFlag); safecall;
    property Name: IAFS_Name read Get_Name;
  end;

// *********************************************************************//
// DispIntf:  IAFS_EnumFolderDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6554EA2D-9436-4F25-8B11-A4CB7C2608DB}
// *********************************************************************//
  IAFS_EnumFolderDisp = dispinterface
    ['{6554EA2D-9436-4F25-8B11-A4CB7C2608DB}']
    property Name: IAFS_Name readonly dispid 1610743808;
    function Next: IAFS_EnumFolderItem; dispid 1610743809;
    procedure Reset(const pErrDetails: IString; const pCancelFlag: IFlag); dispid 1610743810;
  end;

// *********************************************************************//
// Interface: IAFS_FileInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E920A0D-3156-4EB6-932F-5AB7287C54E5}
// *********************************************************************//
  IAFS_FileInfo = interface(IDispatch)
    ['{2E920A0D-3156-4EB6-932F-5AB7287C54E5}']
    function Get_Title: WideString; safecall;
    function Get_Attributes: Integer; safecall;
    function Get_Size: Int64; safecall;
    function Get_CreationTime: Int64; safecall;
    function Get_LastAccessTime: Int64; safecall;
    function Get_LastWriteTime: Int64; safecall;
    function Get_Prop(sPropName: PWideChar): OleVariant; safecall;
    property Title: WideString read Get_Title;
    property Attributes: Integer read Get_Attributes;
    property Size: Int64 read Get_Size;
    property CreationTime: Int64 read Get_CreationTime;
    property LastAccessTime: Int64 read Get_LastAccessTime;
    property LastWriteTime: Int64 read Get_LastWriteTime;
    property Prop[sPropName: PWideChar]: OleVariant read Get_Prop; default;
  end;

// *********************************************************************//
// DispIntf:  IAFS_FileInfoDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2E920A0D-3156-4EB6-932F-5AB7287C54E5}
// *********************************************************************//
  IAFS_FileInfoDisp = dispinterface
    ['{2E920A0D-3156-4EB6-932F-5AB7287C54E5}']
    property Title: WideString readonly dispid 1610743808;
    property Attributes: Integer readonly dispid 1610743809;
    property Size: Int64 readonly dispid 1610743810;
    property CreationTime: Int64 readonly dispid 1610743811;
    property LastAccessTime: Int64 readonly dispid 1610743812;
    property LastWriteTime: Int64 readonly dispid 1610743813;
    property Prop[sPropName: {NOT_OLEAUTO(PWideChar)}OleVariant]: OleVariant readonly dispid 0; default;
  end;

// *********************************************************************//
// Interface: IAFS_EnumFolderItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0C577CE3-F5BD-4AC5-B52D-76264D51D578}
// *********************************************************************//
  IAFS_EnumFolderItem = interface(IAFS_FileInfo)
    ['{0C577CE3-F5BD-4AC5-B52D-76264D51D578}']
    function Get_Name: IAFS_Name; safecall;
    property Name: IAFS_Name read Get_Name;
  end;

// *********************************************************************//
// DispIntf:  IAFS_EnumFolderItemDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0C577CE3-F5BD-4AC5-B52D-76264D51D578}
// *********************************************************************//
  IAFS_EnumFolderItemDisp = dispinterface
    ['{0C577CE3-F5BD-4AC5-B52D-76264D51D578}']
    property Name: IAFS_Name readonly dispid 1610809344;
    property Title: WideString readonly dispid 1610743808;
    property Attributes: Integer readonly dispid 1610743809;
    property Size: Int64 readonly dispid 1610743810;
    property CreationTime: Int64 readonly dispid 1610743811;
    property LastAccessTime: Int64 readonly dispid 1610743812;
    property LastWriteTime: Int64 readonly dispid 1610743813;
    property Prop[sPropName: {NOT_OLEAUTO(PWideChar)}OleVariant]: OleVariant readonly dispid 0; default;
  end;

// *********************************************************************//
// Interface: IAFS_File
// Flags:     (128) NonExtensible
// GUID:      {9AD3CF3E-6968-41E7-90C2-76B18A6662DC}
// *********************************************************************//
  IAFS_File = interface(IUnknown)
    ['{9AD3CF3E-6968-41E7-90C2-76B18A6662DC}']
    function Get_Name(out pName: IAFS_Name): HResult; stdcall;
    function Get_OpenFlags(out nOpenFlags: Integer): HResult; stdcall;
    function Get_IoMode(out nIoMode: Integer): HResult; stdcall;
    function Clone(out pClone: IAFS_File): HResult; stdcall;
    function IsCloneOf(const pSource: IAFS_File; out bIsClone: WordBool): HResult; stdcall;
    function Read(pPv: Pointer; cb: Int64; out nRead: Int64; const pErrDetails: IString; 
                  const pCancelFlag: IFlag): HResult; stdcall;
    function Write(pPv: Pointer; cb: Int64; out nWritten: Int64; const pErrDetails: IString; 
                   const pCancelFlag: IFlag): HResult; stdcall;
    function SetPos(nOffset: Int64; nOrigin: Integer; out nNewPos: Int64): HResult; stdcall;
    function GetPos(out nCurPos: Int64): HResult; stdcall;
    function SetSize(nNewSize: Int64; const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function GetSize(out nCurSize: Int64; const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function Flush(const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function Reopen(nNewOpenFlags: Integer; const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function GetStream(out pStream: IStream): HResult; stdcall;
    function Close(nFlags: Integer; const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function Get_Prop(sPropName: PWideChar; out Value: OleVariant): HResult; stdcall;
    function Set_Prop(sPropName: PWideChar; Value: OleVariant): HResult; stdcall;
    function Exec(sCommand: PWideChar; DataIn: OleVariant; out DataOut: OleVariant; 
                  const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAFS_NamesCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {53674462-76AA-41A3-A5A3-5241912E4222}
// *********************************************************************//
  IAFS_NamesCollection = interface(IDispatch)
    ['{53674462-76AA-41A3-A5A3-5241912E4222}']
    function Get_Count: ULONG_T; safecall;
    function Get_Item(nIndex: ULONG_T): IAFS_Name; safecall;
    function Get__NewEnum: IUnknown; safecall;
    procedure Add(const pName: IAFS_Name); safecall;
    procedure Clear; safecall;
    property Count: ULONG_T read Get_Count;
    property Item[nIndex: ULONG_T]: IAFS_Name read Get_Item; default;
    property _NewEnum: IUnknown read Get__NewEnum;
  end;

// *********************************************************************//
// DispIntf:  IAFS_NamesCollectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {53674462-76AA-41A3-A5A3-5241912E4222}
// *********************************************************************//
  IAFS_NamesCollectionDisp = dispinterface
    ['{53674462-76AA-41A3-A5A3-5241912E4222}']
    property Count: ULONG_T readonly dispid 1610743808;
    property Item[nIndex: ULONG_T]: IAFS_Name readonly dispid 0; default;
    property _NewEnum: IUnknown readonly dispid -4;
    procedure Add(const pName: IAFS_Name); dispid 1610743811;
    procedure Clear; dispid 1610743812;
  end;

// *********************************************************************//
// Interface: IAFS_ProgressMon
// Flags:     (128) NonExtensible
// GUID:      {98624D7C-5E25-41EE-B454-67F209FC7641}
// *********************************************************************//
  IAFS_ProgressMon = interface(IUnknown)
    ['{98624D7C-5E25-41EE-B454-67F209FC7641}']
    function OnStart(nTotal: Int64): HResult; stdcall;
    function OnStop: HResult; stdcall;
    function OnSetPos(nPos: Int64): HResult; stdcall;
    function OnSetText(sText: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAFS_AccountData
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E2F015BB-95B8-4C93-A68D-A9B706733987}
// *********************************************************************//
  IAFS_AccountData = interface(IDispatch)
    ['{E2F015BB-95B8-4C93-A68D-A9B706733987}']
    function Get_URL: WideString; safecall;
    function Get_UserName: WideString; safecall;
    procedure SaveTo(const pDst: ICabNode); safecall;
    property URL: WideString read Get_URL;
    property UserName: WideString read Get_UserName;
  end;

// *********************************************************************//
// DispIntf:  IAFS_AccountDataDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E2F015BB-95B8-4C93-A68D-A9B706733987}
// *********************************************************************//
  IAFS_AccountDataDisp = dispinterface
    ['{E2F015BB-95B8-4C93-A68D-A9B706733987}']
    property URL: WideString readonly dispid 1610743808;
    property UserName: WideString readonly dispid 1610743809;
    procedure SaveTo(const pDst: ICabNode); dispid 1610743810;
  end;

// *********************************************************************//
// Interface: IAFS_Inst
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F4C199F2-0F2A-4E4A-80C9-F5B36D96F527}
// *********************************************************************//
  IAFS_Inst = interface(IDispatch)
    ['{F4C199F2-0F2A-4E4A-80C9-F5B36D96F527}']
    function Get_DefaultFileSys: IAFS_FileSys; safecall;
    function CreateFlag: IFlag; safecall;
    function CreateString: IString; safecall;
    procedure RegisterFileSys(const pFS: IAFS_FileSys); safecall;
    procedure UnregisterFileSys(const pFS: IAFS_FileSys); safecall;
    function GetFileSysByName(sName: PWideChar): IAFS_FileSys; safecall;
    function GetFileSysForPath(sPath: PWideChar; bDIPath: WordBool): IAFS_FileSys; safecall;
    function Get_FileSysCount: ULONG_T; safecall;
    function Get_FileSys(nIndex: ULONG_T): IAFS_FileSys; safecall;
    procedure CopyFile(const pSrcName: IAFS_Name; const pDstName: IAFS_Name; 
                       const pProgMon: IAFS_ProgressMon; const pErrDetails: IString; 
                       const pCancelFlag: IFlag); safecall;
    procedure CopyFile2(const pSrcFile: IAFS_File; const pDstFile: IAFS_File; 
                        bKeepPositions: WordBool; const pProgMon: IAFS_ProgressMon; 
                        const pErrDetails: IString; const pCancelFlag: IFlag); safecall;
    function CreateNames: IAFS_NamesCollection; safecall;
    procedure CopyStreamToFile(const pSrcStream: IStream; const pDstFile: IAFS_File; 
                               bKeepPositions: WordBool; const pProgMon: IAFS_ProgressMon; 
                               const pErrDetails: IString; const pCancelFlag: IFlag); safecall;
    procedure CopyFileToStream(const pSrcFile: IAFS_File; const pDstStream: IStream; 
                               bKeepPositions: WordBool; const pProgMon: IAFS_ProgressMon; 
                               const pErrDetails: IString; const pCancelFlag: IFlag); safecall;
    function CreateFileCachesMap(const pFileSys: IAFS_FileSys): IAFS_FileCachesMap; safecall;
    function CreateDlgDefaultParams(nDlgType: Integer): ICab; safecall;
    function CreateStreamOnFile(const pFile: IAFS_File): IStream; safecall;
    property DefaultFileSys: IAFS_FileSys read Get_DefaultFileSys;
    property FileSysCount: ULONG_T read Get_FileSysCount;
    property FileSys[nIndex: ULONG_T]: IAFS_FileSys read Get_FileSys;
  end;

// *********************************************************************//
// DispIntf:  IAFS_InstDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F4C199F2-0F2A-4E4A-80C9-F5B36D96F527}
// *********************************************************************//
  IAFS_InstDisp = dispinterface
    ['{F4C199F2-0F2A-4E4A-80C9-F5B36D96F527}']
    property DefaultFileSys: IAFS_FileSys readonly dispid 1610743808;
    function CreateFlag: IFlag; dispid 1610743809;
    function CreateString: IString; dispid 1610743810;
    procedure RegisterFileSys(const pFS: IAFS_FileSys); dispid 1610743811;
    procedure UnregisterFileSys(const pFS: IAFS_FileSys); dispid 1610743812;
    function GetFileSysByName(sName: {NOT_OLEAUTO(PWideChar)}OleVariant): IAFS_FileSys; dispid 1610743813;
    function GetFileSysForPath(sPath: {NOT_OLEAUTO(PWideChar)}OleVariant; bDIPath: WordBool): IAFS_FileSys; dispid 1610743814;
    property FileSysCount: ULONG_T readonly dispid 1610743815;
    property FileSys[nIndex: ULONG_T]: IAFS_FileSys readonly dispid 1610743816;
    procedure CopyFile(const pSrcName: IAFS_Name; const pDstName: IAFS_Name; 
                       const pProgMon: IAFS_ProgressMon; const pErrDetails: IString; 
                       const pCancelFlag: IFlag); dispid 1610743817;
    procedure CopyFile2(const pSrcFile: IAFS_File; const pDstFile: IAFS_File; 
                        bKeepPositions: WordBool; const pProgMon: IAFS_ProgressMon; 
                        const pErrDetails: IString; const pCancelFlag: IFlag); dispid 1610743818;
    function CreateNames: IAFS_NamesCollection; dispid 1610743819;
    procedure CopyStreamToFile(const pSrcStream: IStream; const pDstFile: IAFS_File; 
                               bKeepPositions: WordBool; const pProgMon: IAFS_ProgressMon; 
                               const pErrDetails: IString; const pCancelFlag: IFlag); dispid 1610743820;
    procedure CopyFileToStream(const pSrcFile: IAFS_File; const pDstStream: IStream; 
                               bKeepPositions: WordBool; const pProgMon: IAFS_ProgressMon; 
                               const pErrDetails: IString; const pCancelFlag: IFlag); dispid 1610743821;
    function CreateFileCachesMap(const pFileSys: IAFS_FileSys): IAFS_FileCachesMap; dispid 1610743822;
    function CreateDlgDefaultParams(nDlgType: Integer): ICab; dispid 1610743823;
    function CreateStreamOnFile(const pFile: IAFS_File): IStream; dispid 1610743824;
  end;

// *********************************************************************//
// Interface: IAFS_FileCachesMap
// Flags:     (128) NonExtensible
// GUID:      {C9B694F8-7523-400C-B6D2-AD4140F0DF29}
// *********************************************************************//
  IAFS_FileCachesMap = interface(IUnknown)
    ['{C9B694F8-7523-400C-B6D2-AD4140F0DF29}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pRes: IAFS_FileCacheEntry): HResult; stdcall;
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function QueryEntry(const pName: IAFS_Name; out pRes: IAFS_FileCacheEntry): HResult; stdcall;
    function DeleteEntry(const pName: IAFS_Name): HResult; stdcall;
    function HasEntry(const pName: IAFS_Name; out bVal: WordBool): HResult; stdcall;
    function Lock: HResult; stdcall;
    function Unlock: HResult; stdcall;
    function QueryCache(const pName: IAFS_Name; nOpenFlags: Integer; out pRes: IAFS_FileCache): HResult; stdcall;
    function CreateNewCache(const pFile: IAFS_File; const pCb: IAFS_FileCacheCallbacks; 
                            nCacheFlags: Integer; nFileSize: Int64; bNewFile: WordBool; 
                            nReadBufferSize: Integer; nWriteBufferSize: Integer; 
                            out pCache: IAFS_FileCache): HResult; stdcall;
    function CheckForOpenFile(const pFile: IAFS_Name; nOpenFlags: Integer): HResult; stdcall;
    function CheckForReopenFile(const pFile: IAFS_File; nNewOpenFlags: Integer): HResult; stdcall;
    function CheckForDeleteFile(const pFile: IAFS_Name): HResult; stdcall;
    function FlushAllCaches(const pErrDetails: IString; const pCancelFlag: IFlag; 
                            bKeepUnusedEntries: WordBool): HResult; stdcall;
    function OnDisposeFileObj(const pFile: IAFS_File; bKeepUnusedEntry: WordBool): HResult; stdcall;
    function CreateCacheOnLocalFile(const pRemoteFileName: IAFS_Name; nRemoteFileIoFlags: Integer; 
                                    const pCb: IAFS_FileCacheCallbacks; nCacheFlags: Integer; 
                                    sLocalFileName: PWideChar; nReadBufferSize: Integer; 
                                    nWriteBufferSize: Integer; bDeleteOnClose: WordBool; 
                                    out pRes: IAFS_FileCache): HResult; stdcall;
    function DeleteEntryEx(const pName: IAFS_Name; fKeepFileOnClose: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAFS_FileCacheEntry
// Flags:     (128) NonExtensible
// GUID:      {C9FD110D-6922-4ABC-A3B8-BE96516F8F87}
// *********************************************************************//
  IAFS_FileCacheEntry = interface(IUnknown)
    ['{C9FD110D-6922-4ABC-A3B8-BE96516F8F87}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pRes: IAFS_File): HResult; stdcall;
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function Get_Name(out sRes: WideString): HResult; stdcall;
    function Get_Cache(out pRes: IAFS_FileCache): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAFS_FileCache
// Flags:     (128) NonExtensible
// GUID:      {8E326E64-5457-4D9F-9C65-3116C4118D1D}
// *********************************************************************//
  IAFS_FileCache = interface(IUnknown)
    ['{8E326E64-5457-4D9F-9C65-3116C4118D1D}']
    function Read(nPos: Int64; pPv: Pointer; cbRead: Int64; out nRead: Int64; 
                  const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function Write(nPos: Int64; pPv: Pointer; cbWrite: Int64; out nWritten: Int64; 
                   const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function SetSize(cbNewSize: Int64; const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function Get_Size(out nCurSize: Int64): HResult; stdcall;
    function Flush(const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function Get_NeedToFlush(out bVal: WordBool): HResult; stdcall;
    function Get_TempFileName(out sRes: WideString): HResult; stdcall;
    function ReopenForWrite: HResult; stdcall;
    function ReopenForRead: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAFS_FileCacheCallbacks
// Flags:     (128) NonExtensible
// GUID:      {200C57EA-2628-4E40-A32C-6780EBAAE941}
// *********************************************************************//
  IAFS_FileCacheCallbacks = interface(IUnknown)
    ['{200C57EA-2628-4E40-A32C-6780EBAAE941}']
    function Read(nPos: Int64; pPv: Pointer; cb: Int64; out nRead: Int64; 
                  const pErrDetails: IString; const pCancelFlag: IFlag; cbLeftToRead: Int64): HResult; stdcall;
    function Write(nPos: Int64; pPv: Pointer; cb: Int64; out nWritten: Int64; 
                   const pErrDetails: IString; const pCancelFlag: IFlag; cbLeftToWrite: Int64): HResult; stdcall;
    function SetSize(cbNewSize: Int64; const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function GetSize(out nCurSize: Int64; const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function BeginWrite(const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
    function EndWrite(const pErrDetails: IString; const pCancelFlag: IFlag): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAFS_DlgSettingsBtnCallbacks
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {71D744C0-D3E3-4BF2-8405-56ABFC895DFC}
// *********************************************************************//
  IAFS_DlgSettingsBtnCallbacks = interface(IDispatch)
    ['{71D744C0-D3E3-4BF2-8405-56ABFC895DFC}']
    function GetEnabled(nFilterIndex: Integer; const pSelNames: IAFS_NamesCollection): WordBool; safecall;
    procedure OnExec(nFilterIndex: Integer; const pSelNames: IAFS_NamesCollection; 
                     hWndParent: HANDLE_T); safecall;
  end;

// *********************************************************************//
// DispIntf:  IAFS_DlgSettingsBtnCallbacksDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {71D744C0-D3E3-4BF2-8405-56ABFC895DFC}
// *********************************************************************//
  IAFS_DlgSettingsBtnCallbacksDisp = dispinterface
    ['{71D744C0-D3E3-4BF2-8405-56ABFC895DFC}']
    function GetEnabled(nFilterIndex: Integer; const pSelNames: IAFS_NamesCollection): WordBool; dispid 1610743808;
    procedure OnExec(nFilterIndex: Integer; const pSelNames: IAFS_NamesCollection; 
                     hWndParent: HANDLE_T); dispid 1610743809;
  end;

// *********************************************************************//
// Interface: IIXC_Image
// Flags:     (128) NonExtensible
// GUID:      {A77665FB-A9C1-4EAD-9912-D5F6907C6C84}
// *********************************************************************//
  IIXC_Image = interface(IUnknown)
    ['{A77665FB-A9C1-4EAD-9912-D5F6907C6C84}']
    function Get_PagesCount(out nCount: ULONG_T): HResult; stdcall;
    function Load(sImagePath: PWideChar; nFlags: ULONG_T): HResult; stdcall;
    function LoadFromIStream(const pStream: IStream; nFlags: ULONG_T): HResult; stdcall;
    function LoadFromMemory(var nData: Byte; nDataSize: ULONG_T): HResult; stdcall;
    function Save(sImagePath: PWideChar; nAction: IXC_CreationDisposition): HResult; stdcall;
    function GetPage(nIndex: ULONG_T; const pProgress: IProgressMon; out pPage: IIXC_Page): HResult; stdcall;
    function RemovePage(const pPage: IIXC_Page): HResult; stdcall;
    function RemovePageByIndex(nIndex: ULONG_T): HResult; stdcall;
    function InsertPage(const pPage: IIXC_Page; nBefore: Integer): HResult; stdcall;
    function SwapPages(nIdx1: ULONG_T; nIdx2: ULONG_T): HResult; stdcall;
    function SaveToIStream(const pStream: IStream): HResult; stdcall;
    function Get_FormatID(out nFormatID: ULONG_T): HResult; stdcall;
    function Set_FormatID(nFormatID: ULONG_T): HResult; stdcall;
    function GetNthPageFmtParams(nPageIdx: ULONG_T; out pFmtParams: IIXC_ImageFmtParams): HResult; stdcall;
    function Get_FormatInfo(out pFormatInfo: IIXC_FormatInfo): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IIXC_Page
// Flags:     (128) NonExtensible
// GUID:      {9800D9A6-340F-4D44-9C22-D01CAC544F26}
// *********************************************************************//
  IIXC_Page = interface(IUnknown)
    ['{9800D9A6-340F-4D44-9C22-D01CAC544F26}']
    function Get_Width(out nWidth: ULONG_T): HResult; stdcall;
    function Get_Height(out nHeight: ULONG_T): HResult; stdcall;
    function Get_DpiX(out nDpi: ULONG_T): HResult; stdcall;
    function Get_DpiY(out nDpi: ULONG_T): HResult; stdcall;
    function Get_Format(out nFormat: IXC_PageFormat): HResult; stdcall;
    function Get_Rect(out stRect: tagRECT): HResult; stdcall;
    function Clone(var stRect: tagRECT; out pClone: IIXC_Page): HResult; stdcall;
    function Crop(var stRect: tagRECT): HResult; stdcall;
    function Rotate(nAngle: IXC_FastRotate): HResult; stdcall;
    function FreeRotate(nAngle: Double; nBkColor: LongWord; nType: IXC_FreeRotate; nFlags: ULONG_T): HResult; stdcall;
    function Deskew(nBkColor: LongWord; nType: IXC_FreeRotate; nFlags: ULONG_T): HResult; stdcall;
    function Shear(nAngle: Double; bVertical: WordBool; nBkColor: LongWord; nType: IXC_Shear; 
                   nFlags: ULONG_T): HResult; stdcall;
    function Scale(nWidth: ULONG_T; nHeight: ULONG_T; nMethod: IXC_ScaleMethod): HResult; stdcall;
    function Flip(bVertical: WordBool): HResult; stdcall;
    function Place(var stRect: tagRECT; const pSrcPage: IIXC_Page; nSX: Integer; nSY: Integer; 
                   nFlags: ULONG_T): HResult; stdcall;
    function CopyChannel(nDstChannel: IXC_Channel; const pSrcFrom: IIXC_Page; 
                         nSrcChannel: IXC_Channel; var stRect: tagRECT; nSX: Integer; nSY: Integer): HResult; stdcall;
    function AlphaPlace(const pSrcFrom: IIXC_Page; nSX: Integer; nSY: Integer; nAlpha: Byte; 
                        nFlags: ULONG_T; var stRect: tagRECT): HResult; stdcall;
    function Rop3(var stRect: tagRECT; const pSrcFrom: IIXC_Page; nSrcX: Integer; nSrcY: Integer; 
                  nSrcColor: LongWord; const pPattern: IIXC_Page; nPatX: Integer; nPatY: Integer; 
                  nPatColor: LongWord; nRopCode: Byte; nFlags: ULONG_T): HResult; stdcall;
    function FillChannel(nDstChannel: IXC_Channel; nValue: Byte; var stRect: tagRECT): HResult; stdcall;
    function SetChannelPixel(nChannel: IXC_Channel; nX: Integer; nY: Integer; nValue: Byte): HResult; stdcall;
    function GetChannelPixel(nChannel: IXC_Channel; nX: Integer; nY: Integer; out nValue: Byte): HResult; stdcall;
    function CopyToClipboard(nType: ULONG_T; var stRect: tagRECT; hOwner: HANDLE_T): HResult; stdcall;
    function TableFilter(var stRect: tagRECT; var nB_Table: Byte; var nG_Table: Byte; 
                         var nR_Table: Byte): HResult; stdcall;
    function Correction(var pRect: tagRECT; nRedBr: Double; nGreenBr: Double; nBlueBr: Double; 
                        nRedCont: Double; nGreenCont: Double; nBlueCont: Double; nRedGamma: Double; 
                        nGreenGamma: Double; nBlueGamma: Double): HResult; stdcall;
    function Histogramm(var nRed: ULONG_T; var nGreen: ULONG_T; var nBlue: ULONG_T; 
                        var nGray: ULONG_T; var stRect: tagRECT): HResult; stdcall;
    function AutoContrast(var stRect: tagRECT): HResult; stdcall;
    function ColorBalance(nRValue: Integer; nGValue: Integer; nBValue: Integer; var stRect: tagRECT): HResult; stdcall;
    function AdjustHLS(nHue: Double; nLightness: Double; nSaturation: Double; var stRect: tagRECT): HResult; stdcall;
    function Tile(var stDestRect: tagRECT; const pSrcPage: IIXC_Page; var stSrcRect: tagRECT; 
                  nOriginX: Integer; nOriginY: Integer; nFlags: ULONG_T): HResult; stdcall;
    function AlphaTile(var stDestRect: tagRECT; const pSrcPage: IIXC_Page; var stSrcRect: tagRECT; 
                       nOriginX: Integer; nOriginY: Integer; nAlpha: Byte; nFlags: ULONG_T): HResult; stdcall;
    function ApplyAlpha: HResult; stdcall;
    function CountColors(out nCount: ULONG_T): HResult; stdcall;
    function CountColorsEx(var stRect: tagRECT; out nCount: ULONG_T): HResult; stdcall;
    function IsGrayScale(out bGray: WordBool): HResult; stdcall;
    function ToGrayScale(var stRect: tagRECT): HResult; stdcall;
    function ReplaceColor(nFromColor: LongWord; nToColor: LongWord; nFlags: ULONG_T; 
                          var stRect: tagRECT): HResult; stdcall;
    function GetPixel(nX: Integer; nY: Integer; out nColor: LongWord): HResult; stdcall;
    function SetPixel(nX: Integer; nY: Integer; nColor: LongWord; nFlags: ULONG_T): HResult; stdcall;
    function GetPixelIndex(nX: Integer; nY: Integer; var nIndex: Integer): HResult; stdcall;
    function SetPixelIndex(nX: Integer; nY: Integer; nIndex: Integer): HResult; stdcall;
    function Fill(var stRect: tagRECT; nColor: LongWord; nFlags: ULONG_T): HResult; stdcall;
    function Invert(var stRect: tagRECT): HResult; stdcall;
    function InvertChannel(nChannel: IXC_Channel; var stRect: tagRECT): HResult; stdcall;
    function ConvertToFormat(nFormat: IXC_PageFormat): HResult; stdcall;
    function FilterMosaic(nXAmount: ULONG_T; nYAmount: ULONG_T; nType: IXC_MosaicType): HResult; stdcall;
    function FilterNoise(var stRect: tagRECT; nLevel: ULONG_T; nFlags: ULONG_T): HResult; stdcall;
    function StdMatrixFilter(nFilter: IXC_StandardMatrixfilters): HResult; stdcall;
    function FilterMedian(nLevel: ULONG_T; nThresold: ULONG_T; nFlags: ULONG_T): HResult; stdcall;
    function LockPageBlock(var stRect: tagRECT; nFlags: ULONG_T; var stBlockData: IXC_PageBlockData): HResult; stdcall;
    function UnlockPageBlock(var stBlockData: IXC_PageBlockData): HResult; stdcall;
    function DrawToDC(hDC: HANDLE_T; nXDest: Integer; nYDest: Integer; nWidth: Integer; 
                      nHeight: Integer; nXSrc: Integer; nYSrc: Integer; nFlags: ULONG_T): HResult; stdcall;
    function StretchDraw(hDC: HANDLE_T; var stDestRect: tagRECT; var stSrcRect: tagRECT; 
                         nScaleMethod: IXC_ScaleMethod; nFlags: ULONG_T): HResult; stdcall;
    function StretchDraw2(hDC: HANDLE_T; var stDestRect: tagRECT; nSrcLeft: Double; 
                          nSrcTop: Double; nSrcRight: Double; nSrcBottom: Double; 
                          nScaleMethod: IXC_ScaleMethod; nFlags: ULONG_T): HResult; stdcall;
    function PrintToDC(hDC: HANDLE_T; var stDestRect: tagRECT; var stSrcRect: tagRECT; 
                       nFlags: ULONG_T): HResult; stdcall;
    function Get_TransparentColor(out nColor: LongWord): HResult; stdcall;
    function Set_TransparentColor(nColor: LongWord): HResult; stdcall;
    function Get_BackgroundColor(out nColor: LongWord): HResult; stdcall;
    function Set_BackgroundColor(nColor: LongWord): HResult; stdcall;
    function Blend(var stRect: tagRECT; const pSrcPage: IIXC_Page; nBlendFunc: LongWord; 
                   nSX: Integer; nSY: Integer; nFlags: LongWord): HResult; stdcall;
    function SwapColors(nType: IXC_SwapChannels): HResult; stdcall;
    function MatrixFilter(const pMatrixDef: IIXC_MatrixFilterDefinition; Flags: ULONG_T): HResult; stdcall;
    function Get_PaletteSize(out nCount: ULONG_T): HResult; stdcall;
    function Set_PaletteSize(nCount: ULONG_T): HResult; stdcall;
    function Get_PaletteItem(nIndex: ULONG_T; out stItem: LongWord): HResult; stdcall;
    function Set_PaletteItem(nIndex: ULONG_T; var stItem: LongWord): HResult; stdcall;
    function OptimizePalette: HResult; stdcall;
    function Get_FmtInt(nParamID: ULONG_T; out nVal: ULONG_T): HResult; stdcall;
    function Set_FmtInt(nParamID: ULONG_T; nVal: ULONG_T): HResult; stdcall;
    function Get_FmtDouble(nParamID: ULONG_T; out nVal: Double): HResult; stdcall;
    function Set_FmtDouble(nParamID: ULONG_T; nVal: Double): HResult; stdcall;
    function Get_FmtString(nParamID: ULONG_T; out sVal: WideString): HResult; stdcall;
    function Set_FmtString(nParamID: ULONG_T; const sVal: WideString): HResult; stdcall;
    function ClearFormatParams: HResult; stdcall;
    function ClearFormatValue(nParamID: ULONG_T): HResult; stdcall;
    function Get_Owner(out pImage: IIXC_Image): HResult; stdcall;
    function Get_SizeInBytes(out nBytes: Int64): HResult; stdcall;
    function Get_SwapMode(out nSwapMode: IXC_PageSwappingMode): HResult; stdcall;
    function Set_SwapMode(nSwapMode: IXC_PageSwappingMode): HResult; stdcall;
    function Get_IsSwapped(out bRes: WordBool): HResult; stdcall;
    function SwapToDisk(nFlags: ULONG_T): HResult; stdcall;
    function UnswapFromDisk(nFlags: ULONG_T): HResult; stdcall;
    function RestoreComponentsFromPremultiplied: HResult; stdcall;
    function CreateHBitmap(hDC: HANDLE_T; out hBitmap: HANDLE_T): HResult; stdcall;
    function CreateHBitmapEx(var stSrcRect: tagRECT; hDC: HANDLE_T; out hBitmap: HANDLE_T): HResult; stdcall;
    function GetPageDC(hBaseDC: HANDLE_T; var pRect: tagRECT; out hPageDC: HANDLE_T): HResult; stdcall;
    function ReleasePageDC(hPageDC: HANDLE_T): HResult; stdcall;
    function Get_HasAlpha(out bVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IIXC_MatrixFilterDefinition
// Flags:     (128) NonExtensible
// GUID:      {B3F3DF4D-DE1E-472A-A6FC-843FEDC7C4F2}
// *********************************************************************//
  IIXC_MatrixFilterDefinition = interface(IUnknown)
    ['{B3F3DF4D-DE1E-472A-A6FC-843FEDC7C4F2}']
    function Get_Dimension(out nDimension: ULONG_T): HResult; stdcall;
    function Get_Divisor(out nDivisor: ULONG_T): HResult; stdcall;
    function Set_Divisor(nDivisor: ULONG_T): HResult; stdcall;
    function Get_BaseOffset(out nBaseOffset: ULONG_T): HResult; stdcall;
    function Set_BaseOffset(nBaseOffset: ULONG_T): HResult; stdcall;
    function GetCoeff(nX: ULONG_T; nY: ULONG_T; out nCoeff: Integer): HResult; stdcall;
    function SetCoeff(nX: ULONG_T; nY: ULONG_T; nCoeff: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IIXC_ImageFmtParams
// Flags:     (128) NonExtensible
// GUID:      {91C21F3E-9B7D-4225-ABFC-F6B7DB65E12D}
// *********************************************************************//
  IIXC_ImageFmtParams = interface(IUnknown)
    ['{91C21F3E-9B7D-4225-ABFC-F6B7DB65E12D}']
    function LoadFrom(const pSrc: ICabNode): HResult; stdcall;
    function SaveTo(const pDest: ICabNode): HResult; stdcall;
    function CopyFrom(const pSrc: IIXC_Page): HResult; stdcall;
    function ApplyTo(const pDest: IIXC_Page): HResult; stdcall;
    function Clear: HResult; stdcall;
    function SetDWord(nID: ULONG_T; nVal: ULONG_T): HResult; stdcall;
    function SetDouble(nID: ULONG_T; nVal: Double): HResult; stdcall;
    function SetString(nID: ULONG_T; const sVal: WideString): HResult; stdcall;
    function SetBytes(nID: ULONG_T; const pData: IMemBlock): HResult; stdcall;
    function GetDWord(nID: ULONG_T; out nVal: ULONG_T): HResult; stdcall;
    function GetString(nID: ULONG_T; out sVal: WideString): HResult; stdcall;
    function GetBytes(nID: ULONG_T; out ppBlock: IMemBlock): HResult; stdcall;
    function GetDouble(nID: ULONG_T; out nVal: Double): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IIXC_FormatInfo
// Flags:     (128) NonExtensible
// GUID:      {9ED33DFA-1D20-4D52-93D1-567AAFADE145}
// *********************************************************************//
  IIXC_FormatInfo = interface(IUnknown)
    ['{9ED33DFA-1D20-4D52-93D1-567AAFADE145}']
    function Get_ID(out nID: ULONG_T): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Get_Description(out sDescription: WideString): HResult; stdcall;
    function Get_Extentions(out sExts: WideString): HResult; stdcall;
    function Get_MIME(out sMIME: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IIXC_Inst
// Flags:     (128) NonExtensible
// GUID:      {03192318-BA9A-4790-BC39-C7149DCD9F2B}
// *********************************************************************//
  IIXC_Inst = interface(IUnknown)
    ['{03192318-BA9A-4790-BC39-C7149DCD9F2B}']
    function CreateEmptyImage(out pImage: IIXC_Image): HResult; stdcall;
    function Page_CreateEmpty(nWidth: ULONG_T; nHeight: ULONG_T; nFormat: IXC_PageFormat; 
                              nDefColor: ULONG_T; out pPage: IIXC_Page): HResult; stdcall;
    function Page_CreateFromHBITMAP(hBitmap: HANDLE_T; hPalette: HANDLE_T; out pPage: IIXC_Page): HResult; stdcall;
    function Page_CreateFromMemory(nWidth: ULONG_T; nHeight: ULONG_T; nMemType: IXC_MemoryType; 
                                   nNumColors: ULONG_T; var pPalette: LongWord; var pData: Byte; 
                                   nOffset: Integer; nDataSize: ULONG_T; nFlags: ULONG_T; 
                                   out pPage: IIXC_Page): HResult; stdcall;
    function Page_CreateFromClipboard(var nTypes: ULONG_T; nCount: ULONG_T; out nIndex: Integer; 
                                      out pPage: IIXC_Page): HResult; stdcall;
    function Get_FormatsCount(out nNumFormats: ULONG_T): HResult; stdcall;
    function GetFormatInfo(nIndex: ULONG_T; out pInfo: IIXC_FormatInfo): HResult; stdcall;
    function GetOpenFilters(nFlags: ULONG_T; out sFilters: WideString): HResult; stdcall;
    function GetSaveFilters(nFlags: ULONG_T; out sFilters: WideString): HResult; stdcall;
    function CreateMatrixFilterDefinition(nDimension: ULONG_T; 
                                          out pFilterDef: IIXC_MatrixFilterDefinition): HResult; stdcall;
    function FmtParamID2StrKey(nParamID: IXC_FormatParametersIDS; out sKey: WideString): HResult; stdcall;
    function CreateImageFmtParams(out pFmtParams: IIXC_ImageFmtParams): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXS_PDFVariant
// Flags:     (128) NonExtensible
// GUID:      {55623473-ED26-45BF-A454-52A4C74665E4}
// *********************************************************************//
  IPXS_PDFVariant = interface(IUnknown)
    ['{55623473-ED26-45BF-A454-52A4C74665E4}']
    function Get_type_(out nType: PXS_PDFVariantType): HResult; stdcall;
    function Get_IsIndirect(out bRes: WordBool): HResult; stdcall;
    function Get_ObjectNumber(out nID: ULONG_T): HResult; stdcall;
    function Get_ObjectGeneration(out nGen: ULONG_T): HResult; stdcall;
    function Get_Document(out pDoc: IPXS_Document): HResult; stdcall;
    function GetValue(out Value: OleVariant): HResult; stdcall;
    function GetInt(out nValue: Integer): HResult; stdcall;
    function GetInt64(out nValue: Int64): HResult; stdcall;
    function GetDouble(out nValue: Double): HResult; stdcall;
    function GetDoublePrecision(out nPrecision: Integer): HResult; stdcall;
    function GetBool(out bValue: WordBool): HResult; stdcall;
    function GetString(out sValue: WideString): HResult; stdcall;
    function GetStringR(out nBuf: Byte; nBufSize: ULONG_T; out nLen: ULONG_T): HResult; stdcall;
    function GetString_Unsafe(out nLen: ULONG_T; out nBuf: PByte1): HResult; stdcall;
    function GetStringFlags(out nFlags: ULONG_T): HResult; stdcall;
    function SetStringFlags(nFlags: ULONG_T): HResult; stdcall;
    function GetName(out sValue: WideString): HResult; stdcall;
    function GetNameR(out nBuf: Byte; nBufSize: ULONG_T; out nLen: ULONG_T): HResult; stdcall;
    function GetNameA(bAddAtom: WordBool; out nAtom: ULONG_T): HResult; stdcall;
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pItem: IPXS_PDFVariant): HResult; stdcall;
    function Dict_GetIndex(sKey: PWideChar; out nIndex: Integer): HResult; stdcall;
    function Dict_GetIndexR(var nKey: Byte; nKeyLen: ULONG_T; out nIndex: Integer): HResult; stdcall;
    function Dict_GetIndexA(nAtom: ULONG_T; out nIndex: Integer): HResult; stdcall;
    function Dict_Get(sKey: PWideChar; out pItem: IPXS_PDFVariant): HResult; stdcall;
    function Dict_GetR(var nKey: Byte; nKeyLen: ULONG_T; out pItem: IPXS_PDFVariant): HResult; stdcall;
    function Dict_GetA(nAtom: ULONG_T; out pItem: IPXS_PDFVariant): HResult; stdcall;
    function Dict_Set(sKey: PWideChar; const pItem: IPXS_PDFVariant; bClone: WordBool): HResult; stdcall;
    function Dict_SetR(var nKey: Byte; nKeyLen: ULONG_T; const pItem: IPXS_PDFVariant; 
                       bClone: WordBool): HResult; stdcall;
    function Dict_SetA(nAtom: ULONG_T; const pItem: IPXS_PDFVariant; bClone: WordBool): HResult; stdcall;
    function Dict_SetInt(sKey: PWideChar; nVal: Integer): HResult; stdcall;
    function Dict_SetIntR(var nKey: Byte; nKeyLen: ULONG_T; nVal: Integer): HResult; stdcall;
    function Dict_SetIntA(nAtom: ULONG_T; nVal: Integer): HResult; stdcall;
    function Dict_SetInt64(sKey: PWideChar; nVal: Int64): HResult; stdcall;
    function Dict_SetInt64R(var nKey: Byte; nKeyLen: ULONG_T; nVal: Int64): HResult; stdcall;
    function Dict_SetInt64A(nAtom: ULONG_T; nVal: Int64): HResult; stdcall;
    function Dict_SetDouble(sKey: PWideChar; nVal: Double; nPrec: Integer): HResult; stdcall;
    function Dict_SetDoubleR(var nKey: Byte; nKeyLen: ULONG_T; nVal: Double; nPrec: Integer): HResult; stdcall;
    function Dict_SetDoubleA(nAtom: ULONG_T; nVal: Double; nPrec: Integer): HResult; stdcall;
    function Dict_SetBool(sKey: PWideChar; bVal: WordBool): HResult; stdcall;
    function Dict_SetBoolR(var nKey: Byte; nKeyLen: ULONG_T; bVal: WordBool): HResult; stdcall;
    function Dict_SetBoolA(nAtom: ULONG_T; bVal: WordBool): HResult; stdcall;
    function Dict_SetName(sKey: PWideChar; sVal: PWideChar): HResult; stdcall;
    function Dict_SetNameR(var nKey: Byte; nKeyLen: ULONG_T; var nVal: Byte; nValLen: ULONG_T): HResult; stdcall;
    function Dict_SetNameA(nAtom: ULONG_T; nVal: ULONG_T): HResult; stdcall;
    function Dict_SetNameAR(nAtom: ULONG_T; var nVal: Byte; nValLen: ULONG_T): HResult; stdcall;
    function Dict_SetString(sKey: PWideChar; sVal: PWideChar): HResult; stdcall;
    function Dict_SetStringR(var nKey: Byte; nKeyLen: ULONG_T; var nVal: Byte; nValLen: ULONG_T; 
                             nStringFlags: ULONG_T): HResult; stdcall;
    function Dict_SetStringA(nAtom: ULONG_T; sVal: PWideChar): HResult; stdcall;
    function Dict_SetStringAR(nAtom: ULONG_T; var nVal: Byte; nValLen: ULONG_T; 
                              nStringFlags: ULONG_T): HResult; stdcall;
    function Dict_GetKey(nIndex: ULONG_T; out sKey: WideString): HResult; stdcall;
    function Dict_GetKeyR(nIndex: ULONG_T; out nBuf: Byte; nBufSize: ULONG_T; out nLen: ULONG_T): HResult; stdcall;
    function Dict_GetKeyA(nIndex: ULONG_T; bAddAtom: WordBool; out nAtom: ULONG_T): HResult; stdcall;
    function Dict_GetType(sKey: PWideChar; out nItemType: PXS_PDFVariantType): HResult; stdcall;
    function Dict_GetTypeR(var nKey: Byte; nKeyLen: ULONG_T; out nItemType: PXS_PDFVariantType): HResult; stdcall;
    function Dict_GetTypeA(nAtom: ULONG_T; out nItemType: PXS_PDFVariantType): HResult; stdcall;
    function Dict_GetInt(sKey: PWideChar; nDefValue: Integer; out nVal: Integer): HResult; stdcall;
    function Dict_GetIntR(var nKey: Byte; nKeyLen: ULONG_T; nDefValue: Integer; out nVal: Integer): HResult; stdcall;
    function Dict_GetIntA(nAtom: ULONG_T; nDefValue: Integer; out nVal: Integer): HResult; stdcall;
    function Dict_GetInt64(sKey: PWideChar; nDefValue: Int64; out nVal: Int64): HResult; stdcall;
    function Dict_GetInt64R(var nKey: Byte; nKeyLen: ULONG_T; nDefValue: Int64; out nVal: Int64): HResult; stdcall;
    function Dict_GetInt64A(nAtom: ULONG_T; nDefValue: Int64; out nVal: Int64): HResult; stdcall;
    function Dict_GetDouble(sKey: PWideChar; nDefValue: Double; out nVal: Double): HResult; stdcall;
    function Dict_GetDoubleR(var nKey: Byte; nKeyLen: ULONG_T; nDefValue: Double; out nVal: Double): HResult; stdcall;
    function Dict_GetDoubleA(nAtom: ULONG_T; nDefValue: Double; out nVal: Double): HResult; stdcall;
    function Dict_GetBool(sKey: PWideChar; bDefValue: WordBool; out bVal: WordBool): HResult; stdcall;
    function Dict_GetBoolR(var nKey: Byte; nKeyLen: ULONG_T; bDefValue: WordBool; out bVal: WordBool): HResult; stdcall;
    function Dict_GetBoolA(nAtom: ULONG_T; bDefValue: WordBool; out bVal: WordBool): HResult; stdcall;
    function Dict_GetName(sKey: PWideChar; const sDefVal: WideString; out sVal: WideString): HResult; stdcall;
    function Dict_GetNameA(nAtom: ULONG_T; nDefValue: ULONG_T; bAddAtom: WordBool; out nVal: ULONG_T): HResult; stdcall;
    function Dict_GetString(sKey: PWideChar; const sDefVal: WideString; out sVal: WideString): HResult; stdcall;
    function Dict_GetStringA(nAtom: ULONG_T; const sDefVal: WideString; out sVal: WideString): HResult; stdcall;
    function Dict_GetStringAR(nAtom: ULONG_T; out nBuf: Byte; nBufLen: ULONG_T; out nLen: ULONG_T): HResult; stdcall;
    function Arr_Insert(const pItem: IPXS_PDFVariant; nBefore: ULONG_T; bClone: WordBool): HResult; stdcall;
    function Arr_InsertInt(nVal: Integer; nBefore: ULONG_T): HResult; stdcall;
    function Arr_InsertInt64(nVal: Int64; nBefore: ULONG_T): HResult; stdcall;
    function Arr_InsertDouble(nVal: Double; nBefore: ULONG_T; nPrec: Integer): HResult; stdcall;
    function Arr_InsertBool(bVal: WordBool; nBefore: ULONG_T): HResult; stdcall;
    function Arr_InsertName(sVal: PWideChar; nBefore: ULONG_T): HResult; stdcall;
    function Arr_InsertNameR(var nVal: Byte; nValLen: ULONG_T; nBefore: ULONG_T): HResult; stdcall;
    function Arr_InsertNameA(nAtom: ULONG_T; nBefore: ULONG_T): HResult; stdcall;
    function Arr_InsertString(sVal: PWideChar; nBefore: ULONG_T): HResult; stdcall;
    function Arr_InsertStringR(var nVal: Byte; nValLen: ULONG_T; nBefore: ULONG_T): HResult; stdcall;
    function Arr_InsertDoubles(var nVals: Double; nCount: ULONG_T; nBefore: ULONG_T; nPrec: Integer): HResult; stdcall;
    function Arr_InsertFloats(var nVals: Single; nCount: ULONG_T; nBefore: ULONG_T; nPrec: Integer): HResult; stdcall;
    function Arr_GetType(nIndex: ULONG_T; out nItemType: PXS_PDFVariantType): HResult; stdcall;
    function Arr_GetInt(nIndex: ULONG_T; nDefValue: Integer; out nVal: Integer): HResult; stdcall;
    function Arr_GetInt64(nIndex: ULONG_T; nDefValue: Int64; out nVal: Int64): HResult; stdcall;
    function Arr_GetDouble(nIndex: ULONG_T; nDefValue: Double; out nVal: Double): HResult; stdcall;
    function Arr_GetBool(nIndex: ULONG_T; bDefValue: WordBool; out bVal: WordBool): HResult; stdcall;
    function Arr_GetName(nIndex: ULONG_T; const sDefVal: WideString; out sVal: WideString): HResult; stdcall;
    function Arr_GetNameA(nIndex: ULONG_T; nDefValue: ULONG_T; bAddAtom: WordBool; out nVal: ULONG_T): HResult; stdcall;
    function Arr_GetString(nIndex: ULONG_T; const sDefVal: WideString; out sVal: WideString): HResult; stdcall;
    function Arr_GetStringR(nIndex: ULONG_T; out nBuf: Byte; nBufLen: ULONG_T; out nLen: ULONG_T): HResult; stdcall;
    function Stream_GetLength(out nLen: Int64): HResult; stdcall;
    function Stream_CreateDecoder(nFlags: ULONG_T; nDepth: PXS_StreamDecodeDepth; 
                                  out pFilter: IPXS_DecodeFilter): HResult; stdcall;
    function Stream_CreateEncoder(const pFilters: IPXS_EncodeFiltersArray; 
                                  var stStreamInfo: PXS_StreamInfo; nFlags: ULONG_T; 
                                  out pEncoder: IPXS_EncodeFilter): HResult; stdcall;
    function Stream_SetData(const pSrc: IStream; const pFilters: IPXS_EncodeFiltersArray; 
                            var stStreamInfo: PXS_StreamInfo; nFlags: ULONG_T): HResult; stdcall;
    function Stream_GetData(const pDest: IStream; nDepth: PXS_StreamDecodeDepth; 
                            bConvertCbCr: WordBool): HResult; stdcall;
    function Stream_SetMemData(const pSrc: IMemBlock; const pFilters: IPXS_EncodeFiltersArray; 
                               var stStreamInfo: PXS_StreamInfo; nFlags: ULONG_T): HResult; stdcall;
    function Stream_GetMemData(const pDest: IMemBlock; nDepth: PXS_StreamDecodeDepth; 
                               bConvertCbCr: WordBool): HResult; stdcall;
    function Stream_CreateEncoderByDecoder(var stStreamInfo: PXS_StreamInfo; nFlags: ULONG_T; 
                                           out pFilter: IPXS_EncodeFilter): HResult; stdcall;
    function RemoveItems(nIndex: Integer; nCount: ULONG_T): HResult; stdcall;
    function RemoveItem(const pVar: IPXS_PDFVariant): HResult; stdcall;
    function RemoveAllItems: HResult; stdcall;
    function Compare(const pVar: IPXS_PDFVariant; out nRes: Integer): HResult; stdcall;
    function Clone(out pClone: IPXS_PDFVariant): HResult; stdcall;
    function CopyFrom(const pSrc: IPXS_PDFVariant): HResult; stdcall;
    function Dict_RemoveKey(sKey: PWideChar): HResult; stdcall;
    function Dict_RemoveKeyA(nAtom: ULONG_T): HResult; stdcall;
    function Dict_RemoveKeyR(var nKey: Byte; nKeyLen: ULONG_T): HResult; stdcall;
    function Arr_Set(nPos: ULONG_T; const pItem: IPXS_PDFVariant; bClone: WordBool): HResult; stdcall;
    function Arr_SetInt(nPos: ULONG_T; nVal: Integer): HResult; stdcall;
    function Arr_SetInt64(nPos: ULONG_T; nVal: Int64): HResult; stdcall;
    function Arr_SetDouble(nPos: ULONG_T; nVal: Double; nPrec: Integer): HResult; stdcall;
    function Arr_SetBool(nPos: ULONG_T; bVal: WordBool): HResult; stdcall;
    function Arr_SetName(nPos: ULONG_T; sVal: PWideChar): HResult; stdcall;
    function Arr_SetNameR(nPos: ULONG_T; var nVal: Byte; nValLen: ULONG_T): HResult; stdcall;
    function Arr_SetNameA(nPos: ULONG_T; nAtom: ULONG_T): HResult; stdcall;
    function Arr_SetString(nPos: ULONG_T; sVal: PWideChar): HResult; stdcall;
    function Arr_SetStringR(nPos: ULONG_T; var nVal: Byte; nValLen: ULONG_T): HResult; stdcall;
    function Write(const pDest: IMemBlock; nFlags: ULONG_T): HResult; stdcall;
    function Stream_EmbeddExternal(bRemoveOnFail: WordBool): HResult; stdcall;
    function Stream_HasExternalData(out bHasExternal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXS_Document
// Flags:     (128) NonExtensible
// GUID:      {B5F984DB-9610-4F9E-9F9D-BDFF4B4ACAF4}
// *********************************************************************//
  IPXS_Document = interface(IUnknown)
    ['{B5F984DB-9610-4F9E-9F9D-BDFF4B4ACAF4}']
    function Get_Root(out pRoot: IPXS_PDFVariant): HResult; stdcall;
    function Get_HasISOExtensions(out bHas: WordBool): HResult; stdcall;
    function GetAdobeExtLevel(out pBaseVersion: IPXS_PDFVariant; out nExtension: ULONG_T): HResult; stdcall;
    function SetAdobeExtLevel(const pBaseVersion: IPXS_PDFVariant; nExtension: ULONG_T): HResult; stdcall;
    function GetObjectByNum(nObjNum: ULONG_T; out pObj: IPXS_PDFVariant): HResult; stdcall;
    function GetNextIndirect(var nEnumPos: ULONG_T; out pObj: IPXS_PDFVariant): HResult; stdcall;
    function GetStandardStreamDecoder(var Params: PXS_StreamEncoderParamStruct; nKeyLen: ULONG_T; 
                                      var pKey: Byte; nVersion: ULONG_T; nRevision: ULONG_T; 
                                      nMethod: PXS_CryptMethod; bEncodeMetadata: WordBool; 
                                      bOnlyEF: WordBool; out pDecoder: IPXS_pdfStreamCoder): HResult; stdcall;
    function GetStandardStreamEncoder(var Params: PXS_StreamEncoderParamStruct; nKeyLen: ULONG_T; 
                                      var pKey: Byte; nVersion: ULONG_T; nRevision: ULONG_T; 
                                      nMethod: PXS_CryptMethod; bEncodeMetadata: WordBool; 
                                      bOnlyEF: WordBool; out pDecoder: IPXS_pdfStreamCoder): HResult; stdcall;
    function GetStandardStringDecoder(nObjNumber: ULONG_T; nRevNumber: ULONG_T; nKeyLen: ULONG_T; 
                                      var pKey: Byte; nVersion: ULONG_T; nRevision: ULONG_T; 
                                      nMethod: PXS_CryptMethod; bOnlyEF: WordBool; 
                                      out pDecoder: IPXS_pdfStringCoder): HResult; stdcall;
    function GetStandardStringEncoder(nObjNumber: ULONG_T; nRevNumber: ULONG_T; nKeyLen: ULONG_T; 
                                      var pKey: Byte; nVersion: ULONG_T; nRevision: ULONG_T; 
                                      nMethod: PXS_CryptMethod; bOnlyEF: WordBool; 
                                      out pDecoder: IPXS_pdfStringCoder): HResult; stdcall;
    function LockDocument(bWait: WordBool): HResult; stdcall;
    function LockDocumentExclusive(bWait: WordBool): HResult; stdcall;
    function UnlockDocument: HResult; stdcall;
    function UnlockDocumentExclusive: HResult; stdcall;
    function Get_IsLocked(out bIsLocked: WordBool): HResult; stdcall;
    function Get_IsLockedExclusive(out bIsLocked: WordBool): HResult; stdcall;
    function Get_Trailer(out pTrailer: IPXS_PDFVariant): HResult; stdcall;
    function GetInfoDict(bCreateIfAbsent: WordBool; out pInfoDict: IPXS_PDFVariant): HResult; stdcall;
    function Get_MaxObjectNumber(out nObjNum: ULONG_T): HResult; stdcall;
    function GetDocID(out pID1: IPXS_PDFVariant; out pID2: IPXS_PDFVariant): HResult; stdcall;
    function GenerateDocID(bChangeOnlySecond: WordBool): HResult; stdcall;
    function Get_BrokenFlags(out nFlags: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXS_pdfStreamCoder
// Flags:     (128) NonExtensible
// GUID:      {F6E7F833-9638-4892-893A-D4AB9C561425}
// *********************************************************************//
  IPXS_pdfStreamCoder = interface(IUnknown)
    ['{F6E7F833-9638-4892-893A-D4AB9C561425}']
    function SetInBuffer(var nBuf: Byte; nBufLen: ULONG_T): HResult; stdcall;
    function SetOutBuffer(var nBuf: Byte; nBufLen: ULONG_T): HResult; stdcall;
    function Initialize: HResult; stdcall;
    function Proceed: HResult; stdcall;
    function Finalize: HResult; stdcall;
    function Get_AvailIn(out nSize: ULONG_T): HResult; stdcall;
    function Get_AvailOut(out nSize: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXS_pdfStringCoder
// Flags:     (128) NonExtensible
// GUID:      {007127FA-5143-431E-88AA-D13C893F2D32}
// *********************************************************************//
  IPXS_pdfStringCoder = interface(IUnknown)
    ['{007127FA-5143-431E-88AA-D13C893F2D32}']
    function Proceed(var nSrc: Byte; nSrcLen: ULONG_T; var nDest: Byte; var nDestLen: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXS_DecodeFilter
// Flags:     (128) NonExtensible
// GUID:      {51D6B2D0-CB5F-4AEB-908A-0910A370D72B}
// *********************************************************************//
  IPXS_DecodeFilter = interface(IUnknown)
    ['{51D6B2D0-CB5F-4AEB-908A-0910A370D72B}']
    function Get_Name(bShort: WordBool; out nName: ULONG_T): HResult; stdcall;
    function Get_PrevFilter(out pPrev: IPXS_DecodeFilter): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function GetStreamInfo(const pCab: ICab; bRecursive: WordBool): HResult; stdcall;
    function Init(const pPrevFilter: IPXS_DecodeFilter; const pDecodeParams: IPXS_PDFVariant; 
                  const pDoc: IPXS_Document; nFlags: ULONG_T): HResult; stdcall;
    function Rewind: HResult; stdcall;
    function Decode(out nBuf: Byte; cb: ULONG_T; out nDecoded: ULONG_T): HResult; stdcall;
    function Skip(nBufSize: ULONG_T; var nDecoded: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXS_EncodeFiltersArray
// Flags:     (128) NonExtensible
// GUID:      {E193B2C8-B8CF-44E3-9F00-FB439D1B6EC0}
// *********************************************************************//
  IPXS_EncodeFiltersArray = interface(IUnknown)
    ['{E193B2C8-B8CF-44E3-9F00-FB439D1B6EC0}']
    function AddFilterInfo(nFilter: ULONG_T; const pParams: IPXS_PDFVariant): HResult; stdcall;
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_FilterName(nIndex: ULONG_T; out nFilterName: ULONG_T): HResult; stdcall;
    function Get_FilterParams(nIndex: ULONG_T; out pFilterParams: IPXS_PDFVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXS_EncodeFilter
// Flags:     (128) NonExtensible
// GUID:      {D3DE02B8-3A5B-402C-8798-854733238458}
// *********************************************************************//
  IPXS_EncodeFilter = interface(IUnknown)
    ['{D3DE02B8-3A5B-402C-8798-854733238458}']
    function Get_Name(bShort: WordBool; out nName: ULONG_T): HResult; stdcall;
    function Get_PrevFilter(out pPrev: IPXS_EncodeFilter): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Init(const pPrevFilter: IPXS_EncodeFilter; const pEncodeParams: IPXS_PDFVariant; 
                  var stStreamInfo: PXS_StreamInfo; nFlags: ULONG_T): HResult; stdcall;
    function GetDecodeParams(const pDoc: IPXS_Document; out pParams: IPXS_PDFVariant): HResult; stdcall;
    function Encode(var nBuf: Byte; cb: ULONG_T): HResult; stdcall;
    function FinishEncode: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXS_Inst
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {74FD343F-06A3-4386-A6C0-DC4D5AC1C090}
// *********************************************************************//
  IPXS_Inst = interface(IDispatch)
    ['{74FD343F-06A3-4386-A6C0-DC4D5AC1C090}']
    procedure RegisterStreamFilter(nName: ULONG_T; const pFC: IPXS_StreamFiltersFactory; 
                                   pPlugin: Pointer); safecall;
    procedure UnregisterStreamFilter(nName: ULONG_T); safecall;
    function GetStreamDecoder(nName: ULONG_T): IPXS_DecodeFilter; safecall;
    function GetStreamEncoder(nName: ULONG_T): IPXS_EncodeFilter; safecall;
    function StrToAtom(sString: PWideChar): ULONG_T; safecall;
    function StrToAtomRaw(var nStr: Byte; nLen: Integer): ULONG_T; safecall;
    function HasAtom(sString: PWideChar): WordBool; safecall;
    function HasAtomRaw(var nStr: Byte; nLen: Integer): WordBool; safecall;
    function AtomToStr(nAtom: ULONG_T): WideString; safecall;
    function AtomToStrRaw(nAtom: ULONG_T; out nStr: Byte; nBufSize: ULONG_T): ULONG_T; safecall;
    function NewVar(const Data: OleVariant; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_Null: IPXS_PDFVariant; safecall;
    function NewVar_Int(nVal: Integer; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_Int64(nVal: Int64; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_Double(nVal: Double; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_DoubleEx(nVal: Double; nPrecision: Integer; const pDoc: IPXS_Document; 
                             bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_Boolean(bVal: WordBool; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_Name(sVal: PWideChar; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_NameRaw(var nData: Byte; nDataLen: ULONG_T; const pDoc: IPXS_Document; 
                            bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_NameAtom(nAtom: ULONG_T; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_String(sVal: PWideChar; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_StringRaw(var nData: Byte; nDataLen: ULONG_T; const pDoc: IPXS_Document; 
                              bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_Array(nItems: ULONG_T; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_Dict(const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; safecall;
    function NewVar_Stream(const pDoc: IPXS_Document): IPXS_PDFVariant; safecall;
    function NewVar_FromBuf(const pDoc: IPXS_Document; nBuf: PAnsiChar; bAsIndirect: WordBool): IPXS_PDFVariant; safecall;
    function Create_EncodeFiltersArray: IPXS_EncodeFiltersArray; safecall;
    function CreateCabPDFDataProvider(const pStream: IStream; const sPassword: WideString): ICabDataProvider; safecall;
    function CreateNewDoc(nFlags: ULONG_T): IPXS_Document; safecall;
  end;

// *********************************************************************//
// DispIntf:  IPXS_InstDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {74FD343F-06A3-4386-A6C0-DC4D5AC1C090}
// *********************************************************************//
  IPXS_InstDisp = dispinterface
    ['{74FD343F-06A3-4386-A6C0-DC4D5AC1C090}']
    procedure RegisterStreamFilter(nName: ULONG_T; const pFC: IPXS_StreamFiltersFactory; 
                                   pPlugin: {NOT_OLEAUTO(Pointer)}OleVariant); dispid 1610743808;
    procedure UnregisterStreamFilter(nName: ULONG_T); dispid 1610743809;
    function GetStreamDecoder(nName: ULONG_T): IPXS_DecodeFilter; dispid 1610743810;
    function GetStreamEncoder(nName: ULONG_T): IPXS_EncodeFilter; dispid 1610743811;
    function StrToAtom(sString: {NOT_OLEAUTO(PWideChar)}OleVariant): ULONG_T; dispid 1610743812;
    function StrToAtomRaw(var nStr: Byte; nLen: Integer): ULONG_T; dispid 1610743813;
    function HasAtom(sString: {NOT_OLEAUTO(PWideChar)}OleVariant): WordBool; dispid 1610743814;
    function HasAtomRaw(var nStr: Byte; nLen: Integer): WordBool; dispid 1610743815;
    function AtomToStr(nAtom: ULONG_T): WideString; dispid 1610743816;
    function AtomToStrRaw(nAtom: ULONG_T; out nStr: Byte; nBufSize: ULONG_T): ULONG_T; dispid 1610743817;
    function NewVar(const Data: OleVariant; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743818;
    function NewVar_Null: IPXS_PDFVariant; dispid 1610743819;
    function NewVar_Int(nVal: Integer; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743820;
    function NewVar_Int64(nVal: Int64; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743821;
    function NewVar_Double(nVal: Double; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743822;
    function NewVar_DoubleEx(nVal: Double; nPrecision: Integer; const pDoc: IPXS_Document; 
                             bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743823;
    function NewVar_Boolean(bVal: WordBool; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743824;
    function NewVar_Name(sVal: {NOT_OLEAUTO(PWideChar)}OleVariant; const pDoc: IPXS_Document; 
                         bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743825;
    function NewVar_NameRaw(var nData: Byte; nDataLen: ULONG_T; const pDoc: IPXS_Document; 
                            bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743826;
    function NewVar_NameAtom(nAtom: ULONG_T; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743827;
    function NewVar_String(sVal: {NOT_OLEAUTO(PWideChar)}OleVariant; const pDoc: IPXS_Document; 
                           bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743828;
    function NewVar_StringRaw(var nData: Byte; nDataLen: ULONG_T; const pDoc: IPXS_Document; 
                              bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743829;
    function NewVar_Array(nItems: ULONG_T; const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743830;
    function NewVar_Dict(const pDoc: IPXS_Document; bIndirect: WordBool): IPXS_PDFVariant; dispid 1610743831;
    function NewVar_Stream(const pDoc: IPXS_Document): IPXS_PDFVariant; dispid 1610743832;
    function NewVar_FromBuf(const pDoc: IPXS_Document; nBuf: {NOT_OLEAUTO(PAnsiChar)}OleVariant; 
                            bAsIndirect: WordBool): IPXS_PDFVariant; dispid 1610743833;
    function Create_EncodeFiltersArray: IPXS_EncodeFiltersArray; dispid 1610743834;
    function CreateCabPDFDataProvider(const pStream: IStream; const sPassword: WideString): ICabDataProvider; dispid 1610743835;
    function CreateNewDoc(nFlags: ULONG_T): IPXS_Document; dispid 1610743836;
  end;

// *********************************************************************//
// Interface: IPXS_StreamFiltersFactory
// Flags:     (128) NonExtensible
// GUID:      {38F80738-DA2B-4251-896E-1BD9D44B2FC9}
// *********************************************************************//
  IPXS_StreamFiltersFactory = interface(IUnknown)
    ['{38F80738-DA2B-4251-896E-1BD9D44B2FC9}']
    function CreateDecodeFilter(nName: ULONG_T; out pFilter: IPXS_DecodeFilter): HResult; stdcall;
    function CreateEncodeFilter(nName: ULONG_T; out pFilter: IPXS_EncodeFilter): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICabDataProvider
// Flags:     (128) NonExtensible
// GUID:      {27382B72-0F58-4DB6-9EC5-39C94BEEC437}
// *********************************************************************//
  ICabDataProvider = interface(IUnknown)
    ['{27382B72-0F58-4DB6-9EC5-39C94BEEC437}']
  end;

// *********************************************************************//
// Interface: IPXC_AcroForm
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {499EF19E-675E-436D-84B5-53E25C56CB02}
// *********************************************************************//
  IPXC_AcroForm = interface(IDispatch)
    ['{499EF19E-675E-436D-84B5-53E25C56CB02}']
    function Get_Document: IPXC_Document; safecall;
    function Get_FieldsCount: ULONG_T; safecall;
    function Get_Field(nIndex: ULONG_T): IPXC_FormField; safecall;
    function Get_type_: PXC_PDFFormType; safecall;
    function Get_Root: IPXC_FormField; safecall;
    function GetFieldByName(sName: PWideChar): IPXC_FormField; safecall;
    function GetFieldByPDFObject(const pVariant: IPXS_PDFVariant): IPXC_FormField; safecall;
    function CreateField(sName: PWideChar; nType: PXC_FormFieldType; nPageIdx: ULONG_T; 
                         var pRect: PXC_Rect): IPXC_FormField; safecall;
    procedure FlattenField(sName: PWideChar); safecall;
    procedure FlattenAllFields; safecall;
    procedure Export(const pDest: IAFS_Name; sFormat: PWideChar; 
                     const pFieldsList: IPXS_PDFVariant; bInclude: WordBool; nFlags: ULONG_T); safecall;
    function GetFieldByNameEx(sName: PWideChar; bAllowPartial: WordBool): IPXC_FormField; safecall;
    property Document: IPXC_Document read Get_Document;
    property FieldsCount: ULONG_T read Get_FieldsCount;
    property Field[nIndex: ULONG_T]: IPXC_FormField read Get_Field;
    property type_: PXC_PDFFormType read Get_type_;
    property Root: IPXC_FormField read Get_Root;
  end;

// *********************************************************************//
// DispIntf:  IPXC_AcroFormDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {499EF19E-675E-436D-84B5-53E25C56CB02}
// *********************************************************************//
  IPXC_AcroFormDisp = dispinterface
    ['{499EF19E-675E-436D-84B5-53E25C56CB02}']
    property Document: IPXC_Document readonly dispid 1610743808;
    property FieldsCount: ULONG_T readonly dispid 1610743809;
    property Field[nIndex: ULONG_T]: IPXC_FormField readonly dispid 1610743810;
    property type_: PXC_PDFFormType readonly dispid 1610743811;
    property Root: IPXC_FormField readonly dispid 1610743812;
    function GetFieldByName(sName: {NOT_OLEAUTO(PWideChar)}OleVariant): IPXC_FormField; dispid 1610743813;
    function GetFieldByPDFObject(const pVariant: IPXS_PDFVariant): IPXC_FormField; dispid 1610743814;
    function CreateField(sName: {NOT_OLEAUTO(PWideChar)}OleVariant; nType: PXC_FormFieldType; 
                         nPageIdx: ULONG_T; var pRect: {NOT_OLEAUTO(PXC_Rect)}OleVariant): IPXC_FormField; dispid 1610743815;
    procedure FlattenField(sName: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743816;
    procedure FlattenAllFields; dispid 1610743817;
    procedure Export(const pDest: IAFS_Name; sFormat: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                     const pFieldsList: IPXS_PDFVariant; bInclude: WordBool; nFlags: ULONG_T); dispid 1610743818;
    function GetFieldByNameEx(sName: {NOT_OLEAUTO(PWideChar)}OleVariant; bAllowPartial: WordBool): IPXC_FormField; dispid 1610743819;
  end;

// *********************************************************************//
// Interface: IPXC_Document
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BE5B563D-C098-4971-9EFD-4E8F95D34D02}
// *********************************************************************//
  IPXC_Document = interface(IDispatch)
    ['{BE5B563D-C098-4971-9EFD-4E8F95D34D02}']
    function Get_ID: ULONG_T; safecall;
    function Get_CosDocument: IPXS_Document; safecall;
    function Get_Pages: IPXC_Pages; safecall;
    function Get_BookmarkRoot: IPXC_Bookmark; safecall;
    procedure Set_DefaultCompression(const sPtreamType: WideString; 
                                     const pEncoders: IPXS_EncodeFiltersArray); safecall;
    function Get_DefaultCompression(const sPtreamType: WideString): IPXS_EncodeFiltersArray; safecall;
    function Get_Props: IPXC_DocumentProps; safecall;
    function Get_Info: IPXC_DocumentInfo; safecall;
    function GetXMPMetadata(bCreateIfEmpty: WordBool): IPXC_XMPMetadata; safecall;
    function IsMetaOperationGranded(nOper: PXC_DocumentMetaOper): WordBool; safecall;
    function CreateActionsList: IPXC_ActionsList; safecall;
    function Get_Articles: IPXC_Articles; safecall;
    function CreateFileSpec(const pName: IAFS_Name; const pRelName: IAFS_Name): IPXC_FileSpec; safecall;
    function CreateFileSpec2(pDIFileName: PWideChar; pFSName: PWideChar): IPXC_FileSpec; safecall;
    function GetFileSpecFromVariant(const pVar: IPXS_PDFVariant): IPXC_FileSpec; safecall;
    function GetCollection: IPXC_Collection; safecall;
    function CreateCollection: IPXC_Collection; safecall;
    procedure DeleteCollection; safecall;
    function GetNameTree(sTreeName: PWideChar): IPXC_NameTree; safecall;
    function GetNameTreeA(nTreeName: ULONG_T): IPXC_NameTree; safecall;
    function GetSecurityHandlerType(bNew: WordBool): ULONG_T; safecall;
    function GetSecurityHandler(bNew: WordBool): IPXC_SecurityHandler; safecall;
    function GetSecurityData(bNew: WordBool): IUnknown; safecall;
    function NewSecurityData: IUnknown; safecall;
    procedure SetNewSecurityData(const pSecData: IUnknown); safecall;
    function GetNewSecurityInfo: ULONG_T; safecall;
    function RequestPermission(nReqObj: PXC_RequestObj; nReqOper: PXC_RequestOper; 
                               pAuthData: Pointer): PXC_PermStatus; safecall;
    function AuthorizeWithPassword(sPwd: PWideChar): PXC_PermStatus; safecall;
    function AuthorizeWithPassword2(var nPwd: Byte; nLen: ULONG_T): PXC_PermStatus; safecall;
    procedure SetStdEncryption(nMethod: PXC_StdEncryptionMehtod; bEncryptMetadata: WordBool; 
                               nPermission: ULONG_T; const sUserPassword: WideString; 
                               const sOwnerPassword: WideString); safecall;
    function Get_HasAcroForm: WordBool; safecall;
    function Get_AcroForm: IPXC_AcroForm; safecall;
    procedure PlaceWatermark(const pPageIndexes: IBitSet; const pParams: IPXC_WatermarkParams; 
                             const pProgress: IProgressMon); safecall;
    function Get_PageContentCallback: IPXC_PageContentCallback; safecall;
    procedure Set_PageContentCallback(const pCallback: IPXC_PageContentCallback); safecall;
    function CreateContentCreator: IPXC_ContentCreator; safecall;
    function CreateNewContent: IPXC_Content; safecall;
    function LoadContent(const pStream: IPXS_PDFVariant; const pResDict: IPXS_PDFVariant; 
                         const pResOwner: IUnknown; nFlags: ULONG_T): IPXC_Content; safecall;
    function AddImageFromFile(sFileName: PWideChar; nPage: ULONG_T; nFlags: ULONG_T): IPXC_Image; safecall;
    function AddImageFromStream(const pStream: IStream; nPage: ULONG_T; nFlags: ULONG_T): IPXC_Image; safecall;
    function AddImageFromIXCPage(const pPage: IIXC_Page; nFlags: ULONG_T): IPXC_Image; safecall;
    function AddImageFromMemory(var Data: Byte; datasize: ULONG_T; nWidth: ULONG_T; 
                                nHeight: ULONG_T; nStride: Integer; nType: PXC_ImgMemType; 
                                dwFlags: ULONG_T): IPXC_Image; safecall;
    procedure GetFontInfo(const pFontCallback: IPXC_FontInfoCallback); safecall;
    function GetFontInfoByHandle(hHandle: ULONG_T): IPXC_DocFontsInfo; safecall;
    function GetNamedDestination(const sDestName: WideString): PXC_Destination; safecall;
    procedure SetNamedDestination(const sDestName: WideString; var stDest: PXC_Destination); safecall;
    function FillDestination(const pVar: IPXS_PDFVariant): PXC_Destination; safecall;
    procedure Close(nFlags: ULONG_T); safecall;
    procedure WriteToFile(sDestFileName: PWideChar; const pProgress: IProgressMon; nFlags: ULONG_T); safecall;
    procedure WriteTo(const pDest: IUnknown; const pProgress: IProgressMon; nFlags: ULONG_T); safecall;
    function Get_DeleteOnClose: WordBool; safecall;
    procedure Set_DeleteOnClose(bVal: WordBool); safecall;
    function CreateNewFont(pFaceName: PWideChar; nFlags: ULONG_T; nWeight: ULONG_T): IPXC_Font; safecall;
    function CreateNewFont2(sPostScriptName: PWideChar): IPXC_Font; safecall;
    function Get_DocumentTempFolder: WideString; safecall;
    function GetImageByHandle(nHandle: ULONG_T): IPXC_Image; safecall;
    function GetColorSpaceByHandle(nHandle: ULONG_T): IPXC_ColorSpace; safecall;
    function GetXFormByHandle(nHandle: ULONG_T): IPXC_XForm; safecall;
    function GetFunctionByHandle(nHandle: ULONG_T): IPXC_Function; safecall;
    function GetSoftMaskByHandle(nHandle: ULONG_T): IPXC_SoftMask; safecall;
    function GetShadeByHandle(nHandle: ULONG_T): IPXC_Shading; safecall;
    function GetPatternByHandle(nHandle: ULONG_T): IPXC_Pattern; safecall;
    function GetStdColorSpace(nCSType: PXC_ColorSpaceType): IPXC_ColorSpace; safecall;
    function GetColorSpace(const pVar: IPXS_PDFVariant): IPXC_ColorSpace; safecall;
    function GetShade(const pVar: IPXS_PDFVariant): IPXC_Shading; safecall;
    function GetPattern(const pVar: IPXS_PDFVariant): IPXC_Pattern; safecall;
    function GetImage(const pVar: IPXS_PDFVariant): IPXC_Image; safecall;
    function GetXForm(const pVar: IPXS_PDFVariant): IPXC_XForm; safecall;
    function GetFunction(const pVar: IPXS_PDFVariant): IPXC_Function; safecall;
    function GetSoftMask(const pVar: IPXS_PDFVariant): IPXC_SoftMask; safecall;
    function GetFontByHandle(nHandle: ULONG_T): IPXC_Font; safecall;
    function GetFont(const pVar: IPXS_PDFVariant): IPXC_Font; safecall;
    function Get_SrcInfo: IPXC_DocSrcInfo; safecall;
    function CreateShadeStops: IPXC_GradientStops; safecall;
    function CreateLinearShade(var stPnt1: PXC_Point; var stPnt2: PXC_Point; 
                               const pStops: IPXC_GradientStops; nExtend: ULONG_T): IPXC_Shading; safecall;
    function CreateRadialShade(var pPnt1: PXC_Point; var pPnt2: PXC_Point; nRadius1: Double; 
                               nRadius2: Double; const pStops: IPXC_GradientStops; nExtend: ULONG_T): IPXC_Shading; safecall;
    function CreateStdColor(nCSType: PXC_ColorSpaceType): IPXC_Color; safecall;
    function CreateTilePattern(var stBBox: PXC_Rect): IPXC_Pattern; safecall;
    function GetStdTilePattern(nType: PXC_StdPatternType): IPXC_Pattern; safecall;
    function GetEncodersForStreamType(sType: PWideChar): IPXS_EncodeFiltersArray; safecall;
    procedure SetEncodersForStreamType(sType: PWideChar; const pArray: IPXS_EncodeFiltersArray); safecall;
    function GetDefaultEncodersForStreamType(sType: PWideChar): IPXS_EncodeFiltersArray; safecall;
    function CreateNewXForm(var stBBox: PXC_Rect): IPXC_XForm; safecall;
    function ConvertMetafile(hMetafile: HANDLE_T; nFlags: LongWord; const pProgress: IProgressMon): IPXC_XForm; safecall;
    function ConvertMetafileFile(sFileName: PWideChar; nFlags: LongWord; 
                                 const pProgress: IProgressMon): IPXC_XForm; safecall;
    function ConvertMetafileStream(const pMetafile: IStream; nFlags: LongWord; 
                                   const pProgress: IProgressMon): IPXC_XForm; safecall;
    procedure PlaceHeadersAndFooters(const pPageIndexes: IBitSet; 
                                     const pParams: IPXC_HeaderAndFooterParams; 
                                     const pProgress: IProgressMon); safecall;
    procedure PlaceBackgrounds(const pPageIndexes: IBitSet; const pParams: IPXC_BackgroundParams; 
                               const pProgress: IProgressMon); safecall;
    procedure PlaceBatesNumbers(const pPageIndexes: IBitSet; 
                                const pParams: IPXC_BatesNumberingParams; 
                                const pProgress: IProgressMon); safecall;
    function CreateEmbeddFile(sName: PWideChar): IPXC_FileSpec; safecall;
    procedure EnumFonts(const pCallback: IPXC_FontEnumCallback; nFirstPage: ULONG_T; 
                        nLastPage: ULONG_T; const pProgress: IProgressMon); safecall;
    function CreateNewFontFromFile(sFileName: PWideChar): IPXC_Font; safecall;
    function CreateNewFontFromStream(const pStream: IStream): IPXC_Font; safecall;
    function CreateNewFontFromMemory(var Data: Byte; datasize: ULONG_T): IPXC_Font; safecall;
    procedure SetFontPolicy(pFontName: PWideChar; nEmbedd: PXC_FontPolicy; 
                            nToUnicode: PXC_FontPolicy); safecall;
    procedure SetDefaultFontPolicy(nEmbedd: PXC_FontPolicy; nToUnicode: PXC_FontPolicy); safecall;
    procedure DeferedDigitalSign(var pCert: _CERT_CONTEXT; nFlags: ULONG_T; nPageIdx: ULONG_T; 
                                 var pRect: PXC_Rect; sReason: PWideChar; sLocation: PWideChar; 
                                 sContactInfo: PWideChar; sImageFile: PWideChar); safecall;
    procedure DeferedDigitalPFX(sPFXFilename: PWideChar; sPFXPassword: PWideChar; nFlags: ULONG_T; 
                                nPageIdx: ULONG_T; var pRect: PXC_Rect; sReason: PWideChar; 
                                sLocation: PWideChar; sContactInfo: PWideChar; sImageFile: PWideChar); safecall;
    procedure DeferedDigitalPFX2(const pPFXFileData: IMemBlock; sPFXPassword: PWideChar; 
                                 nFlags: ULONG_T; nPageIdx: ULONG_T; var pRect: PXC_Rect; 
                                 sReason: PWideChar; sLocation: PWideChar; sContactInfo: PWideChar; 
                                 sImageFile: PWideChar); safecall;
    procedure DeferedDigitalSignField(var pCert: _CERT_CONTEXT; const pField: IPXC_FormField; 
                                      nFlags: ULONG_T; sReason: PWideChar; sLocation: PWideChar; 
                                      sContactInfo: PWideChar; sImageFile: PWideChar); safecall;
    procedure DeferedDigitalSignFieldPFX(sPFXFilename: PWideChar; sPFXPassword: PWideChar; 
                                         const pField: IPXC_FormField; nFlags: ULONG_T; 
                                         sReason: PWideChar; sLocation: PWideChar; 
                                         sContactInfo: PWideChar; sImageFile: PWideChar); safecall;
    procedure DeferedDigitalSignFieldPFX2(const pPFXFileData: IMemBlock; sPFXPassword: PWideChar; 
                                          const pField: IPXC_FormField; nFlags: ULONG_T; 
                                          sReason: PWideChar; sLocation: PWideChar; 
                                          sContactInfo: PWideChar; sImageFile: PWideChar); safecall;
    procedure DeferedTimeStamp(sTSAServerURL: PWideChar; sUser: PWideChar; sPassword: PWideChar); safecall;
    function GetCMapByPDFObject(const pVar: IPXS_PDFVariant): IPXC_CMap; safecall;
    procedure DeleteXMPMetadata(nFlags: ULONG_T; const pProgress: IProgressMon); safecall;
    function AcquireOwnerPermissions(const pAuthCallback: IPXC_DocAuthCallback): PXC_PermStatus; safecall;
    function CreateXFormFromPage(const pPage: IPXC_Page; nFlags: ULONG_T): IPXC_XForm; safecall;
    procedure FlushChanges(nFlags: ULONG_T); safecall;
    function GetPDFObjectByHandle(nHandle: ULONG_T): IPXS_PDFVariant; safecall;
    function GetColorSpaceHandle(const pVar: IPXS_PDFVariant): ULONG_T; safecall;
    function GetShadeHandle(const pVar: IPXS_PDFVariant): ULONG_T; safecall;
    function GetPatternHandle(const pVar: IPXS_PDFVariant): ULONG_T; safecall;
    function GetImageHandle(const pVar: IPXS_PDFVariant): ULONG_T; safecall;
    function GetXFormHandle(const pVar: IPXS_PDFVariant): ULONG_T; safecall;
    function GetFunctionHandle(const pVar: IPXS_PDFVariant): ULONG_T; safecall;
    function GetSoftMaskHandle(const pVar: IPXS_PDFVariant): ULONG_T; safecall;
    function GetFontHandle(const pVar: IPXS_PDFVariant): ULONG_T; safecall;
    procedure RetireObjectByHandle(nHandle: ULONG_T); safecall;
    procedure RetireObjectContentByHandle(nHandle: ULONG_T); safecall;
    procedure FlattenAnnotations(nPage: ULONG_T; const pAL: IPXC_AnnotsList); safecall;
    function EmbedFontSubset(hBaseFont: PARAM_T; cmapID: Integer; var pUni2GlyphMap: LongWord; 
                             nMapLen: LongWord; const pUsedGlyphs: IBitSet; 
                             const pUsedUnicodes: IBitSet): IPXS_PDFVariant; safecall;
    function CreateSoftMaskFromXFormHandle(nXFormHandle: ULONG_T; nSoftMaskType: PXC_SMaskType): IPXC_SoftMask; safecall;
    function CreateXGroup(nType: PXC_XGroupType): IPXC_XGroup; safecall;
    procedure SetRestrictedPermissions(nRestrictedPerms: ULONG_T); safecall;
    procedure SetOperationRestriction(nReqObj: PXC_RequestObj; nReqOper: PXC_RequestOper; 
                                      bRestrict: WordBool); safecall;
    function GetOperationRestriction(nReqObj: PXC_RequestObj; nReqOper: PXC_RequestOper): WordBool; safecall;
    function HasDigitalSigns(bCheckFieldOnly: WordBool): WordBool; safecall;
    function CreateStdColorFromIColor(const pSrcColor: IColor): IPXC_Color; safecall;
    property ID: ULONG_T read Get_ID;
    property CosDocument: IPXS_Document read Get_CosDocument;
    property Pages: IPXC_Pages read Get_Pages;
    property BookmarkRoot: IPXC_Bookmark read Get_BookmarkRoot;
    property DefaultCompression[const sPtreamType: WideString]: IPXS_EncodeFiltersArray read Get_DefaultCompression write Set_DefaultCompression;
    property Props: IPXC_DocumentProps read Get_Props;
    property Info: IPXC_DocumentInfo read Get_Info;
    property Articles: IPXC_Articles read Get_Articles;
    property HasAcroForm: WordBool read Get_HasAcroForm;
    property AcroForm: IPXC_AcroForm read Get_AcroForm;
    property PageContentCallback: IPXC_PageContentCallback read Get_PageContentCallback write Set_PageContentCallback;
    property DeleteOnClose: WordBool read Get_DeleteOnClose write Set_DeleteOnClose;
    property DocumentTempFolder: WideString read Get_DocumentTempFolder;
    property SrcInfo: IPXC_DocSrcInfo read Get_SrcInfo;
  end;

// *********************************************************************//
// DispIntf:  IPXC_DocumentDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BE5B563D-C098-4971-9EFD-4E8F95D34D02}
// *********************************************************************//
  IPXC_DocumentDisp = dispinterface
    ['{BE5B563D-C098-4971-9EFD-4E8F95D34D02}']
    property ID: ULONG_T readonly dispid 1610743808;
    property CosDocument: IPXS_Document readonly dispid 1610743809;
    property Pages: IPXC_Pages readonly dispid 1610743810;
    property BookmarkRoot: IPXC_Bookmark readonly dispid 1610743811;
    property DefaultCompression[const sPtreamType: WideString]: IPXS_EncodeFiltersArray dispid 1610743812;
    property Props: IPXC_DocumentProps readonly dispid 1610743814;
    property Info: IPXC_DocumentInfo readonly dispid 1610743815;
    function GetXMPMetadata(bCreateIfEmpty: WordBool): IPXC_XMPMetadata; dispid 1610743816;
    function IsMetaOperationGranded(nOper: PXC_DocumentMetaOper): WordBool; dispid 1610743817;
    function CreateActionsList: IPXC_ActionsList; dispid 1610743818;
    property Articles: IPXC_Articles readonly dispid 1610743819;
    function CreateFileSpec(const pName: IAFS_Name; const pRelName: IAFS_Name): IPXC_FileSpec; dispid 1610743820;
    function CreateFileSpec2(pDIFileName: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                             pFSName: {NOT_OLEAUTO(PWideChar)}OleVariant): IPXC_FileSpec; dispid 1610743821;
    function GetFileSpecFromVariant(const pVar: IPXS_PDFVariant): IPXC_FileSpec; dispid 1610743822;
    function GetCollection: IPXC_Collection; dispid 1610743823;
    function CreateCollection: IPXC_Collection; dispid 1610743824;
    procedure DeleteCollection; dispid 1610743825;
    function GetNameTree(sTreeName: {NOT_OLEAUTO(PWideChar)}OleVariant): IPXC_NameTree; dispid 1610743826;
    function GetNameTreeA(nTreeName: ULONG_T): IPXC_NameTree; dispid 1610743827;
    function GetSecurityHandlerType(bNew: WordBool): ULONG_T; dispid 1610743828;
    function GetSecurityHandler(bNew: WordBool): IPXC_SecurityHandler; dispid 1610743829;
    function GetSecurityData(bNew: WordBool): IUnknown; dispid 1610743830;
    function NewSecurityData: IUnknown; dispid 1610743831;
    procedure SetNewSecurityData(const pSecData: IUnknown); dispid 1610743832;
    function GetNewSecurityInfo: ULONG_T; dispid 1610743833;
    function RequestPermission(nReqObj: PXC_RequestObj; nReqOper: PXC_RequestOper; 
                               pAuthData: {NOT_OLEAUTO(Pointer)}OleVariant): PXC_PermStatus; dispid 1610743834;
    function AuthorizeWithPassword(sPwd: {NOT_OLEAUTO(PWideChar)}OleVariant): PXC_PermStatus; dispid 1610743835;
    function AuthorizeWithPassword2(var nPwd: Byte; nLen: ULONG_T): PXC_PermStatus; dispid 1610743836;
    procedure SetStdEncryption(nMethod: PXC_StdEncryptionMehtod; bEncryptMetadata: WordBool; 
                               nPermission: ULONG_T; const sUserPassword: WideString; 
                               const sOwnerPassword: WideString); dispid 1610743837;
    property HasAcroForm: WordBool readonly dispid 1610743838;
    property AcroForm: IPXC_AcroForm readonly dispid 1610743839;
    procedure PlaceWatermark(const pPageIndexes: IBitSet; const pParams: IPXC_WatermarkParams; 
                             const pProgress: IProgressMon); dispid 1610743840;
    property PageContentCallback: IPXC_PageContentCallback dispid 1610743841;
    function CreateContentCreator: IPXC_ContentCreator; dispid 1610743843;
    function CreateNewContent: IPXC_Content; dispid 1610743844;
    function LoadContent(const pStream: IPXS_PDFVariant; const pResDict: IPXS_PDFVariant; 
                         const pResOwner: IUnknown; nFlags: ULONG_T): IPXC_Content; dispid 1610743845;
    function AddImageFromFile(sFileName: {NOT_OLEAUTO(PWideChar)}OleVariant; nPage: ULONG_T; 
                              nFlags: ULONG_T): IPXC_Image; dispid 1610743846;
    function AddImageFromStream(const pStream: IStream; nPage: ULONG_T; nFlags: ULONG_T): IPXC_Image; dispid 1610743847;
    function AddImageFromIXCPage(const pPage: IIXC_Page; nFlags: ULONG_T): IPXC_Image; dispid 1610743848;
    function AddImageFromMemory(var Data: Byte; datasize: ULONG_T; nWidth: ULONG_T; 
                                nHeight: ULONG_T; nStride: Integer; nType: PXC_ImgMemType; 
                                dwFlags: ULONG_T): IPXC_Image; dispid 1610743849;
    procedure GetFontInfo(const pFontCallback: IPXC_FontInfoCallback); dispid 1610743850;
    function GetFontInfoByHandle(hHandle: ULONG_T): IPXC_DocFontsInfo; dispid 1610743851;
    function GetNamedDestination(const sDestName: WideString): {NOT_OLEAUTO(PXC_Destination)}OleVariant; dispid 1610743852;
    procedure SetNamedDestination(const sDestName: WideString; 
                                  var stDest: {NOT_OLEAUTO(PXC_Destination)}OleVariant); dispid 1610743853;
    function FillDestination(const pVar: IPXS_PDFVariant): {NOT_OLEAUTO(PXC_Destination)}OleVariant; dispid 1610743854;
    procedure Close(nFlags: ULONG_T); dispid 1610743855;
    procedure WriteToFile(sDestFileName: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                          const pProgress: IProgressMon; nFlags: ULONG_T); dispid 1610743856;
    procedure WriteTo(const pDest: IUnknown; const pProgress: IProgressMon; nFlags: ULONG_T); dispid 1610743857;
    property DeleteOnClose: WordBool dispid 1610743858;
    function CreateNewFont(pFaceName: {NOT_OLEAUTO(PWideChar)}OleVariant; nFlags: ULONG_T; 
                           nWeight: ULONG_T): IPXC_Font; dispid 1610743860;
    function CreateNewFont2(sPostScriptName: {NOT_OLEAUTO(PWideChar)}OleVariant): IPXC_Font; dispid 1610743861;
    property DocumentTempFolder: WideString readonly dispid 1610743862;
    function GetImageByHandle(nHandle: ULONG_T): IPXC_Image; dispid 1610743863;
    function GetColorSpaceByHandle(nHandle: ULONG_T): IPXC_ColorSpace; dispid 1610743864;
    function GetXFormByHandle(nHandle: ULONG_T): IPXC_XForm; dispid 1610743865;
    function GetFunctionByHandle(nHandle: ULONG_T): IPXC_Function; dispid 1610743866;
    function GetSoftMaskByHandle(nHandle: ULONG_T): IPXC_SoftMask; dispid 1610743867;
    function GetShadeByHandle(nHandle: ULONG_T): IPXC_Shading; dispid 1610743868;
    function GetPatternByHandle(nHandle: ULONG_T): IPXC_Pattern; dispid 1610743869;
    function GetStdColorSpace(nCSType: PXC_ColorSpaceType): IPXC_ColorSpace; dispid 1610743870;
    function GetColorSpace(const pVar: IPXS_PDFVariant): IPXC_ColorSpace; dispid 1610743871;
    function GetShade(const pVar: IPXS_PDFVariant): IPXC_Shading; dispid 1610743872;
    function GetPattern(const pVar: IPXS_PDFVariant): IPXC_Pattern; dispid 1610743873;
    function GetImage(const pVar: IPXS_PDFVariant): IPXC_Image; dispid 1610743874;
    function GetXForm(const pVar: IPXS_PDFVariant): IPXC_XForm; dispid 1610743875;
    function GetFunction(const pVar: IPXS_PDFVariant): IPXC_Function; dispid 1610743876;
    function GetSoftMask(const pVar: IPXS_PDFVariant): IPXC_SoftMask; dispid 1610743877;
    function GetFontByHandle(nHandle: ULONG_T): IPXC_Font; dispid 1610743878;
    function GetFont(const pVar: IPXS_PDFVariant): IPXC_Font; dispid 1610743879;
    property SrcInfo: IPXC_DocSrcInfo readonly dispid 1610743880;
    function CreateShadeStops: IPXC_GradientStops; dispid 1610743881;
    function CreateLinearShade(var stPnt1: {NOT_OLEAUTO(PXC_Point)}OleVariant; 
                               var stPnt2: {NOT_OLEAUTO(PXC_Point)}OleVariant; 
                               const pStops: IPXC_GradientStops; nExtend: ULONG_T): IPXC_Shading; dispid 1610743882;
    function CreateRadialShade(var pPnt1: {NOT_OLEAUTO(PXC_Point)}OleVariant; 
                               var pPnt2: {NOT_OLEAUTO(PXC_Point)}OleVariant; nRadius1: Double; 
                               nRadius2: Double; const pStops: IPXC_GradientStops; nExtend: ULONG_T): IPXC_Shading; dispid 1610743883;
    function CreateStdColor(nCSType: PXC_ColorSpaceType): IPXC_Color; dispid 1610743884;
    function CreateTilePattern(var stBBox: {NOT_OLEAUTO(PXC_Rect)}OleVariant): IPXC_Pattern; dispid 1610743885;
    function GetStdTilePattern(nType: PXC_StdPatternType): IPXC_Pattern; dispid 1610743886;
    function GetEncodersForStreamType(sType: {NOT_OLEAUTO(PWideChar)}OleVariant): IPXS_EncodeFiltersArray; dispid 1610743887;
    procedure SetEncodersForStreamType(sType: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                       const pArray: IPXS_EncodeFiltersArray); dispid 1610743888;
    function GetDefaultEncodersForStreamType(sType: {NOT_OLEAUTO(PWideChar)}OleVariant): IPXS_EncodeFiltersArray; dispid 1610743889;
    function CreateNewXForm(var stBBox: {NOT_OLEAUTO(PXC_Rect)}OleVariant): IPXC_XForm; dispid 1610743890;
    function ConvertMetafile(hMetafile: HANDLE_T; nFlags: LongWord; const pProgress: IProgressMon): IPXC_XForm; dispid 1610743891;
    function ConvertMetafileFile(sFileName: {NOT_OLEAUTO(PWideChar)}OleVariant; nFlags: LongWord; 
                                 const pProgress: IProgressMon): IPXC_XForm; dispid 1610743892;
    function ConvertMetafileStream(const pMetafile: IStream; nFlags: LongWord; 
                                   const pProgress: IProgressMon): IPXC_XForm; dispid 1610743893;
    procedure PlaceHeadersAndFooters(const pPageIndexes: IBitSet; 
                                     const pParams: IPXC_HeaderAndFooterParams; 
                                     const pProgress: IProgressMon); dispid 1610743894;
    procedure PlaceBackgrounds(const pPageIndexes: IBitSet; const pParams: IPXC_BackgroundParams; 
                               const pProgress: IProgressMon); dispid 1610743895;
    procedure PlaceBatesNumbers(const pPageIndexes: IBitSet; 
                                const pParams: IPXC_BatesNumberingParams; 
                                const pProgress: IProgressMon); dispid 1610743896;
    function CreateEmbeddFile(sName: {NOT_OLEAUTO(PWideChar)}OleVariant): IPXC_FileSpec; dispid 1610743897;
    procedure EnumFonts(const pCallback: IPXC_FontEnumCallback; nFirstPage: ULONG_T; 
                        nLastPage: ULONG_T; const pProgress: IProgressMon); dispid 1610743898;
    function CreateNewFontFromFile(sFileName: {NOT_OLEAUTO(PWideChar)}OleVariant): IPXC_Font; dispid 1610743899;
    function CreateNewFontFromStream(const pStream: IStream): IPXC_Font; dispid 1610743900;
    function CreateNewFontFromMemory(var Data: Byte; datasize: ULONG_T): IPXC_Font; dispid 1610743901;
    procedure SetFontPolicy(pFontName: {NOT_OLEAUTO(PWideChar)}OleVariant; nEmbedd: PXC_FontPolicy; 
                            nToUnicode: PXC_FontPolicy); dispid 1610743902;
    procedure SetDefaultFontPolicy(nEmbedd: PXC_FontPolicy; nToUnicode: PXC_FontPolicy); dispid 1610743903;
    procedure DeferedDigitalSign(var pCert: {NOT_OLEAUTO(_CERT_CONTEXT)}OleVariant; 
                                 nFlags: ULONG_T; nPageIdx: ULONG_T; 
                                 var pRect: {NOT_OLEAUTO(PXC_Rect)}OleVariant; 
                                 sReason: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                 sLocation: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                 sContactInfo: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                 sImageFile: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743904;
    procedure DeferedDigitalPFX(sPFXFilename: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                sPFXPassword: {NOT_OLEAUTO(PWideChar)}OleVariant; nFlags: ULONG_T; 
                                nPageIdx: ULONG_T; var pRect: {NOT_OLEAUTO(PXC_Rect)}OleVariant; 
                                sReason: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                sLocation: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                sContactInfo: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                sImageFile: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743905;
    procedure DeferedDigitalPFX2(const pPFXFileData: IMemBlock; 
                                 sPFXPassword: {NOT_OLEAUTO(PWideChar)}OleVariant; nFlags: ULONG_T; 
                                 nPageIdx: ULONG_T; var pRect: {NOT_OLEAUTO(PXC_Rect)}OleVariant; 
                                 sReason: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                 sLocation: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                 sContactInfo: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                 sImageFile: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743906;
    procedure DeferedDigitalSignField(var pCert: {NOT_OLEAUTO(_CERT_CONTEXT)}OleVariant; 
                                      const pField: IPXC_FormField; nFlags: ULONG_T; 
                                      sReason: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                      sLocation: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                      sContactInfo: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                      sImageFile: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743907;
    procedure DeferedDigitalSignFieldPFX(sPFXFilename: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                         sPFXPassword: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                         const pField: IPXC_FormField; nFlags: ULONG_T; 
                                         sReason: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                         sLocation: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                         sContactInfo: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                         sImageFile: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743908;
    procedure DeferedDigitalSignFieldPFX2(const pPFXFileData: IMemBlock; 
                                          sPFXPassword: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                          const pField: IPXC_FormField; nFlags: ULONG_T; 
                                          sReason: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                          sLocation: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                          sContactInfo: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                          sImageFile: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743909;
    procedure DeferedTimeStamp(sTSAServerURL: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                               sUser: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                               sPassword: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743910;
    function GetCMapByPDFObject(const pVar: IPXS_PDFVariant): IPXC_CMap; dispid 1610743911;
    procedure DeleteXMPMetadata(nFlags: ULONG_T; const pProgress: IProgressMon); dispid 1610743912;
    function AcquireOwnerPermissions(const pAuthCallback: IPXC_DocAuthCallback): PXC_PermStatus; dispid 1610743913;
    function CreateXFormFromPage(const pPage: IPXC_Page; nFlags: ULONG_T): IPXC_XForm; dispid 1610743914;
    procedure FlushChanges(nFlags: ULONG_T); dispid 1610743915;
    function GetPDFObjectByHandle(nHandle: ULONG_T): IPXS_PDFVariant; dispid 1610743916;
    function GetColorSpaceHandle(const pVar: IPXS_PDFVariant): ULONG_T; dispid 1610743917;
    function GetShadeHandle(const pVar: IPXS_PDFVariant): ULONG_T; dispid 1610743918;
    function GetPatternHandle(const pVar: IPXS_PDFVariant): ULONG_T; dispid 1610743919;
    function GetImageHandle(const pVar: IPXS_PDFVariant): ULONG_T; dispid 1610743920;
    function GetXFormHandle(const pVar: IPXS_PDFVariant): ULONG_T; dispid 1610743921;
    function GetFunctionHandle(const pVar: IPXS_PDFVariant): ULONG_T; dispid 1610743922;
    function GetSoftMaskHandle(const pVar: IPXS_PDFVariant): ULONG_T; dispid 1610743923;
    function GetFontHandle(const pVar: IPXS_PDFVariant): ULONG_T; dispid 1610743924;
    procedure RetireObjectByHandle(nHandle: ULONG_T); dispid 1610743925;
    procedure RetireObjectContentByHandle(nHandle: ULONG_T); dispid 1610743926;
    procedure FlattenAnnotations(nPage: ULONG_T; const pAL: IPXC_AnnotsList); dispid 1610743927;
    function EmbedFontSubset(hBaseFont: PARAM_T; cmapID: Integer; var pUni2GlyphMap: LongWord; 
                             nMapLen: LongWord; const pUsedGlyphs: IBitSet; 
                             const pUsedUnicodes: IBitSet): IPXS_PDFVariant; dispid 1610743928;
    function CreateSoftMaskFromXFormHandle(nXFormHandle: ULONG_T; nSoftMaskType: PXC_SMaskType): IPXC_SoftMask; dispid 1610743929;
    function CreateXGroup(nType: PXC_XGroupType): IPXC_XGroup; dispid 1610743930;
    procedure SetRestrictedPermissions(nRestrictedPerms: ULONG_T); dispid 1610743931;
    procedure SetOperationRestriction(nReqObj: PXC_RequestObj; nReqOper: PXC_RequestOper; 
                                      bRestrict: WordBool); dispid 1610743932;
    function GetOperationRestriction(nReqObj: PXC_RequestObj; nReqOper: PXC_RequestOper): WordBool; dispid 1610743933;
    function HasDigitalSigns(bCheckFieldOnly: WordBool): WordBool; dispid 1610743934;
    function CreateStdColorFromIColor(const pSrcColor: IColor): IPXC_Color; dispid 1610743935;
  end;

// *********************************************************************//
// Interface: IPXC_Pages
// Flags:     (128) NonExtensible
// GUID:      {C5AA60EE-2A1A-4082-BA84-F59996E24A12}
// *********************************************************************//
  IPXC_Pages = interface(IUnknown)
    ['{C5AA60EE-2A1A-4082-BA84-F59996E24A12}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pPage: IPXC_Page): HResult; stdcall;
    function AddEmptyPages(nBefore: ULONG_T; nCount: ULONG_T; var stMediaBox: PXC_Rect; 
                           const pProgress: IProgressMon; out pUndoData: IPXC_UndoRedoData): HResult; stdcall;
    function MovePages(const pIndexes: IBitSet; nMoveToBeforeThisPage: ULONG_T; 
                       const pProgress: IProgressMon; out pUndoData: IPXC_UndoRedoData): HResult; stdcall;
    function DeletePages(const pIndexes: IBitSet; const pProgress: IProgressMon; 
                         out pUndoData: IPXC_UndoRedoData): HResult; stdcall;
    function InsertPage(nBefore: ULONG_T; var stMediaBox: PXC_Rect; 
                        out pUndoData: IPXC_UndoRedoData; out pNewPage: IPXC_Page): HResult; stdcall;
    function InsertPagesFromDoc(const pSrcDoc: IPXC_Document; nInsertBefore: ULONG_T; 
                                nStartPage: ULONG_T; nNumPages: ULONG_T; 
                                nInsertPagesFlags: ULONG_T; const pProgress: IProgressMon): HResult; stdcall;
    function InsertPagesFromDocEx(const pSrcDoc: IPXC_Document; nInsertBefore: ULONG_T; 
                                  const pIndexes: IBitSet; nInsertPagesFlags: ULONG_T; 
                                  const pProgress: IProgressMon): HResult; stdcall;
    function OverlayPages(const pSrcDoc: IPXC_Document; const pOverlayInfo: IPXC_PagesOverlayInfo; 
                          const pProgress: IProgressMon): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Page
// Flags:     (128) NonExtensible
// GUID:      {D6367D39-E45F-4F79-B8FE-686F5FB6B844}
// *********************************************************************//
  IPXC_Page = interface(IUnknown)
    ['{D6367D39-E45F-4F79-B8FE-686F5FB6B844}']
    function Get_Document(out pDoc: IPXC_Document): HResult; stdcall;
    function Get_PDFObject(out pPDFObject: IPXS_PDFVariant): HResult; stdcall;
    function Get_Box(nType: PXC_BoxType; out stBox: PXC_Rect): HResult; stdcall;
    function Set_Box(nType: PXC_BoxType; stBox: PUserType1): HResult; stdcall;
    function Get_Rotation(out nRotate: Integer): HResult; stdcall;
    function Set_Rotation(nRotate: Integer): HResult; stdcall;
    function Get_UserUnit(out nUserUnit: Double): HResult; stdcall;
    function Set_UserUnit(nUserUnit: Double): HResult; stdcall;
    function Get_TabOrder(out nTabOrder: PXC_PageTabOrder): HResult; stdcall;
    function Set_TabOrder(nTabOrder: PXC_PageTabOrder): HResult; stdcall;
    function Get_Number(out nNumber: ULONG_T): HResult; stdcall;
    function Get_Matrix(out stMatrix: PXC_Matrix): HResult; stdcall;
    function GetDimension(out nWidth: Double; out nHeight: Double): HResult; stdcall;
    function LockUpdates: HResult; stdcall;
    function UnLockUpdates: HResult; stdcall;
    function GetMatrix(nRelativeBox: PXC_BoxType; out stMatrix: PXC_Matrix): HResult; stdcall;
    function GetContent(nKMode: PXC_ContentAccessMode; out pContent: IPXC_Content): HResult; stdcall;
    function PlaceContent(const pContent: IPXC_Content; nFlags: ULONG_T): HResult; stdcall;
    function GetAnnotsCount(out nAnnots: ULONG_T): HResult; stdcall;
    function GetAnnot(nIndex: ULONG_T; out pAnnot: IPXC_Annotation): HResult; stdcall;
    function InsertNewAnnot(nAnnotType: ULONG_T; var stLocation: PXC_Rect; nPos: ULONG_T; 
                            out pAnnot: IPXC_Annotation): HResult; stdcall;
    function InsertNewAnnotFromDict(const pAnnotDict: IPXS_PDFVariant; var stLocation: PXC_Rect; 
                                    nPos: ULONG_T; out pAnnot: IPXC_Annotation): HResult; stdcall;
    function RemoveAnnots(nIndex: ULONG_T; nCount: ULONG_T): HResult; stdcall;
    function AddAnnotToGroup(const pAnnot: IPXC_Annotation; const pGroupAnnot: IPXC_Annotation; 
                             bAttachToRoot: WordBool): HResult; stdcall;
    function ExcludeAnnotFromGroup(const pAnnot: IPXC_Annotation; bFixupGroupLinks: WordBool): HResult; stdcall;
    function GetAnnotGroupMembers(const pAnnot: IPXC_Annotation; bEntireGroup: WordBool; 
                                  out pGroupMembers: IPXC_AnnotsList): HResult; stdcall;
    function GetAnnotReplies(const pAnnot: IPXC_Annotation; out pReplies: IPXC_AnnotsList): HResult; stdcall;
    function MoveAnnot(const pAnnot: IPXC_Annotation; nDestPage: ULONG_T; nInsertBefore: Integer): HResult; stdcall;
    function DrawToMemory(pBuffer: Pointer; nStride: Integer; nBufferFormat: PXC_DrawFormat; 
                          var pDestRect: tagRECT; var pMatrix: PXC_Matrix; 
                          const pRParams: IPXC_PageRenderParams; const pRContext: IPXC_OCContext; 
                          const pProgressMon: IProgressMon): HResult; stdcall;
    function DrawToDevice(hDC: HANDLE_T; var pDestRect: tagRECT; var pMatrix: PXC_Matrix; 
                          nFlags: ULONG_T; const pRParams: IPXC_PageRenderParams; 
                          const pRContext: IPXC_OCContext; const pProgressMon: IProgressMon): HResult; stdcall;
    function DrawToIXCPage(const pPage: IIXC_Page; var pDestRect: tagRECT; var pMatrix: PXC_Matrix; 
                           const pRParams: IPXC_PageRenderParams; const pRContext: IPXC_OCContext; 
                           const pProgressMon: IProgressMon): HResult; stdcall;
    function GetText(const pOptions: IPXC_GetPageTextOptions; bNoCache: WordBool; 
                     out pText: IPXC_PageText): HResult; stdcall;
    function RetireCachedText: HResult; stdcall;
    function Get_Actions(nTrigger: PXC_TriggerType; out pActions: IPXC_ActionsList): HResult; stdcall;
    function Set_Actions(nTrigger: PXC_TriggerType; const pActions: IPXC_ActionsList): HResult; stdcall;
    function Redact(const pInfo: IPXC_RedactInfo; out pUndoData: IPXC_UndoRedoData; 
                    var nErrCount: ULONG_T): HResult; stdcall;
    function Get_Duration(out nPageDuration: Double): HResult; stdcall;
    function Set_Duration(nPageDuration: Double): HResult; stdcall;
    function Get_HasTransition(out bHasTransition: WordBool): HResult; stdcall;
    function Get_Transition(out pTransition: IPXC_Transition): HResult; stdcall;
    function Set_Transition(const pTransition: IPXC_Transition): HResult; stdcall;
    function Get_Label_(out sLabel: WideString): HResult; stdcall;
    function Get_PageBatesNumber(out sBatesNumber: WideString): HResult; stdcall;
    function CopyAsXForm(const pDestDoc: IPXC_Document; nFlags: ULONG_T; out pXForm: IPXC_XForm): HResult; stdcall;
    function GetAnnotsList(out pList: IPXC_AnnotsList): HResult; stdcall;
    function Get_HasText(out bHasText: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Content
// Flags:     (128) NonExtensible
// GUID:      {4CB60703-FC3B-41BA-A4E0-E8B885392555}
// *********************************************************************//
  IPXC_Content = interface(IUnknown)
    ['{4CB60703-FC3B-41BA-A4E0-E8B885392555}']
    function Get_Items(out ppItems: IPXC_ContentItems): HResult; stdcall;
    function Get_Document(out ppDoc: IPXC_Document): HResult; stdcall;
    function Get_BBox(out BBox: PXC_Rect): HResult; stdcall;
    function Set_BBox(BBox: PUserType1): HResult; stdcall;
    function Get_Matrix(out Matrix: PXC_Matrix): HResult; stdcall;
    function Set_Matrix(Matrix: PUserType2): HResult; stdcall;
    function Get_DefaultCSHandle(out CSHandle: ULONG_T): HResult; stdcall;
    function Set_DefaultCSHandle(CSHandle: ULONG_T): HResult; stdcall;
    function Get_GStatesCount(out pCount: ULONG_T): HResult; stdcall;
    function Get_CStatesCount(out pCount: ULONG_T): HResult; stdcall;
    function Get_TStatesCount(out pCount: ULONG_T): HResult; stdcall;
    function Get_EStatesCount(out pCount: ULONG_T): HResult; stdcall;
    function GetGStateByIndex(nIndex: ULONG_T; out ppState: IPXC_GState): HResult; stdcall;
    function SetGStateByIndex(nIndex: ULONG_T; const pState: IPXC_GState): HResult; stdcall;
    function GetCStateByIndex(nIndex: ULONG_T; out ppState: IPXC_CState): HResult; stdcall;
    function SetCStateByIndex(nIndex: ULONG_T; const pState: IPXC_CState): HResult; stdcall;
    function GetTStateByIndex(nIndex: ULONG_T; out ppState: IPXC_TState): HResult; stdcall;
    function SetTStateByIndex(nIndex: ULONG_T; const pState: IPXC_TState): HResult; stdcall;
    function GetEStateByIndex(nIndex: ULONG_T; out ppState: IPXC_EState): HResult; stdcall;
    function SetEStateByIndex(nIndex: ULONG_T; const pState: IPXC_EState): HResult; stdcall;
    function Clone(bWeak: WordBool; out ppClone: IPXC_Content): HResult; stdcall;
    function Get_AccessMode(out pMode: PXC_ContentAccessMode): HResult; stdcall;
    function GetType3Metrics(out pLevel: ULONG_T; out pW: PXC_Point; out pBound: PXC_Rect): HResult; stdcall;
    function SetType3Metrics(nLevel: ULONG_T; var pW: PXC_Point; var pBound: PXC_Rect): HResult; stdcall;
    function SaveTo(const pStream: IPXS_PDFVariant; const pResDictOwner: IPXS_PDFVariant; 
                    dwFlags: ULONG_T; const pEncodersArray: IPXS_EncodeFiltersArray): HResult; stdcall;
    function GetText(const pOptions: IPXC_GetPageTextOptions; var pBaseMatrix: PXC_Matrix; 
                     out pText: IPXC_PageText): HResult; stdcall;
    function Get_ResourceOwner(out pResOwner: IUnknown): HResult; stdcall;
    function Get_ResourceOwnerHandler(out pResOwner: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_ContentItems
// Flags:     (128) NonExtensible
// GUID:      {61AA40E0-1B28-474E-9933-87B0C63D8067}
// *********************************************************************//
  IPXC_ContentItems = interface(IUnknown)
    ['{61AA40E0-1B28-474E-9933-87B0C63D8067}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out ppItem: IPXC_ContentItem): HResult; stdcall;
    function Get__NewEnum(out ppVal: IUnknown): HResult; stdcall;
    function Get_ItemType(nIndex: ULONG_T; out pType: PXC_CIType): HResult; stdcall;
    function Get_ItemCTM(nIndex: ULONG_T; out pMatrix: PXC_Matrix): HResult; stdcall;
    function Set_ItemCTM(nIndex: ULONG_T; pMatrix: PUserType2): HResult; stdcall;
    function Get_ItemGState(nIndex: ULONG_T; out ppState: IPXC_GState): HResult; stdcall;
    function Set_ItemGState(nIndex: ULONG_T; const ppState: IPXC_GState): HResult; stdcall;
    function Get_ItemCState(nIndex: ULONG_T; out ppState: IPXC_CState): HResult; stdcall;
    function Set_ItemCState(nIndex: ULONG_T; const ppState: IPXC_CState): HResult; stdcall;
    function Get_ItemTState(nIndex: ULONG_T; out ppState: IPXC_TState): HResult; stdcall;
    function Set_ItemTState(nIndex: ULONG_T; const ppState: IPXC_TState): HResult; stdcall;
    function Get_ItemEState(nIndex: ULONG_T; out ppState: IPXC_EState): HResult; stdcall;
    function Set_ItemEState(nIndex: ULONG_T; const ppState: IPXC_EState): HResult; stdcall;
    function Get_ItemGState2(const pCI: IPXC_ContentItem; out ppState: IPXC_GState): HResult; stdcall;
    function Set_ItemGState2(const pCI: IPXC_ContentItem; const ppState: IPXC_GState): HResult; stdcall;
    function Get_ItemCState2(const pCI: IPXC_ContentItem; out ppState: IPXC_CState): HResult; stdcall;
    function Set_ItemCState2(const pCI: IPXC_ContentItem; const ppState: IPXC_CState): HResult; stdcall;
    function Get_ItemTState2(const pCI: IPXC_ContentItem; out ppState: IPXC_TState): HResult; stdcall;
    function Set_ItemTState2(const pCI: IPXC_ContentItem; const ppState: IPXC_TState): HResult; stdcall;
    function Get_ItemEState2(const pCI: IPXC_ContentItem; out ppState: IPXC_EState): HResult; stdcall;
    function Set_ItemEState2(const pCI: IPXC_ContentItem; const ppState: IPXC_EState): HResult; stdcall;
    function DeleteItems(nStartIndex: ULONG_T; nCount: ULONG_T): HResult; stdcall;
    function InsertNewItem(nInsertBefore: ULONG_T; nType: PXC_CIType; 
                           out ppNewItem: IPXC_ContentItem): HResult; stdcall;
    function InsertNewItem2(const pRef: IPXC_ContentItem; bBefore: WordBool; nType: PXC_CIType; 
                            out ppNewItem: IPXC_ContentItem): HResult; stdcall;
    function MoveItems(nStartIndex: ULONG_T; nCount: ULONG_T; nInsertBefore: ULONG_T): HResult; stdcall;
    function GetItemForEditing(nIndex: ULONG_T; out ppItem: IPXC_ContentItem): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_ContentItem
// Flags:     (128) NonExtensible
// GUID:      {7775315F-82FB-4CA2-8DD1-399B156663F2}
// *********************************************************************//
  IPXC_ContentItem = interface(IUnknown)
    ['{7775315F-82FB-4CA2-8DD1-399B156663F2}']
    function Get_type_(out nType: PXC_CIType): HResult; stdcall;
    function Get_IsEditable(out bEditable: WordBool): HResult; stdcall;
    function Get_BBox(out stBBox: PXC_Rect): HResult; stdcall;
    function GetCTM(out stMatrix: PXC_Matrix): HResult; stdcall;
    function SetCTM(var stMatrix: PXC_Matrix): HResult; stdcall;
    function GetGState(out pState: IPXC_GState): HResult; stdcall;
    function SetGState(const pState: IPXC_GState): HResult; stdcall;
    function GetCState(out pState: IPXC_CState): HResult; stdcall;
    function SetCState(const pState: IPXC_CState): HResult; stdcall;
    function GetTState(out pState: IPXC_TState): HResult; stdcall;
    function SetTState(const pState: IPXC_TState): HResult; stdcall;
    function GetEState(out pState: IPXC_EState): HResult; stdcall;
    function SetEState(const pState: IPXC_EState): HResult; stdcall;
    function Path_Reset: HResult; stdcall;
    function Path_MoveTo(nX: Double; nY: Double): HResult; stdcall;
    function Path_LineTo(nX: Double; nY: Double): HResult; stdcall;
    function Path_CurveTo(nX1: Double; nY1: Double; nX2: Double; nY2: Double; nX3: Double; 
                          nY3: Double): HResult; stdcall;
    function Path_Rect(nX: Double; nY: Double; nW: Double; nH: Double): HResult; stdcall;
    function Path_ClosePath: HResult; stdcall;
    function Path_GetDataSize(out nNumCmds: ULONG_T; out nNumPts: ULONG_T): HResult; stdcall;
    function Path_GetData(out pCmds: PXC_CI_PathCommands; nNumCmds: ULONG_T; out pPts: Double; 
                          nNumPts: ULONG_T): HResult; stdcall;
    function Path_SetData(var pCmds: PXC_CI_PathCommands; nNumCmds: ULONG_T; var pPts: Double; 
                          nNumPts: ULONG_T): HResult; stdcall;
    function Path_GetDataSA(out pCmds: PSafeArray; out pPts: PSafeArray): HResult; stdcall;
    function Path_SetDataSA(pCmds: PSafeArray; pPts: PSafeArray): HResult; stdcall;
    function Get_Path_PaintOp(out nOp: ULONG_T): HResult; stdcall;
    function Set_Path_PaintOp(nOp: ULONG_T): HResult; stdcall;
    function Get_Image_Handle(out nHandle: ULONG_T): HResult; stdcall;
    function Set_Image_Handle(nHandle: ULONG_T): HResult; stdcall;
    function Get_Image_Object(out pImage: IPXC_Image): HResult; stdcall;
    function Set_Image_Object(const pImage: IPXC_Image): HResult; stdcall;
    function Get_InlineImage_Dict(out pDictionary: IPXS_PDFVariant): HResult; stdcall;
    function Set_InlineImage_Dict(const pDictionary: IPXS_PDFVariant): HResult; stdcall;
    function InlineImage_GetData(nFlags: ULONG_T; out pData: IMemBlock): HResult; stdcall;
    function InlineImage_SetData(const pData: IMemBlock; nFlags: ULONG_T): HResult; stdcall;
    function Get_XForm_Handle(out nHandle: ULONG_T): HResult; stdcall;
    function Set_XForm_Handle(nHandle: ULONG_T): HResult; stdcall;
    function Get_Shade_Handle(out nHandle: ULONG_T): HResult; stdcall;
    function Set_Shade_Handle(nHandle: ULONG_T): HResult; stdcall;
    function Get_MC_Tag(out sTag: WideString): HResult; stdcall;
    function Set_MC_Tag(const sTag: WideString): HResult; stdcall;
    function Get_MC_TagA(out nTag: ULONG_T): HResult; stdcall;
    function Set_MC_TagA(nTag: ULONG_T): HResult; stdcall;
    function Get_MC_OC(out pOC: IUnknown): HResult; stdcall;
    function Set_MC_OC(const pOC: IUnknown): HResult; stdcall;
    function Get_MC_HasParams(out bHasParams: WordBool): HResult; stdcall;
    function Get_MC_Items(out pItems: IPXC_ContentItems): HResult; stdcall;
    function MC_GetDict(out bIsInline: WordBool; out pDict: IPXS_PDFVariant): HResult; stdcall;
    function MC_SetDict(const pDict: IPXS_PDFVariant; bInline: WordBool): HResult; stdcall;
    function Text_GetTextLen(out nSize: ULONG_T): HResult; stdcall;
    function Text_GetData(var pData: Byte; nDataSize: ULONG_T): HResult; stdcall;
    function Text_GetDataSA(out pData: PSafeArray): HResult; stdcall;
    function Text_GetGlyphsCount(out nCount: ULONG_T): HResult; stdcall;
    function Text_GetGlyphs(var pGlyphs: Word; nCount: ULONG_T): HResult; stdcall;
    function Text_GetGlyphsSA(out pGlyphs: PSafeArray): HResult; stdcall;
    function Text_SetData(var pCIDs: Byte; nSize: ULONG_T; const pNewTextState: IPXC_TState; 
                          out stOffset: PXC_PointF): HResult; stdcall;
    function Text_SetData2(const pTJ: IPXS_PDFVariant; const pNewTextState: IPXC_TState; 
                           out stOffset: PXC_PointF): HResult; stdcall;
    function Text_SetDataSA(pCIDs: PSafeArray; const pNewTextState: IPXC_TState; 
                            out stOffset: PXC_PointF): HResult; stdcall;
    function Get_Clip_Items(out pItems: IPXC_ContentItems): HResult; stdcall;
    function Get_Clip_Prev(out pPrevClip: IPXC_ContentItem): HResult; stdcall;
    function Image_CreateIXCPage(bToGraycale: WordBool; nRI: PXC_RenderingIntent; 
                                 out pImagePage: IIXC_Page): HResult; stdcall;
    function Text_GetData2(out pData: IPXS_PDFVariant): HResult; stdcall;
    function Text_GetText(chInvalid: Word; nFlags: ULONG_T; out sText: WideString): HResult; stdcall;
    function Text_GetGlyphOffsets(var pOffsets: Single; nCount: ULONG_T): HResult; stdcall;
    function Text_GetGlyphOffsetsSA(out pOffsets: PSafeArray): HResult; stdcall;
    function Text_GetGlyphBBox(nIndex: ULONG_T; out stBBox: PXC_RectF): HResult; stdcall;
    function Text_GetDataSize(out nSize: ULONG_T): HResult; stdcall;
    function Get_XForm_RefName(out pRefName: WideString): HResult; stdcall;
    function Set_XForm_RefName(const pRefName: WideString): HResult; stdcall;
    function Image_CreateIXCPageEx(nFlags: LongWord; nRI: PXC_RenderingIntent; 
                                   out pImagePage: IIXC_Page): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_GState
// Flags:     (128) NonExtensible
// GUID:      {C594F71E-48D9-44FF-AEC3-D7EBE7F75A5C}
// *********************************************************************//
  IPXC_GState = interface(IUnknown)
    ['{C594F71E-48D9-44FF-AEC3-D7EBE7F75A5C}']
    function Get_Flags(out pFlags: ULONG_T): HResult; stdcall;
    function Get_CTM(out pCTM: PXC_Matrix): HResult; stdcall;
    function Set_CTM(pCTM: PUserType2): HResult; stdcall;
    function Get_Flatness(out pFlatness: Double): HResult; stdcall;
    function Set_Flatness(pFlatness: Double): HResult; stdcall;
    function Get_MiterLimit(out pMiterLimit: Double): HResult; stdcall;
    function Set_MiterLimit(pMiterLimit: Double): HResult; stdcall;
    function Get_LineWidth(out pLineWidth: Double): HResult; stdcall;
    function Set_LineWidth(pLineWidth: Double): HResult; stdcall;
    function Get_LineCap(out pLineCap: PXC_LineCap): HResult; stdcall;
    function Set_LineCap(pLineCap: PXC_LineCap): HResult; stdcall;
    function Get_LineJoin(out pLineJoin: PXC_LineJoin): HResult; stdcall;
    function Set_LineJoin(pLineJoin: PXC_LineJoin): HResult; stdcall;
    function Get_DashOffset(out pOffset: Double): HResult; stdcall;
    function Set_DashOffset(pOffset: Double): HResult; stdcall;
    function Get_DashCount(out pCount: ULONG_T): HResult; stdcall;
    function Get_Clip(out ppClip: IPXC_ContentItem): HResult; stdcall;
    function Set_Clip(const ppClip: IPXC_ContentItem): HResult; stdcall;
    function GetDashArray(nArraySize: ULONG_T; out pArr: Double): HResult; stdcall;
    function SetDashArray(nArraySize: ULONG_T; var pArr: Double): HResult; stdcall;
    function Compare(const pState: IPXC_GState; out pResult: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_CState
// Flags:     (128) NonExtensible
// GUID:      {FD32D4AF-2567-4EB3-A56F-AEAC8D1F42D7}
// *********************************************************************//
  IPXC_CState = interface(IUnknown)
    ['{FD32D4AF-2567-4EB3-A56F-AEAC8D1F42D7}']
    function Get_Flags(out pFlags: ULONG_T): HResult; stdcall;
    function Get_RenderIntent(out pIntent: PXC_RenderingIntent): HResult; stdcall;
    function Set_RenderIntent(pIntent: PXC_RenderingIntent): HResult; stdcall;
    function Get_FillColor(out ppFillColor: IPXC_Color): HResult; stdcall;
    function Set_FillColor(const ppFillColor: IPXC_Color): HResult; stdcall;
    function Get_StrokeColor(out ppStrokeColor: IPXC_Color): HResult; stdcall;
    function Set_StrokeColor(const ppStrokeColor: IPXC_Color): HResult; stdcall;
    function Compare(const pState: IPXC_CState; out pResult: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Color
// Flags:     (128) NonExtensible
// GUID:      {F547EF7F-B5E3-4D4A-BECC-5C9AF8280B9F}
// *********************************************************************//
  IPXC_Color = interface(IUnknown)
    ['{F547EF7F-B5E3-4D4A-BECC-5C9AF8280B9F}']
    function Get_CSType(out CSType: PXC_ColorSpaceType): HResult; stdcall;
    function Get_CSHandle(out CSHandle: ULONG_T): HResult; stdcall;
    function Get_ColorSpace(out ppCS: IPXC_ColorSpace): HResult; stdcall;
    function Get_Value(nType: ColorType; out ppColor: IColor): HResult; stdcall;
    function Get_ValueRGB(out ppRGB: ULONG_T): HResult; stdcall;
    function Get_NumComponents(out pComp: ULONG_T): HResult; stdcall;
    function Get_PatternHandle(out pPatternHandle: ULONG_T): HResult; stdcall;
    function Set_PatternHandle(pPatternHandle: ULONG_T): HResult; stdcall;
    function GetComponents(nCount: ULONG_T; var pComp: Double): HResult; stdcall;
    function SetComponents(var pComp: Double; nCount: ULONG_T): HResult; stdcall;
    function Set_CSHandle(CSHandle: ULONG_T): HResult; stdcall;
    function Set_ColorSpace(const ppCS: IPXC_ColorSpace): HResult; stdcall;
    function IsEqual(const pColor: IPXC_Color; out pbIsEqual: WordBool): HResult; stdcall;
    function SetIColor(const pColor: IColor): HResult; stdcall;
    function GetComponents2(out pComps: PSafeArray): HResult; stdcall;
    function SetComponents2(pComps: PSafeArray): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_ColorSpace
// Flags:     (128) NonExtensible
// GUID:      {833F3FC0-2879-4B60-82E4-DD3E76D58268}
// *********************************************************************//
  IPXC_ColorSpace = interface(IUnknown)
    ['{833F3FC0-2879-4B60-82E4-DD3E76D58268}']
    function Get_type_(out pType: PXC_ColorSpaceType): HResult; stdcall;
    function Get_PDFObject(out ppVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_NumComponents(out pNumComps: ULONG_T): HResult; stdcall;
    function Get_BaseCS(out ppCS: IPXC_ColorSpace): HResult; stdcall;
    function Get_Handle(out pHandle: ULONG_T): HResult; stdcall;
    function ConvertToGray(var pSrc: Double; var pDest: Double; nRenderIntent: PXC_RenderingIntent; 
                           nNumSamples: ULONG_T): HResult; stdcall;
    function ConvertToRGB(var pSrc: Double; var pDest: Double; nRenderIntent: PXC_RenderingIntent; 
                          nNumSamples: ULONG_T): HResult; stdcall;
    function ConvertToCMYK(var pSrc: Double; var pDest: Double; nRenderIntent: PXC_RenderingIntent; 
                           nNumSamples: ULONG_T): HResult; stdcall;
    function CreateTransform(const pDestCS: IPXC_ColorSpace; nRenderIntent: PXC_RenderingIntent; 
                             bBlackPointComp: WordBool; out pTransform: IUnknown): HResult; stdcall;
    function IsEqual(const pCS: IPXC_ColorSpace; out pEqual: WordBool): HResult; stdcall;
    function CreateColor(out pColor: IPXC_Color): HResult; stdcall;
    function ConvertTo(const pSrc: IDblArray; const pDest: IDblArray; 
                       nSampleType: PXC_ColorSampleType; nRenderIntent: PXC_RenderingIntent; 
                       nNumSamples: ULONG_T): HResult; stdcall;
    function SaveTo(const pDoc: IPXC_Document; out pVar: IPXS_PDFVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_TState
// Flags:     (128) NonExtensible
// GUID:      {B1FC3914-2AE8-4B0E-B319-A682E0344837}
// *********************************************************************//
  IPXC_TState = interface(IUnknown)
    ['{B1FC3914-2AE8-4B0E-B319-A682E0344837}']
    function Get_Flags(out pFlags: ULONG_T): HResult; stdcall;
    function Get_TM(out pTM: PXC_Matrix): HResult; stdcall;
    function Set_TM(pTM: PUserType2): HResult; stdcall;
    function Get_CurFontHandle(out pHanlde: ULONG_T): HResult; stdcall;
    function Set_CurFontHandle(pHanlde: ULONG_T): HResult; stdcall;
    function Get_CurFont(out ppFont: IPXC_Font): HResult; stdcall;
    function Set_CurFont(const ppFont: IPXC_Font): HResult; stdcall;
    function Get_TextRenderMode(out pTRM: PXC_TextRenderingMode): HResult; stdcall;
    function Set_TextRenderMode(pTRM: PXC_TextRenderingMode): HResult; stdcall;
    function Get_CharSpace(out pCharSpace: Double): HResult; stdcall;
    function Set_CharSpace(pCharSpace: Double): HResult; stdcall;
    function Get_WordSpace(out pWordSpace: Double): HResult; stdcall;
    function Set_WordSpace(pWordSpace: Double): HResult; stdcall;
    function Get_TextHScale(out pTextHScale: Double): HResult; stdcall;
    function Set_TextHScale(pTextHScale: Double): HResult; stdcall;
    function Get_TextLeading(out pLeading: Double): HResult; stdcall;
    function Set_TextLeading(pLeading: Double): HResult; stdcall;
    function Get_FontSize(out pFS: Double): HResult; stdcall;
    function Set_FontSize(pFS: Double): HResult; stdcall;
    function Get_TextRise(out pTextRise: Double): HResult; stdcall;
    function Set_TextRise(pTextRise: Double): HResult; stdcall;
    function Compare(const pState: IPXC_TState; out pResult: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Font
// Flags:     (128) NonExtensible
// GUID:      {65DF6A11-A716-4CCD-8C93-1BF11724E41C}
// *********************************************************************//
  IPXC_Font = interface(IUnknown)
    ['{65DF6A11-A716-4CCD-8C93-1BF11724E41C}']
    function Get_type_(out nType: PXC_FontType): HResult; stdcall;
    function Get_Document(out pDoc: IPXC_Document): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Get_Subtype(out nSubtype: ULONG_T): HResult; stdcall;
    function Get_IsEmbedded(out bEmbedded: WordBool): HResult; stdcall;
    function Get_Vertical(out bVertical: WordBool): HResult; stdcall;
    function GetMatrix(out stMatrix: PXC_Matrix): HResult; stdcall;
    function GetBBox(out stBBox: PXC_Rect): HResult; stdcall;
    function Get_FontInfo(out pFontInfo: IPXC_DocFontsInfo): HResult; stdcall;
    function GetCMapCIDSystemInfo(out sRegistry: WideString; out sOrdering: WideString; 
                                  out nSupplement: ULONG_T): HResult; stdcall;
    function GetSubstitutionData(out pFontData: IMemBlock; out nHFont: HANDLE_T): HResult; stdcall;
    function GetToUnicode(out pCMap: IPXC_CMap): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_DocFontsInfo
// Flags:     (128) NonExtensible
// GUID:      {B1C1E9CF-F1DA-453A-B713-56F19C82DE67}
// *********************************************************************//
  IPXC_DocFontsInfo = interface(IUnknown)
    ['{B1C1E9CF-F1DA-453A-B713-56F19C82DE67}']
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Get_ActualName(out sActualName: WideString): HResult; stdcall;
    function Get_Encoding(out nEncoding: ULONG_T): HResult; stdcall;
    function Get_type_(out nType: ULONG_T): HResult; stdcall;
    function Get_ActualType(out nActualType: ULONG_T): HResult; stdcall;
    function Get_IsEmbedded(out bIsEmbedded: WordBool): HResult; stdcall;
    function Get_IsSubset(out bIsSubset: WordBool): HResult; stdcall;
    function Get_IsInvalid(out bIsInvalid: WordBool): HResult; stdcall;
    function Get_StdIndex(out nStdIndex: Integer): HResult; stdcall;
    function Get_ObjectNumber(out nObjectNumber: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_CMap
// Flags:     (128) NonExtensible
// GUID:      {7A7FA31F-8F2D-489E-B07A-6A60670088D0}
// *********************************************************************//
  IPXC_CMap = interface(IUnknown)
    ['{7A7FA31F-8F2D-489E-B07A-6A60670088D0}']
    function Get_Ordering(out sOrdering: WideString): HResult; stdcall;
    function Get_Registry(out sRegistry: WideString): HResult; stdcall;
    function Get_Supplement(out nSupplement: Integer): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function MultiByte2Unicode(var pMultiByte: Byte; nLen: ULONG_T; out sUnicode: WideString): HResult; stdcall;
    function GetNextMBLen(var pMultiByte: Byte; nLen: ULONG_T; out pCnt: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_EState
// Flags:     (128) NonExtensible
// GUID:      {364C6CAF-791F-426D-92A1-E0A1FB40D38C}
// *********************************************************************//
  IPXC_EState = interface(IUnknown)
    ['{364C6CAF-791F-426D-92A1-E0A1FB40D38C}']
    function Get_Flags(out pFlags: ULONG_T): HResult; stdcall;
    function Get_Smoothness(out pSmoothness: Double): HResult; stdcall;
    function Set_Smoothness(pSmoothness: Double): HResult; stdcall;
    function Get_AlphaStroke(out pAlphaStroke: Double): HResult; stdcall;
    function Set_AlphaStroke(pAlphaStroke: Double): HResult; stdcall;
    function Get_AlphaFill(out pAlphaFill: Double): HResult; stdcall;
    function Set_AlphaFill(pAlphaFill: Double): HResult; stdcall;
    function Get_BlendMode(out pBM: PXC_BlendMode): HResult; stdcall;
    function Set_BlendMode(pBM: PXC_BlendMode): HResult; stdcall;
    function Get_OverPrintMode(out pOM: PXC_OverPrintMode): HResult; stdcall;
    function Set_OverPrintMode(pOM: PXC_OverPrintMode): HResult; stdcall;
    function Get_BlackPointCompensation(out pBPC: PXC_BlackPointCompensation): HResult; stdcall;
    function Set_BlackPointCompensation(pBPC: PXC_BlackPointCompensation): HResult; stdcall;
    function Get_StrokeAdjust(out pSA: WordBool): HResult; stdcall;
    function Set_StrokeAdjust(pSA: WordBool): HResult; stdcall;
    function Get_AlphaIsShape(out pAS: WordBool): HResult; stdcall;
    function Set_AlphaIsShape(pAS: WordBool): HResult; stdcall;
    function Get_OverPrint(out pOp: WordBool): HResult; stdcall;
    function Set_OverPrint(pOp: WordBool): HResult; stdcall;
    function Get_OverPrintFill(out pOPF: WordBool): HResult; stdcall;
    function Set_OverPrintFill(pOPF: WordBool): HResult; stdcall;
    function Get_TextKnockout(out pTK: WordBool): HResult; stdcall;
    function Set_TextKnockout(pTK: WordBool): HResult; stdcall;
    function Get_SoftMaskHandle(out pSMHandle: ULONG_T): HResult; stdcall;
    function Set_SoftMaskHandle(pSMHandle: ULONG_T): HResult; stdcall;
    function Get_SoftMask(out ppSM: IPXC_SoftMask): HResult; stdcall;
    function Set_SoftMask(const ppSM: IPXC_SoftMask): HResult; stdcall;
    function Get_BGFuncHandle(out pHandle: ULONG_T): HResult; stdcall;
    function Set_BGFuncHandle(pHandle: ULONG_T): HResult; stdcall;
    function Get_BGFunc(out ppFunc: IPXC_Function): HResult; stdcall;
    function Set_BGFunc(const ppFunc: IPXC_Function): HResult; stdcall;
    function Get_UCRFuncHandle(out pHandle: ULONG_T): HResult; stdcall;
    function Set_UCRFuncHandle(pHandle: ULONG_T): HResult; stdcall;
    function Get_UCRFunc(out ppFunc: IPXC_Function): HResult; stdcall;
    function Set_UCRFunc(const ppFunc: IPXC_Function): HResult; stdcall;
    function Get_HalftoneFunc(out ppFunc: IUnknown): HResult; stdcall;
    function Set_HalftoneFunc(const ppFunc: IUnknown): HResult; stdcall;
    function Get_TransferFunc(out ppFunc: IPXC_TransferFunction): HResult; stdcall;
    function Set_TransferFunc(const ppFunc: IPXC_TransferFunction): HResult; stdcall;
    function Compare(const pState: IPXC_EState; out pResult: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_SoftMask
// Flags:     (128) NonExtensible
// GUID:      {72A7FDC6-B203-4736-9F0E-6C9F8D32F375}
// *********************************************************************//
  IPXC_SoftMask = interface(IUnknown)
    ['{72A7FDC6-B203-4736-9F0E-6C9F8D32F375}']
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_Handle(out nHandle: ULONG_T): HResult; stdcall;
    function Get_type_(out nType: PXC_SMaskType): HResult; stdcall;
    function Get_TransferFunction(out pFunction: IPXC_Function): HResult; stdcall;
    function Get_GetBackdropColor(out pColor: IPXC_Color): HResult; stdcall;
    function Get_GetXForm(out pXForm: IPXC_XForm): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Function
// Flags:     (128) NonExtensible
// GUID:      {A392EC1D-CB40-40B5-AD37-95AA7A52454A}
// *********************************************************************//
  IPXC_Function = interface(IUnknown)
    ['{A392EC1D-CB40-40B5-AD37-95AA7A52454A}']
    function Get_type_(out nType: PXC_FunctionType): HResult; stdcall;
    function Get_NumInput(out nValue: ULONG_T): HResult; stdcall;
    function Get_NumOutput(out nValue: ULONG_T): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Calculate(var nIn: Double; nInput: ULONG_T; var nOut: Double; nOutput: ULONG_T): HResult; stdcall;
    function CalculateF(var nIn: Single; nInput: ULONG_T; var nOut: Single; nOutput: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_XForm
// Flags:     (128) NonExtensible
// GUID:      {925EC33C-03A9-40C5-9D9B-28CEE249E7FB}
// *********************************************************************//
  IPXC_XForm = interface(IUnknown)
    ['{925EC33C-03A9-40C5-9D9B-28CEE249E7FB}']
    function Get_PDFObject(out ppVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_Matrix(out pMatrix: PXC_Matrix): HResult; stdcall;
    function Set_Matrix(pMatrix: PUserType2): HResult; stdcall;
    function Get_BBox(out pBBox: PXC_Rect): HResult; stdcall;
    function Set_BBox(pBBox: PUserType1): HResult; stdcall;
    function Get_Handle(out pHandle: ULONG_T): HResult; stdcall;
    function GetContent(kMode: PXC_ContentAccessMode; out ppContent: IPXC_Content): HResult; stdcall;
    function SetContent(const pContent: IPXC_Content; nFlags: ULONG_T): HResult; stdcall;
    function Get_OC(out pOC: IUnknown): HResult; stdcall;
    function Set_OC(const pOC: IUnknown): HResult; stdcall;
    function GetContentEx(const pResOwner: IUnknown; kMode: PXC_ContentAccessMode; 
                          out ppContent: IPXC_Content): HResult; stdcall;
    function Get_HasXGroup(out bHasXGroup: WordBool): HResult; stdcall;
    function GetXGroup(bCreateIfNotExist: WordBool; out pXGroup: IPXC_XGroup): HResult; stdcall;
    function SetXGroup(const pXGroup: IPXC_XGroup): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_XGroup
// Flags:     (128) NonExtensible
// GUID:      {57214007-75B9-4AC7-97B9-CFE13DC91793}
// *********************************************************************//
  IPXC_XGroup = interface(IUnknown)
    ['{57214007-75B9-4AC7-97B9-CFE13DC91793}']
    function Get_type_(out nType: PXC_XGroupType): HResult; stdcall;
    function Get_Isolated(out bIsolated: WordBool): HResult; stdcall;
    function Set_Isolated(bIsolated: WordBool): HResult; stdcall;
    function Get_Knockout(out bKnockout: WordBool): HResult; stdcall;
    function Set_Knockout(bKnockout: WordBool): HResult; stdcall;
    function Get_ColorSpace(out pCS: IPXC_ColorSpace): HResult; stdcall;
    function Set_ColorSpace(const pCS: IPXC_ColorSpace): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_TransferFunction
// Flags:     (128) NonExtensible
// GUID:      {F1804BEA-2AE8-4808-8FEF-1B078B4FBC9F}
// *********************************************************************//
  IPXC_TransferFunction = interface(IUnknown)
    ['{F1804BEA-2AE8-4808-8FEF-1B078B4FBC9F}']
    function Get_IsIdentity(out bIdentity: WordBool): HResult; stdcall;
    function Proceed(var nColor: Double; nComponents: ULONG_T): HResult; stdcall;
    function ProceedRow(var nData: Byte; nSamples: ULONG_T; nComponents: ULONG_T): HResult; stdcall;
    function ProceedColor(const pColor: IPXC_Color): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Image
// Flags:     (128) NonExtensible
// GUID:      {EDE57717-30BB-4478-9E00-CD3F5D15C918}
// *********************************************************************//
  IPXC_Image = interface(IUnknown)
    ['{EDE57717-30BB-4478-9E00-CD3F5D15C918}']
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Get_Width(out nWidth: ULONG_T): HResult; stdcall;
    function Get_Height(out nHeight: ULONG_T): HResult; stdcall;
    function Get_BPC(out pBPC: ULONG_T): HResult; stdcall;
    function Get_ColorSpace(out pColorSpace: IPXC_ColorSpace): HResult; stdcall;
    function GetImageData(nType: PXC_ImageDataType; out pData: IMemBlock): HResult; stdcall;
    function Get_Document(out pDoc: IPXC_Document): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_Handle(out pHandle: ULONG_T): HResult; stdcall;
    function Get_OC(out pOC: IUnknown): HResult; stdcall;
    function Set_OC(const pOC: IUnknown): HResult; stdcall;
    function Get_Decode(nBufLength: ULONG_T; out pDecodeBuf: Double): HResult; stdcall;
    function Get_Matte(nBufLength: ULONG_T; out pMatteBuf: Double): HResult; stdcall;
    function Get_ColorMask(nBufLength: ULONG_T; out pColorMask: ULONG_T): HResult; stdcall;
    function Get_MaskHandle(out hMask: ULONG_T): HResult; stdcall;
    function Get_MaskImage(out pMask: IPXC_Image): HResult; stdcall;
    function Get_NumComponents(out pNumComponents: ULONG_T): HResult; stdcall;
    function Get_RenderingIntent(out nIntent: PXC_RenderingIntent): HResult; stdcall;
    function CreateIXCPage(bToGraycale: WordBool; nRI: PXC_RenderingIntent; out pPage: IIXC_Page): HResult; stdcall;
    function CreateIXCPageEx(nFlags: ULONG_T; nRI: PXC_RenderingIntent; out pPage: IIXC_Page): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_GetPageTextOptions
// Flags:     (128) NonExtensible
// GUID:      {59A14451-217C-4BF4-B9BA-ECE1E81B11F7}
// *********************************************************************//
  IPXC_GetPageTextOptions = interface(IUnknown)
    ['{59A14451-217C-4BF4-B9BA-ECE1E81B11F7}']
    function Get_version(out nVersion: ULONG_T): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Set_Flags(nFlags: ULONG_T): HResult; stdcall;
    function Get_LigaturesExpTbl(out sTbl: WideString): HResult; stdcall;
    function Set_LigaturesExpTbl(const sTbl: WideString): HResult; stdcall;
    function Get_WordSeparatorsTbl(out sTbl: WideString): HResult; stdcall;
    function Set_WordSeparatorsTbl(const sTbl: WideString): HResult; stdcall;
    function Get_SpacingMode(out nMode: PXC_TextSpacingMode): HResult; stdcall;
    function Set_SpacingMode(nMode: PXC_TextSpacingMode): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_PageText
// Flags:     (128) NonExtensible
// GUID:      {790A8FF4-9990-46A3-A9D3-C9F0D794604A}
// *********************************************************************//
  IPXC_PageText = interface(IUnknown)
    ['{790A8FF4-9990-46A3-A9D3-C9F0D794604A}']
    function Get_CharCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_Char(nCharIndex: ULONG_T; out nChar: Word): HResult; stdcall;
    function Get_CharColor(nCharIndex: ULONG_T; out pColor: IColor): HResult; stdcall;
    function Get_CharSize(nCharIndex: ULONG_T; out nSize: Single): HResult; stdcall;
    function Get_CharRect(nCharIndex: ULONG_T; out stRect: PXC_Rect): HResult; stdcall;
    function Get_CharFontHandle(nCharIndex: ULONG_T; out nHandle: ULONG_T): HResult; stdcall;
    function Get_CharLineIndex(nCharIndex: ULONG_T; out nLine: ULONG_T): HResult; stdcall;
    function Get_CharsCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_CharCode(nCharIndex: ULONG_T; out nCode: Word): HResult; stdcall;
    function Get_CharFlags(nCharIndex: ULONG_T; out nFlags: ULONG_T): HResult; stdcall;
    function Get_CharBBox(nCharIndex: ULONG_T; out stRect: PXC_RectF): HResult; stdcall;
    function Get_CharQuad(nCharIndex: ULONG_T; out stQuad: PXC_QuadF): HResult; stdcall;
    function Get_CharExtra(nCharIndex: ULONG_T; out stExtra: PXC_CharExtra): HResult; stdcall;
    function Get_CharStyle(nStyleIndex: ULONG_T; out stStyle: PXC_CharStyle): HResult; stdcall;
    function Get_CharDrawStyle(nDrawStyleIndex: ULONG_T; out stDrawStyle: PXC_CharDrawStyle): HResult; stdcall;
    function GetChars(nFirstCharIndex: ULONG_T; nCharsCount: ULONG_T; out sChars: WideString): HResult; stdcall;
    function GetChars2(nFirstCharIndex: ULONG_T; nCharsCount: ULONG_T; sChars: PWideChar): HResult; stdcall;
    function GetCharsFlags(nFirstCharIndex: ULONG_T; nCharsCount: ULONG_T; out nCharsFlags: ULONG_T): HResult; stdcall;
    function GetColor(nColorIndex: ULONG_T; out pColor: IColor; out nAlpha: Single): HResult; stdcall;
    function GetColor2(nColorIndex: ULONG_T; out pColor: IPXC_Color; out nAlpha: Single): HResult; stdcall;
    function Get_ColorRGBA(nColorIndex: ULONG_T; out nRGBA: ULONG_T): HResult; stdcall;
    function Get_LinesCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_LineInfo(nLineIndex: ULONG_T; out stInfo: PXC_TextLineInfo): HResult; stdcall;
    function Get_BlocksCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_BlockInfo(nBlockIndex: ULONG_T; out pInfo: IPXC_TextBlockInfo): HResult; stdcall;
    function GetTextQuads(var nCharRanges: ULONG_T; nCharRangesLen: ULONG_T; 
                          out pQuads: IPXC_QuadsF; out stBBox: PXC_RectF): HResult; stdcall;
    function HitTest(var stPosOnPage: PXC_PointF; nHitLineDelta: Single;
                     bGetNearestIfFail: WordBool; out nLineIndex: Integer): HResult; stdcall;
    function GetTextQuads2(const pCharRanges: INumArray; out pQuads: IPXC_QuadsF;
                           out stBBox: PXC_RectF): HResult; stdcall;
    function GetTextQuads3(nFirstCharIndex: ULONG_T; nCharsCount: ULONG_T; {out} pQuads: IPXC_QuadsF;
                           out stBBox: PXC_RectF): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_TextBlockInfo
// Flags:     (128) NonExtensible
// GUID:      {926DF08D-6F44-45E4-A100-9927E7D6A640}
// *********************************************************************//
  IPXC_TextBlockInfo = interface(IUnknown)
    ['{926DF08D-6F44-45E4-A100-9927E7D6A640}']
    function Get_ParaCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_ParaInfo(nParaIndex: ULONG_T; out stInfo: PXC_TextParaInfo): HResult; stdcall;
    function Get_BBox(out stBBox: PXC_RectF): HResult; stdcall;
    function Get_Matrix(out stMatrix: PXC_Matrix): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_QuadsF
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EEF4AFBE-7A87-4323-8B39-93B36EEC955D}
// *********************************************************************//
  IPXC_QuadsF = interface(IDispatch)
    ['{EEF4AFBE-7A87-4323-8B39-93B36EEC955D}']
    function Get_Item(nIndex: ULONG_T): PXC_QuadF; safecall;
    procedure Set_Item(nIndex: ULONG_T; stItem: PUserType8); safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(var stItems: PXC_QuadF; nCount: ULONG_T; nIndex: ULONG_T); safecall;
    procedure InsertFrom(const pSrc: IPXC_QuadsF; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXC_QuadsF); safecall;
    function Clone: IPXC_QuadsF; safecall;
    // Skipped Property "Item"
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXC_QuadsFDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {EEF4AFBE-7A87-4323-8B39-93B36EEC955D}
// *********************************************************************//
  IPXC_QuadsFDisp = dispinterface
    ['{EEF4AFBE-7A87-4323-8B39-93B36EEC955D}']
    function Item(nIndex: ULONG_T): {NOT_OLEAUTO(PXC_QuadF)}OleVariant; dispid 0;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Insert(var stItems: {NOT_OLEAUTO(PXC_QuadF)}OleVariant; nCount: ULONG_T; 
                     nIndex: ULONG_T); dispid 1610743813;
    procedure InsertFrom(const pSrc: IPXC_QuadsF; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); dispid 1610743814;
    procedure CopyFrom(const pSrc: IPXC_QuadsF); dispid 1610743815;
    function Clone: IPXC_QuadsF; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IPXC_Annotation
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {64AD6ED3-2405-44C8-859C-DF9AAC1F828F}
// *********************************************************************//
  IPXC_Annotation = interface(IDispatch)
    ['{64AD6ED3-2405-44C8-859C-DF9AAC1F828F}']
    function Get_type_(out nTypeID: ULONG_T): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Set_Name(const sName: WideString): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_Page(out pPage: IPXC_Page): HResult; stdcall;
    function Get_PageIndex(out nPageIndex: ULONG_T): HResult; stdcall;
    function Get_IndexOnPage(out nPageIndex: Integer): HResult; stdcall;
    function Get_Rect(out Rect: PXC_Rect): HResult; stdcall;
    function Set_Rect(Rect: PUserType1): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Set_Flags(nFlags: ULONG_T): HResult; stdcall;
    function Get_Actions(nTrigger: PXC_TriggerType; out pActions: IPXC_ActionsList): HResult; stdcall;
    function Set_Actions(nTrigger: PXC_TriggerType; const pActions: IPXC_ActionsList): HResult; stdcall;
    function Get_ModificationDate(out sDate: WideString): HResult; stdcall;
    function Set_ModificationDate(const sDate: WideString): HResult; stdcall;
    function Get_CreationDate(out sDate: WideString): HResult; stdcall;
    function Set_CreationDate(const sDate: WideString): HResult; stdcall;
    function Get_OC(out pOCMD: IUnknown): HResult; stdcall;
    function Set_OC(const pOCMD: IUnknown): HResult; stdcall;
    function Get_Data(out pAnnotData: IPXC_AnnotData): HResult; stdcall;
    function Set_Data(const pAnnotData: IPXC_AnnotData): HResult; stdcall;
    function Get_Handler(out pHandler: IPXC_AnnotHandler): HResult; stdcall;
    function Get_IsMarkup(out bIsMarkup: WordBool): HResult; stdcall;
    function Get_Popup(out pPopup: IPXC_Annotation): HResult; stdcall;
    function Get_ReplyTo(out pAnnot: IPXC_Annotation): HResult; stdcall;
    function Get_ReplyType(out nType: PXC_ReplyType): HResult; stdcall;
    function Get_Field(out pField: IPXC_FormField): HResult; stdcall;
    function Get_OnValue(out sOnValue: WideString): HResult; stdcall;
    function Set_OnValue(const sOnValue: WideString): HResult; stdcall;
    function SetPopup(const pPopup: IPXC_Annotation): HResult; stdcall;
    function SetReplyTo(const pAnnot: IPXC_Annotation; bToGroup: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_ActionsList
// Flags:     (128) NonExtensible
// GUID:      {772575E5-74CA-4CBD-ACAE-E0C66B55572B}
// *********************************************************************//
  IPXC_ActionsList = interface(IUnknown)
    ['{772575E5-74CA-4CBD-ACAE-E0C66B55572B}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(Index: ULONG_T; out ppAction: IPXC_Action): HResult; stdcall;
    function Remove(nIndex: ULONG_T): HResult; stdcall;
    function Insert(nPos: ULONG_T; const pAction: IPXC_Action): HResult; stdcall;
    function RemoveAll: HResult; stdcall;
    function Clone(out ppClone: IPXC_ActionsList): HResult; stdcall;
    function SerializeActions(const pStorage: IPXS_Document; out ppVar: IPXS_PDFVariant): HResult; stdcall;
    function RestoreActions(const pStorage: IPXS_Document; const pVar: IPXS_PDFVariant): HResult; stdcall;
    function CopyTo(const pDestDoc: IPXC_Document; bIndirect: WordBool; 
                    const pRemap: IPXC_RemapCallback; out ppCopy: IPXS_PDFVariant): HResult; stdcall;
    function Load(const pDict: IPXS_PDFVariant): HResult; stdcall;
    function Save(bIndirect: WordBool; out ppDict: IPXS_PDFVariant): HResult; stdcall;
    function AddJavaScript(const pScript: WideString; out ppAction: IPXC_Action): HResult; stdcall;
    function AddGoto(sDest: PXC_Destination; out ppAction: IPXC_Action): HResult; stdcall;
    function AddGotoNamed(const pNamedDest: WideString; out ppAction: IPXC_Action): HResult; stdcall;
    function AddGotoR(const pFileName: WideString; sDest: PXC_Destination; out ppAction: IPXC_Action): HResult; stdcall;
    function AddGotoRNamed(const pFileName: WideString; const pNamedDest: WideString; 
                           out ppAction: IPXC_Action): HResult; stdcall;
    function AddURI(const pURI: WideString; out ppAction: IPXC_Action): HResult; stdcall;
    function AddLaunch(const pFileName: WideString; out ppAction: IPXC_Action): HResult; stdcall;
    function IsEqual(const pAct: IPXC_ActionsList; out bEqual: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Action
// Flags:     (128) NonExtensible
// GUID:      {16D15B5A-F210-4981-8EF3-F25A9824D567}
// *********************************************************************//
  IPXC_Action = interface(IUnknown)
    ['{16D15B5A-F210-4981-8EF3-F25A9824D567}']
    function Get_type_(out pType: ULONG_T): HResult; stdcall;
    function Get_IsValid(out pIsValid: WordBool): HResult; stdcall;
    function Get_PDFObject(out ppPDFObject: IPXS_PDFVariant): HResult; stdcall;
    function IsEqual(const pAct: IPXC_Action; out bEqual: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_RemapCallback
// Flags:     (128) NonExtensible
// GUID:      {BC2654D2-1D08-4B2F-A2BA-BF3E2DC61CE1}
// *********************************************************************//
  IPXC_RemapCallback = interface(IUnknown)
    ['{BC2654D2-1D08-4B2F-A2BA-BF3E2DC61CE1}']
    function RemapPageNumber(nPage: Integer; out pNewPageNumber: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {5D9A0718-306A-4B2E-8097-A2719A728DA3}
// *********************************************************************//
  IPXC_AnnotData = interface(IDispatch)
    ['{5D9A0718-306A-4B2E-8097-A2719A728DA3}']
    function Get_AnnotType(out pAnnotTypeID: ULONG_T): HResult; stdcall;
    function Get_Color(out ppColor: IColor): HResult; stdcall;
    function Set_Color(const ppColor: IColor): HResult; stdcall;
    function Get_Contents(out ppContents: WideString): HResult; stdcall;
    function Set_Contents(const ppContents: WideString): HResult; stdcall;
    function Get_Rotation(out pRotation: Double): HResult; stdcall;
    function Set_Rotation(pRotation: Double): HResult; stdcall;
    function Get_Border(out pBorder: PXC_AnnotBorder): HResult; stdcall;
    function Set_Border(pBorder: PUserType16): HResult; stdcall;
    function Get_Opacity(out pOpacity: Double): HResult; stdcall;
    function Set_Opacity(pOpacity: Double): HResult; stdcall;
    function Get_BlendMode(out pBMode: PXC_BlendMode): HResult; stdcall;
    function Set_BlendMode(pBMode: PXC_BlendMode): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotHandler
// Flags:     (128) NonExtensible
// GUID:      {C0E080E4-3454-4CD5-8B1A-D4A7905E5195}
// *********************************************************************//
  IPXC_AnnotHandler = interface(IUnknown)
    ['{C0E080E4-3454-4CD5-8B1A-D4A7905E5195}']
    function Get_Capabilities(out pCaps: ULONG_T): HResult; stdcall;
    function CreateNewAnnotDict(nAnnotType: ULONG_T; const pDestDoc: IPXC_Document; 
                                out ppNewAnnotDict: IPXS_PDFVariant): HResult; stdcall;
    function CreateNewAnnotData(nAnnotType: ULONG_T; const pDestDoc: IPXC_Document; 
                                out ppNewAnnotData: IPXC_AnnotData): HResult; stdcall;
    function LoadAnnotData(const pAnnot: IPXC_Annotation; const pAnnotData: IPXC_AnnotData): HResult; stdcall;
    function SaveAnnotData(const pAnnot: IPXC_Annotation; const pAnnotData: IPXC_AnnotData): HResult; stdcall;
    function GetAnnotData(const pAnnot: IPXC_Annotation; out ppClonedAnnotData: IPXC_AnnotData): HResult; stdcall;
    function SerializeAnnot(const pSrcAnnot: IPXC_Annotation; const pStorage: IPXS_Document; 
                            out ppVar: IPXS_PDFVariant): HResult; stdcall;
    function RestoreAnnot(const pStorage: IPXS_Document; const pVar: IPXS_PDFVariant; 
                          const pDestDoc: IPXC_Document; out ppRestoredAnnotDict: IPXS_PDFVariant): HResult; stdcall;
    function CopyAnnot(const pAnnot: IPXC_Annotation; const pDestDoc: IPXC_Document; 
                       const pRemap: IPXC_RemapCallback; out ppCopyAnnotDict: IPXS_PDFVariant): HResult; stdcall;
    function CreateAnnotUndoInfo(const pSrcAnnot: IPXC_Annotation; out ppUndoInfo: IPXS_PDFVariant): HResult; stdcall;
    function UndoAnnot(const pUndoInfo: IPXS_PDFVariant; const pDestAnnot: IPXC_Annotation): HResult; stdcall;
    function GetAppearance(const pAnnot: IPXC_Annotation; const pContext: IPXC_OCContext; 
                           out ppApp: IUnknown): HResult; stdcall;
    function HasAppearanceForAppType(const pAnnot: IPXC_Annotation; nAppType: PXC_AnnotAppType; 
                                     const pContext: IPXC_OCContext; out pHasApp: WordBool): HResult; stdcall;
    function GetPrintAppearance(const pAnnot: IPXC_Annotation; const pContext: IPXC_OCContext; 
                                var pAppRect: PXC_Rect; nFlags: ULONG_T; out ppApp: IUnknown): HResult; stdcall;
    function ScaleAnnot(const pAnnot: IPXC_Annotation; var stNewAnnotRect: PXC_Rect; nFlags: ULONG_T): HResult; stdcall;
    function TransformAnnot(const pAnnot: IPXC_Annotation; var stMatrix: PXC_Matrix; nFlags: ULONG_T): HResult; stdcall;
    function RotateAnnot(const pAnnot: IPXC_Annotation; nAngle: Single; bAbsolute: WordBool; 
                         var stRotationPoint: PXC_Point): HResult; stdcall;
    function HasAnnotFeature(nAnnotFeature: PXC_AnnotFeature; nAnnotType: ULONG_T; 
                             nIntentAtom: ULONG_T; out bState: WordBool): HResult; stdcall;
    function FillAnnotFeatures(const pBitSet: IBitSet; nAnnotType: ULONG_T; nIntentAtom: ULONG_T): HResult; stdcall;
    function GetAnnotRotatePoint(const pAnnot: IPXC_Annotation; out pRotatePoint: PXC_Point): HResult; stdcall;
    function GetAnnotTipPoint(const pAnnot: IPXC_Annotation; out bTipVisible: WordBool; 
                              out stTipPoint: PXC_Point): HResult; stdcall;
    function GetAnnotOrder(const pAnnot: IPXC_Annotation; const pOCCtx: IPXC_OCContext; 
                           out nLayer: Double): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_OCContext
// Flags:     (128) NonExtensible
// GUID:      {A9FCBEE5-C1CD-4649-B20F-4F1CD29725E2}
// *********************************************************************//
  IPXC_OCContext = interface(IUnknown)
    ['{A9FCBEE5-C1CD-4649-B20F-4F1CD29725E2}']
    function Get_RenderType(out nRenderType: PXC_RenderType): HResult; stdcall;
    function Set_RenderType(nRenderType: PXC_RenderType): HResult; stdcall;
    function Get_UserName(out sUserName: WideString): HResult; stdcall;
    function Set_UserName(const sUserName: WideString): HResult; stdcall;
    function Get_UserTitle(out sUserTitle: WideString): HResult; stdcall;
    function Set_UserTitle(const sUserTitle: WideString): HResult; stdcall;
    function Get_Organization(out sOrganization: WideString): HResult; stdcall;
    function Set_Organization(const sOrganization: WideString): HResult; stdcall;
    function Get_ZoomLevel(out nZoomLevel: Single): HResult; stdcall;
    function Set_ZoomLevel(nZoomLevel: Single): HResult; stdcall;
    function Get_Resolution(out nResolution: ULONG_T): HResult; stdcall;
    function Set_Resolution(nResolution: ULONG_T): HResult; stdcall;
    function Get_Language(out sLanguage: WideString): HResult; stdcall;
    function Set_Language(const sLanguage: WideString): HResult; stdcall;
    function Set_AnnotVisibilityCallback(const pCallback: IPXC_AnnotsVisibilityCallback): HResult; stdcall;
    function Get_AnnotVisibilityCallback(out pCallback: IPXC_AnnotsVisibilityCallback): HResult; stdcall;
    function Set_CIVisibilityCallback(const pCallback: IPXC_CIVisibilityCallback): HResult; stdcall;
    function Get_CIVisibilityCallback(out pCallback: IPXC_CIVisibilityCallback): HResult; stdcall;
    function IsAnnotVisible(const pDoc: IPXC_Document; const pAnnot: IPXC_Annotation; 
                            nFlags: ULONG_T; out bIsVisible: WordBool): HResult; stdcall;
    function GetAnnotAppStyle(const pDoc: IPXC_Document; const pAnnot: IPXC_Annotation; 
                              out nAppType: PXC_AnnotAppType; out nFlags: ULONG_T): HResult; stdcall;
    function GetWidgetHighlightColors(out pColor: IColor; out pRequiredFieldsColor: IColor; 
                                      out pHoverBorderColor: IColor): HResult; stdcall;
    function SetWidgetHighlightColors(const pColor: IColor; const pRequiredFieldsColor: IColor; 
                                      const pHoverBorderColor: IColor): HResult; stdcall;
    function IsOCGVisible(const pOCG: IPXC_OCG; out bIsVisible: WordBool): HResult; stdcall;
    function IsOCMDVisible(const pOCMD: IPXC_OCMD; out bIsVisible: WordBool): HResult; stdcall;
    function IsOCVisible(const pOC: IUnknown; out bIsVisible: WordBool): HResult; stdcall;
    function IsOCVisibleByVar(const pDoc: IPXC_Document; const pOCObj: IPXS_PDFVariant; 
                              out bIsVisible: WordBool): HResult; stdcall;
    function SetOCState(const pDoc: IPXC_Document; const pOCObj: IPXS_PDFVariant; bVisible: WordBool): HResult; stdcall;
    function ResetOCStates: HResult; stdcall;
    function Clone(out pClone: IPXC_OCContext): HResult; stdcall;
    function Get_PrintContentFlags(out nFlags: ULONG_T): HResult; stdcall;
    function Set_PrintContentFlags(nFlags: ULONG_T): HResult; stdcall;
    function IsCIVisible(var nCIPath: ULONG_T; nCIPathLen: ULONG_T; out bIsVisible: WordBool): HResult; stdcall;
    function Get_ViewRotation(out nRotation: Integer): HResult; stdcall;
    function Set_ViewRotation(nRotation: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotsVisibilityCallback
// Flags:     (128) NonExtensible
// GUID:      {86B80528-6ABD-4104-81F5-E412EFEE5317}
// *********************************************************************//
  IPXC_AnnotsVisibilityCallback = interface(IUnknown)
    ['{86B80528-6ABD-4104-81F5-E412EFEE5317}']
    function GetAnnotVisibility(const pDoc: IPXC_Document; const pAnnot: IPXC_Annotation; 
                                out nState: PXC_AnnotVisibility): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_CIVisibilityCallback
// Flags:     (128) NonExtensible
// GUID:      {B9D001F0-1382-401A-A042-F34B01A2F1DF}
// *********************************************************************//
  IPXC_CIVisibilityCallback = interface(IUnknown)
    ['{B9D001F0-1382-401A-A042-F34B01A2F1DF}']
    function IsCIVisible(var nCIPath: ULONG_T; nCIPathLen: ULONG_T; out bIsVisible: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_OCG
// Flags:     (128) NonExtensible
// GUID:      {3ACD8658-5341-4E7A-A0DD-AB29F7A3F777}
// *********************************************************************//
  IPXC_OCG = interface(IUnknown)
    ['{3ACD8658-5341-4E7A-A0DD-AB29F7A3F777}']
    function Get_Document(out pDoc: IPXC_Document): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Set_Name(const sName: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_OCMD
// Flags:     (128) NonExtensible
// GUID:      {B198D983-F884-4B5B-A69D-F8E1C51307BE}
// *********************************************************************//
  IPXC_OCMD = interface(IUnknown)
    ['{B198D983-F884-4B5B-A69D-F8E1C51307BE}']
    function Get_Document(out pDoc: IPXC_Document): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_OCGsCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_OCG(nIndex: ULONG_T; out pOCG: IPXC_OCG): HResult; stdcall;
    function Get_VisibilityPolicy(out nVisPolicy: PXC_OCMDVisibilityPolicy): HResult; stdcall;
    function Set_VisibilityPolicy(nVisPolicy: PXC_OCMDVisibilityPolicy): HResult; stdcall;
    function Get_HasExpression(out bHasExpression: WordBool): HResult; stdcall;
    function Get_Expression(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Set_Expression(const pVar: IPXS_PDFVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_FormField
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {954F5C0B-D5DF-417F-BD09-60F5F7554CA0}
// *********************************************************************//
  IPXC_FormField = interface(IDispatch)
    ['{954F5C0B-D5DF-417F-BD09-60F5F7554CA0}']
    function Get_type_: PXC_FormFieldType; safecall;
    function Get_Flags: ULONG_T; safecall;
    procedure Set_Flags(pFlags: ULONG_T); safecall;
    function Get_FullName: WideString; safecall;
    function Get_PartialName: WideString; safecall;
    function Get_AlternateName: WideString; safecall;
    procedure Set_AlternateName(const ppName: WideString); safecall;
    function Get_MappingName: WideString; safecall;
    procedure Set_MappingName(const ppName: WideString); safecall;
    function Get_Value: IPXS_PDFVariant; safecall;
    procedure Set_Value(const ppVar: IPXS_PDFVariant); safecall;
    function Get_Actions(nTrigger: PXC_TriggerType): IPXC_ActionsList; safecall;
    procedure Set_Actions(nTrigger: PXC_TriggerType; const ppAList: IPXC_ActionsList); safecall;
    function Get_PDFObject: IPXS_PDFVariant; safecall;
    procedure SetFlags(nSetFlags: ULONG_T; nMask: ULONG_T); safecall;
    procedure Reset; safecall;
    function Get_WidgetsCount: ULONG_T; safecall;
    function Get_Widget(nIndex: ULONG_T): IPXC_Annotation; safecall;
    function Get_ChildrenCount: ULONG_T; safecall;
    function Get_Child(nIndex: ULONG_T): IPXC_FormField; safecall;
    function Get_Parent: IPXC_FormField; safecall;
    function GetChildIndex(const pChild: IPXC_FormField): Integer; safecall;
    function GetWidgetIndex(const pWidget: IPXC_Annotation): Integer; safecall;
    function GetMaxLen: ULONG_T; safecall;
    procedure SetMaxLen(nMaxLen: ULONG_T); safecall;
    procedure UpdateAP(bFull: WordBool); safecall;
    function GetValueText: WideString; safecall;
    procedure SetValueText(const pValue: WideString); safecall;
    procedure CheckWidget(nIndex: ULONG_T; bCheck: WordBool); safecall;
    function IsWidgetChecked(nIndex: ULONG_T): WordBool; safecall;
    function Get_SelectedItemsCount: ULONG_T; safecall;
    function GetSelectedIndex(nItem: ULONG_T): Integer; safecall;
    function IsItemSelected(nItem: ULONG_T): WordBool; safecall;
    procedure SelectItem(nItem: ULONG_T; bSelect: WordBool; bExclusive: WordBool); safecall;
    procedure ClearSelection; safecall;
    function Get_OptCount: ULONG_T; safecall;
    procedure GetOpt(nIndex: ULONG_T; out pValue: WideString; out pLabel: WideString; 
                     out pSelected: WordBool); safecall;
    procedure ClearOpt; safecall;
    procedure InsertOptRecord(const pValue: WideString; const pLabel: WideString; 
                              nInsertBefore: Integer); safecall;
    property type_: PXC_FormFieldType read Get_type_;
    property Flags: ULONG_T read Get_Flags write Set_Flags;
    property FullName: WideString read Get_FullName;
    property PartialName: WideString read Get_PartialName;
    property AlternateName: WideString read Get_AlternateName write Set_AlternateName;
    property MappingName: WideString read Get_MappingName write Set_MappingName;
    property Value: IPXS_PDFVariant read Get_Value write Set_Value;
    property Actions[nTrigger: PXC_TriggerType]: IPXC_ActionsList read Get_Actions write Set_Actions;
    property PDFObject: IPXS_PDFVariant read Get_PDFObject;
    property WidgetsCount: ULONG_T read Get_WidgetsCount;
    property Widget[nIndex: ULONG_T]: IPXC_Annotation read Get_Widget;
    property ChildrenCount: ULONG_T read Get_ChildrenCount;
    property Child[nIndex: ULONG_T]: IPXC_FormField read Get_Child;
    property Parent: IPXC_FormField read Get_Parent;
    property SelectedItemsCount: ULONG_T read Get_SelectedItemsCount;
    property OptCount: ULONG_T read Get_OptCount;
  end;

// *********************************************************************//
// DispIntf:  IPXC_FormFieldDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {954F5C0B-D5DF-417F-BD09-60F5F7554CA0}
// *********************************************************************//
  IPXC_FormFieldDisp = dispinterface
    ['{954F5C0B-D5DF-417F-BD09-60F5F7554CA0}']
    property type_: PXC_FormFieldType readonly dispid 1610743808;
    property Flags: ULONG_T dispid 1610743809;
    property FullName: WideString readonly dispid 1610743811;
    property PartialName: WideString readonly dispid 1610743812;
    property AlternateName: WideString dispid 1610743813;
    property MappingName: WideString dispid 1610743815;
    property Value: IPXS_PDFVariant dispid 1610743817;
    property Actions[nTrigger: PXC_TriggerType]: IPXC_ActionsList dispid 1610743819;
    property PDFObject: IPXS_PDFVariant readonly dispid 1610743821;
    procedure SetFlags(nSetFlags: ULONG_T; nMask: ULONG_T); dispid 1610743822;
    procedure Reset; dispid 1610743823;
    property WidgetsCount: ULONG_T readonly dispid 1610743824;
    property Widget[nIndex: ULONG_T]: IPXC_Annotation readonly dispid 1610743825;
    property ChildrenCount: ULONG_T readonly dispid 1610743826;
    property Child[nIndex: ULONG_T]: IPXC_FormField readonly dispid 1610743827;
    property Parent: IPXC_FormField readonly dispid 1610743828;
    function GetChildIndex(const pChild: IPXC_FormField): Integer; dispid 1610743829;
    function GetWidgetIndex(const pWidget: IPXC_Annotation): Integer; dispid 1610743830;
    function GetMaxLen: ULONG_T; dispid 1610743831;
    procedure SetMaxLen(nMaxLen: ULONG_T); dispid 1610743832;
    procedure UpdateAP(bFull: WordBool); dispid 1610743833;
    function GetValueText: WideString; dispid 1610743834;
    procedure SetValueText(const pValue: WideString); dispid 1610743835;
    procedure CheckWidget(nIndex: ULONG_T; bCheck: WordBool); dispid 1610743836;
    function IsWidgetChecked(nIndex: ULONG_T): WordBool; dispid 1610743837;
    property SelectedItemsCount: ULONG_T readonly dispid 1610743838;
    function GetSelectedIndex(nItem: ULONG_T): Integer; dispid 1610743839;
    function IsItemSelected(nItem: ULONG_T): WordBool; dispid 1610743840;
    procedure SelectItem(nItem: ULONG_T; bSelect: WordBool; bExclusive: WordBool); dispid 1610743841;
    procedure ClearSelection; dispid 1610743842;
    property OptCount: ULONG_T readonly dispid 1610743843;
    procedure GetOpt(nIndex: ULONG_T; out pValue: WideString; out pLabel: WideString; 
                     out pSelected: WordBool); dispid 1610743844;
    procedure ClearOpt; dispid 1610743845;
    procedure InsertOptRecord(const pValue: WideString; const pLabel: WideString; 
                              nInsertBefore: Integer); dispid 1610743846;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotsList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {75751C77-316F-447E-BA46-79F098261F6E}
// *********************************************************************//
  IPXC_AnnotsList = interface(IDispatch)
    ['{75751C77-316F-447E-BA46-79F098261F6E}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXC_Annotation; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(const pItems: IPXC_Annotation; nIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXC_AnnotsList); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXC_Annotation read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXC_AnnotsListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {75751C77-316F-447E-BA46-79F098261F6E}
// *********************************************************************//
  IPXC_AnnotsListDisp = dispinterface
    ['{75751C77-316F-447E-BA46-79F098261F6E}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXC_Annotation readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Insert(const pItems: IPXC_Annotation; nIndex: ULONG_T); dispid 1610743813;
    procedure CopyFrom(const pSrc: IPXC_AnnotsList); dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXC_PageRenderParams
// Flags:     (128) NonExtensible
// GUID:      {73844F0A-7090-48CD-9C97-0F02F5D5CBD0}
// *********************************************************************//
  IPXC_PageRenderParams = interface(IUnknown)
    ['{73844F0A-7090-48CD-9C97-0F02F5D5CBD0}']
    function Get_TextSmoothMode(out nMode: PXC_TextSmoothMode): HResult; stdcall;
    function Set_TextSmoothMode(nMode: PXC_TextSmoothMode): HResult; stdcall;
    function Get_RenderFlags(out nFlags: ULONG_T): HResult; stdcall;
    function Set_RenderFlags(nFlags: ULONG_T): HResult; stdcall;
    function Get_ColorProfileName(out sProfileName: WideString): HResult; stdcall;
    function Set_ColorProfileName(const sProfileName: WideString): HResult; stdcall;
    function Get_PageViewBox(out nBoxType: PXC_BoxType): HResult; stdcall;
    function Set_PageViewBox(nBoxType: PXC_BoxType): HResult; stdcall;
    function SetColor(nColorID: PXC_RenderColor; nRed: SYSINT; nGreen: SYSINT; nBlue: SYSINT; 
                      nAlpha: SYSINT): HResult; stdcall;
    function GetColor(nColorID: PXC_RenderColor; out nRed: SYSINT; out nGreen: SYSINT; 
                      out nBlue: SYSINT; out nAlpha: SYSINT): HResult; stdcall;
    function SetBgStep(nStepX: ULONG_T; nStepY: ULONG_T): HResult; stdcall;
    function GetBgStep(out nStepX: ULONG_T; out nStepY: ULONG_T): HResult; stdcall;
    function Get_RasterFormat(out pFormat: SYSINT): HResult; stdcall;
    function Set_RasterFormat(pFormat: SYSINT): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_RedactInfo
// Flags:     (128) NonExtensible
// GUID:      {A3032CAE-5BF4-4947-B141-0ACB7B058073}
// *********************************************************************//
  IPXC_RedactInfo = interface(IUnknown)
    ['{A3032CAE-5BF4-4947-B141-0ACB7B058073}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pEntry: IPXC_RedactEntry): HResult; stdcall;
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function Clear: HResult; stdcall;
    function InsertNew(var stQuad: PXC_QuadF; nIndex: ULONG_T; out pNewEntry: IPXC_RedactEntry): HResult; stdcall;
    function SetOverlayParams(const pOverlayParams: IPXC_RedactOverlayParams): HResult; stdcall;
    function SetCropMode(bIsCropMode: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_RedactEntry
// Flags:     (128) NonExtensible
// GUID:      {FFB63D66-4B26-46E3-A957-13C52C327390}
// *********************************************************************//
  IPXC_RedactEntry = interface(IUnknown)
    ['{FFB63D66-4B26-46E3-A957-13C52C327390}']
    function Get_Quads(out pQuads: IPXC_QuadsF): HResult; stdcall;
    function Set_Quads(const pQuads: IPXC_QuadsF): HResult; stdcall;
    function Get_OverlayParams(out pParams: IPXC_RedactOverlayParams): HResult; stdcall;
    function Set_OverlayParams(const pParams: IPXC_RedactOverlayParams): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_RedactOverlayParams
// Flags:     (128) NonExtensible
// GUID:      {F7C4875B-0B76-49B4-8E33-C6861240C146}
// *********************************************************************//
  IPXC_RedactOverlayParams = interface(IUnknown)
    ['{F7C4875B-0B76-49B4-8E33-C6861240C146}']
    function Get_FColor(out pColor: IColor): HResult; stdcall;
    function Set_FColor(const pColor: IColor): HResult; stdcall;
    function Get_SColor(out pColor: IColor): HResult; stdcall;
    function Set_SColor(const pColor: IColor): HResult; stdcall;
    function Get_Text(out sText: WideString): HResult; stdcall;
    function Set_Text(const sText: WideString): HResult; stdcall;
    function Get_Font(out pFont: IPXC_Font): HResult; stdcall;
    function Set_Font(const pFont: IPXC_Font): HResult; stdcall;
    function Get_FontSize(out nSize: Double): HResult; stdcall;
    function Set_FontSize(nSize: Double): HResult; stdcall;
    function Get_TextColor(out pColor: IColor): HResult; stdcall;
    function Set_TextColor(const pColor: IColor): HResult; stdcall;
    function Get_RepeatText(out bRepeat: WordBool): HResult; stdcall;
    function Set_RepeatText(bRepeat: WordBool): HResult; stdcall;
    function Get_TextAlign(out nTextAlign: Integer): HResult; stdcall;
    function Set_TextAlign(nTextAlign: Integer): HResult; stdcall;
    function Get_XForm(out pForm: IPXC_XForm): HResult; stdcall;
    function Set_XForm(const pForm: IPXC_XForm): HResult; stdcall;
    function Get_Border(out stBorder: PXC_AnnotBorder): HResult; stdcall;
    function Set_Border(stBorder: PUserType16): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_UndoRedoData
// Flags:     (128) NonExtensible
// GUID:      {D67C1B36-83B5-4C18-803A-6F9F7CA503A3}
// *********************************************************************//
  IPXC_UndoRedoData = interface(IUnknown)
    ['{D67C1B36-83B5-4C18-803A-6F9F7CA503A3}']
    function Get_UsedMemory(out nUsedMemory: ULONG_T): HResult; stdcall;
    function Undo(const pProgressMon: IProgressMon): HResult; stdcall;
    function Redo(const pProgressMon: IProgressMon): HResult; stdcall;
    function IsEmpty(out bIsEmpty: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Transition
// Flags:     (128) NonExtensible
// GUID:      {7FFFC122-1DE6-4013-90A4-40370600A3EB}
// *********************************************************************//
  IPXC_Transition = interface(IUnknown)
    ['{7FFFC122-1DE6-4013-90A4-40370600A3EB}']
    function Get_PDFObject(out pVariant: IPXS_PDFVariant): HResult; stdcall;
    function Get_Duration(out nDuration: Double): HResult; stdcall;
    function Set_Duration(nDuration: Double): HResult; stdcall;
    function Get_Style(out nStyle: ULONG_T): HResult; stdcall;
    function Set_Style(nStyle: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_PagesOverlayInfo
// Flags:     (128) NonExtensible
// GUID:      {B65DEFED-7DDD-48F3-AB08-342C0C0B0212}
// *********************************************************************//
  IPXC_PagesOverlayInfo = interface(IUnknown)
    ['{B65DEFED-7DDD-48F3-AB08-342C0C0B0212}']
    function Clear: HResult; stdcall;
    function InsertNew(nSrcPage: ULONG_T; nDstPage: ULONG_T; nHorMode: PXC_ContentPlaceMode; 
                       nVerMode: PXC_ContentPlaceMode; bAsBackground: WordBool; 
                       bKeepAspect: WordBool): HResult; stdcall;
    function InsertNew2(nSrcPage: ULONG_T; nDstPage: ULONG_T; var pMatrix: PXC_Matrix; 
                        bAsBackground: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Bookmark
// Flags:     (128) NonExtensible
// GUID:      {75CD5048-E42C-4B6F-B7EA-DA64C9F1BABD}
// *********************************************************************//
  IPXC_Bookmark = interface(IUnknown)
    ['{75CD5048-E42C-4B6F-B7EA-DA64C9F1BABD}']
    function Get_Title(out sTitle: WideString): HResult; stdcall;
    function Set_Title(const sTitle: WideString): HResult; stdcall;
    function Get_Parent(out pParent: IPXC_Bookmark): HResult; stdcall;
    function Get_Indent(out nIndent: Integer): HResult; stdcall;
    function Get_Opened(out bOpened: WordBool): HResult; stdcall;
    function Set_Opened(bOpened: WordBool): HResult; stdcall;
    function Get_Style(out nFont: PXC_BookmarkStyle): HResult; stdcall;
    function Set_Style(nFont: PXC_BookmarkStyle): HResult; stdcall;
    function Get_Color(out pColor: IColor): HResult; stdcall;
    function Set_Color(const pColor: IColor): HResult; stdcall;
    function Get_ChildrenCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_FirstChild(out pChild: IPXC_Bookmark): HResult; stdcall;
    function Get_LastChild(out pChild: IPXC_Bookmark): HResult; stdcall;
    function Get_Previous(out pSibling: IPXC_Bookmark): HResult; stdcall;
    function Get_Next(out pSibling: IPXC_Bookmark): HResult; stdcall;
    function Get_Document(out pDoc: IPXC_Document): HResult; stdcall;
    function Get_PDFObject(out pPDFObject: IPXS_PDFVariant): HResult; stdcall;
    function IsEqual(const pBookmark: IPXC_Bookmark; out bEqual: WordBool): HResult; stdcall;
    function AddNewChild(bLast: WordBool; out pChild: IPXC_Bookmark): HResult; stdcall;
    function AddNewSibling(bBefore: WordBool; out pSibling: IPXC_Bookmark): HResult; stdcall;
    function AddSibling(const pSibling: IPXC_Bookmark; bPrev: WordBool): HResult; stdcall;
    function AddChild(const pChild: IPXC_Bookmark; bLast: WordBool): HResult; stdcall;
    function Unlink: HResult; stdcall;
    function Get_Actions(out pActions: IPXC_ActionsList): HResult; stdcall;
    function Set_Actions(const pActions: IPXC_ActionsList): HResult; stdcall;
    function Clone(out pClone: IPXC_Bookmark): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_DocumentProps
// Flags:     (128) NonExtensible
// GUID:      {15C5C747-B3A8-4C56-A5A9-9138E1DAFD80}
// *********************************************************************//
  IPXC_DocumentProps = interface(IUnknown)
    ['{15C5C747-B3A8-4C56-A5A9-9138E1DAFD80}']
    function Get_PageMode(out nPageMode: PXC_PagesMode): HResult; stdcall;
    function Set_PageMode(nPageMode: PXC_PagesMode): HResult; stdcall;
    function Get_PageLayout(out nPageMode: PXC_PagesLayout): HResult; stdcall;
    function Set_PageLayout(nPageMode: PXC_PagesLayout): HResult; stdcall;
    function Get_ViewPrefFlag(nFlag: PXC_DocumentViewFlags; out nVal: Integer): HResult; stdcall;
    function Set_ViewPrefFlag(nFlag: PXC_DocumentViewFlags; nVal: WordBool): HResult; stdcall;
    function Get_SpecVersion(out nSpecVersion: ULONG_T): HResult; stdcall;
    function Set_SpecVersion(nSpecVersion: ULONG_T): HResult; stdcall;
    function Get_PDFStandard(out nStandard: PXC_PDFStandard): HResult; stdcall;
    function Get_OpenActions(out pAList: IPXC_ActionsList): HResult; stdcall;
    function Set_OpenActions(const pAList: IPXC_ActionsList): HResult; stdcall;
    function Get_ActionsForTrigger(nTrigger: PXC_TriggerType; out pActions: IPXC_ActionsList): HResult; stdcall;
    function Set_ActionsForTrigger(nTrigger: PXC_TriggerType; const pActions: IPXC_ActionsList): HResult; stdcall;
    function DiscardPDFA: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_DocumentInfo
// Flags:     (128) NonExtensible
// GUID:      {93EF2F7D-2127-4D1F-ADE4-646D3D1B8419}
// *********************************************************************//
  IPXC_DocumentInfo = interface(IUnknown)
    ['{93EF2F7D-2127-4D1F-ADE4-646D3D1B8419}']
    function Get_InfoStr(nKey: PXC_DocumentInfoKey; out sString: WideString): HResult; stdcall;
    function Set_InfoStr(nKey: PXC_DocumentInfoKey; const sString: WideString): HResult; stdcall;
    function Get_CreationDate(out nDate: TDateTime): HResult; stdcall;
    function Get_ModificationDate(out nDate: TDateTime): HResult; stdcall;
    function GetInfoVar(sKey: PWideChar; out pValue: IPXS_PDFVariant): HResult; stdcall;
    function SetInfoVar(sKey: PWideChar; const pValue: IPXS_PDFVariant): HResult; stdcall;
    function Get_Trapped(out nValue: ULONG_T): HResult; stdcall;
    function Set_Trapped(nValue: ULONG_T): HResult; stdcall;
    function SetCreationDate(nDate: TDateTime): HResult; stdcall;
    function SetModificationDate(nDate: TDateTime): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_XMPMetadata
// Flags:     (0)
// GUID:      {7E4F8B4D-0BD5-44F0-94AD-8CEC1F00CB20}
// *********************************************************************//
  IPXC_XMPMetadata = interface(IUnknown)
    ['{7E4F8B4D-0BD5-44F0-94AD-8CEC1F00CB20}']
    function GetXMP(out pXMP: IMemBlock): HResult; stdcall;
    function SetXMP(const pXMP: IMemBlock): HResult; stdcall;
    function GetProperty(sNamespace: PWideChar; sPath: PWideChar; out sValue: WideString): HResult; stdcall;
    function SetProperty(sNamespace: PWideChar; sPrefix: PWideChar; sPath: PWideChar; 
                         sValue: PWideChar): HResult; stdcall;
    function GetArrayItemsCount(sNamespace: PWideChar; sPath: PWideChar; out nCount: ULONG_T): HResult; stdcall;
    function GetArrayItem(sNamespace: PWideChar; sPath: PWideChar; nIndex: ULONG_T; 
                          out sValue: WideString): HResult; stdcall;
    function SetArrayItem(sNamespace: PWideChar; sPrefix: PWideChar; sPath: PWideChar; 
                          nIndex: ULONG_T; sValue: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Articles
// Flags:     (128) NonExtensible
// GUID:      {35F17EB7-BE46-4FE9-85B2-7349F6A61497}
// *********************************************************************//
  IPXC_Articles = interface(IUnknown)
    ['{35F17EB7-BE46-4FE9-85B2-7349F6A61497}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pArticle: IPXC_Article): HResult; stdcall;
    function AddNew(nPos: ULONG_T; out pNewArticle: IPXC_Article): HResult; stdcall;
    function Remove(nPos: ULONG_T): HResult; stdcall;
    function RemoveAll: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Article
// Flags:     (128) NonExtensible
// GUID:      {729FADC4-BAC1-4C35-BA87-B099C2991DC7}
// *********************************************************************//
  IPXC_Article = interface(IUnknown)
    ['{729FADC4-BAC1-4C35-BA87-B099C2991DC7}']
    function Get_Index(out nIndex: Integer): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function GetInfo(const sKey: WideString; out sInfo: WideString): HResult; stdcall;
    function SetInfo(const sKey: WideString; const sInfo: WideString): HResult; stdcall;
    function ClearAllInfo: HResult; stdcall;
    function Get_BeadsCount(out nBeadsCount: ULONG_T): HResult; stdcall;
    function Get_BeadPage(nBead: ULONG_T; out pPage: IPXC_Page): HResult; stdcall;
    function Set_BeadPage(nBead: ULONG_T; const pPage: IPXC_Page): HResult; stdcall;
    function Get_BeadPageIndex(nBead: ULONG_T; out nPageIdx: Integer): HResult; stdcall;
    function Set_BeadPageIndex(nBead: ULONG_T; nPageIdx: ULONG_T): HResult; stdcall;
    function Get_BeadRect(nBead: ULONG_T; out stRect: PXC_Rect): HResult; stdcall;
    function Set_BeadRect(nBead: ULONG_T; stRect: PUserType1): HResult; stdcall;
    function Get_BeadPDFObject(nBead: ULONG_T; out pVar: IPXS_PDFVariant): HResult; stdcall;
    function RemoveBead(nBead: ULONG_T): HResult; stdcall;
    function InsertBead(nPos: ULONG_T; nPageInx: ULONG_T; var stRect: PXC_Rect): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_FileSpec
// Flags:     (128) NonExtensible
// GUID:      {540A53AF-BCBD-4A67-862D-49311E404C51}
// *********************************************************************//
  IPXC_FileSpec = interface(IUnknown)
    ['{540A53AF-BCBD-4A67-862D-49311E404C51}']
    function Get_Document(out pDoc: IPXC_Document): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_FileSys(out pFS: IAFS_FileSys): HResult; stdcall;
    function Get_FileSysName(out sFSName: WideString): HResult; stdcall;
    function Get_DIPath(out sDIPath: WideString): HResult; stdcall;
    function Get_WinPath(out sWinPath: WideString): HResult; stdcall;
    function Get_IsURL(out bIsURL: WordBool): HResult; stdcall;
    function Get_IsSimple(out bIsSimple: WordBool): HResult; stdcall;
    function Get_HasEmbedd(out bHasEmbedd: WordBool): HResult; stdcall;
    function Get_URL(out sURL: WideString): HResult; stdcall;
    function Get_Description(out sDescription: WideString): HResult; stdcall;
    function Set_Description(const sDescription: WideString): HResult; stdcall;
    function Get_FileName(out sName: WideString): HResult; stdcall;
    function Get_Volative(out bValue: WordBool): HResult; stdcall;
    function Set_Volative(bValue: WordBool): HResult; stdcall;
    function Get_EmbeddedFile(out pEFile: IPXC_EmbeddedFileStream): HResult; stdcall;
    function Get_FieldString(sName: PWideChar; out sValue: WideString): HResult; stdcall;
    function Set_FieldString(sName: PWideChar; const sValue: WideString): HResult; stdcall;
    function Get_FieldNumber(sName: PWideChar; out nValue: Double): HResult; stdcall;
    function Set_FieldNumber(sName: PWideChar; nValue: Double): HResult; stdcall;
    function Get_FieldDate(sName: PWideChar; out stValue: TDateTime): HResult; stdcall;
    function Set_FieldDate(sName: PWideChar; stValue: TDateTime): HResult; stdcall;
    function Get_FieldPrefix(sName: PWideChar; out sPrefix: WideString): HResult; stdcall;
    function Set_FieldPrefix(sName: PWideChar; const sPrefix: WideString): HResult; stdcall;
    function Get_FolderID(out nFolderID: ULONG_T): HResult; stdcall;
    function Set_FolderID(nFolderID: ULONG_T): HResult; stdcall;
    function ResolveName(const pRelativePathName: IAFS_Name; out pName: IAFS_Name): HResult; stdcall;
    function ResolveNameEx(const pRelFS: IAFS_FileSys; const pRelPathName: IAFS_Name; 
                           const pToFS: IAFS_FileSys; bPathMustExist: WordBool; out pName: IAFS_Name): HResult; stdcall;
    function Get_AFRelationship(out nAtom: ULONG_T): HResult; stdcall;
    function Set_AFRelationship(nAtom: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_EmbeddedFileStream
// Flags:     (128) NonExtensible
// GUID:      {2D1673C9-993A-4011-9B40-120CAE278251}
// *********************************************************************//
  IPXC_EmbeddedFileStream = interface(IUnknown)
    ['{2D1673C9-993A-4011-9B40-120CAE278251}']
    function Get_PDFObject(out pVariant: IPXS_PDFVariant): HResult; stdcall;
    function Get_CreationDate(out stDate: TDateTime): HResult; stdcall;
    function Set_CreationDate(stDate: TDateTime): HResult; stdcall;
    function Get_ModificationDate(out stDate: TDateTime): HResult; stdcall;
    function Set_ModificationDate(stDate: TDateTime): HResult; stdcall;
    function Get_FileType(out sType: WideString): HResult; stdcall;
    function Set_FileType(const sType: WideString): HResult; stdcall;
    function Get_CompressedSize(out nSize: Int64): HResult; stdcall;
    function Get_UnCompressedSize(out nSize: Int64): HResult; stdcall;
    function GetCheckSum(var nCheckSum: Byte; nBufLen: ULONG_T): HResult; stdcall;
    function SaveToFile(const pFile: IAFS_File; const pMonitor: IProgressMon): HResult; stdcall;
    function OpenStream(out pFilter: IPXS_DecodeFilter): HResult; stdcall;
    function UpdateFromFile(const pFile: IAFS_File; const pMonitor: IProgressMon; 
                            const pFArray: IPXS_EncodeFiltersArray): HResult; stdcall;
    function UpdateFromFile2(pFile: PWideChar; const pMonitor: IProgressMon; 
                             const pFArray: IPXS_EncodeFiltersArray): HResult; stdcall;
    function UpdateFromStream(const pStream: IStream; const pMonitor: IProgressMon; 
                              const pFArray: IPXS_EncodeFiltersArray): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Collection
// Flags:     (128) NonExtensible
// GUID:      {A54695A0-0DB3-4169-8B94-AD4B999A898F}
// *********************************************************************//
  IPXC_Collection = interface(IUnknown)
    ['{A54695A0-0DB3-4169-8B94-AD4B999A898F}']
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_Color(const sColorName: WideString; out pColor: IColor): HResult; stdcall;
    function Set_Color(const sColorName: WideString; const pColor: IColor): HResult; stdcall;
    function GetFolder(const sFolderName: WideString; out pFolder: IPXC_CollectionFolder): HResult; stdcall;
    function GetFolderByID(nID: ULONG_T; out pFolder: IPXC_CollectionFolder): HResult; stdcall;
    function CreateFolder(const sFolderName: WideString; out pFolder: IPXC_CollectionFolder): HResult; stdcall;
    function RemoveFolder(const sFolderName: WideString): HResult; stdcall;
    function GetSchema(bCreateIfAbsent: WordBool; out pSchema: IPXC_CollectionSchema): HResult; stdcall;
    function DeleteSchema: HResult; stdcall;
    function CreateFolderEx(const sFolderName: WideString; const pParent: IPXC_CollectionFolder; 
                            out pFolder: IPXC_CollectionFolder): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_CollectionFolder
// Flags:     (128) NonExtensible
// GUID:      {92C04A4E-343A-4A3A-95EA-4DC80E2C4573}
// *********************************************************************//
  IPXC_CollectionFolder = interface(IUnknown)
    ['{92C04A4E-343A-4A3A-95EA-4DC80E2C4573}']
    function Get_Parent(out pFolder: IPXC_CollectionFolder): HResult; stdcall;
    function Set_Parent(const pFolder: IPXC_CollectionFolder): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Set_Name(const sName: WideString): HResult; stdcall;
    function Get_PathName(out sPathName: WideString): HResult; stdcall;
    function Get_ID(out nID: ULONG_T): HResult; stdcall;
    function Set_ID(nID: ULONG_T): HResult; stdcall;
    function Get_Description(out sText: WideString): HResult; stdcall;
    function Set_Description(const sText: WideString): HResult; stdcall;
    function Get_CreationDate(out stDate: TDateTime): HResult; stdcall;
    function Set_CreationDate(stDate: TDateTime): HResult; stdcall;
    function Get_ModificationDate(out stDate: TDateTime): HResult; stdcall;
    function Set_ModificationDate(stDate: TDateTime): HResult; stdcall;
    function Get_FieldString(const sName: WideString; out sValue: WideString): HResult; stdcall;
    function Set_FieldString(const sName: WideString; const sValue: WideString): HResult; stdcall;
    function Get_FieldNumber(const sName: WideString; out nValue: Double): HResult; stdcall;
    function Set_FieldNumber(const sName: WideString; nValue: Double): HResult; stdcall;
    function Get_FieldDate(const sName: WideString; out stValue: TDateTime): HResult; stdcall;
    function Set_FieldDate(const sName: WideString; stValue: TDateTime): HResult; stdcall;
    function Get_ChildrenCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_Children(nIndex: ULONG_T; out pFolder: IPXC_CollectionFolder): HResult; stdcall;
    function RemoveChildByName(const sName: WideString): HResult; stdcall;
    function RemoveChildByIndex(nIndex: ULONG_T): HResult; stdcall;
    function InsertNewChild(const sFolderName: WideString; out pFolder: IPXC_CollectionFolder): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_CollectionSchema
// Flags:     (128) NonExtensible
// GUID:      {6939D15D-1608-4AEE-BD68-12E05B91CAEF}
// *********************************************************************//
  IPXC_CollectionSchema = interface(IUnknown)
    ['{6939D15D-1608-4AEE-BD68-12E05B91CAEF}']
    function Get_FieldsCount(out nCount: ULONG_T): HResult; stdcall;
    function GetFieldInfoByIndex(nIndex: ULONG_T; out sName: WideString; out sText: WideString; 
                                 out nType: PXC_CollectionFieldType; out nFlags: ULONG_T): HResult; stdcall;
    function GetFieldInfoByName(const sName: WideString; out nIndex: ULONG_T; 
                                out sText: WideString; out nType: PXC_CollectionFieldType; 
                                out nFlags: ULONG_T): HResult; stdcall;
    function GetFieldInfoByOrder(var nOrderIdx: Integer; out sName: WideString; 
                                 out sText: WideString; out nType: PXC_CollectionFieldType; 
                                 out nFlags: ULONG_T): HResult; stdcall;
    function RemoveFieldByName(const sName: WideString): HResult; stdcall;
    function RemoveFieldByIndex(nIndex: ULONG_T): HResult; stdcall;
    function AddField(nPos: ULONG_T; const sName: WideString; const sText: WideString; 
                      nType: PXC_CollectionFieldType; nFlags: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_NameTree
// Flags:     (128) NonExtensible
// GUID:      {58B7B4E0-65C4-4711-8411-E2EAA46998C4}
// *********************************************************************//
  IPXC_NameTree = interface(IUnknown)
    ['{58B7B4E0-65C4-4711-8411-E2EAA46998C4}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_ItemName(nIndex: ULONG_T; out sName: WideString): HResult; stdcall;
    function Item(nIndex: ULONG_T; out sName: WideString; out pValue: IPXS_PDFVariant): HResult; stdcall;
    function Lookup(const sName: WideString; out pValue: IPXS_PDFVariant): HResult; stdcall;
    function Remove(const sName: WideString): HResult; stdcall;
    function Add(const sName: WideString; const pValue: IPXS_PDFVariant): HResult; stdcall;
    function RemoveAll: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_SecurityHandler
// Flags:     (128) NonExtensible
// GUID:      {5E828ECC-FAC8-4D91-B334-E9F32746F2E8}
// *********************************************************************//
  IPXC_SecurityHandler = interface(IUnknown)
    ['{5E828ECC-FAC8-4D91-B334-E9F32746F2E8}']
    function Get_Features(out nFeatureFlags: ULONG_T): HResult; stdcall;
    function Get_Name(out nName: ULONG_T): HResult; stdcall;
    function GetVersion(const pDoc: IPXC_Document; out nVersion: ULONG_T; out nMethod: ULONG_T): HResult; stdcall;
    function Authorize(const pDoc: IPXC_Document; nReqObj: PXC_RequestObj; 
                       nReqOpr: PXC_RequestOper; pAuthData: Pointer; out nStatus: PXC_PermStatus): HResult; stdcall;
    function GetAuthData(const pDoc: IPXC_Document; nReqObj: PXC_RequestObj; 
                         nReqOpr: PXC_RequestOper; out nAuthData: PByte1): HResult; stdcall;
    function FreeAuthData(const pDoc: IPXC_Document; var nAuthData: Byte): HResult; stdcall;
    function NewSecurityData(const pDoc: IPXC_Document; const pEncryptDict: IPXS_PDFVariant; 
                             out pSecData: IUnknown): HResult; stdcall;
    function UpdateSecurityData(hParentWnd: HANDLE_T; const pDoc: IPXC_Document; 
                                out pSecData: IUnknown): HResult; stdcall;
    function DisplaySecurityData(hParentWnd: HANDLE_T; const pDoc: IPXC_Document; 
                                 const pSecData: IUnknown): HResult; stdcall;
    function GetSecurityInfo(const pDoc: IPXC_Document; out nSecInfo: ULONG_T): HResult; stdcall;
    function CanParseEncryptDict(const pDoc: IPXC_Document; const pEncryptDict: IPXS_PDFVariant; 
                                 out bRes: WordBool): HResult; stdcall;
    function GetInfoText(const pDoc: IPXC_Document; nTextType: PXC_GCHTextType; out sStr: WideString): HResult; stdcall;
    function GetCryptInterface(const pDoc: IPXC_Document; out pCrypt: IPXS_CryptInterface): HResult; stdcall;
    function CreateNewPolicy(hParentWnd: HANDLE_T; out pPolicyData: IPXC_SecurityPolicy): HResult; stdcall;
    function UpdatePolicy(hParentWnd: HANDLE_T; const pPolicyData: IPXC_SecurityPolicy): HResult; stdcall;
    function LoadPolicy(const pSource: IStream; out pPolicyData: IPXC_SecurityPolicy): HResult; stdcall;
    function ApplyPolicy(hParentWnd: HANDLE_T; const pPolicyData: IPXC_SecurityPolicy; 
                         const pDocument: IPXC_Document): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXS_CryptInterface
// Flags:     (128) NonExtensible
// GUID:      {2CB3F936-F5E7-4A09-9026-76E17034C8D7}
// *********************************************************************//
  IPXS_CryptInterface = interface(IUnknown)
    ['{2CB3F936-F5E7-4A09-9026-76E17034C8D7}']
    function GetStreamDecoder(var stParams: PXS_StreamEncoderParamStruct; 
                              out pDecoder: IPXS_pdfStreamCoder): HResult; stdcall;
    function GetStreamEncoder(var stParams: PXS_StreamEncoderParamStruct; 
                              out pEncoder: IPXS_pdfStreamCoder): HResult; stdcall;
    function GetStringDecoder(nObjNumber: ULONG_T; nRevNumber: ULONG_T; 
                              out pDecoder: IPXS_pdfStringCoder): HResult; stdcall;
    function GetStringEncoder(nObjNumber: ULONG_T; nRevNumber: ULONG_T; 
                              out pEncoder: IPXS_pdfStringCoder): HResult; stdcall;
    function FillEncryptDict(const pDoc: IPXS_Document; const pEncryptDict: IPXS_PDFVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_SecurityPolicy
// Flags:     (128) NonExtensible
// GUID:      {624E5754-0E96-4ADB-932E-1365CAB8D529}
// *********************************************************************//
  IPXC_SecurityPolicy = interface(IUnknown)
    ['{624E5754-0E96-4ADB-932E-1365CAB8D529}']
    function Get_InfoTagsCount(out nCount: ULONG_T): HResult; stdcall;
    function Store(const pDest: IStream): HResult; stdcall;
    function GetInfoTag(nIndex: ULONG_T; out sID: WideString; out sTagName: WideString; 
                        out sTagValue: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_WatermarkParams
// Flags:     (0)
// GUID:      {0AC8022D-465E-47BB-BFFA-6362F8AAEBDA}
// *********************************************************************//
  IPXC_WatermarkParams = interface(IUnknown)
    ['{0AC8022D-465E-47BB-BFFA-6362F8AAEBDA}']
    function Get_WatermarkType(out nType: PXC_WatermarkType): HResult; stdcall;
    function Set_WatermarkType(nType: PXC_WatermarkType): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Set_Flags(nFlags: ULONG_T): HResult; stdcall;
    function Get_Text(out sText: WideString): HResult; stdcall;
    function Set_Text(const sText: WideString): HResult; stdcall;
    function Get_TextAlign(out nAlign: ULONG_T): HResult; stdcall;
    function Set_TextAlign(nAlign: ULONG_T): HResult; stdcall;
    function Get_Font(out ppFont: IPXC_Font): HResult; stdcall;
    function Set_Font(const ppFont: IPXC_Font): HResult; stdcall;
    function Get_FontName(out sFontName: WideString): HResult; stdcall;
    function Set_FontName(const sFontName: WideString): HResult; stdcall;
    function Get_FontSize(out nFontSize: Single): HResult; stdcall;
    function Set_FontSize(nFontSize: Single): HResult; stdcall;
    function Get_RenderMode(out nTextMode: PXC_TextRenderingMode): HResult; stdcall;
    function Set_RenderMode(nTextMode: PXC_TextRenderingMode): HResult; stdcall;
    function Get_FillColor(out pColor: IColor): HResult; stdcall;
    function Set_FillColor(const pColor: IColor): HResult; stdcall;
    function Get_StrokeColor(out pColor: IColor): HResult; stdcall;
    function Set_StrokeColor(const pColor: IColor): HResult; stdcall;
    function Get_StrokeWidth(out nStrokeWidth: Single): HResult; stdcall;
    function Set_StrokeWidth(nStrokeWidth: Single): HResult; stdcall;
    function Get_UnderlineMode(out nUnderline: ULONG_T): HResult; stdcall;
    function Set_UnderlineMode(nUnderline: ULONG_T): HResult; stdcall;
    function Get_ImageFile(out sFileName: WideString): HResult; stdcall;
    function Set_ImageFile(const sFileName: WideString): HResult; stdcall;
    function Get_ImagePage(out nPageNum: ULONG_T): HResult; stdcall;
    function Set_ImagePage(nPageNum: ULONG_T): HResult; stdcall;
    function Get_ImageSize(out stImageSize: PXC_Size): HResult; stdcall;
    function Set_ImageSize(stImageSize: PUserType17): HResult; stdcall;
    function Get_Rotation(out nRotation: Single): HResult; stdcall;
    function Set_Rotation(nRotation: Single): HResult; stdcall;
    function Get_Opacity(out nOpacity: Single): HResult; stdcall;
    function Set_Opacity(nOpacity: Single): HResult; stdcall;
    function Get_Scale(out nScale: Single): HResult; stdcall;
    function Set_Scale(nScale: Single): HResult; stdcall;
    function Get_HOffset(out nHOffset: Single): HResult; stdcall;
    function Set_HOffset(nHOffset: Single): HResult; stdcall;
    function Get_VOffset(out nVOffset: Single): HResult; stdcall;
    function Set_VOffset(nVOffset: Single): HResult; stdcall;
    function Get_HAlign(out nHAlign: ULONG_T): HResult; stdcall;
    function Set_HAlign(nHAlign: ULONG_T): HResult; stdcall;
    function Get_VAlign(out nVAlign: ULONG_T): HResult; stdcall;
    function Set_VAlign(nVAlign: ULONG_T): HResult; stdcall;
    function Get_RangeFlags(out nRangeFlags: ULONG_T): HResult; stdcall;
    function Set_RangeFlags(nRangeFlags: ULONG_T): HResult; stdcall;
    function Get_Start(out nStart: Integer): HResult; stdcall;
    function Set_Start(nStart: Integer): HResult; stdcall;
    function Get_End_(out nEnd: Integer): HResult; stdcall;
    function Set_End_(nEnd: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_PageContentCallback
// Flags:     (128) NonExtensible
// GUID:      {184C9EB7-4681-4D3A-B0C3-76E162D09171}
// *********************************************************************//
  IPXC_PageContentCallback = interface(IUnknown)
    ['{184C9EB7-4681-4D3A-B0C3-76E162D09171}']
    function GetPageContent(const pPage: IPXC_Page; out pContent: IPXC_Content): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_ContentCreator
// Flags:     (128) NonExtensible
// GUID:      {4B22F741-E083-463F-A28B-60E4D9750AA5}
// *********************************************************************//
  IPXC_ContentCreator = interface(IUnknown)
    ['{4B22F741-E083-463F-A28B-60E4D9750AA5}']
    function Attach(const pContent: IPXC_Content): HResult; stdcall;
    function Detach(out ppContent: IPXC_Content): HResult; stdcall;
    function MoveTo(nX: Double; nY: Double): HResult; stdcall;
    function LineTo(nX: Double; nY: Double): HResult; stdcall;
    function CurveTo(nX0: Double; nY0: Double; nX1: Double; nY1: Double; nX2: Double; nY2: Double): HResult; stdcall;
    function ConicTo(nX0: Double; nY0: Double; nX1: Double; nY1: Double): HResult; stdcall;
    function Rect(nLeft: Double; nBottom: Double; nRight: Double; nTop: Double): HResult; stdcall;
    function PolyCurve(var pCoords: Double; nCount: ULONG_T; bFirstMove: WordBool): HResult; stdcall;
    function Polygon(var pCoords: Double; nCount: ULONG_T; bFirstMove: WordBool): HResult; stdcall;
    function PolyCurveSA(pCoords: PSafeArray; bFirstMove: WordBool): HResult; stdcall;
    function PolygonSA(pCoords: PSafeArray; bFirstMove: WordBool): HResult; stdcall;
    function RoundRect(nLeft: Double; nBottom: Double; nRight: Double; nTop: Double; 
                       nEllipseW: Double; nEllipseH: Double): HResult; stdcall;
    function RoundRectEx(var pRect: PXC_Rect; var pLeftBottom: PXC_Size; 
                         var pRightBottom: PXC_Size; var pRightTop: PXC_Size; var pLeftTop: PXC_Size): HResult; stdcall;
    function Ellipse(nLeft: Double; nBottom: Double; nRight: Double; nTop: Double): HResult; stdcall;
    function Circle(nCenterX: Double; nCenterY: Double; nRadius: Double): HResult; stdcall;
    function Arc(var pRect: PXC_Rect; nAlpha: Double; nBeta: Double; bMove: WordBool): HResult; stdcall;
    function Arc2(var pRect: PXC_Rect; nX1: Double; nY1: Double; nX2: Double; nY2: Double; 
                  bMove: WordBool): HResult; stdcall;
    function CircleArc(nCenterX: Double; nCenterY: Double; nRadius: Double; nAlpha: Double; 
                       nBeta: Double; bMove: WordBool): HResult; stdcall;
    function Chord(var pRect: PXC_Rect; nAlpha: Double; nBeta: Double): HResult; stdcall;
    function Chord2(var pRect: PXC_Rect; nX1: Double; nY1: Double; nX2: Double; nY2: Double): HResult; stdcall;
    function Pie(var pRect: PXC_Rect; nAlpha: Double; nBeta: Double): HResult; stdcall;
    function Pie2(var pRect: PXC_Rect; nX1: Double; nY1: Double; nX2: Double; nY2: Double): HResult; stdcall;
    function ClosePath: HResult; stdcall;
    function FillPath(Close: WordBool; stroke: WordBool; rule: PXC_FillRule): HResult; stdcall;
    function StrokePath(Close: WordBool): HResult; stdcall;
    function ClipPath(rule: PXC_FillRule; bEndPath: WordBool): HResult; stdcall;
    function SetFont(const pFont: IPXC_Font): HResult; stdcall;
    function SetFontHandle(nFontHandle: ULONG_T): HResult; stdcall;
    function SetFontSize(nFontSize: Double): HResult; stdcall;
    function SetTextRenderMode(nTextRenderingMode: PXC_TextRenderingMode): HResult; stdcall;
    function SetTextScale(nTextScale: Double): HResult; stdcall;
    function SetCharSpace(nCharSpace: Double): HResult; stdcall;
    function SetWordSpace(nWordSpace: Double): HResult; stdcall;
    function SetTextMatrix(var pTextMatrix: PXC_Matrix): HResult; stdcall;
    function ShowTextLine(nX: Double; nY: Double; pText: PWideChar; nTextLen: Integer; 
                          nFlags: ULONG_T): HResult; stdcall;
    function CalcTextSize(nFontSize: Double; pText: PWideChar; out pWidth: Double; 
                          out pHeight: Double; nTextLen: Integer): HResult; stdcall;
    function ShowTextBlock(pText: PWideChar; var pRect: PXC_Rect; var pClip: PXC_Rect; 
                           nFlags: ULONG_T; nTextLen: Integer; const pCharFmt: IPXC_CharFormat; 
                           const pParaFmt: IPXC_ParaFormat; 
                           const pCallbacks: IPXC_DrawTextCallbacks; out pTextBounds: PXC_Rect): HResult; stdcall;
    function TranslateCS(nDX: Double; nDY: Double): HResult; stdcall;
    function ScaleCS(nSX: Double; nSY: Double): HResult; stdcall;
    function RotateCS(nAngle: Double): HResult; stdcall;
    function ConcatCS(var pMatrix: PXC_Matrix): HResult; stdcall;
    function SetLineWidth(nWidth: Double): HResult; stdcall;
    function SetMiterLimit(nMiterLimit: Double): HResult; stdcall;
    function SetLineJoin(nLineJoin: PXC_LineJoin): HResult; stdcall;
    function SetLineCap(nLineCap: PXC_LineCap): HResult; stdcall;
    function SetDash(nB: Double; nG: Double; nOffset: Double): HResult; stdcall;
    function SetDashEx(var pArr: Double; nCount: ULONG_T; nOffset: Double): HResult; stdcall;
    function SetDashCA(pArr: PSafeArray; nOffset: Double): HResult; stdcall;
    function NoDash: HResult; stdcall;
    function SetStrokeAdjust(bAdjust: WordBool): HResult; stdcall;
    function SetFlatnessTolerance(nValue: Double): HResult; stdcall;
    function SetRenderingIntent(ri: PXC_RenderingIntent): HResult; stdcall;
    function SetBlendMode(nBM: PXC_BlendMode): HResult; stdcall;
    function SetColor(const pFillColor: IColor; const pStrokeColor: IColor): HResult; stdcall;
    function SetColor2(const pFillColor: IPXC_Color; const pStrokeColor: IPXC_Color): HResult; stdcall;
    function SetStrokeColorRGB(nRGBColor: ULONG_T): HResult; stdcall;
    function SetFillColorRGB(nRGBColor: ULONG_T): HResult; stdcall;
    function SetColorRGB(nRGBColor: ULONG_T): HResult; stdcall;
    function SetFillAlpha(nAlpha: Double): HResult; stdcall;
    function SetStrokeAlpha(nAlpha: Double): HResult; stdcall;
    function SetPattern(const pPattern: IPXC_Pattern; bFill: WordBool; const pColor: IPXC_Color): HResult; stdcall;
    function SetPattern2(const pPattern: IPXC_Pattern; bFill: WordBool; const pColor: IColor): HResult; stdcall;
    function SetPatternRGB(const pPattern: IPXC_Pattern; bFill: WordBool; nColor: ULONG_T): HResult; stdcall;
    function SetShadeAsPattern(const pShade: IPXC_Shading; bFill: WordBool): HResult; stdcall;
    function PlaceImage(const pImage: IPXC_Image): HResult; stdcall;
    function PlaceXForm(const pXForm: IPXC_XForm; pRefName: PWideChar): HResult; stdcall;
    function Shade(const pShade: IPXC_Shading): HResult; stdcall;
    function SaveState: HResult; stdcall;
    function RestoreState: HResult; stdcall;
    function AddPlace(pTag: PWideChar; const pParams: IPXS_PDFVariant): HResult; stdcall;
    function StartContainer(pTag: PWideChar; const pParams: IPXS_PDFVariant): HResult; stdcall;
    function EndContainer: HResult; stdcall;
    function SetSMask(const pSoftMask: IPXC_SoftMask): HResult; stdcall;
    function ResetAllStatesToDefault: HResult; stdcall;
    function Reset: HResult; stdcall;
    function PlaceImageEx(const pImage: IPXC_Image; var pRect: PXC_Rect; nFlags: ULONG_T): HResult; stdcall;
    function PlaceXFormEx(const pXForm: IPXC_XForm; var pRect: PXC_Rect; pRefName: PWideChar; 
                          nFlags: ULONG_T): HResult; stdcall;
    function ShowGlyphs(var pGlyphs: Word; var pOffsets: PXC_Point; nCount: ULONG_T): HResult; stdcall;
    function Get_CTM(out Matrix: PXC_Matrix): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_CharFormat
// Flags:     (128) NonExtensible
// GUID:      {677E6023-931C-4954-A8B3-FE0508EB440B}
// *********************************************************************//
  IPXC_CharFormat = interface(IUnknown)
    ['{677E6023-931C-4954-A8B3-FE0508EB440B}']
    function Get_Mask(out pVal: ULONG_T): HResult; stdcall;
    function Set_Mask(pVal: ULONG_T): HResult; stdcall;
    function ModifyMask(nAdd: ULONG_T; nRemove: ULONG_T): HResult; stdcall;
    function Get_Font(out ppVal: IPXC_Font): HResult; stdcall;
    function Set_Font(const ppVal: IPXC_Font): HResult; stdcall;
    function Get_FontSize(out pVal: Double): HResult; stdcall;
    function Set_FontSize(pVal: Double): HResult; stdcall;
    function Get_BkColor(out ppVal: IColor): HResult; stdcall;
    function Set_BkColor(const ppVal: IColor): HResult; stdcall;
    function Get_FColor(out ppVal: IColor): HResult; stdcall;
    function Set_FColor(const ppVal: IColor): HResult; stdcall;
    function Get_SColor(out ppVal: IColor): HResult; stdcall;
    function Set_SColor(const ppVal: IColor): HResult; stdcall;
    function Get_Effects(out pVal: ULONG_T): HResult; stdcall;
    function Set_Effects(pVal: ULONG_T): HResult; stdcall;
    function Get_HScale(out pVal: Double): HResult; stdcall;
    function Set_HScale(pVal: Double): HResult; stdcall;
    function Get_VScale(out pVal: Double): HResult; stdcall;
    function Set_VScale(pVal: Double): HResult; stdcall;
    function Get_CharSpacing(out pVal: Double): HResult; stdcall;
    function Set_CharSpacing(pVal: Double): HResult; stdcall;
    function Get_OffsetY(out pVal: Double): HResult; stdcall;
    function Set_OffsetY(pVal: Double): HResult; stdcall;
    function Get_StrokeWidth(out pVal: Double): HResult; stdcall;
    function Set_StrokeWidth(pVal: Double): HResult; stdcall;
    function Get_RenderingMode(out pVal: PXC_TextRenderingMode): HResult; stdcall;
    function Set_RenderingMode(pVal: PXC_TextRenderingMode): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_ParaFormat
// Flags:     (128) NonExtensible
// GUID:      {779A8B53-D3C0-444F-8BD2-8A4F53DEC172}
// *********************************************************************//
  IPXC_ParaFormat = interface(IUnknown)
    ['{779A8B53-D3C0-444F-8BD2-8A4F53DEC172}']
    function Get_Mask(out pVal: ULONG_T): HResult; stdcall;
    function Set_Mask(pVal: ULONG_T): HResult; stdcall;
    function ModifyMask(nAdd: ULONG_T; nRemove: ULONG_T): HResult; stdcall;
    function Get_Align(out pVal: PXC_TextJustification): HResult; stdcall;
    function Set_Align(pVal: PXC_TextJustification): HResult; stdcall;
    function Get_StartIndent(out pVal: Double): HResult; stdcall;
    function Set_StartIndent(pVal: Double): HResult; stdcall;
    function Get_LineSpacing(out pVal: Double): HResult; stdcall;
    function Set_LineSpacing(pVal: Double): HResult; stdcall;
    function Get_MarginLeft(out pVal: Double): HResult; stdcall;
    function Set_MarginLeft(pVal: Double): HResult; stdcall;
    function Get_MarginRight(out pVal: Double): HResult; stdcall;
    function Set_MarginRight(pVal: Double): HResult; stdcall;
    function Get_MarginTop(out pVal: Double): HResult; stdcall;
    function Set_MarginTop(pVal: Double): HResult; stdcall;
    function Get_MarginBottom(out pVal: Double): HResult; stdcall;
    function Set_MarginBottom(pVal: Double): HResult; stdcall;
    function Get_Widows(out pVal: Integer): HResult; stdcall;
    function Set_Widows(pVal: Integer): HResult; stdcall;
    function Get_Orphans(out pVal: Integer): HResult; stdcall;
    function Set_Orphans(pVal: Integer): HResult; stdcall;
    function Get_DefTab(out pVal: Double): HResult; stdcall;
    function Set_DefTab(pVal: Double): HResult; stdcall;
    function Get_Radix(out pVal: Double): HResult; stdcall;
    function Set_Radix(pVal: Double): HResult; stdcall;
    function Get_TabStops(out ppVal: IPXC_TextTabStops): HResult; stdcall;
    function Set_TabStops(const ppVal: IPXC_TextTabStops): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_TextTabStops
// Flags:     (128) NonExtensible
// GUID:      {9709B958-8DDD-4682-90A5-85A66F5399C8}
// *********************************************************************//
  IPXC_TextTabStops = interface(IUnknown)
    ['{9709B958-8DDD-4682-90A5-85A66F5399C8}']
    function Get_Item(nIndex: ULONG_T; out ppItem: IPXC_TabStopFormat): HResult; stdcall;
    function Get_Count(out pCount: ULONG_T): HResult; stdcall;
    function Insert(const pItem: IPXC_TabStopFormat; nIndex: ULONG_T): HResult; stdcall;
    function Remove(nIndex: ULONG_T): HResult; stdcall;
    function Clear: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_TabStopFormat
// Flags:     (128) NonExtensible
// GUID:      {944DF33B-5E14-469D-9EF9-3A6524439A6C}
// *********************************************************************//
  IPXC_TabStopFormat = interface(IUnknown)
    ['{944DF33B-5E14-469D-9EF9-3A6524439A6C}']
    function Get_Pos(out pPos: Double): HResult; stdcall;
    function Set_Pos(pPos: Double): HResult; stdcall;
    function Get_Align(out pAlign: PXC_TabStopAlign): HResult; stdcall;
    function Set_Align(pAlign: PXC_TabStopAlign): HResult; stdcall;
    function Get_LeaderType(out pLeaderType: PXC_TabStopLeaderType): HResult; stdcall;
    function Set_LeaderType(pLeaderType: PXC_TabStopLeaderType): HResult; stdcall;
    function Get_LeaderContent(out ppLeaderContent: WideString): HResult; stdcall;
    function Set_LeaderContent(const ppLeaderContent: WideString): HResult; stdcall;
    function Get_LeaderAlign(out pAlign: Integer): HResult; stdcall;
    function Set_LeaderAlign(pAlign: Integer): HResult; stdcall;
    function Get_LeaderContentWidth(out pContentWidth: Double): HResult; stdcall;
    function Set_LeaderContentWidth(pContentWidth: Double): HResult; stdcall;
    function Get_LeaderRuleThickness(out pRuleThickness: Double): HResult; stdcall;
    function Set_LeaderRuleThickness(pRuleThickness: Double): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_DrawTextCallbacks
// Flags:     (128) NonExtensible
// GUID:      {8AA13E2F-E78D-4B97-A189-6F6A72DA44A5}
// *********************************************************************//
  IPXC_DrawTextCallbacks = interface(IUnknown)
    ['{8AA13E2F-E78D-4B97-A189-6F6A72DA44A5}']
    function OnGetNewRect(const pCC: IPXC_ContentCreator; out pRect: PXC_Rect; var pFlags: ULONG_T; 
                          out pClip: PXC_Rect): HResult; stdcall;
    function OnGetNewText(const pCC: IPXC_ContentCreator; out ppText: PWideChar; 
                          out pTextLen: Integer; out pFlags: ULONG_T): HResult; stdcall;
    function OnEndPara(const pCC: IPXC_ContentCreator; nIndex: Integer; pID: PWideChar; 
                       pText: PWideChar; nTextLen: Integer; const pLines: IPXC_Rects): HResult; stdcall;
    function OnFinal(const pCC: IPXC_ContentCreator): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Rects
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {984D8349-2159-4CF7-BEB1-713EAB511205}
// *********************************************************************//
  IPXC_Rects = interface(IDispatch)
    ['{984D8349-2159-4CF7-BEB1-713EAB511205}']
    function Get_Item(nIndex: ULONG_T): PXC_Rect; safecall;
    procedure Set_Item(nIndex: ULONG_T; stItem: PUserType1); safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(var stItems: PXC_Rect; nCount: ULONG_T; nIndex: ULONG_T); safecall;
    procedure InsertFrom(const pSrc: IPXC_Rects; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXC_Rects); safecall;
    function Clone: IPXC_Rects; safecall;
    // Skipped Property "Item"
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXC_RectsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {984D8349-2159-4CF7-BEB1-713EAB511205}
// *********************************************************************//
  IPXC_RectsDisp = dispinterface
    ['{984D8349-2159-4CF7-BEB1-713EAB511205}']
    function Item(nIndex: ULONG_T): {NOT_OLEAUTO(PXC_Rect)}OleVariant; dispid 0;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Insert(var stItems: {NOT_OLEAUTO(PXC_Rect)}OleVariant; nCount: ULONG_T; 
                     nIndex: ULONG_T); dispid 1610743813;
    procedure InsertFrom(const pSrc: IPXC_Rects; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); dispid 1610743814;
    procedure CopyFrom(const pSrc: IPXC_Rects); dispid 1610743815;
    function Clone: IPXC_Rects; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IPXC_Pattern
// Flags:     (128) NonExtensible
// GUID:      {C0AE89AF-0A07-494A-9EF1-CCFB8348B8F3}
// *********************************************************************//
  IPXC_Pattern = interface(IUnknown)
    ['{C0AE89AF-0A07-494A-9EF1-CCFB8348B8F3}']
    function Get_type_(out nType: PXC_PatternType): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_Handle(out nHandle: ULONG_T): HResult; stdcall;
    function Get_PaintType(out nPaintType: PXC_PatternPaintType): HResult; stdcall;
    function Get_TilingType(out nTilingType: PXC_PatternTilingType): HResult; stdcall;
    function Get_Shading(out pShading: IPXC_Shading): HResult; stdcall;
    function GetBBox(out stBBox: PXC_Rect): HResult; stdcall;
    function GetMatrix(out stMatrix: PXC_Matrix): HResult; stdcall;
    function GetSteps(out nXStep: Double; out nYStep: Double): HResult; stdcall;
    function GetContent(nKMode: PXC_ContentAccessMode; out pContent: IPXC_Content): HResult; stdcall;
    function SetContent(const pContent: IPXC_Content; nFlags: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Shading
// Flags:     (128) NonExtensible
// GUID:      {E6EC30B6-936A-4511-B42E-91CB1C1D4FB8}
// *********************************************************************//
  IPXC_Shading = interface(IUnknown)
    ['{E6EC30B6-936A-4511-B42E-91CB1C1D4FB8}']
    function Get_type_(out nType: PXC_ShadingType): HResult; stdcall;
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_Handle(out nHandle: ULONG_T): HResult; stdcall;
    function Get_ColorSpace(out pSpace: IPXC_ColorSpace): HResult; stdcall;
    function Get_Background(out pColor: IPXC_Color): HResult; stdcall;
    function Get_AntiAlias(out bAntiAlias: WordBool): HResult; stdcall;
    function Get_FunctionsCount(out nNumFunctions: ULONG_T): HResult; stdcall;
    function Get_Function_(nFuncIdx: ULONG_T; out pFunction: IPXC_Function): HResult; stdcall;
    function GetBBox(out stBBox: PXC_Rect): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_FontInfoCallback
// Flags:     (128) NonExtensible
// GUID:      {BEAE11BB-3542-401C-86F8-C82B3EE632DC}
// *********************************************************************//
  IPXC_FontInfoCallback = interface(IUnknown)
    ['{BEAE11BB-3542-401C-86F8-C82B3EE632DC}']
    function SetProgressMax(nMax: Double): HResult; stdcall;
    function PutProgressPos(nPos: Double): HResult; stdcall;
    function AddFont(hObjNumber: ULONG_T; const pInfo: IPXC_DocFontsInfo): HResult; stdcall;
    function GetCanceled(out bCanceled: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_DocSrcInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DF68A980-B679-48CF-ADF3-951AD4BD343B}
// *********************************************************************//
  IPXC_DocSrcInfo = interface(IDispatch)
    ['{DF68A980-B679-48CF-ADF3-951AD4BD343B}']
    function Get_DispTitle: WideString; safecall;
    function Get_DispFileTitle: WideString; safecall;
    function Get_DispFileName: WideString; safecall;
    function Get_ActualFileName: WideString; safecall;
    function Get_FileName: IAFS_Name; safecall;
    function Get_CustDispTitle: WideString; safecall;
    procedure Set_CustDispTitle(const sVal: WideString); safecall;
    function Get_CustDispFileName: WideString; safecall;
    procedure Set_CustDispFileName(const sVal: WideString); safecall;
    function Get_CustFileName: WideString; safecall;
    procedure Set_CustFileName(const sVal: WideString); safecall;
    function Get_TempFileName: WideString; safecall;
    function Get_File_: IAFS_File; safecall;
    function Get_IsDirty: WordBool; safecall;
    property DispTitle: WideString read Get_DispTitle;
    property DispFileTitle: WideString read Get_DispFileTitle;
    property DispFileName: WideString read Get_DispFileName;
    property ActualFileName: WideString read Get_ActualFileName;
    property FileName: IAFS_Name read Get_FileName;
    property CustDispTitle: WideString read Get_CustDispTitle write Set_CustDispTitle;
    property CustDispFileName: WideString read Get_CustDispFileName write Set_CustDispFileName;
    property CustFileName: WideString read Get_CustFileName write Set_CustFileName;
    property TempFileName: WideString read Get_TempFileName;
    property File_: IAFS_File read Get_File_;
    property IsDirty: WordBool read Get_IsDirty;
  end;

// *********************************************************************//
// DispIntf:  IPXC_DocSrcInfoDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DF68A980-B679-48CF-ADF3-951AD4BD343B}
// *********************************************************************//
  IPXC_DocSrcInfoDisp = dispinterface
    ['{DF68A980-B679-48CF-ADF3-951AD4BD343B}']
    property DispTitle: WideString readonly dispid 1610743808;
    property DispFileTitle: WideString readonly dispid 1610743809;
    property DispFileName: WideString readonly dispid 1610743810;
    property ActualFileName: WideString readonly dispid 1610743811;
    property FileName: IAFS_Name readonly dispid 1610743812;
    property CustDispTitle: WideString dispid 1610743813;
    property CustDispFileName: WideString dispid 1610743815;
    property CustFileName: WideString dispid 1610743817;
    property TempFileName: WideString readonly dispid 1610743819;
    property File_: IAFS_File readonly dispid 1610743820;
    property IsDirty: WordBool readonly dispid 1610743821;
  end;

// *********************************************************************//
// Interface: IPXC_GradientStops
// Flags:     (128) NonExtensible
// GUID:      {7A75EA1A-BFBB-4043-A122-EDAF392CB95A}
// *********************************************************************//
  IPXC_GradientStops = interface(IUnknown)
    ['{7A75EA1A-BFBB-4043-A122-EDAF392CB95A}']
    function Reset: HResult; stdcall;
    function AddStop(nPos: Double; const pColor: IPXC_Color): HResult; stdcall;
    function AddStop2(nPos: Double; const pColor: IColor): HResult; stdcall;
    function AddStopRGB(nPos: Double; nColor: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_HeaderAndFooterParams
// Flags:     (0)
// GUID:      {72C84745-5C1F-4F89-AA4A-3B8AADC72CA7}
// *********************************************************************//
  IPXC_HeaderAndFooterParams = interface(IUnknown)
    ['{72C84745-5C1F-4F89-AA4A-3B8AADC72CA7}']
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Set_Flags(nFlags: ULONG_T): HResult; stdcall;
    function Get_Font(out ppFont: IPXC_Font): HResult; stdcall;
    function Set_Font(const ppFont: IPXC_Font): HResult; stdcall;
    function Get_FontName(out sFontName: WideString): HResult; stdcall;
    function Set_FontName(const sFontName: WideString): HResult; stdcall;
    function Get_FontSize(out nFontSize: Single): HResult; stdcall;
    function Set_FontSize(nFontSize: Single): HResult; stdcall;
    function Get_FillColor(out pColor: IColor): HResult; stdcall;
    function Set_FillColor(const pColor: IColor): HResult; stdcall;
    function Get_UnderlineMode(out nUnderline: ULONG_T): HResult; stdcall;
    function Set_UnderlineMode(nUnderline: ULONG_T): HResult; stdcall;
    function Get_LeftHeaderText(out sLeftHeaderText: WideString): HResult; stdcall;
    function Set_LeftHeaderText(const sLeftHeaderText: WideString): HResult; stdcall;
    function Get_CenterHeaderText(out sCenterHeaderText: WideString): HResult; stdcall;
    function Set_CenterHeaderText(const sCenterHeaderText: WideString): HResult; stdcall;
    function Get_RightHeaderText(out sRightHeaderText: WideString): HResult; stdcall;
    function Set_RightHeaderText(const sRightHeaderText: WideString): HResult; stdcall;
    function Get_LeftFooterText(out sLeftFooterText: WideString): HResult; stdcall;
    function Set_LeftFooterText(const sLeftFooterText: WideString): HResult; stdcall;
    function Get_CenterFooterText(out sCenterFooterText: WideString): HResult; stdcall;
    function Set_CenterFooterText(const sCenterFooterText: WideString): HResult; stdcall;
    function Get_RightFooterText(out sRightFooterText: WideString): HResult; stdcall;
    function Set_RightFooterText(const sRightFooterText: WideString): HResult; stdcall;
    function Get_TopMargin(out nTopMargin: Single): HResult; stdcall;
    function Set_TopMargin(nTopMargin: Single): HResult; stdcall;
    function Get_BottomMargin(out nBottomMargin: Single): HResult; stdcall;
    function Set_BottomMargin(nBottomMargin: Single): HResult; stdcall;
    function Get_LeftMargin(out nLeftMargin: Single): HResult; stdcall;
    function Set_LeftMargin(nLeftMargin: Single): HResult; stdcall;
    function Get_RightMargin(out nRightMargin: Single): HResult; stdcall;
    function Set_RightMargin(nRightMargin: Single): HResult; stdcall;
    function Get_DateFormat(out sDateFormat: WideString): HResult; stdcall;
    function Set_DateFormat(const sDateFormat: WideString): HResult; stdcall;
    function Get_PageNumberFormat(out sPageNumberFormate: WideString): HResult; stdcall;
    function Set_PageNumberFormat(const sPageNumberFormate: WideString): HResult; stdcall;
    function Get_StartPageNumber(out nStartPageNumber: Integer): HResult; stdcall;
    function Set_StartPageNumber(nStartPageNumber: Integer): HResult; stdcall;
    function Get_RangeFlags(out nRangeFlags: ULONG_T): HResult; stdcall;
    function Set_RangeFlags(nRangeFlags: ULONG_T): HResult; stdcall;
    function Get_Start(out nStart: Integer): HResult; stdcall;
    function Set_Start(nStart: Integer): HResult; stdcall;
    function Get_End_(out nEnd: Integer): HResult; stdcall;
    function Set_End_(nEnd: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_BackgroundParams
// Flags:     (0)
// GUID:      {6CB09405-4536-4F1F-8ABD-19E41A76A57F}
// *********************************************************************//
  IPXC_BackgroundParams = interface(IUnknown)
    ['{6CB09405-4536-4F1F-8ABD-19E41A76A57F}']
    function Get_BackgroundType(out nType: PXC_BackgroundType): HResult; stdcall;
    function Set_BackgroundType(nType: PXC_BackgroundType): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Set_Flags(nFlags: ULONG_T): HResult; stdcall;
    function Get_FillColor(out pColor: IColor): HResult; stdcall;
    function Set_FillColor(const pColor: IColor): HResult; stdcall;
    function Get_BackgroundFile(out sFileName: WideString): HResult; stdcall;
    function Set_BackgroundFile(const sFileName: WideString): HResult; stdcall;
    function Get_BackgroundPage(out nPageNum: ULONG_T): HResult; stdcall;
    function Set_BackgroundPage(nPageNum: ULONG_T): HResult; stdcall;
    function Get_BackgroundScale(out nScale: Single): HResult; stdcall;
    function Set_BackgroundScale(nScale: Single): HResult; stdcall;
    function Get_Rotation(out nRotation: Single): HResult; stdcall;
    function Set_Rotation(nRotation: Single): HResult; stdcall;
    function Get_Opacity(out nOpacity: Single): HResult; stdcall;
    function Set_Opacity(nOpacity: Single): HResult; stdcall;
    function Get_Scale(out nScale: Single): HResult; stdcall;
    function Set_Scale(nScale: Single): HResult; stdcall;
    function Get_HOffset(out nHOffset: Single): HResult; stdcall;
    function Set_HOffset(nHOffset: Single): HResult; stdcall;
    function Get_VOffset(out nVOffset: Single): HResult; stdcall;
    function Set_VOffset(nVOffset: Single): HResult; stdcall;
    function Get_HAlign(out nHAlign: ULONG_T): HResult; stdcall;
    function Set_HAlign(nHAlign: ULONG_T): HResult; stdcall;
    function Get_VAlign(out nVAlign: ULONG_T): HResult; stdcall;
    function Set_VAlign(nVAlign: ULONG_T): HResult; stdcall;
    function Get_RangeFlags(out nRangeFlags: ULONG_T): HResult; stdcall;
    function Set_RangeFlags(nRangeFlags: ULONG_T): HResult; stdcall;
    function Get_Start(out nStart: Integer): HResult; stdcall;
    function Set_Start(nStart: Integer): HResult; stdcall;
    function Get_End_(out nEnd: Integer): HResult; stdcall;
    function Set_End_(nEnd: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_BatesNumberingParams
// Flags:     (0)
// GUID:      {D90E561A-EFA3-4AF9-9866-C079CA3B9189}
// *********************************************************************//
  IPXC_BatesNumberingParams = interface(IPXC_HeaderAndFooterParams)
    ['{D90E561A-EFA3-4AF9-9866-C079CA3B9189}']
    function Get_NumberOfDigits(out nNumberOfDigits: ULONG_T): HResult; stdcall;
    function Set_NumberOfDigits(nNumberOfDigits: ULONG_T): HResult; stdcall;
    function Get_StartNumber(out nStartNumber: ULONG_T): HResult; stdcall;
    function Set_StartNumber(nStartNumber: ULONG_T): HResult; stdcall;
    function Get_Suffix(out sSuffix: WideString): HResult; stdcall;
    function Set_Suffix(const sSuffix: WideString): HResult; stdcall;
    function Get_Prefix(out sPrefix: WideString): HResult; stdcall;
    function Set_Prefix(const sPrefix: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_FontEnumCallback
// Flags:     (128) NonExtensible
// GUID:      {720C8083-9FDD-42C3-AEA5-A1B8228487D9}
// *********************************************************************//
  IPXC_FontEnumCallback = interface(IUnknown)
    ['{720C8083-9FDD-42C3-AEA5-A1B8228487D9}']
    function OnNewFont(const pFont: IPXC_Font; out bCancel: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_DocAuthCallback
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {84B23B1A-25E5-46A4-90ED-E4C8B678F535}
// *********************************************************************//
  IPXC_DocAuthCallback = interface(IDispatch)
    ['{84B23B1A-25E5-46A4-90ED-E4C8B678F535}']
    procedure AuthDoc(const pDoc: IPXC_Document; nFlags: ULONG_T); safecall;
  end;

// *********************************************************************//
// DispIntf:  IPXC_DocAuthCallbackDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {84B23B1A-25E5-46A4-90ED-E4C8B678F535}
// *********************************************************************//
  IPXC_DocAuthCallbackDisp = dispinterface
    ['{84B23B1A-25E5-46A4-90ED-E4C8B678F535}']
    procedure AuthDoc(const pDoc: IPXC_Document; nFlags: ULONG_T); dispid 1610743808;
  end;

// *********************************************************************//
// Interface: IPXC_Action_Goto
// Flags:     (128) NonExtensible
// GUID:      {6477DAFF-E612-49E5-BD4A-869AA53E5CD9}
// *********************************************************************//
  IPXC_Action_Goto = interface(IPXC_Action)
    ['{6477DAFF-E612-49E5-BD4A-869AA53E5CD9}']
    function Get_Dest(out pDest: PXC_Destination): HResult; stdcall;
    function Set_Dest(pDest: PUserType13): HResult; stdcall;
    function Get_DestName(out ppDestName: WideString): HResult; stdcall;
    function Set_DestName(const ppDestName: WideString): HResult; stdcall;
    function Get_IsNamedDest(out pVal: WordBool): HResult; stdcall;
    function Get_Target(out pFileSpec: IPXC_FileSpec): HResult; stdcall;
    function Set_Target(const pFileSpec: IPXC_FileSpec): HResult; stdcall;
    function Get_NewWindow(out pNewWindow: Integer): HResult; stdcall;
    function Set_NewWindow(pNewWindow: Integer): HResult; stdcall;
    function Get_TargetPath(out ppTargetPath: IPXC_GoToETargetPath): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_GoToETargetPath
// Flags:     (128) NonExtensible
// GUID:      {880B001D-010B-4304-BF49-8F5916B90309}
// *********************************************************************//
  IPXC_GoToETargetPath = interface(IUnknown)
    ['{880B001D-010B-4304-BF49-8F5916B90309}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out ppItem: IPXC_GoToETargetItem): HResult; stdcall;
    function Get__NewEnum(out ppUnkOut: IUnknown): HResult; stdcall;
    function Clear: HResult; stdcall;
    function InsertNew(nIndex: ULONG_T; out ppItem: IPXC_GoToETargetItem): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_GoToETargetItem
// Flags:     (128) NonExtensible
// GUID:      {5270603A-7826-4AAB-8135-3DD11AF91F5F}
// *********************************************************************//
  IPXC_GoToETargetItem = interface(IUnknown)
    ['{5270603A-7826-4AAB-8135-3DD11AF91F5F}']
    function Get_ToParent(out pToParent: WordBool): HResult; stdcall;
    function Set_ToParent(pToParent: WordBool): HResult; stdcall;
    function Get_PageNumber(out pPageNum: Integer): HResult; stdcall;
    function Set_PageNumber(pPageNum: Integer): HResult; stdcall;
    function Get_PageDestName(out ppDestName: WideString): HResult; stdcall;
    function Set_PageDestName(const ppDestName: WideString): HResult; stdcall;
    function Get_AnnotIndex(out pAnnotIndex: Integer): HResult; stdcall;
    function Set_AnnotIndex(pAnnotIndex: Integer): HResult; stdcall;
    function Get_AnnotName(out ppAnnotName: WideString): HResult; stdcall;
    function Set_AnnotName(const ppAnnotName: WideString): HResult; stdcall;
    function Get_FileName(out ppFileName: WideString): HResult; stdcall;
    function Set_FileName(const ppFileName: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Action_Launch
// Flags:     (128) NonExtensible
// GUID:      {7F2EB392-723A-4E6E-B6B2-52EABB6DC5BC}
// *********************************************************************//
  IPXC_Action_Launch = interface(IPXC_Action)
    ['{7F2EB392-723A-4E6E-B6B2-52EABB6DC5BC}']
    function Get_FileName(out ppFileName: WideString): HResult; stdcall;
    function Set_FileName(const ppFileName: WideString): HResult; stdcall;
    function Get_FileSpec(out ppFileSpec: IPXC_FileSpec): HResult; stdcall;
    function Set_FileSpec(const ppFileSpec: IPXC_FileSpec): HResult; stdcall;
    function Get_DefaultDir(out ppDefDir: WideString): HResult; stdcall;
    function Set_DefaultDir(const ppDefDir: WideString): HResult; stdcall;
    function Get_Operation(out ppOper: WideString): HResult; stdcall;
    function Set_Operation(const ppOper: WideString): HResult; stdcall;
    function Get_Parameters(out ppParams: WideString): HResult; stdcall;
    function Set_Parameters(const ppParams: WideString): HResult; stdcall;
    function Get_NewWindow(out pNewWindow: Integer): HResult; stdcall;
    function Set_NewWindow(pNewWindow: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Action_Thread
// Flags:     (128) NonExtensible
// GUID:      {CEC8A3C1-6778-4E6F-8C3A-4F48108C9EC4}
// *********************************************************************//
  IPXC_Action_Thread = interface(IPXC_Action)
    ['{CEC8A3C1-6778-4E6F-8C3A-4F48108C9EC4}']
  end;

// *********************************************************************//
// Interface: IPXC_Action_URI
// Flags:     (128) NonExtensible
// GUID:      {8D4C2647-45E2-4113-8087-DFA81A534109}
// *********************************************************************//
  IPXC_Action_URI = interface(IPXC_Action)
    ['{8D4C2647-45E2-4113-8087-DFA81A534109}']
    function Get_URI(out ppURI: WideString): HResult; stdcall;
    function Set_URI(const ppURI: WideString): HResult; stdcall;
    function Get_IsMap(out pIsMap: WordBool): HResult; stdcall;
    function Set_IsMap(pIsMap: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Action_Sound
// Flags:     (128) NonExtensible
// GUID:      {45F9CDD6-F503-45F6-92A1-6EF19CFF2556}
// *********************************************************************//
  IPXC_Action_Sound = interface(IPXC_Action)
    ['{45F9CDD6-F503-45F6-92A1-6EF19CFF2556}']
    function Get_Sound(out ppSound: IPXC_Sound): HResult; stdcall;
    function Set_Sound(const ppSound: IPXC_Sound): HResult; stdcall;
    function Get_Volume(out pVolume: Double): HResult; stdcall;
    function Set_Volume(pVolume: Double): HResult; stdcall;
    function Get_Flags(out pFlags: ULONG_T): HResult; stdcall;
    function Set_Flags(pFlags: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Sound
// Flags:     (128) NonExtensible
// GUID:      {41BF5FE9-C571-453C-B4FF-41F4455A6564}
// *********************************************************************//
  IPXC_Sound = interface(IUnknown)
    ['{41BF5FE9-C571-453C-B4FF-41F4455A6564}']
    function Get_PDFObject(out pVar: IPXS_PDFVariant): HResult; stdcall;
    function Get_Rate(out nRate: ULONG_T): HResult; stdcall;
    function Get_Channels(out nChannels: ULONG_T): HResult; stdcall;
    function Get_BitsPersSample(out nBPS: ULONG_T): HResult; stdcall;
    function Get_EncodingType(out nEncoding: PXC_SoundDataEncodingType): HResult; stdcall;
    function SaveToFile(const pFile: IAFS_File; const pMonitor: IProgressMon): HResult; stdcall;
    function OpenStream(out pFilter: IPXS_DecodeFilter): HResult; stdcall;
    function UpdateFromFile(const pFile: IAFS_File; const pMonitor: IProgressMon): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Action_Movie
// Flags:     (128) NonExtensible
// GUID:      {1517C6DF-7E64-4355-8A52-2059FB6AC43B}
// *********************************************************************//
  IPXC_Action_Movie = interface(IPXC_Action)
    ['{1517C6DF-7E64-4355-8A52-2059FB6AC43B}']
  end;

// *********************************************************************//
// Interface: IPXC_Action_Hide
// Flags:     (128) NonExtensible
// GUID:      {6E16F13F-AB0F-402B-B12F-F0C93E5EA5FC}
// *********************************************************************//
  IPXC_Action_Hide = interface(IPXC_Action)
    ['{6E16F13F-AB0F-402B-B12F-F0C93E5EA5FC}']
  end;

// *********************************************************************//
// Interface: IPXC_Action_Named
// Flags:     (128) NonExtensible
// GUID:      {96DD05DE-02B1-43FD-A24F-A53CE82F1D42}
// *********************************************************************//
  IPXC_Action_Named = interface(IPXC_Action)
    ['{96DD05DE-02B1-43FD-A24F-A53CE82F1D42}']
    function Get_CmdName(out ppCmdName: WideString): HResult; stdcall;
    function Set_CmdName(const ppCmdName: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Action_SetOCGState
// Flags:     (128) NonExtensible
// GUID:      {BB81DD31-5185-4960-A852-2B1FCA9FF469}
// *********************************************************************//
  IPXC_Action_SetOCGState = interface(IPXC_Action)
    ['{BB81DD31-5185-4960-A852-2B1FCA9FF469}']
  end;

// *********************************************************************//
// Interface: IPXC_Action_Rendition
// Flags:     (128) NonExtensible
// GUID:      {CD0A261B-D170-4D55-854D-EA62D5EB539C}
// *********************************************************************//
  IPXC_Action_Rendition = interface(IPXC_Action)
    ['{CD0A261B-D170-4D55-854D-EA62D5EB539C}']
  end;

// *********************************************************************//
// Interface: IPXC_Action_Transition
// Flags:     (128) NonExtensible
// GUID:      {4B2CB135-9D33-475D-932C-2AEA4CFFF7F2}
// *********************************************************************//
  IPXC_Action_Transition = interface(IPXC_Action)
    ['{4B2CB135-9D33-475D-932C-2AEA4CFFF7F2}']
  end;

// *********************************************************************//
// Interface: IPXC_Action_Goto3DView
// Flags:     (128) NonExtensible
// GUID:      {F32A5853-91C9-4311-8AD3-53C4B3DBEC79}
// *********************************************************************//
  IPXC_Action_Goto3DView = interface(IPXC_Action)
    ['{F32A5853-91C9-4311-8AD3-53C4B3DBEC79}']
  end;

// *********************************************************************//
// Interface: IPXC_Action_JavaScript
// Flags:     (128) NonExtensible
// GUID:      {0F4A5ABE-634C-40DC-BF2E-CF85A910E9E1}
// *********************************************************************//
  IPXC_Action_JavaScript = interface(IPXC_Action)
    ['{0F4A5ABE-634C-40DC-BF2E-CF85A910E9E1}']
    function Get_Script(out ppScript: WideString): HResult; stdcall;
    function Set_Script(const ppScript: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Action_RichMediaExecute
// Flags:     (128) NonExtensible
// GUID:      {6469F144-A1C6-4B1C-91A7-F04BC0F84CEA}
// *********************************************************************//
  IPXC_Action_RichMediaExecute = interface(IPXC_Action)
    ['{6469F144-A1C6-4B1C-91A7-F04BC0F84CEA}']
    function Get_Script(out ppScript: WideString): HResult; stdcall;
    function Set_Script(const ppScript: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Action_SubmitForm
// Flags:     (128) NonExtensible
// GUID:      {4DCA199D-3102-48EB-B49E-BD4324A16E67}
// *********************************************************************//
  IPXC_Action_SubmitForm = interface(IPXC_Action)
    ['{4DCA199D-3102-48EB-B49E-BD4324A16E67}']
  end;

// *********************************************************************//
// Interface: IPXC_Action_ResetForm
// Flags:     (128) NonExtensible
// GUID:      {F3EC0CB7-CD0E-4003-8CAD-CEE38DD1E362}
// *********************************************************************//
  IPXC_Action_ResetForm = interface(IPXC_Action)
    ['{F3EC0CB7-CD0E-4003-8CAD-CEE38DD1E362}']
  end;

// *********************************************************************//
// Interface: IPXC_Action_ImportForm
// Flags:     (128) NonExtensible
// GUID:      {A294BE96-0579-4104-B879-34398C589BCF}
// *********************************************************************//
  IPXC_Action_ImportForm = interface(IPXC_Action)
    ['{A294BE96-0579-4104-B879-34398C589BCF}']
  end;

// *********************************************************************//
// Interface: IPXC_ActionHandler
// Flags:     (128) NonExtensible
// GUID:      {99AF3A2C-6BDD-4709-A63F-AAC3CB0B74AC}
// *********************************************************************//
  IPXC_ActionHandler = interface(IUnknown)
    ['{99AF3A2C-6BDD-4709-A63F-AAC3CB0B74AC}']
    function CreateEmptyAction(nActionType: ULONG_T; const pDoc: IPXC_Document; 
                               out ppAction: IPXC_Action): HResult; stdcall;
    function CreateActionFromVariant(const pDoc: IPXC_Document; const pVar: IPXS_PDFVariant; 
                                     out ppAction: IPXC_Action): HResult; stdcall;
    function StoreAction(const pDoc: IPXC_Document; const pAct: IPXC_Action; 
                         const pDict: IPXS_PDFVariant): HResult; stdcall;
    function CloneAction(const pAct: IPXC_Action; out ppClone: IPXC_Action): HResult; stdcall;
    function SerializeAction(const pAction: IPXC_Action; const pStorage: IPXS_Document; 
                             out ppVar: IPXS_PDFVariant): HResult; stdcall;
    function RestoreAction(const pStorage: IPXS_Document; const pVar: IPXS_PDFVariant; 
                           const pDestDoc: IPXC_Document; out ppAction: IPXC_Action): HResult; stdcall;
    function CopyAction(const pAction: IPXC_Action; const pDestDoc: IPXC_Document; 
                        const pRemap: IPXC_RemapCallback; out ppCopy: IPXS_PDFVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Markup
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {C67295DD-F7F3-4CAD-9BE0-CD3900A01CCE}
// *********************************************************************//
  IPXC_AnnotData_Markup = interface(IPXC_AnnotData)
    ['{C67295DD-F7F3-4CAD-9BE0-CD3900A01CCE}']
    function Get_Intent(out ppIntent: WideString): HResult; stdcall;
    function Set_Intent(const ppIntent: WideString): HResult; stdcall;
    function Get_Title(out ppTitle: WideString): HResult; stdcall;
    function Set_Title(const ppTitle: WideString): HResult; stdcall;
    function Get_Subject(out ppSubject: WideString): HResult; stdcall;
    function Set_Subject(const ppSubject: WideString): HResult; stdcall;
    function Get_RichContent(out ppContent: WideString): HResult; stdcall;
    function Set_RichContent(const ppContent: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Caret
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {11022531-356C-481C-9365-BD8357E454DC}
// *********************************************************************//
  IPXC_AnnotData_Caret = interface(IPXC_AnnotData_Markup)
    ['{11022531-356C-481C-9365-BD8357E454DC}']
    function Get_Symbol(out pSymbol: PXC_AnnotCaretSymbol): HResult; stdcall;
    function Set_Symbol(pSymbol: PXC_AnnotCaretSymbol): HResult; stdcall;
    function Get_Position(out pPosition: PXC_Point): HResult; stdcall;
    function Set_Position(pPosition: PUserType4): HResult; stdcall;
    function Get_Size(out nSize: Double): HResult; stdcall;
    function Set_Size(nSize: Double): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_FileAttachment
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {71000198-13C8-44AE-A8F9-EF352241D432}
// *********************************************************************//
  IPXC_AnnotData_FileAttachment = interface(IPXC_AnnotData_Markup)
    ['{71000198-13C8-44AE-A8F9-EF352241D432}']
    function Get_IconName(out ppIconName: WideString): HResult; stdcall;
    function Set_IconName(const ppIconName: WideString): HResult; stdcall;
    function Get_FileAttachment(out ppFileSpec: IPXC_FileSpec): HResult; stdcall;
    function Set_FileAttachment(const ppFileSpec: IPXC_FileSpec): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_FreeText
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {926910D6-DB96-4A34-9216-93B5554B66B7}
// *********************************************************************//
  IPXC_AnnotData_FreeText = interface(IPXC_AnnotData_Markup)
    ['{926910D6-DB96-4A34-9216-93B5554B66B7}']
    function Get_FColor(out ppColor: IColor): HResult; stdcall;
    function Set_FColor(const ppColor: IColor): HResult; stdcall;
    function Get_SColor(out ppColor: IColor): HResult; stdcall;
    function Set_SColor(const ppColor: IColor): HResult; stdcall;
    function Get_DefaultFont(out ppFont: IPXC_Font): HResult; stdcall;
    function Set_DefaultFont(const ppFont: IPXC_Font): HResult; stdcall;
    function Get_DefaultFontSize(out pSize: Double): HResult; stdcall;
    function Set_DefaultFontSize(pSize: Double): HResult; stdcall;
    function Get_DefaultTextAlign(out pTextAlign: Integer): HResult; stdcall;
    function Set_DefaultTextAlign(pTextAlign: Integer): HResult; stdcall;
    function Get_DefaultTextColor(out ppColor: IColor): HResult; stdcall;
    function Set_DefaultTextColor(const ppColor: IColor): HResult; stdcall;
    function Get_DefaultStyle(out ppDS: WideString): HResult; stdcall;
    function Set_DefaultStyle(const ppDS: WideString): HResult; stdcall;
    function Get_TextBox(out pRD: PXC_Rect): HResult; stdcall;
    function Set_TextBox(pRD: PUserType1): HResult; stdcall;
    function Get_TextRotation(out pRotation: Integer): HResult; stdcall;
    function Set_TextRotation(pRotation: Integer): HResult; stdcall;
    function Get_LineEndingStyle(out pStyle: PXC_AnnotLineEndingStyle): HResult; stdcall;
    function Set_LineEndingStyle(pStyle: PXC_AnnotLineEndingStyle): HResult; stdcall;
    function Get_LineEndingScale(out pScale: Double): HResult; stdcall;
    function Set_LineEndingScale(pScale: Double): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Ink
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {4A30F2BA-D095-4D7B-8D70-85FBE4F3C9D8}
// *********************************************************************//
  IPXC_AnnotData_Ink = interface(IPXC_AnnotData_Markup)
    ['{4A30F2BA-D095-4D7B-8D70-85FBE4F3C9D8}']
    function Get_InkList(out ppInkList: IPXC_PolyPolygonSrcF): HResult; stdcall;
    function Set_InkList(const ppInkList: IPXC_PolyPolygonSrcF): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_PolyPolygonSrcF
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {99CD1570-5F68-4CB3-A9FA-58E49327AA75}
// *********************************************************************//
  IPXC_PolyPolygonSrcF = interface(IDispatch)
    ['{99CD1570-5F68-4CB3-A9FA-58E49327AA75}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXC_PolygonSrcF; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Remove2(const pItem: IPXC_PolygonSrcF); safecall;
    procedure Insert(const pItem: IPXC_PolygonSrcF; nIndex: ULONG_T); safecall;
    function Find(const pItem: IPXC_PolygonSrcF): Integer; safecall;
    procedure InsertFrom(const pSrc: IPXC_PolyPolygonSrcF; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXC_PolyPolygonSrcF); safecall;
    function Clone: IPXC_PolyPolygonSrcF; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXC_PolygonSrcF read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXC_PolyPolygonSrcFDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {99CD1570-5F68-4CB3-A9FA-58E49327AA75}
// *********************************************************************//
  IPXC_PolyPolygonSrcFDisp = dispinterface
    ['{99CD1570-5F68-4CB3-A9FA-58E49327AA75}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXC_PolygonSrcF readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Remove2(const pItem: IPXC_PolygonSrcF); dispid 1610743813;
    procedure Insert(const pItem: IPXC_PolygonSrcF; nIndex: ULONG_T); dispid 1610743814;
    function Find(const pItem: IPXC_PolygonSrcF): Integer; dispid 1610743815;
    procedure InsertFrom(const pSrc: IPXC_PolyPolygonSrcF; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743816;
    procedure CopyFrom(const pSrc: IPXC_PolyPolygonSrcF); dispid 1610743817;
    function Clone: IPXC_PolyPolygonSrcF; dispid 1610743818;
  end;

// *********************************************************************//
// Interface: IPXC_PolygonSrcF
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E3F042E4-CBFA-4A87-984D-C6CF49118BF5}
// *********************************************************************//
  IPXC_PolygonSrcF = interface(IDispatch)
    ['{E3F042E4-CBFA-4A87-984D-C6CF49118BF5}']
    function Get_Item(nIndex: ULONG_T): PXC_PointF; safecall;
    procedure Set_Item(nIndex: ULONG_T; stItem: PUserType5); safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(var stItems: PXC_PointF; nCount: ULONG_T; nIndex: ULONG_T); safecall;
    procedure InsertFrom(const pSrc: IPXC_PolygonSrcF; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXC_PolygonSrcF); safecall;
    function Clone: IPXC_PolygonSrcF; safecall;
    // Skipped Property "Item"
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXC_PolygonSrcFDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E3F042E4-CBFA-4A87-984D-C6CF49118BF5}
// *********************************************************************//
  IPXC_PolygonSrcFDisp = dispinterface
    ['{E3F042E4-CBFA-4A87-984D-C6CF49118BF5}']
    function Item(nIndex: ULONG_T): {NOT_OLEAUTO(PXC_PointF)}OleVariant; dispid 0;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Insert(var stItems: {NOT_OLEAUTO(PXC_PointF)}OleVariant; nCount: ULONG_T; 
                     nIndex: ULONG_T); dispid 1610743813;
    procedure InsertFrom(const pSrc: IPXC_PolygonSrcF; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743814;
    procedure CopyFrom(const pSrc: IPXC_PolygonSrcF); dispid 1610743815;
    function Clone: IPXC_PolygonSrcF; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Line
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {74241EDA-26AF-4F26-89CC-DB968190332D}
// *********************************************************************//
  IPXC_AnnotData_Line = interface(IPXC_AnnotData_Markup)
    ['{74241EDA-26AF-4F26-89CC-DB968190332D}']
    function Get_FColor(out ppColor: IColor): HResult; stdcall;
    function Set_FColor(const ppColor: IColor): HResult; stdcall;
    function Get_SColor(out ppColor: IColor): HResult; stdcall;
    function Set_SColor(const ppColor: IColor): HResult; stdcall;
    function Get_LeaderLine(out pLL: Double): HResult; stdcall;
    function Set_LeaderLine(pLL: Double): HResult; stdcall;
    function Get_LeaderLineExtension(out pLLE: Double): HResult; stdcall;
    function Set_LeaderLineExtension(pLLE: Double): HResult; stdcall;
    function Get_LeaderLineOffset(out pLLO: Double): HResult; stdcall;
    function Set_LeaderLineOffset(pLLO: Double): HResult; stdcall;
    function Get_ShowCaption(out pVal: WordBool): HResult; stdcall;
    function Set_ShowCaption(pVal: WordBool): HResult; stdcall;
    function Get_CaptionInLine(out pVal: WordBool): HResult; stdcall;
    function Set_CaptionInLine(pVal: WordBool): HResult; stdcall;
    function Get_CaptionOffset(out pOffset: PXC_Size): HResult; stdcall;
    function Set_CaptionOffset(pOffset: PUserType17): HResult; stdcall;
    function Get_Measure(out ppMeasure: IPXC_Measure): HResult; stdcall;
    function Set_Measure(const ppMeasure: IPXC_Measure): HResult; stdcall;
    function GetLinePoints(out pStartPoint: PXC_Point; out pEndPoint: PXC_Point): HResult; stdcall;
    function SetLinePoints(var pStartPoint: PXC_Point; var pEndPoint: PXC_Point): HResult; stdcall;
    function GetLineEndings(out pStart: PXC_AnnotLineEndingStyle; out pEnd: PXC_AnnotLineEndingStyle): HResult; stdcall;
    function SetLineEndings(nStart: PXC_AnnotLineEndingStyle; nEnd: PXC_AnnotLineEndingStyle): HResult; stdcall;
    function GetEndingsScale(out pStartScale: Double; out pEndScale: Double): HResult; stdcall;
    function SetEndingsScale(nStartScale: Double; pEndScale: Double): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Measure
// Flags:     (128) NonExtensible
// GUID:      {6FB73DCD-1779-4F94-89BC-B443AD8DCF9F}
// *********************************************************************//
  IPXC_Measure = interface(IUnknown)
    ['{6FB73DCD-1779-4F94-89BC-B443AD8DCF9F}']
    function Get_type_(out pType: PXC_MeasureCoordinateSystem): HResult; stdcall;
    function Load(const pDoc: IPXC_Document; const pVar: IPXS_PDFVariant): HResult; stdcall;
    function Save(const pDoc: IPXC_Document; out ppVar: IPXS_PDFVariant): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Link
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {6A899108-DFCC-4A0F-8E6D-D39EE5D1B623}
// *********************************************************************//
  IPXC_AnnotData_Link = interface(IPXC_AnnotData)
    ['{6A899108-DFCC-4A0F-8E6D-D39EE5D1B623}']
    function Get_HighlighMode(out pHMode: PXC_AnnotHighlightMode): HResult; stdcall;
    function Set_HighlighMode(pHMode: PXC_AnnotHighlightMode): HResult; stdcall;
    function Get_Quads(out ppQuads: IPXC_QuadsF): HResult; stdcall;
    function Set_Quads(const ppQuads: IPXC_QuadsF): HResult; stdcall;
    function Get_BBox(out pBBox: PXC_Rect): HResult; stdcall;
    function Set_BBox(pBBox: PUserType1): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Poly
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {19F591C3-3C76-4363-8611-608390A1D058}
// *********************************************************************//
  IPXC_AnnotData_Poly = interface(IPXC_AnnotData_Markup)
    ['{19F591C3-3C76-4363-8611-608390A1D058}']
    function Get_FColor(out ppColor: IColor): HResult; stdcall;
    function Set_FColor(const ppColor: IColor): HResult; stdcall;
    function Get_SColor(out ppColor: IColor): HResult; stdcall;
    function Set_SColor(const ppColor: IColor): HResult; stdcall;
    function Get_Vertices(out ppVertices: IPXC_PolygonSrcF): HResult; stdcall;
    function Set_Vertices(const ppVertices: IPXC_PolygonSrcF): HResult; stdcall;
    function Get_Measure(out ppMeasure: IPXC_Measure): HResult; stdcall;
    function Set_Measure(const ppMeasure: IPXC_Measure): HResult; stdcall;
    function GetLineEndings(out pStart: PXC_AnnotLineEndingStyle; out pEnd: PXC_AnnotLineEndingStyle): HResult; stdcall;
    function SetLineEndings(nStart: PXC_AnnotLineEndingStyle; nEnd: PXC_AnnotLineEndingStyle): HResult; stdcall;
    function GetEndingsScale(out pStartScale: Double; out pEndScale: Double): HResult; stdcall;
    function SetEndingsScale(nStartScale: Double; pEndScale: Double): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Popup
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {A0846463-A9B3-4545-A8EA-8DA950D9F93C}
// *********************************************************************//
  IPXC_AnnotData_Popup = interface(IPXC_AnnotData)
    ['{A0846463-A9B3-4545-A8EA-8DA950D9F93C}']
    function Get_Opened(out pOpened: WordBool): HResult; stdcall;
    function Set_Opened(pOpened: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Redaction
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {1E7CE050-5851-4F92-80C0-CCBC6869F054}
// *********************************************************************//
  IPXC_AnnotData_Redaction = interface(IPXC_AnnotData_Markup)
    ['{1E7CE050-5851-4F92-80C0-CCBC6869F054}']
    function Get_FColor(out ppColor: IColor): HResult; stdcall;
    function Set_FColor(const ppColor: IColor): HResult; stdcall;
    function Get_SColor(out ppColor: IColor): HResult; stdcall;
    function Set_SColor(const ppColor: IColor): HResult; stdcall;
    function Get_Quads(out ppQuads: IPXC_QuadsF): HResult; stdcall;
    function Set_Quads(const ppQuads: IPXC_QuadsF): HResult; stdcall;
    function Get_DefaultFont(out ppFont: IPXC_Font): HResult; stdcall;
    function Set_DefaultFont(const ppFont: IPXC_Font): HResult; stdcall;
    function Get_DefaultFontSize(out pSize: Double): HResult; stdcall;
    function Set_DefaultFontSize(pSize: Double): HResult; stdcall;
    function Get_DefaultTextAlign(out pTextAlign: Integer): HResult; stdcall;
    function Set_DefaultTextAlign(pTextAlign: Integer): HResult; stdcall;
    function Get_DefaultTextColor(out ppColor: IColor): HResult; stdcall;
    function Set_DefaultTextColor(const ppColor: IColor): HResult; stdcall;
    function Get_BBox(out pBBox: PXC_Rect): HResult; stdcall;
    function Set_BBox(pBBox: PUserType1): HResult; stdcall;
    function Get_OverlayFColor(out ppColor: IColor): HResult; stdcall;
    function Set_OverlayFColor(const ppColor: IColor): HResult; stdcall;
    function Get_OverlayText(out ppText: WideString): HResult; stdcall;
    function Set_OverlayText(const ppText: WideString): HResult; stdcall;
    function Get_OverlayXForm(out ppXForm: IPXC_XForm): HResult; stdcall;
    function Set_OverlayXForm(const ppXForm: IPXC_XForm): HResult; stdcall;
    function Get_RepeatOverlayText(out pFlag: WordBool): HResult; stdcall;
    function Set_RepeatOverlayText(pFlag: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Sound
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {52D281BB-5D6C-4F55-A947-5183E66B4CBA}
// *********************************************************************//
  IPXC_AnnotData_Sound = interface(IPXC_AnnotData_Markup)
    ['{52D281BB-5D6C-4F55-A947-5183E66B4CBA}']
    function Get_IconName(out ppIconName: WideString): HResult; stdcall;
    function Set_IconName(const ppIconName: WideString): HResult; stdcall;
    function Get_Sound(out ppSound: IPXC_Sound): HResult; stdcall;
    function Set_Sound(const ppSound: IPXC_Sound): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Stamp
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {EAB5D104-0798-455B-A81F-D72E0058F113}
// *********************************************************************//
  IPXC_AnnotData_Stamp = interface(IPXC_AnnotData_Markup)
    ['{EAB5D104-0798-455B-A81F-D72E0058F113}']
    function Get_BBox(out pBBox: PXC_Rect): HResult; stdcall;
    function Set_BBox(pBBox: PUserType1): HResult; stdcall;
    function GetStampName(out pName: WideString): HResult; stdcall;
    function SetStampName(const pName: WideString): HResult; stdcall;
    function SetStampNameA(nAtomName: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_SquareCircle
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {B7452B7A-C9F7-4EAE-B6D3-FC2B602F9DA8}
// *********************************************************************//
  IPXC_AnnotData_SquareCircle = interface(IPXC_AnnotData_Markup)
    ['{B7452B7A-C9F7-4EAE-B6D3-FC2B602F9DA8}']
    function Get_FColor(out ppColor: IColor): HResult; stdcall;
    function Set_FColor(const ppColor: IColor): HResult; stdcall;
    function Get_SColor(out ppColor: IColor): HResult; stdcall;
    function Set_SColor(const ppColor: IColor): HResult; stdcall;
    function Get_RD(out pRD: PXC_Rect): HResult; stdcall;
    function Set_RD(pRD: PUserType1): HResult; stdcall;
    function Get_BBox(out pBBox: PXC_Rect): HResult; stdcall;
    function Set_BBox(pBBox: PUserType1): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Text
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {9C321373-AA78-4420-82A4-3FDEA575E9B9}
// *********************************************************************//
  IPXC_AnnotData_Text = interface(IPXC_AnnotData_Markup)
    ['{9C321373-AA78-4420-82A4-3FDEA575E9B9}']
    function Get_IconName(out ppIconName: WideString): HResult; stdcall;
    function Set_IconName(const ppIconName: WideString): HResult; stdcall;
    function Get_Opened(out pOpened: WordBool): HResult; stdcall;
    function Set_Opened(pOpened: WordBool): HResult; stdcall;
    function Get_StateModel(out ppStateModel: WideString): HResult; stdcall;
    function Get_State(out ppState: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_TextMarkup
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {EFEEAF08-3F34-47AC-B30E-1F82FA9D2714}
// *********************************************************************//
  IPXC_AnnotData_TextMarkup = interface(IPXC_AnnotData_Markup)
    ['{EFEEAF08-3F34-47AC-B30E-1F82FA9D2714}']
    function Get_Quads(out ppQuads: IPXC_QuadsF): HResult; stdcall;
    function Set_Quads(const ppQuads: IPXC_QuadsF): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Watermark
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {40CF2D68-A564-4554-9DEA-05B47F6A093F}
// *********************************************************************//
  IPXC_AnnotData_Watermark = interface(IPXC_AnnotData)
    ['{40CF2D68-A564-4554-9DEA-05B47F6A093F}']
  end;

// *********************************************************************//
// Interface: IPXC_AnnotData_Widget
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {D9AAD6C8-4D1D-4247-A67E-786F48CF9122}
// *********************************************************************//
  IPXC_AnnotData_Widget = interface(IPXC_AnnotData)
    ['{D9AAD6C8-4D1D-4247-A67E-786F48CF9122}']
    function Get_DefaultFont(out ppFont: IPXC_Font): HResult; stdcall;
    function Set_DefaultFont(const ppFont: IPXC_Font): HResult; stdcall;
    function Get_DefaultFontSize(out pSize: Double): HResult; stdcall;
    function Set_DefaultFontSize(pSize: Double): HResult; stdcall;
    function Get_DefaultTextAlign(out pTextAlign: Integer): HResult; stdcall;
    function Set_DefaultTextAlign(pTextAlign: Integer): HResult; stdcall;
    function Get_DefaultTextColor(out ppColor: IColor): HResult; stdcall;
    function Set_DefaultTextColor(const ppColor: IColor): HResult; stdcall;
    function HasCaption(nType: PXC_AnnotAppType; out pHasCaption: WordBool): HResult; stdcall;
    function GetCaption(nType: PXC_AnnotAppType; out pCaption: WideString): HResult; stdcall;
    function SetCaption(nType: PXC_AnnotAppType; const pCaption: WideString; bRemoveOthers: WordBool): HResult; stdcall;
    function HasIcon(nType: PXC_AnnotAppType; out pHasIcon: WordBool): HResult; stdcall;
    function GetIcon(nType: PXC_AnnotAppType; out ppIcon: IPXC_XForm): HResult; stdcall;
    function SetIcon(nType: PXC_AnnotAppType; const pIcon: IPXC_XForm; bRemoveOthers: WordBool): HResult; stdcall;
    function Get_HighlighMode(out pVal: PXC_AnnotHighlightMode): HResult; stdcall;
    function Set_HighlighMode(pVal: PXC_AnnotHighlightMode): HResult; stdcall;
    function Get_IconScaleCondition(out pVal: PXC_WidgetIconScaleCondition): HResult; stdcall;
    function Set_IconScaleCondition(pVal: PXC_WidgetIconScaleCondition): HResult; stdcall;
    function Get_IconScaleType(out pVal: PXC_WidgetIconScaleType): HResult; stdcall;
    function Set_IconScaleType(pVal: PXC_WidgetIconScaleType): HResult; stdcall;
    function Get_ButtonTextPosition(out pVal: PXC_WidgetButtonTextPosition): HResult; stdcall;
    function Set_ButtonTextPosition(pVal: PXC_WidgetButtonTextPosition): HResult; stdcall;
    function Get_IconOffset(out pVal: PXC_Point): HResult; stdcall;
    function Set_IconOffset(pVal: PUserType4): HResult; stdcall;
    function Get_ContentRotation(out pAngle: Integer): HResult; stdcall;
    function Set_ContentRotation(pAngle: Integer): HResult; stdcall;
    function Get_FColor(out ppColor: IColor): HResult; stdcall;
    function Set_FColor(const ppColor: IColor): HResult; stdcall;
    function Get_SColor(out ppColor: IColor): HResult; stdcall;
    function Set_SColor(const ppColor: IColor): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_FileSpecHandler
// Flags:     (128) NonExtensible
// GUID:      {5BF76A5C-7530-4A4A-92F8-73828B0D1C32}
// *********************************************************************//
  IPXC_FileSpecHandler = interface(IUnknown)
    ['{5BF76A5C-7530-4A4A-92F8-73828B0D1C32}']
    function Get_FileSystem(out pFS: IAFS_FileSys): HResult; stdcall;
    function ResolvePath(const pSpec: IPXC_FileSpec; const pRelPath: IAFS_Name; out pName: IAFS_Name): HResult; stdcall;
    function CreateSpec(const pDoc: IPXC_Document; const pName: IAFS_Name; 
                        const pRelPath: IAFS_Name; out pSpec: IPXC_FileSpec): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_MeasureRL
// Flags:     (128) NonExtensible
// GUID:      {88A8C1D0-92EC-41C1-83B8-AEDC983B151F}
// *********************************************************************//
  IPXC_MeasureRL = interface(IPXC_Measure)
    ['{88A8C1D0-92EC-41C1-83B8-AEDC983B151F}']
    function Get_Ratio(out ppRatio: WideString): HResult; stdcall;
    function Set_Ratio(const ppRatio: WideString): HResult; stdcall;
    function GetYXScale(out pHasSet: WordBool; out pScale: Double): HResult; stdcall;
    function SetYXScale(dScale: Double): HResult; stdcall;
    function GetOrigin(out pHasSet: WordBool; out pOrigin: PXC_Point): HResult; stdcall;
    function SetOrigin(var pOrigin: PXC_Point): HResult; stdcall;
    function GetX(out ppArr: IPXC_NumberFormatArray): HResult; stdcall;
    function GetY(bCreateIfEmpty: WordBool; out ppArr: IPXC_NumberFormatArray): HResult; stdcall;
    function RemoveY: HResult; stdcall;
    function GetDistance(bCreateIfEmpty: WordBool; out ppArr: IPXC_NumberFormatArray): HResult; stdcall;
    function RemoveDistance: HResult; stdcall;
    function GetArea(bCreateIfEmpty: WordBool; out ppArr: IPXC_NumberFormatArray): HResult; stdcall;
    function RemoveArea: HResult; stdcall;
    function GetAngle(bCreateIfEmpty: WordBool; out ppArr: IPXC_NumberFormatArray): HResult; stdcall;
    function RemoveAngle: HResult; stdcall;
    function GetSlope(bCreateIfEmpty: WordBool; out ppArr: IPXC_NumberFormatArray): HResult; stdcall;
    function RemoveSlope: HResult; stdcall;
    function FormatValueF(var pPoints: PXC_PointF; nCount: ULONG_T; nType: PXC_MeasureType; 
                          nFlags: ULONG_T; out ppResult: WideString): HResult; stdcall;
    function FormatValue(var pPoints: PXC_Point; nCount: ULONG_T; nType: PXC_MeasureType; 
                         nFlags: ULONG_T; out ppResult: WideString): HResult; stdcall;
    function FormatValueA(const pData: IPXC_PolygonSrcF; nType: PXC_MeasureType; nFlags: ULONG_T; 
                          out ppResult: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_NumberFormatArray
// Flags:     (128) NonExtensible
// GUID:      {9A4EAFCE-E4A0-466D-BFD1-667384190CFE}
// *********************************************************************//
  IPXC_NumberFormatArray = interface(IUnknown)
    ['{9A4EAFCE-E4A0-466D-BFD1-667384190CFE}']
    function Get_Item(nIndex: ULONG_T; out ppItem: IPXC_NumberFormatItem): HResult; stdcall;
    function Get_Count(out pCount: ULONG_T): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Remove(nIndex: ULONG_T; nCount: ULONG_T): HResult; stdcall;
    function Insert(const pItem: IPXC_NumberFormatItem; nIndex: ULONG_T): HResult; stdcall;
    function CreateNewItem(out ppItem: IPXC_NumberFormatItem): HResult; stdcall;
    function Init(const pStdFormat: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_NumberFormatItem
// Flags:     (128) NonExtensible
// GUID:      {DA823C90-7379-4FE0-8590-FAEB05610963}
// *********************************************************************//
  IPXC_NumberFormatItem = interface(IUnknown)
    ['{DA823C90-7379-4FE0-8590-FAEB05610963}']
    function Get_Units(out ppUnits: WideString): HResult; stdcall;
    function Set_Units(const ppUnits: WideString): HResult; stdcall;
    function Get_Coefficient(out pCoef: Double): HResult; stdcall;
    function Set_Coefficient(pCoef: Double): HResult; stdcall;
    function Get_Precision(out pPreciss: Integer): HResult; stdcall;
    function Set_Precision(pPreciss: Integer): HResult; stdcall;
    function Get_FractionType(out pType: PXC_MeasureFractionType): HResult; stdcall;
    function Set_FractionType(pType: PXC_MeasureFractionType): HResult; stdcall;
    function Get_UnitsAsPrefix(out pVal: WordBool): HResult; stdcall;
    function Set_UnitsAsPrefix(pVal: WordBool): HResult; stdcall;
    function Get_NoReduceFraction(out pVal: WordBool): HResult; stdcall;
    function Set_NoReduceFraction(pVal: WordBool): HResult; stdcall;
    function Get_ThousandSep(out ppSeparator: WideString): HResult; stdcall;
    function Set_ThousandSep(const ppSeparator: WideString): HResult; stdcall;
    function Get_DecimalSep(out ppSeparator: WideString): HResult; stdcall;
    function Set_DecimalSep(const ppSeparator: WideString): HResult; stdcall;
    function Get_UnitsPrefix(out ppPrefix: WideString): HResult; stdcall;
    function Set_UnitsPrefix(const ppPrefix: WideString): HResult; stdcall;
    function Get_UnitsSuffix(out ppSuffix: WideString): HResult; stdcall;
    function Set_UnitsSuffix(const ppSuffix: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_NumberTree
// Flags:     (128) NonExtensible
// GUID:      {99F76052-61A2-4E4A-9226-639E697A004E}
// *********************************************************************//
  IPXC_NumberTree = interface(IUnknown)
    ['{99F76052-61A2-4E4A-9226-639E697A004E}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_ItemKey(nIndex: ULONG_T; out nValue: Integer): HResult; stdcall;
    function Get_ItemValue(nIndex: ULONG_T; out pValue: IPXS_PDFVariant): HResult; stdcall;
    function Item(nIndex: ULONG_T; out nKey: Integer; out pValue: IPXS_PDFVariant): HResult; stdcall;
    function Add(nKey: Integer; const pValue: IPXS_PDFVariant): HResult; stdcall;
    function RemoveByKey(nKey: Integer): HResult; stdcall;
    function RemoveByIndex(nIndex: ULONG_T): HResult; stdcall;
    function RemoveAll: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_OCConfig
// Flags:     (128) NonExtensible
// GUID:      {2FC40CEC-02A9-470F-936F-604C45F1D7B2}
// *********************************************************************//
  IPXC_OCConfig = interface(IUnknown)
    ['{2FC40CEC-02A9-470F-936F-604C45F1D7B2}']
  end;

// *********************************************************************//
// Interface: IPXC_OCOrderElement
// Flags:     (128) NonExtensible
// GUID:      {2A939CA1-EEB9-4105-A686-A9DF34766D4D}
// *********************************************************************//
  IPXC_OCOrderElement = interface(IUnknown)
    ['{2A939CA1-EEB9-4105-A686-A9DF34766D4D}']
    function Get_type_(out nType: PXC_OCOrderElementType): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_PageLabel
// Flags:     (128) NonExtensible
// GUID:      {FDE6897D-D424-4960-B88D-FD25AA97AD9E}
// *********************************************************************//
  IPXC_PageLabel = interface(IUnknown)
    ['{FDE6897D-D424-4960-B88D-FD25AA97AD9E}']
  end;

// *********************************************************************//
// Interface: IPXC_RectsF
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {906F510D-3026-4903-8522-DECE1A620188}
// *********************************************************************//
  IPXC_RectsF = interface(IDispatch)
    ['{906F510D-3026-4903-8522-DECE1A620188}']
    function Get_Item(nIndex: ULONG_T): PXC_RectF; safecall;
    procedure Set_Item(nIndex: ULONG_T; stItem: PUserType6); safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(var stItems: PXC_RectF; nCount: ULONG_T; nIndex: ULONG_T); safecall;
    procedure InsertFrom(const pSrc: IPXC_RectsF; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXC_RectsF); safecall;
    function Clone: IPXC_RectsF; safecall;
    // Skipped Property "Item"
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXC_RectsFDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {906F510D-3026-4903-8522-DECE1A620188}
// *********************************************************************//
  IPXC_RectsFDisp = dispinterface
    ['{906F510D-3026-4903-8522-DECE1A620188}']
    function Item(nIndex: ULONG_T): {NOT_OLEAUTO(PXC_RectF)}OleVariant; dispid 0;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Insert(var stItems: {NOT_OLEAUTO(PXC_RectF)}OleVariant; nCount: ULONG_T; 
                     nIndex: ULONG_T); dispid 1610743813;
    procedure InsertFrom(const pSrc: IPXC_RectsF; nStartSrcIndex: ULONG_T; nSrcItemsCount: ULONG_T; 
                         nDstIndex: ULONG_T); dispid 1610743814;
    procedure CopyFrom(const pSrc: IPXC_RectsF); dispid 1610743815;
    function Clone: IPXC_RectsF; dispid 1610743816;
  end;

// *********************************************************************//
// Interface: IPXC_StampInfo
// Flags:     (128) NonExtensible
// GUID:      {6A450A18-BEC7-4173-8E8D-A775BE38E63A}
// *********************************************************************//
  IPXC_StampInfo = interface(IUnknown)
    ['{6A450A18-BEC7-4173-8E8D-A775BE38E63A}']
    function Get_ID(out sID: WideString): HResult; stdcall;
    function Get_Title(out sTitle: WideString): HResult; stdcall;
    function Set_Title(const sTitle: WideString): HResult; stdcall;
    function Get_IsDynamic(out bDynamic: WordBool): HResult; stdcall;
    function Get_Collection(out pCollection: IPXC_StampsCollection): HResult; stdcall;
    function Get_ArtBox(out stArtBox: PXC_Rect): HResult; stdcall;
    function DrawToMemory(pBuffer: Pointer; nStride: Integer; nBufferFormat: PXC_DrawFormat; 
                          var pDestRect: tagRECT; const pRParams: IPXC_PageRenderParams; 
                          const pRContext: IPXC_OCContext; const pProgressMon: IProgressMon): HResult; stdcall;
    function DrawToDevice(hDC: HANDLE_T; var pDestRect: tagRECT; 
                          const pRParams: IPXC_PageRenderParams; const pRContext: IPXC_OCContext; 
                          const pProgressMon: IProgressMon): HResult; stdcall;
    function GetSize(out pWidth: Double; out pHeight: Double): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_StampsCollection
// Flags:     (128) NonExtensible
// GUID:      {7476FE4F-6BB0-49F6-9584-52852359FDB0}
// *********************************************************************//
  IPXC_StampsCollection = interface(IUnknown)
    ['{7476FE4F-6BB0-49F6-9584-52852359FDB0}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pStamp: IPXC_StampInfo): HResult; stdcall;
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function Get_ID(out sID: WideString): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Set_Name(const sName: WideString): HResult; stdcall;
    function RemoveStamp(nIndex: ULONG_T): HResult; stdcall;
    function AddStamps(const pFile: IAFS_File; nStartPage: ULONG_T; nCount: ULONG_T): HResult; stdcall;
    function AddStamp(const pFile: IAFS_File; const sID: WideString; nPage: ULONG_T; 
                      out pStamp: IPXC_StampInfo): HResult; stdcall;
    function Get_ReadOnly(out bReadOnly: WordBool): HResult; stdcall;
    function Get_BuiltIn(out bBuiltIn: WordBool): HResult; stdcall;
    function Get_IsStandard(out bIsStandard: WordBool): HResult; stdcall;
    function Get_HasDynamic(out bHasDynamic: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_StampsManager
// Flags:     (128) NonExtensible
// GUID:      {8AFADCEE-4E34-4B62-8993-DFCD25B0FB14}
// *********************************************************************//
  IPXC_StampsManager = interface(IUnknown)
    ['{8AFADCEE-4E34-4B62-8993-DFCD25B0FB14}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pCollection: IPXC_StampsCollection): HResult; stdcall;
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function RemoveCollection(nIndex: ULONG_T): HResult; stdcall;
    function CreateEmptyCollection(const sName: WideString; out pCollection: IPXC_StampsCollection): HResult; stdcall;
    function LoadCollection(const pSource: IAFS_File; out pCollection: IPXC_StampsCollection): HResult; stdcall;
    function FindCollection(const sID: WideString; out nColIndex: Integer): HResult; stdcall;
    function FindStamp(const sFullID: WideString; out pStamp: IPXC_StampInfo): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_Inst
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {06052A56-664B-4437-8F8C-9D697D1720B8}
// *********************************************************************//
  IPXC_Inst = interface(IDispatch)
    ['{06052A56-664B-4437-8F8C-9D697D1720B8}']
    function Get_APIVersion: ULONG_T; safecall;
    procedure Init(sKey: PWideChar); safecall;
    procedure Finalize; safecall;
    function GetExtension(sExtID: PWideChar): IUnknown; safecall;
    function NewDocument: IPXC_Document; safecall;
    function NewDocumentEx(const pNewDocParams: ICab): IPXC_Document; safecall;
    function OpenDocumentFromFile(lpszFileName: PWideChar; 
                                  const pAuthCallback: IPXC_DocAuthCallback; 
                                  const pProgressMon: IProgressMon; nFlags: ULONG_T; 
                                  nRestrictPerms: ULONG_T): IPXC_Document; safecall;
    function OpenDocumentFrom(const pSrc: IUnknown; const pAuthCallback: IPXC_DocAuthCallback; 
                              const pProgressMon: IProgressMon; nFlags: ULONG_T; 
                              nRestrictPerms: ULONG_T): IPXC_Document; safecall;
    procedure RegisterSecurityHandler(nTypeAtom: ULONG_T; const pHandler: IPXC_SecurityHandler); safecall;
    function GetSecurityHandler(nTypeAtom: ULONG_T): IPXC_SecurityHandler; safecall;
    procedure RegisterActionHandler(nActionType: ULONG_T; const pHandler: IPXC_ActionHandler); safecall;
    function GetActionHandler(nActionType: ULONG_T): IPXC_ActionHandler; safecall;
    procedure RegisterAnnotHandler(nAnnotType: ULONG_T; const pHandler: IPXC_AnnotHandler); safecall;
    function GetAnnotHandler(nAnnotType: ULONG_T): IPXC_AnnotHandler; safecall;
    procedure RegisterFileSpecHandler(nTypeName: ULONG_T; const pBaseFS: IAFS_FileSys; 
                                      const pHandler: IPXC_FileSpecHandler); safecall;
    function CreateRenderParams: IPXC_PageRenderParams; safecall;
    function CreateWatermarkParams: IPXC_WatermarkParams; safecall;
    function CreateBackgroundParams: IPXC_BackgroundParams; safecall;
    function CreateRects: IPXC_RectsF; safecall;
    function CreateQuads: IPXC_QuadsF; safecall;
    function CreatePolygonSrc: IPXC_PolygonSrcF; safecall;
    function CreatePolyPolygonSrc: IPXC_PolyPolygonSrcF; safecall;
    function CreateGetPageTextOptions(nVersion: ULONG_T): IPXC_GetPageTextOptions; safecall;
    function Get_StampsManager: IPXC_StampsManager; safecall;
    function CreateStdOCCtx: IPXC_OCContext; safecall;
    function Get_ColorManager: IPXC_ColorManager; safecall;
    function CreateTextTabStops: IPXC_TextTabStops; safecall;
    function CreateTabStopFormat: IPXC_TabStopFormat; safecall;
    function CreateCharFormat: IPXC_CharFormat; safecall;
    function CreateParaFormat: IPXC_ParaFormat; safecall;
    function DateToPDFDate(stDate: TDateTime): WideString; safecall;
    function PDFDateToDate(const sPDFDate: WideString): TDateTime; safecall;
    function Get_NumSecurityHandlers: Integer; safecall;
    function GetSecurityHandlerByIndex(nIndex: Integer): IPXC_SecurityHandler; safecall;
    function Get_NumActionHandlers: Integer; safecall;
    function GetActionHandlerByIndex(nIndex: Integer): IPXC_ActionHandler; safecall;
    function Get_NumAnnotHandlers: Integer; safecall;
    function GetAnnotHandlerByIndex(nIndex: Integer): IPXC_AnnotHandler; safecall;
    function CreatePagesOverlayInfo: IPXC_PagesOverlayInfo; safecall;
    function CreateRedactInfo: IPXC_RedactInfo; safecall;
    function CreateRedactOverlayParams: IPXC_RedactOverlayParams; safecall;
    function CreateHeaderAndFooterParams: IPXC_HeaderAndFooterParams; safecall;
    function ConvertRC2RTF(const pDoc: IPXC_Document; const Src: WideString; const sDS: WideString; 
                           nFlags: Integer): WideString; safecall;
    function ConvertRTF2RC(const pDoc: IPXC_Document; const sRTF: WideString; nFlags: Integer): WideString; safecall;
    function ConvertRC2Plain(const pDoc: IPXC_Document; const Src: WideString; nFlags: Integer): WideString; safecall;
    function CreateAnnotsList: IPXC_AnnotsList; safecall;
    procedure SetMemoryLimit(nLimitInMb: ULONG_T); safecall;
    function GetStdCMap(const pName: WideString): IPXC_CMap; safecall;
    property APIVersion: ULONG_T read Get_APIVersion;
    property StampsManager: IPXC_StampsManager read Get_StampsManager;
    property ColorManager: IPXC_ColorManager read Get_ColorManager;
    property NumSecurityHandlers: Integer read Get_NumSecurityHandlers;
    property NumActionHandlers: Integer read Get_NumActionHandlers;
    property NumAnnotHandlers: Integer read Get_NumAnnotHandlers;
  end;

// *********************************************************************//
// DispIntf:  IPXC_InstDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {06052A56-664B-4437-8F8C-9D697D1720B8}
// *********************************************************************//
  IPXC_InstDisp = dispinterface
    ['{06052A56-664B-4437-8F8C-9D697D1720B8}']
    property APIVersion: ULONG_T readonly dispid 1610743808;
    procedure Init(sKey: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743809;
    procedure Finalize; dispid 1610743810;
    function GetExtension(sExtID: {NOT_OLEAUTO(PWideChar)}OleVariant): IUnknown; dispid 1610743811;
    function NewDocument: IPXC_Document; dispid 1610743812;
    function NewDocumentEx(const pNewDocParams: ICab): IPXC_Document; dispid 1610743813;
    function OpenDocumentFromFile(lpszFileName: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                  const pAuthCallback: IPXC_DocAuthCallback; 
                                  const pProgressMon: IProgressMon; nFlags: ULONG_T; 
                                  nRestrictPerms: ULONG_T): IPXC_Document; dispid 1610743814;
    function OpenDocumentFrom(const pSrc: IUnknown; const pAuthCallback: IPXC_DocAuthCallback; 
                              const pProgressMon: IProgressMon; nFlags: ULONG_T; 
                              nRestrictPerms: ULONG_T): IPXC_Document; dispid 1610743815;
    procedure RegisterSecurityHandler(nTypeAtom: ULONG_T; const pHandler: IPXC_SecurityHandler); dispid 1610743816;
    function GetSecurityHandler(nTypeAtom: ULONG_T): IPXC_SecurityHandler; dispid 1610743817;
    procedure RegisterActionHandler(nActionType: ULONG_T; const pHandler: IPXC_ActionHandler); dispid 1610743818;
    function GetActionHandler(nActionType: ULONG_T): IPXC_ActionHandler; dispid 1610743819;
    procedure RegisterAnnotHandler(nAnnotType: ULONG_T; const pHandler: IPXC_AnnotHandler); dispid 1610743820;
    function GetAnnotHandler(nAnnotType: ULONG_T): IPXC_AnnotHandler; dispid 1610743821;
    procedure RegisterFileSpecHandler(nTypeName: ULONG_T; const pBaseFS: IAFS_FileSys; 
                                      const pHandler: IPXC_FileSpecHandler); dispid 1610743822;
    function CreateRenderParams: IPXC_PageRenderParams; dispid 1610743823;
    function CreateWatermarkParams: IPXC_WatermarkParams; dispid 1610743824;
    function CreateBackgroundParams: IPXC_BackgroundParams; dispid 1610743825;
    function CreateRects: IPXC_RectsF; dispid 1610743826;
    function CreateQuads: IPXC_QuadsF; dispid 1610743827;
    function CreatePolygonSrc: IPXC_PolygonSrcF; dispid 1610743828;
    function CreatePolyPolygonSrc: IPXC_PolyPolygonSrcF; dispid 1610743829;
    function CreateGetPageTextOptions(nVersion: ULONG_T): IPXC_GetPageTextOptions; dispid 1610743830;
    property StampsManager: IPXC_StampsManager readonly dispid 1610743831;
    function CreateStdOCCtx: IPXC_OCContext; dispid 1610743832;
    property ColorManager: IPXC_ColorManager readonly dispid 1610743833;
    function CreateTextTabStops: IPXC_TextTabStops; dispid 1610743834;
    function CreateTabStopFormat: IPXC_TabStopFormat; dispid 1610743835;
    function CreateCharFormat: IPXC_CharFormat; dispid 1610743836;
    function CreateParaFormat: IPXC_ParaFormat; dispid 1610743837;
    function DateToPDFDate(stDate: TDateTime): WideString; dispid 1610743838;
    function PDFDateToDate(const sPDFDate: WideString): TDateTime; dispid 1610743839;
    property NumSecurityHandlers: Integer readonly dispid 1610743840;
    function GetSecurityHandlerByIndex(nIndex: Integer): IPXC_SecurityHandler; dispid 1610743841;
    property NumActionHandlers: Integer readonly dispid 1610743842;
    function GetActionHandlerByIndex(nIndex: Integer): IPXC_ActionHandler; dispid 1610743843;
    property NumAnnotHandlers: Integer readonly dispid 1610743844;
    function GetAnnotHandlerByIndex(nIndex: Integer): IPXC_AnnotHandler; dispid 1610743845;
    function CreatePagesOverlayInfo: IPXC_PagesOverlayInfo; dispid 1610743846;
    function CreateRedactInfo: IPXC_RedactInfo; dispid 1610743847;
    function CreateRedactOverlayParams: IPXC_RedactOverlayParams; dispid 1610743848;
    function CreateHeaderAndFooterParams: IPXC_HeaderAndFooterParams; dispid 1610743849;
    function ConvertRC2RTF(const pDoc: IPXC_Document; const Src: WideString; const sDS: WideString; 
                           nFlags: Integer): WideString; dispid 1610743850;
    function ConvertRTF2RC(const pDoc: IPXC_Document; const sRTF: WideString; nFlags: Integer): WideString; dispid 1610743851;
    function ConvertRC2Plain(const pDoc: IPXC_Document; const Src: WideString; nFlags: Integer): WideString; dispid 1610743852;
    function CreateAnnotsList: IPXC_AnnotsList; dispid 1610743853;
    procedure SetMemoryLimit(nLimitInMb: ULONG_T); dispid 1610743854;
    function GetStdCMap(const pName: WideString): IPXC_CMap; dispid 1610743855;
  end;

// *********************************************************************//
// Interface: IPXC_ColorManager
// Flags:     (128) NonExtensible
// GUID:      {42664284-0BFE-4458-BAF3-95C0207AEE02}
// *********************************************************************//
  IPXC_ColorManager = interface(IUnknown)
    ['{42664284-0BFE-4458-BAF3-95C0207AEE02}']
    function CreateProfileFromBuffer(var nICC: Byte; nICCLen: ULONG_T; out pProfile: IUnknown): HResult; stdcall;
    function CreateCalRGB(var stDef: PXC_CalRGB; nIntent: PXC_RenderingIntent; 
                          out pProfile: IUnknown): HResult; stdcall;
    function CreateCalGray(var stDef: PXC_CalGray; nIntent: PXC_RenderingIntent; 
                           out pProfile: IUnknown): HResult; stdcall;
    function CreateCalLab(var stDef: PXC_CalLab; nIntent: PXC_RenderingIntent; 
                          out pProfile: IUnknown): HResult; stdcall;
    function CreateTransform(const pSrcProfile: IUnknown; const pDstProfile: IUnknown; 
                             nIntent: PXC_RenderingIntent; out pTransform: IUnknown): HResult; stdcall;
    function ApplyTransform(const pTransform: IUnknown; var nSrcData: Byte; var nDstData: Byte; 
                            nCount: Integer; nSrcPacking: Integer; nDstPacking: Integer): HResult; stdcall;
    function GetCurrentSettings(out pSettings: IPXC_ColorSettings): HResult; stdcall;
    function SetCurrentSettings(const pSettings: IPXC_ColorSettings): HResult; stdcall;
    function Get_ProfilesCount(out nCount: ULONG_T): HResult; stdcall;
    function GetProfileInfo(nIndex: ULONG_T; out sName: WideString; 
                            out nWS: PXC_ProfileWorkingSpace; out nFlags: ULONG_T): HResult; stdcall;
    function Get_EnginesCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_EngineName(nIndex: ULONG_T; out sName: WideString): HResult; stdcall;
    function Get_EngineID(nIndex: ULONG_T; out sName: WideString): HResult; stdcall;
    function GetProfileByName(sName: PWideChar; out pProfile: IUnknown): HResult; stdcall;
    function GetProfileData(nIndex: ULONG_T; out pMemBlock: IMemBlock): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXC_ColorSettings
// Flags:     (128) NonExtensible
// GUID:      {6A0D7BC2-7D48-46B1-9D74-761FA0CCEC96}
// *********************************************************************//
  IPXC_ColorSettings = interface(IUnknown)
    ['{6A0D7BC2-7D48-46B1-9D74-761FA0CCEC96}']
    function Get_ProfileName(nWS: PXC_ProfileWorkingSpace; out sProfileName: WideString): HResult; stdcall;
    function Set_ProfileName(nWS: PXC_ProfileWorkingSpace; const sProfileName: WideString): HResult; stdcall;
    function Get_EngineName(out sName: WideString): HResult; stdcall;
    function Set_EngineName(const sName: WideString): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Set_Flags(nFlags: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Event
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {482E54A4-F8E8-4C78-8472-1FA890ED1C3A}
// *********************************************************************//
  IUIX_Event = interface(IDispatch)
    ['{482E54A4-F8E8-4C78-8472-1FA890ED1C3A}']
    function _GetRawPtr: PUserType21; safecall;
    function Get_Code: Integer; safecall;
    procedure Set_Code(nCode: Integer); safecall;
    function Get_Handled: WordBool; safecall;
    procedure Set_Handled(bHandled: WordBool); safecall;
    function Get_Param1: PARAM_T; safecall;
    procedure Set_Param1(nParam: PARAM_T); safecall;
    function Get_Param2: PARAM_T; safecall;
    procedure Set_Param2(nParam: PARAM_T); safecall;
    function Get_Result: PARAM_T; safecall;
    procedure Set_Result(nResult: PARAM_T); safecall;
    function Clone: IUIX_Event; safecall;
    function Get_Pos: tagPOINT; safecall;
    procedure Set_Pos(stPos: PUserType22); safecall;
    property Code: Integer read Get_Code write Set_Code;
    property Handled: WordBool read Get_Handled write Set_Handled;
    property Param1: PARAM_T read Get_Param1 write Set_Param1;
    property Param2: PARAM_T read Get_Param2 write Set_Param2;
    property Result: PARAM_T read Get_Result write Set_Result;
    // Skipped Property "Pos"
  end;

// *********************************************************************//
// DispIntf:  IUIX_EventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {482E54A4-F8E8-4C78-8472-1FA890ED1C3A}
// *********************************************************************//
  IUIX_EventDisp = dispinterface
    ['{482E54A4-F8E8-4C78-8472-1FA890ED1C3A}']
    function _GetRawPtr: {NOT_OLEAUTO(PUserType21)}OleVariant; dispid 1610743808;
    property Code: Integer dispid 1610743809;
    property Handled: WordBool dispid 1610743811;
    property Param1: PARAM_T dispid 1610743813;
    property Param2: PARAM_T dispid 1610743815;
    property Result: PARAM_T dispid 1610743817;
    function Clone: IUIX_Event; dispid 1610743819;
    function Pos: {NOT_OLEAUTO(tagPOINT)}OleVariant; dispid 1610743820;
  end;

// *********************************************************************//
// Interface: IUIX_Obj
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E9C6A106-C4C1-4F7E-9E20-65E53233A2D2}
// *********************************************************************//
  IUIX_Obj = interface(IDispatch)
    ['{E9C6A106-C4C1-4F7E-9E20-65E53233A2D2}']
    function Get_ID: Integer; safecall;
    procedure SetID(const sID: WideString); safecall;
    function Get_IsInvalid: WordBool; safecall;
    function IsChildOf(const pParent: IUIX_Obj): WordBool; safecall;
    function Get_Parent: IUIX_Obj; safecall;
    function Get_ThemeClass: IUIX_ThemeClass; safecall;
    function Get_ThreadCtx: IUIX_ThreadContext; safecall;
    function Get_LI: IUIX_LayoutItem; safecall;
    function Get_Style: Int64; safecall;
    procedure Set_Style(nStyle: Int64); safecall;
    procedure SetStyle(nStyle: Int64; nStyleMask: Int64); safecall;
    function Get_StyleEx: Integer; safecall;
    procedure Set_StyleEx(nStyle: Integer); safecall;
    procedure SetStyleEx(nStyleEx: Integer; nStyleExMask: Integer); safecall;
    procedure CalcStringSize(pString: PWideChar; nLength: Integer; const pFont: IUIX_Font; 
                             var pSize: tagSIZE; nFlags: Integer); safecall;
    function Get_Impl: IUnknown; safecall;
    procedure Set_Impl(const pImpl: IUnknown); safecall;
    procedure PushImpl(const pImpl: IUnknown; bExclusive: WordBool); safecall;
    procedure PopImpl(const pImpl: IUnknown); safecall;
    procedure QueryImpl(var riid: TGUID; const pSkipImpl: IUnknown; out pImpl: Pointer); safecall;
    procedure Destroy; safecall;
    function Get_Windowed: WordBool; safecall;
    function Get_WndHandle: HANDLE_T; safecall;
    function GetFirstWindowed: IUIX_Obj; safecall;
    function GetFirstWndHandle: HANDLE_T; safecall;
    function Get_WndText: WideString; safecall;
    procedure Set_WndText(const sWndText: WideString); safecall;
    function Get_WndStyle: Integer; safecall;
    procedure Set_WndStyle(nWndStyle: Integer); safecall;
    function Get_WndStyleEx: Integer; safecall;
    procedure Set_WndStyleEx(nWndStyleEx: Integer); safecall;
    function Get_WndClassName: WideString; safecall;
    procedure CallNextEventProcess(const pImpl: IUIX_ObjImpl; const pEvent: IUIX_Event); safecall;
    procedure DefaultWndProcess(var stWndEvent: UIX_RawEvent); safecall;
    procedure SendRawEvent(var stEvent: UIX_RawEvent); safecall;
    procedure PostRawEvent(var stEvent: UIX_RawEvent); safecall;
    procedure SendRawEventToDescendants(var stEvent: UIX_RawEvent; nMaxDeep: ULONG_T); safecall;
    function Get_Visible: WordBool; safecall;
    function Get_VisibleCondition: WordBool; safecall;
    procedure Set_VisibleCondition(bVisibleCondition: WordBool); safecall;
    procedure Show(nShowCmd: Integer; bRedraw: WordBool); safecall;
    function Get_Enabled: WordBool; safecall;
    function Get_EnableCondition: WordBool; safecall;
    procedure Set_EnableCondition(bEnableCondition: WordBool); safecall;
    procedure Enable(bEnable: WordBool; bRedraw: WordBool); safecall;
    function Get_Children: IUIX_ObjCollection; safecall;
    function Get_Rect: tagRECT; safecall;
    procedure Set_Rect(stRect: PUserType9); safecall;
    function Get_ClientRect: tagRECT; safecall;
    function Get_ExtentRect: tagRECT; safecall;
    procedure ScreenPtToClient(var stScreen: tagPOINT; out stClient: tagPOINT); safecall;
    procedure ScreenRectToClient(var stScreen: tagRECT; out stClient: tagRECT); safecall;
    procedure ClientPtToScreen(var stClient: tagPOINT; out stScreen: tagPOINT); safecall;
    procedure ClientRectToScreen(var stClient: tagRECT; out stScreen: tagRECT); safecall;
    procedure Move(var stNewRect: tagRECT; bRedraw: WordBool); safecall;
    procedure RedrawRect(var stRect: tagRECT; bForce: WordBool); safecall;
    procedure Redraw(bForce: WordBool); safecall;
    procedure StartTimer(nTimerID: LONG_PTR; nElapse: ULONG_T; bOnce: WordBool); safecall;
    procedure StopTimer(nTimerID: LONG_PTR); safecall;
    procedure Scroll(nDX: Integer; nDY: Integer); safecall;
    procedure SetScrollInfo(var stViewPos: tagPOINT; var nAllSize: tagSIZE); safecall;
    procedure GetScrollInfo(out stViewPos: tagPOINT; out nAllSize: tagSIZE); safecall;
    procedure StartSmoothScroll(nDX: Integer; nDY: Integer; bCumulative: WordBool); safecall;
    procedure StopSmoothScroll; safecall;
    procedure ScrollDevice(dx: Integer; dy: Integer; var pRects: tagRECT; nRects: Integer; 
                           var pClipRect: tagRECT); safecall;
    procedure SetInputFocus(bIgnoreVisibility: WordBool); safecall;
    procedure KillInputFocus; safecall;
    function Get_HasInputFocus: WordBool; safecall;
    procedure CaptureMouse; safecall;
    procedure ReleaseMouse; safecall;
    function Get_IsModal: WordBool; safecall;
    function Get_IsAppModal: WordBool; safecall;
    function DoModal(nFlags: Integer): LONG_PTR; safecall;
    function DoModal2(var pPos: tagRECT; nFlags: Integer): LONG_PTR; safecall;
    procedure EndModal(nRes: LONG_PTR); safecall;
    function HitTest(var stRelPos: tagPOINT): IUIX_Obj; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const sText: WideString); safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    procedure ShowThroughLayout(nFlags: Integer); safecall;
    procedure InsertChild(const pNewChild: IUIX_Obj; nIndexBefore: Integer); safecall;
    function GetChildIndex(const pChild: IUIX_Obj): Integer; safecall;
    function Get_ContainsInputFocus: WordBool; safecall;
    function IsContainerOf(const pObj: IUIX_Obj): WordBool; safecall;
    function FindChild(nChildID: Integer; nMaxLevel: Integer): IUIX_Obj; safecall;
    procedure CenterWindow(bOnScreen: WordBool); safecall;
    procedure FixupWndPosByWorkArea(var stWorkAreaRect: tagRECT); safecall;
    function Get_HasMouseCapture: WordBool; safecall;
    function Get_IsMouseOver: WordBool; safecall;
    procedure FadeShow(bShow: WordBool); safecall;
    procedure StopFade(bApplyShowFlag: WordBool); safecall;
    function Get_Extents: tagRECT; safecall;
    procedure UpdateExtents(var stExtents: tagRECT; bRedraw: WordBool); safecall;
    procedure ResetExtents(bRedraw: WordBool); safecall;
    function Get_ScrollDeviceClip: tagRECT; safecall;
    procedure Set_ScrollDeviceClip(pClip: PUserType9); safecall;
    procedure MakeRectVisible(var pRect: tagRECT; bAllowPartialVisible: WordBool; 
                              bAllowSmoothScroll: WordBool; var pTarget: tagRECT); safecall;
    function Get_PenMonitor: WordBool; safecall;
    procedure Set_PenMonitor(bEnabled: WordBool); safecall;
    function Get_IsPenActive: WordBool; safecall;
    function Get_IsEraserActive: WordBool; safecall;
    function Get_PenPressure: Double; safecall;
    function Get_PenRotation: Double; safecall;
    procedure PenTilt(out nTiltX: Double; out nTiltY: Double); safecall;
    procedure GetPenMonitorType(out nVal: UIX_PenMonitorType); safecall;
    function Get_PenPrecise: WordBool; safecall;
    procedure Set_PenPrecise(bEnabled: WordBool); safecall;
    property ID: Integer read Get_ID;
    property IsInvalid: WordBool read Get_IsInvalid;
    property Parent: IUIX_Obj read Get_Parent;
    property ThemeClass: IUIX_ThemeClass read Get_ThemeClass;
    property ThreadCtx: IUIX_ThreadContext read Get_ThreadCtx;
    property LI: IUIX_LayoutItem read Get_LI;
    property Style: Int64 read Get_Style write Set_Style;
    property StyleEx: Integer read Get_StyleEx write Set_StyleEx;
    property Impl: IUnknown read Get_Impl write Set_Impl;
    property Windowed: WordBool read Get_Windowed;
    property WndHandle: HANDLE_T read Get_WndHandle;
    property WndText: WideString read Get_WndText write Set_WndText;
    property WndStyle: Integer read Get_WndStyle write Set_WndStyle;
    property WndStyleEx: Integer read Get_WndStyleEx write Set_WndStyleEx;
    property WndClassName: WideString read Get_WndClassName;
    property Visible: WordBool read Get_Visible;
    property VisibleCondition: WordBool read Get_VisibleCondition write Set_VisibleCondition;
    property Enabled: WordBool read Get_Enabled;
    property EnableCondition: WordBool read Get_EnableCondition write Set_EnableCondition;
    property Children: IUIX_ObjCollection read Get_Children;
    // Skipped Property "Rect"
    property ClientRect: tagRECT read Get_ClientRect;
    property ExtentRect: tagRECT read Get_ExtentRect;
    property HasInputFocus: WordBool read Get_HasInputFocus;
    property IsModal: WordBool read Get_IsModal;
    property IsAppModal: WordBool read Get_IsAppModal;
    property Text: WideString read Get_Text write Set_Text;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property ContainsInputFocus: WordBool read Get_ContainsInputFocus;
    property HasMouseCapture: WordBool read Get_HasMouseCapture;
    property IsMouseOver: WordBool read Get_IsMouseOver;
    property Extents: tagRECT read Get_Extents;
    // Skipped Property "ScrollDeviceClip"
    property PenMonitor: WordBool read Get_PenMonitor write Set_PenMonitor;
    property IsPenActive: WordBool read Get_IsPenActive;
    property IsEraserActive: WordBool read Get_IsEraserActive;
    property PenPressure: Double read Get_PenPressure;
    property PenRotation: Double read Get_PenRotation;
    property PenPrecise: WordBool read Get_PenPrecise write Set_PenPrecise;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ObjDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E9C6A106-C4C1-4F7E-9E20-65E53233A2D2}
// *********************************************************************//
  IUIX_ObjDisp = dispinterface
    ['{E9C6A106-C4C1-4F7E-9E20-65E53233A2D2}']
    property ID: Integer readonly dispid 1610743808;
    procedure SetID(const sID: WideString); dispid 1610743809;
    property IsInvalid: WordBool readonly dispid 1610743810;
    function IsChildOf(const pParent: IUIX_Obj): WordBool; dispid 1610743811;
    property Parent: IUIX_Obj readonly dispid 1610743812;
    property ThemeClass: IUIX_ThemeClass readonly dispid 1610743813;
    property ThreadCtx: IUIX_ThreadContext readonly dispid 1610743814;
    property LI: IUIX_LayoutItem readonly dispid 1610743815;
    property Style: Int64 dispid 1610743816;
    procedure SetStyle(nStyle: Int64; nStyleMask: Int64); dispid 1610743818;
    property StyleEx: Integer dispid 1610743819;
    procedure SetStyleEx(nStyleEx: Integer; nStyleExMask: Integer); dispid 1610743821;
    procedure CalcStringSize(pString: {NOT_OLEAUTO(PWideChar)}OleVariant; nLength: Integer; 
                             const pFont: IUIX_Font; var pSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; 
                             nFlags: Integer); dispid 1610743822;
    property Impl: IUnknown dispid 1610743823;
    procedure PushImpl(const pImpl: IUnknown; bExclusive: WordBool); dispid 1610743825;
    procedure PopImpl(const pImpl: IUnknown); dispid 1610743826;
    procedure QueryImpl(var riid: {NOT_OLEAUTO(TGUID)}OleVariant; const pSkipImpl: IUnknown; 
                        out pImpl: {NOT_OLEAUTO(Pointer)}OleVariant); dispid 1610743827;
    procedure Destroy; dispid 1610743828;
    property Windowed: WordBool readonly dispid 1610743829;
    property WndHandle: HANDLE_T readonly dispid 1610743830;
    function GetFirstWindowed: IUIX_Obj; dispid 1610743831;
    function GetFirstWndHandle: HANDLE_T; dispid 1610743832;
    property WndText: WideString dispid 1610743833;
    property WndStyle: Integer dispid 1610743835;
    property WndStyleEx: Integer dispid 1610743837;
    property WndClassName: WideString readonly dispid 1610743839;
    procedure CallNextEventProcess(const pImpl: IUIX_ObjImpl; const pEvent: IUIX_Event); dispid 1610743840;
    procedure DefaultWndProcess(var stWndEvent: {NOT_OLEAUTO(UIX_RawEvent)}OleVariant); dispid 1610743841;
    procedure SendRawEvent(var stEvent: {NOT_OLEAUTO(UIX_RawEvent)}OleVariant); dispid 1610743842;
    procedure PostRawEvent(var stEvent: {NOT_OLEAUTO(UIX_RawEvent)}OleVariant); dispid 1610743843;
    procedure SendRawEventToDescendants(var stEvent: {NOT_OLEAUTO(UIX_RawEvent)}OleVariant; 
                                        nMaxDeep: ULONG_T); dispid 1610743844;
    property Visible: WordBool readonly dispid 1610743845;
    property VisibleCondition: WordBool dispid 1610743846;
    procedure Show(nShowCmd: Integer; bRedraw: WordBool); dispid 1610743848;
    property Enabled: WordBool readonly dispid 1610743849;
    property EnableCondition: WordBool dispid 1610743850;
    procedure Enable(bEnable: WordBool; bRedraw: WordBool); dispid 1610743852;
    property Children: IUIX_ObjCollection readonly dispid 1610743853;
    function Rect: {NOT_OLEAUTO(tagRECT)}OleVariant; dispid 1610743854;
    property ClientRect: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610743856;
    property ExtentRect: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610743857;
    procedure ScreenPtToClient(var stScreen: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                               out stClient: {NOT_OLEAUTO(tagPOINT)}OleVariant); dispid 1610743858;
    procedure ScreenRectToClient(var stScreen: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                 out stClient: {NOT_OLEAUTO(tagRECT)}OleVariant); dispid 1610743859;
    procedure ClientPtToScreen(var stClient: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                               out stScreen: {NOT_OLEAUTO(tagPOINT)}OleVariant); dispid 1610743860;
    procedure ClientRectToScreen(var stClient: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                 out stScreen: {NOT_OLEAUTO(tagRECT)}OleVariant); dispid 1610743861;
    procedure Move(var stNewRect: {NOT_OLEAUTO(tagRECT)}OleVariant; bRedraw: WordBool); dispid 1610743862;
    procedure RedrawRect(var stRect: {NOT_OLEAUTO(tagRECT)}OleVariant; bForce: WordBool); dispid 1610743863;
    procedure Redraw(bForce: WordBool); dispid 1610743864;
    procedure StartTimer(nTimerID: LONG_PTR; nElapse: ULONG_T; bOnce: WordBool); dispid 1610743865;
    procedure StopTimer(nTimerID: LONG_PTR); dispid 1610743866;
    procedure Scroll(nDX: Integer; nDY: Integer); dispid 1610743867;
    procedure SetScrollInfo(var stViewPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                            var nAllSize: {NOT_OLEAUTO(tagSIZE)}OleVariant); dispid 1610743868;
    procedure GetScrollInfo(out stViewPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                            out nAllSize: {NOT_OLEAUTO(tagSIZE)}OleVariant); dispid 1610743869;
    procedure StartSmoothScroll(nDX: Integer; nDY: Integer; bCumulative: WordBool); dispid 1610743870;
    procedure StopSmoothScroll; dispid 1610743871;
    procedure ScrollDevice(dx: Integer; dy: Integer; var pRects: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                           nRects: Integer; var pClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant); dispid 1610743872;
    procedure SetInputFocus(bIgnoreVisibility: WordBool); dispid 1610743873;
    procedure KillInputFocus; dispid 1610743874;
    property HasInputFocus: WordBool readonly dispid 1610743875;
    procedure CaptureMouse; dispid 1610743876;
    procedure ReleaseMouse; dispid 1610743877;
    property IsModal: WordBool readonly dispid 1610743878;
    property IsAppModal: WordBool readonly dispid 1610743879;
    function DoModal(nFlags: Integer): LONG_PTR; dispid 1610743880;
    function DoModal2(var pPos: {NOT_OLEAUTO(tagRECT)}OleVariant; nFlags: Integer): LONG_PTR; dispid 1610743881;
    procedure EndModal(nRes: LONG_PTR); dispid 1610743882;
    function HitTest(var stRelPos: {NOT_OLEAUTO(tagPOINT)}OleVariant): IUIX_Obj; dispid 1610743883;
    property Text: WideString dispid 1610743884;
    property Font: IUIX_Font dispid 1610743886;
    procedure ShowThroughLayout(nFlags: Integer); dispid 1610743888;
    procedure InsertChild(const pNewChild: IUIX_Obj; nIndexBefore: Integer); dispid 1610743889;
    function GetChildIndex(const pChild: IUIX_Obj): Integer; dispid 1610743890;
    property ContainsInputFocus: WordBool readonly dispid 1610743891;
    function IsContainerOf(const pObj: IUIX_Obj): WordBool; dispid 1610743892;
    function FindChild(nChildID: Integer; nMaxLevel: Integer): IUIX_Obj; dispid 1610743893;
    procedure CenterWindow(bOnScreen: WordBool); dispid 1610743894;
    procedure FixupWndPosByWorkArea(var stWorkAreaRect: {NOT_OLEAUTO(tagRECT)}OleVariant); dispid 1610743895;
    property HasMouseCapture: WordBool readonly dispid 1610743896;
    property IsMouseOver: WordBool readonly dispid 1610743897;
    procedure FadeShow(bShow: WordBool); dispid 1610743898;
    procedure StopFade(bApplyShowFlag: WordBool); dispid 1610743899;
    property Extents: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610743900;
    procedure UpdateExtents(var stExtents: {NOT_OLEAUTO(tagRECT)}OleVariant; bRedraw: WordBool); dispid 1610743901;
    procedure ResetExtents(bRedraw: WordBool); dispid 1610743902;
    function ScrollDeviceClip: {NOT_OLEAUTO(tagRECT)}OleVariant; dispid 1610743903;
    procedure MakeRectVisible(var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                              bAllowPartialVisible: WordBool; bAllowSmoothScroll: WordBool; 
                              var pTarget: {NOT_OLEAUTO(tagRECT)}OleVariant); dispid 1610743905;
    property PenMonitor: WordBool dispid 1610743906;
    property IsPenActive: WordBool readonly dispid 1610743908;
    property IsEraserActive: WordBool readonly dispid 1610743909;
    property PenPressure: Double readonly dispid 1610743910;
    property PenRotation: Double readonly dispid 1610743911;
    procedure PenTilt(out nTiltX: Double; out nTiltY: Double); dispid 1610743912;
    procedure GetPenMonitorType(out nVal: UIX_PenMonitorType); dispid 1610743913;
    property PenPrecise: WordBool dispid 1610743914;
  end;

// *********************************************************************//
// Interface: IUIX_ThemeClass
// Flags:     (0)
// GUID:      {2D23846A-1D04-4209-8F4B-5D8150752421}
// *********************************************************************//
  IUIX_ThemeClass = interface(IUnknown)
    ['{2D23846A-1D04-4209-8F4B-5D8150752421}']
    function Get_ID(out sID: WideString): HResult; stdcall;
    function Get_Theme(out pTheme: IUIX_Theme): HResult; stdcall;
    function GetPart(const sPartID: WideString; out pPart: IUIX_ThemeClassPart): HResult; stdcall;
    function GetPartState(const sPartID: WideString; const sStateID: WideString; 
                          out pPart: IUIX_ThemeClassPartState): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Theme
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {71F2FEB3-5452-49FF-8A0F-AC49C635ECD9}
// *********************************************************************//
  IUIX_Theme = interface(IDispatch)
    ['{71F2FEB3-5452-49FF-8A0F-AC49C635ECD9}']
    function Get_ProductID: WideString; safecall;
    function Get_ID: WideString; safecall;
    function Get_Title: WideString; safecall;
    function Get_version: WideString; safecall;
    function GetClass(const sClassID: WideString): IUIX_ThemeClass; safecall;
    function GetClass2(nClassID: Integer): IUIX_ThemeClass; safecall;
    function GetFont(const sFontID: WideString): IUIX_Font; safecall;
    function GetFont2(nFontID: Integer): IUIX_Font; safecall;
    function GetIcon(const sIconID: WideString): IUIX_Icon; safecall;
    function GetIcon2(nIconID: Integer): IUIX_Icon; safecall;
    function GetShape(const sShapeID: WideString): IUIX_ThemeShape; safecall;
    function GetShape2(nShapeID: Integer): IUIX_ThemeShape; safecall;
    function GetImage(const sImageID: WideString): IUIX_ImageData; safecall;
    function GetImage2(nImageID: Integer): IUIX_ImageData; safecall;
    function GetColor(const sColorID: WideString): IUIX_ThemeColor; safecall;
    function GetColor2(nColorID: Integer): IUIX_ThemeColor; safecall;
    function GetSound(const sSoundID: WideString): IUIX_Sound; safecall;
    function GetSound2(nSoundID: Integer): IUIX_Sound; safecall;
    procedure SetFont(const sFontID: WideString; const pNewFont: IUIX_Font; bUpdate: WordBool); safecall;
    procedure UpdateAllFonts; safecall;
    procedure DrawShape(const pRC: IUIX_RenderContext; const pShape: IUIX_ThemeShape; 
                        var stRect: tagRECT; var stClipRect: tagRECT; nOpacity: Double); safecall;
    procedure DrawClassPartState(const pRC: IUIX_RenderContext; 
                                 const pState: IUIX_ThemeClassPartState; var stRect: tagRECT; 
                                 var stClipRect: tagRECT; nOpacity: Double); safecall;
    function Get_StdColor(nIndex: UIX_StdColor): Integer; safecall;
    function Get_StdFont(nIndex: UIX_StdFont): IUIX_Font; safecall;
    procedure SetColor(const sColorID: WideString; nNewColor: ULONG_T; bUpdate: WordBool); safecall;
    procedure UpdateAllColors; safecall;
    function GetBkgnd(const sBkgndID: WideString): IUIX_ThemeBkgnd; safecall;
    function GetBkgnd2(nBkgndID: Integer): IUIX_ThemeBkgnd; safecall;
    property ProductID: WideString read Get_ProductID;
    property ID: WideString read Get_ID;
    property Title: WideString read Get_Title;
    property version: WideString read Get_version;
    property StdColor[nIndex: UIX_StdColor]: Integer read Get_StdColor;
    property StdFont[nIndex: UIX_StdFont]: IUIX_Font read Get_StdFont;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ThemeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {71F2FEB3-5452-49FF-8A0F-AC49C635ECD9}
// *********************************************************************//
  IUIX_ThemeDisp = dispinterface
    ['{71F2FEB3-5452-49FF-8A0F-AC49C635ECD9}']
    property ProductID: WideString readonly dispid 1610743808;
    property ID: WideString readonly dispid 1610743809;
    property Title: WideString readonly dispid 1610743810;
    property version: WideString readonly dispid 1610743811;
    function GetClass(const sClassID: WideString): IUIX_ThemeClass; dispid 1610743812;
    function GetClass2(nClassID: Integer): IUIX_ThemeClass; dispid 1610743813;
    function GetFont(const sFontID: WideString): IUIX_Font; dispid 1610743814;
    function GetFont2(nFontID: Integer): IUIX_Font; dispid 1610743815;
    function GetIcon(const sIconID: WideString): IUIX_Icon; dispid 1610743816;
    function GetIcon2(nIconID: Integer): IUIX_Icon; dispid 1610743817;
    function GetShape(const sShapeID: WideString): IUIX_ThemeShape; dispid 1610743818;
    function GetShape2(nShapeID: Integer): IUIX_ThemeShape; dispid 1610743819;
    function GetImage(const sImageID: WideString): IUIX_ImageData; dispid 1610743820;
    function GetImage2(nImageID: Integer): IUIX_ImageData; dispid 1610743821;
    function GetColor(const sColorID: WideString): IUIX_ThemeColor; dispid 1610743822;
    function GetColor2(nColorID: Integer): IUIX_ThemeColor; dispid 1610743823;
    function GetSound(const sSoundID: WideString): IUIX_Sound; dispid 1610743824;
    function GetSound2(nSoundID: Integer): IUIX_Sound; dispid 1610743825;
    procedure SetFont(const sFontID: WideString; const pNewFont: IUIX_Font; bUpdate: WordBool); dispid 1610743826;
    procedure UpdateAllFonts; dispid 1610743827;
    procedure DrawShape(const pRC: IUIX_RenderContext; const pShape: IUIX_ThemeShape; 
                        var stRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                        var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nOpacity: Double); dispid 1610743828;
    procedure DrawClassPartState(const pRC: IUIX_RenderContext; 
                                 const pState: IUIX_ThemeClassPartState; 
                                 var stRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                 var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nOpacity: Double); dispid 1610743829;
    property StdColor[nIndex: UIX_StdColor]: Integer readonly dispid 1610743830;
    property StdFont[nIndex: UIX_StdFont]: IUIX_Font readonly dispid 1610743831;
    procedure SetColor(const sColorID: WideString; nNewColor: ULONG_T; bUpdate: WordBool); dispid 1610743832;
    procedure UpdateAllColors; dispid 1610743833;
    function GetBkgnd(const sBkgndID: WideString): IUIX_ThemeBkgnd; dispid 1610743834;
    function GetBkgnd2(nBkgndID: Integer): IUIX_ThemeBkgnd; dispid 1610743835;
  end;

// *********************************************************************//
// Interface: IUIX_Font
// Flags:     (128) NonExtensible
// GUID:      {3147026C-5079-44E7-B764-889874FD7354}
// *********************************************************************//
  IUIX_Font = interface(IUnknown)
    ['{3147026C-5079-44E7-B764-889874FD7354}']
    function Get_Handle(out nHandle: HANDLE_T): HResult; stdcall;
    function Get_LineHeight(out nLineHeight: Integer): HResult; stdcall;
    function Get_FaceName(out sFaceName: WideString): HResult; stdcall;
    function Get_Size(out nFontSize: Double): HResult; stdcall;
    function Clone(out pClone: IUIX_Font): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Icon
// Flags:     (0)
// GUID:      {0DD779EB-D9AA-4448-904C-9DA8CAE1FB26}
// *********************************************************************//
  IUIX_Icon = interface(IUnknown)
    ['{0DD779EB-D9AA-4448-904C-9DA8CAE1FB26}']
    function Get_ID(out sID: WideString): HResult; stdcall;
    function Get_ScaleType(out nScaleType: Integer): HResult; stdcall;
    function Set_ScaleType(nScaleType: Integer): HResult; stdcall;
    function Get_ItemsCount(out nCount: Integer): HResult; stdcall;
    function GetOptimalItem(var nSize: tagSIZE; nScaleType: Integer; out nOptSize: tagSIZE; 
                            out nItemIndex: Integer): HResult; stdcall;
    function GetItemSize(nItemIndex: Integer; out nSize: tagSIZE): HResult; stdcall;
    function GetItem(nItemIndex: Integer; out pSrc: IUIX_ImageData; out stSrcRect: tagRECT): HResult; stdcall;
    function AddItem(const pSrc: IUIX_ImageData; var stSrcRect: tagRECT): HResult; stdcall;
    function AddFromHandle(hIcon: HANDLE_T): HResult; stdcall;
    function RemoveItem(nItemIndex: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ImageData
// Flags:     (0)
// GUID:      {98FC993C-A3B2-41EC-8933-9EE7E52008EF}
// *********************************************************************//
  IUIX_ImageData = interface(IUnknown)
    ['{98FC993C-A3B2-41EC-8933-9EE7E52008EF}']
    function Get_Scan0(out nScan0: PARAM_T): HResult; stdcall;
    function Get_Width(out nWidth: Integer): HResult; stdcall;
    function Get_Height(out nHeight: Integer): HResult; stdcall;
    function Get_Stride(out nStride: Integer): HResult; stdcall;
    function Fill(var stPart: tagRECT; nRGBAColor: Integer): HResult; stdcall;
    function Clear(nRGBAColor: Integer): HResult; stdcall;
    function CreateIXCPage(var pPart: tagRECT; out pPage: IIXC_Page): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ThemeShape
// Flags:     (0)
// GUID:      {FCA9729D-FA5C-4D2E-98F6-846EF89264F1}
// *********************************************************************//
  IUIX_ThemeShape = interface(IUnknown)
    ['{FCA9729D-FA5C-4D2E-98F6-846EF89264F1}']
    function Get_ID(out sID: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ThemeColor
// Flags:     (0)
// GUID:      {E59828F1-1E69-4B52-A285-223FB3A49EFB}
// *********************************************************************//
  IUIX_ThemeColor = interface(IUnknown)
    ['{E59828F1-1E69-4B52-A285-223FB3A49EFB}']
    function Get_ID(out sID: WideString): HResult; stdcall;
    function Get_Value(out nValue: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Sound
// Flags:     (128) NonExtensible
// GUID:      {A82ECA8E-A43C-42ED-948A-D51781B3348A}
// *********************************************************************//
  IUIX_Sound = interface(IUnknown)
    ['{A82ECA8E-A43C-42ED-948A-D51781B3348A}']
    function Play(nFlags: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_RenderContext
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68983D9D-21E5-4A11-9928-74C284E8059A}
// *********************************************************************//
  IUIX_RenderContext = interface(IDispatch)
    ['{68983D9D-21E5-4A11-9928-74C284E8059A}']
    function Get_Parent: IUIX_RenderContext; safecall;
    function Get_Data: IUIX_ImageData; safecall;
    function GetUpdateRegion(out stUpdateRects: tagRECT; var nUpdateRectsCount: Integer): tagRECT; safecall;
    procedure Resize(nWidth: Integer; nHeight: Integer); safecall;
    procedure DrawString(pString: PWideChar; nLength: Integer; var pRect: tagRECT; 
                         const pFont: IUIX_Font; nColor: Integer; nFlags: Integer; 
                         var pClipRect: tagRECT; const pTagColors: IUIX_ColorsTable; 
                         const pTagsOut: IUIX_DrawStringTags); safecall;
    function DrawStringAndCache(pString: PWideChar; nLength: Integer; var pRect: tagRECT; 
                                const pFont: IUIX_Font; nColor: Integer; nFlags: Integer; 
                                var pClipRect: tagRECT; const pTagColors: IUIX_ColorsTable; 
                                const pTagsOut: IUIX_DrawStringTags): IUIX_DrawStringCache; safecall;
    procedure OutDrawStringCache(const pCache: IUIX_DrawStringCache; var pRect: tagRECT; 
                                 nColor: Integer; var pClipRect: tagRECT; 
                                 const pTagColors: IUIX_ColorsTable); safecall;
    procedure DrawImage(const pSrc: IUIX_ImageData; var pDstRect: tagRECT; var pSrcRect: tagRECT; 
                        var pClipRect: tagRECT; nScaleH: Integer; nScaleV: Integer; 
                        nStretchMethod: Integer; nFlags: Integer; nOpacity: Double); safecall;
    procedure DrawPixels(pSrcBGRA: Pointer; nSrcWidth: Integer; nSrcHeight: Integer; 
                         nSrcStride: Integer; var pDstRect: tagRECT; var pSrcRect: tagRECT; 
                         var pClipRect: tagRECT; nScaleH: Integer; nScaleV: Integer; 
                         nStretchMethod: Integer; nFlags: Integer; nOpacity: Double); safecall;
    procedure DrawIcon(const pIcon: IUIX_Icon; var stDstRect: tagRECT; var stClipRect: tagRECT; 
                       nNewScaleType: Integer; nFlags: Integer; nOpacity: Double); safecall;
    procedure FillSolidRect(var stRect: tagRECT; nColor: Integer; bAlphaBlend: WordBool); safecall;
    procedure FillUpdateRegion(nColor: Integer; bAlphaBlend: WordBool); safecall;
    procedure DrawSolidBorder(var stRect: tagRECT; nColor: Integer; nThickness: Integer; 
                              var stClipRect: tagRECT; bAlphaBlend: WordBool); safecall;
    procedure DrawRect(var stRect: tagRECT; const pBrush: IUIX_Brush; const pPen: IUIX_Pen; 
                       var stClipRect: tagRECT; nOpacity: Double); safecall;
    procedure DrawRoundRect(var stRect: tagRECT; const pBrush: IUIX_Brush; const pPen: IUIX_Pen; 
                            nR0: Double; nR1: Double; nR2: Double; nR3: Double; 
                            var stClipRect: tagRECT; nOpacity: Double); safecall;
    procedure DrawOval(var stRect: tagRECT; const pBrush: IUIX_Brush; const pPen: IUIX_Pen; 
                       var stClipRect: tagRECT; nMode: UIX_DrawOvalMode; nStartAndle: Double; 
                       nStopAndle: Double; nOpacity: Double); safecall;
    procedure DrawLine(var stStart: tagPOINT; var stStop: tagPOINT; const pPen: IUIX_Pen; 
                       var stClipRect: tagRECT; nOpacity: Double); safecall;
    procedure DrawLine2(var stStart: tagPOINTF; var stStop: tagPOINTF; const pPen: IUIX_Pen; 
                        var stClipRect: tagRECT; nOpacity: Double); safecall;
    procedure DrawPolyPolygon(const pPP: IUIX_PolyPolygonSrc; const pBrush: IUIX_Brush; 
                              const pPen: IUIX_Pen; var stClipRect: tagRECT; nRoundRadius: Double; 
                              nOpacity: Double; bClosed: WordBool); safecall;
    procedure DrawStringAndHighlight(pString: PWideChar; nLength: Integer; var pRect: tagRECT; 
                                     const pFont: IUIX_Font; nColor: Integer; nFlags: Integer; 
                                     var pClipRect: tagRECT; 
                                     const pHighlight: IUIX_DrawStringHighlight; 
                                     const pTagColors: IUIX_ColorsTable); safecall;
    procedure DrawPolygon(const pPP: IUIX_PolygonSrc; const pBrush: IUIX_Brush; 
                          const pPen: IUIX_Pen; var stClipRect: tagRECT; nRoundRadius: Double; 
                          nOpacity: Double; bClosed: WordBool); safecall;
    procedure DrawPolygon2(var pPP: tagPOINTF; nCount: ULONG_T; const pBrush: IUIX_Brush; 
                           const pPen: IUIX_Pen; var stClipRect: tagRECT; nRoundRadius: Double; 
                           nOpacity: Double; bClosed: WordBool); safecall;
    property Parent: IUIX_RenderContext read Get_Parent;
    property Data: IUIX_ImageData read Get_Data;
  end;

// *********************************************************************//
// DispIntf:  IUIX_RenderContextDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {68983D9D-21E5-4A11-9928-74C284E8059A}
// *********************************************************************//
  IUIX_RenderContextDisp = dispinterface
    ['{68983D9D-21E5-4A11-9928-74C284E8059A}']
    property Parent: IUIX_RenderContext readonly dispid 1610743808;
    property Data: IUIX_ImageData readonly dispid 1610743809;
    function GetUpdateRegion(out stUpdateRects: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                             var nUpdateRectsCount: Integer): {NOT_OLEAUTO(tagRECT)}OleVariant; dispid 1610743810;
    procedure Resize(nWidth: Integer; nHeight: Integer); dispid 1610743811;
    procedure DrawString(pString: {NOT_OLEAUTO(PWideChar)}OleVariant; nLength: Integer; 
                         var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; const pFont: IUIX_Font; 
                         nColor: Integer; nFlags: Integer; 
                         var pClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                         const pTagColors: IUIX_ColorsTable; const pTagsOut: IUIX_DrawStringTags); dispid 1610743812;
    function DrawStringAndCache(pString: {NOT_OLEAUTO(PWideChar)}OleVariant; nLength: Integer; 
                                var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                const pFont: IUIX_Font; nColor: Integer; nFlags: Integer; 
                                var pClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                const pTagColors: IUIX_ColorsTable; 
                                const pTagsOut: IUIX_DrawStringTags): IUIX_DrawStringCache; dispid 1610743813;
    procedure OutDrawStringCache(const pCache: IUIX_DrawStringCache; 
                                 var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nColor: Integer; 
                                 var pClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                 const pTagColors: IUIX_ColorsTable); dispid 1610743814;
    procedure DrawImage(const pSrc: IUIX_ImageData; var pDstRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                        var pSrcRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                        var pClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nScaleH: Integer; 
                        nScaleV: Integer; nStretchMethod: Integer; nFlags: Integer; nOpacity: Double); dispid 1610743815;
    procedure DrawPixels(pSrcBGRA: {NOT_OLEAUTO(Pointer)}OleVariant; nSrcWidth: Integer; 
                         nSrcHeight: Integer; nSrcStride: Integer; 
                         var pDstRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                         var pSrcRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                         var pClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nScaleH: Integer; 
                         nScaleV: Integer; nStretchMethod: Integer; nFlags: Integer; 
                         nOpacity: Double); dispid 1610743816;
    procedure DrawIcon(const pIcon: IUIX_Icon; var stDstRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                       var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nNewScaleType: Integer; 
                       nFlags: Integer; nOpacity: Double); dispid 1610743817;
    procedure FillSolidRect(var stRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nColor: Integer; 
                            bAlphaBlend: WordBool); dispid 1610743818;
    procedure FillUpdateRegion(nColor: Integer; bAlphaBlend: WordBool); dispid 1610743819;
    procedure DrawSolidBorder(var stRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nColor: Integer; 
                              nThickness: Integer; 
                              var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                              bAlphaBlend: WordBool); dispid 1610743820;
    procedure DrawRect(var stRect: {NOT_OLEAUTO(tagRECT)}OleVariant; const pBrush: IUIX_Brush; 
                       const pPen: IUIX_Pen; var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                       nOpacity: Double); dispid 1610743821;
    procedure DrawRoundRect(var stRect: {NOT_OLEAUTO(tagRECT)}OleVariant; const pBrush: IUIX_Brush; 
                            const pPen: IUIX_Pen; nR0: Double; nR1: Double; nR2: Double; 
                            nR3: Double; var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                            nOpacity: Double); dispid 1610743822;
    procedure DrawOval(var stRect: {NOT_OLEAUTO(tagRECT)}OleVariant; const pBrush: IUIX_Brush; 
                       const pPen: IUIX_Pen; var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                       nMode: UIX_DrawOvalMode; nStartAndle: Double; nStopAndle: Double; 
                       nOpacity: Double); dispid 1610743823;
    procedure DrawLine(var stStart: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                       var stStop: {NOT_OLEAUTO(tagPOINT)}OleVariant; const pPen: IUIX_Pen; 
                       var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nOpacity: Double); dispid 1610743824;
    procedure DrawLine2(var stStart: {NOT_OLEAUTO(tagPOINTF)}OleVariant; 
                        var stStop: {NOT_OLEAUTO(tagPOINTF)}OleVariant; const pPen: IUIX_Pen; 
                        var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nOpacity: Double); dispid 1610743825;
    procedure DrawPolyPolygon(const pPP: IUIX_PolyPolygonSrc; const pBrush: IUIX_Brush; 
                              const pPen: IUIX_Pen; 
                              var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                              nRoundRadius: Double; nOpacity: Double; bClosed: WordBool); dispid 1610743826;
    procedure DrawStringAndHighlight(pString: {NOT_OLEAUTO(PWideChar)}OleVariant; nLength: Integer; 
                                     var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                     const pFont: IUIX_Font; nColor: Integer; nFlags: Integer; 
                                     var pClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                     const pHighlight: IUIX_DrawStringHighlight; 
                                     const pTagColors: IUIX_ColorsTable); dispid 1610743827;
    procedure DrawPolygon(const pPP: IUIX_PolygonSrc; const pBrush: IUIX_Brush; 
                          const pPen: IUIX_Pen; var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                          nRoundRadius: Double; nOpacity: Double; bClosed: WordBool); dispid 1610743828;
    procedure DrawPolygon2(var pPP: {NOT_OLEAUTO(tagPOINTF)}OleVariant; nCount: ULONG_T; 
                           const pBrush: IUIX_Brush; const pPen: IUIX_Pen; 
                           var stClipRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nRoundRadius: Double; 
                           nOpacity: Double; bClosed: WordBool); dispid 1610743829;
  end;

// *********************************************************************//
// Interface: IUIX_ColorsTable
// Flags:     (0)
// GUID:      {E65E7C74-576B-4787-87FF-04A2C7D94A0C}
// *********************************************************************//
  IUIX_ColorsTable = interface(IUnknown)
    ['{E65E7C74-576B-4787-87FF-04A2C7D94A0C}']
    function Get(nKey: Integer; out nColor: Integer): HResult; stdcall;
    function Put(nKey: Integer; nColor: Integer): HResult; stdcall;
    function pOp(nKey: Integer): HResult; stdcall;
    function Clear: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_DrawStringTags
// Flags:     (0)
// GUID:      {E69DA83A-83F1-470E-9757-13061E9EBB8F}
// *********************************************************************//
  IUIX_DrawStringTags = interface(IUnknown)
    ['{E69DA83A-83F1-470E-9757-13061E9EBB8F}']
    function Get_Count(out nCount: Integer): HResult; stdcall;
    function GetItemID(nIndex: Integer; out nID: Integer): HResult; stdcall;
    function GetItemTip(nIndex: Integer; out sTip: WideString): HResult; stdcall;
    function GetItemRects(nIndex: Integer; var stRects: tagRECT; nRects: Integer; 
                          out nCount: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_DrawStringCache
// Flags:     (0)
// GUID:      {B613BD03-128F-48C1-8BB3-5A9BDC2E08AC}
// *********************************************************************//
  IUIX_DrawStringCache = interface(IUnknown)
    ['{B613BD03-128F-48C1-8BB3-5A9BDC2E08AC}']
    function Get_Font(out pFont: IUIX_Font): HResult; stdcall;
    function Get_Width(out nWidth: Integer): HResult; stdcall;
    function Get_Height(out nHeight: Integer): HResult; stdcall;
    function Get_Cropped(out bCropped: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Brush
// Flags:     (0)
// GUID:      {D5ACE0A2-82B7-4F9D-B829-559723F29245}
// *********************************************************************//
  IUIX_Brush = interface(IUnknown)
    ['{D5ACE0A2-82B7-4F9D-B829-559723F29245}']
    function Get_type_(out nVal: UIX_BrushType): HResult; stdcall;
    function Set_type_(nVal: UIX_BrushType): HResult; stdcall;
    function Get_GradientType(out nVal: UIX_GradientType): HResult; stdcall;
    function Set_GradientType(nVal: UIX_GradientType): HResult; stdcall;
    function Get_HatchType(out nVal: UIX_HatchType): HResult; stdcall;
    function Set_HatchType(nVal: UIX_HatchType): HResult; stdcall;
    function Get_Opacity(out nVal: Double): HResult; stdcall;
    function Set_Opacity(nVal: Double): HResult; stdcall;
    function Get_Gamma(out nVal: Double): HResult; stdcall;
    function Set_Gamma(nVal: Double): HResult; stdcall;
    function Get_Stop0(out stVal: tagPOINT): HResult; stdcall;
    function Set_Stop0(stVal: PUserType22): HResult; stdcall;
    function Get_Stop1(out stVal: tagPOINT): HResult; stdcall;
    function Set_Stop1(stVal: PUserType22): HResult; stdcall;
    function Get_Color0(out nVal: ULONG_T): HResult; stdcall;
    function Set_Color0(nVal: ULONG_T): HResult; stdcall;
    function Get_Color1(out nVal: ULONG_T): HResult; stdcall;
    function Set_Color1(nVal: ULONG_T): HResult; stdcall;
    function Get_Steps(out stVal: tagPOINT): HResult; stdcall;
    function Set_Steps(stVal: PUserType22): HResult; stdcall;
    function Get_HatchLineWidth(out nVal: Double): HResult; stdcall;
    function Set_HatchLineWidth(nVal: Double): HResult; stdcall;
    function Get_BlendType(out nVal: UIX_BlendType): HResult; stdcall;
    function Set_BlendType(nVal: UIX_BlendType): HResult; stdcall;
    function Clone(out pRes: IUIX_Brush): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Pen
// Flags:     (0)
// GUID:      {70A6F1DF-EB19-4B19-BAE1-577138C2E8CA}
// *********************************************************************//
  IUIX_Pen = interface(IUnknown)
    ['{70A6F1DF-EB19-4B19-BAE1-577138C2E8CA}']
    function Get_Width(out nVal: Double): HResult; stdcall;
    function Set_Width(nVal: Double): HResult; stdcall;
    function Get_LineJoin(out nVal: UIX_LineJoinType): HResult; stdcall;
    function Set_LineJoin(nVal: UIX_LineJoinType): HResult; stdcall;
    function Get_LineEnd(out nVal: UIX_LineEndType): HResult; stdcall;
    function Set_LineEnd(nVal: UIX_LineEndType): HResult; stdcall;
    function Get_Inside(out bVal: WordBool): HResult; stdcall;
    function Set_Inside(bVal: WordBool): HResult; stdcall;
    function Get_AlignSubpixels(out bVal: WordBool): HResult; stdcall;
    function Set_AlignSubpixels(bVal: WordBool): HResult; stdcall;
    function Get_Brush(out pBrush: IUIX_Brush): HResult; stdcall;
    function Get_DashPatternLen(out nLen: ULONG_T): HResult; stdcall;
    function GetDashPattern(var nDashPattern: Single; nDashPatternLen: ULONG_T; 
                            out nDashPatternLenOut: ULONG_T): HResult; stdcall;
    function SetDashPattern(var nDashPattern: Single; nDashPatternLen: ULONG_T): HResult; stdcall;
    function SetDashPattern2(nD1: Single; nD2: Single): HResult; stdcall;
    function Clone(out pRes: IUIX_Pen): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_PolyPolygonSrc
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5EDFBBC-19C5-44FE-8D12-4B11AF121F9E}
// *********************************************************************//
  IUIX_PolyPolygonSrc = interface(IDispatch)
    ['{F5EDFBBC-19C5-44FE-8D12-4B11AF121F9E}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_PolygonSrc; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Remove2(const pItem: IUIX_PolygonSrc); safecall;
    procedure Insert(const pItem: IUIX_PolygonSrc; nIndex: ULONG_T); safecall;
    function Find(const pItem: IUIX_PolygonSrc): Integer; safecall;
    procedure InsertFrom(const pSrc: IUIX_PolyPolygonSrc; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IUIX_PolyPolygonSrc); safecall;
    procedure AddPoints(var stItem: tagPOINTF; nCount: ULONG_T; bNewPolygon: WordBool); safecall;
    procedure AddQuad(var pt0: tagPOINTF; var pt1: tagPOINTF; var pt2: tagPOINTF; 
                      var pt3: tagPOINTF; bNewPolygon: WordBool); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_PolygonSrc read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IUIX_PolyPolygonSrcDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F5EDFBBC-19C5-44FE-8D12-4B11AF121F9E}
// *********************************************************************//
  IUIX_PolyPolygonSrcDisp = dispinterface
    ['{F5EDFBBC-19C5-44FE-8D12-4B11AF121F9E}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_PolygonSrc readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Remove2(const pItem: IUIX_PolygonSrc); dispid 1610743813;
    procedure Insert(const pItem: IUIX_PolygonSrc; nIndex: ULONG_T); dispid 1610743814;
    function Find(const pItem: IUIX_PolygonSrc): Integer; dispid 1610743815;
    procedure InsertFrom(const pSrc: IUIX_PolyPolygonSrc; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743816;
    procedure CopyFrom(const pSrc: IUIX_PolyPolygonSrc); dispid 1610743817;
    procedure AddPoints(var stItem: {NOT_OLEAUTO(tagPOINTF)}OleVariant; nCount: ULONG_T; 
                        bNewPolygon: WordBool); dispid 1610743818;
    procedure AddQuad(var pt0: {NOT_OLEAUTO(tagPOINTF)}OleVariant; 
                      var pt1: {NOT_OLEAUTO(tagPOINTF)}OleVariant; 
                      var pt2: {NOT_OLEAUTO(tagPOINTF)}OleVariant; 
                      var pt3: {NOT_OLEAUTO(tagPOINTF)}OleVariant; bNewPolygon: WordBool); dispid 1610743819;
  end;

// *********************************************************************//
// Interface: IUIX_PolygonSrc
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0CCA1C2F-7549-466C-8B67-19F5E3F53C2B}
// *********************************************************************//
  IUIX_PolygonSrc = interface(IDispatch)
    ['{0CCA1C2F-7549-466C-8B67-19F5E3F53C2B}']
    function Get_Item(nIndex: ULONG_T): tagPOINTF; safecall;
    procedure Set_Item(nIndex: ULONG_T; stItem: PUserType25); safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Insert(var stItems: tagPOINTF; nCount: ULONG_T; nIndex: ULONG_T); safecall;
    procedure InsertFrom(const pSrc: IUIX_PolygonSrc; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IUIX_PolygonSrc); safecall;
    // Skipped Property "Item"
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IUIX_PolygonSrcDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0CCA1C2F-7549-466C-8B67-19F5E3F53C2B}
// *********************************************************************//
  IUIX_PolygonSrcDisp = dispinterface
    ['{0CCA1C2F-7549-466C-8B67-19F5E3F53C2B}']
    function Item(nIndex: ULONG_T): {NOT_OLEAUTO(tagPOINTF)}OleVariant; dispid 0;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Insert(var stItems: {NOT_OLEAUTO(tagPOINTF)}OleVariant; nCount: ULONG_T; 
                     nIndex: ULONG_T); dispid 1610743813;
    procedure InsertFrom(const pSrc: IUIX_PolygonSrc; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743814;
    procedure CopyFrom(const pSrc: IUIX_PolygonSrc); dispid 1610743815;
  end;

// *********************************************************************//
// Interface: IUIX_DrawStringHighlight
// Flags:     (0)
// GUID:      {9CEAC8B7-F4D2-43FF-9AE7-3716C6837079}
// *********************************************************************//
  IUIX_DrawStringHighlight = interface(IUnknown)
    ['{9CEAC8B7-F4D2-43FF-9AE7-3716C6837079}']
    function Get_Brush(out pBrush: IUIX_Brush): HResult; stdcall;
    function Set_Brush(const pBrush: IUIX_Brush): HResult; stdcall;
    function Get_Pen(out pPen: IUIX_Pen): HResult; stdcall;
    function Set_Pen(const pPen: IUIX_Pen): HResult; stdcall;
    function Get_RoundRadius(out nVal: Double): HResult; stdcall;
    function Set_RoundRadius(nVal: Double): HResult; stdcall;
    function AddRange(nFirstCharIndex: ULONG_T; nCharsCount: ULONG_T): HResult; stdcall;
    function ClearRanges: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ThemeClassPartState
// Flags:     (0)
// GUID:      {B8A76996-A36A-4FDE-93E4-2CAEE328C1C6}
// *********************************************************************//
  IUIX_ThemeClassPartState = interface(IUnknown)
    ['{B8A76996-A36A-4FDE-93E4-2CAEE328C1C6}']
    function Get_ID(out sID: WideString): HResult; stdcall;
    function Get_Extents(out stExtents: tagRECT): HResult; stdcall;
    function Get_Shape(out pShape: IUIX_ThemeShape): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ThemeBkgnd
// Flags:     (128) NonExtensible
// GUID:      {386883A3-3BD5-4897-864B-E9F968A6BF11}
// *********************************************************************//
  IUIX_ThemeBkgnd = interface(IUnknown)
    ['{386883A3-3BD5-4897-864B-E9F968A6BF11}']
    function Get_ID(out sID: WideString): HResult; stdcall;
    function Get_Title(out sTitle: WideString): HResult; stdcall;
    function Get_LocTitle(out sTitle: WideString): HResult; stdcall;
    function Get_Shape(out pShape: IUIX_ThemeShape): HResult; stdcall;
    function Get_BaseColor(out sColorID: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ThemeClassPart
// Flags:     (0)
// GUID:      {FCFE0011-C751-4491-BD2C-30050987620D}
// *********************************************************************//
  IUIX_ThemeClassPart = interface(IUnknown)
    ['{FCFE0011-C751-4491-BD2C-30050987620D}']
    function Get_ID(out sID: WideString): HResult; stdcall;
    function GetState(const sStateID: WideString; out pState: IUIX_ThemeClassPartState): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ThreadContext
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E0AAB4D6-161B-4ED0-8BA2-BDD15BF79C47}
// *********************************************************************//
  IUIX_ThreadContext = interface(IDispatch)
    ['{E0AAB4D6-161B-4ED0-8BA2-BDD15BF79C47}']
    function Get_MouseCapture: IUIX_Obj; safecall;
    function Get_InputFocus: IUIX_Obj; safecall;
    function Get_MouseOver: IUIX_Obj; safecall;
    function Get_CmdManager: IUIX_CmdManager; safecall;
    function Get_Inst: IUIX_Inst; safecall;
    function Get_ThreadID: Integer; safecall;
    procedure RegisterEventMonitor(const pMonitor: IUIX_EventMonitor); safecall;
    procedure UnregisterEventMonitor(const pMonitor: IUIX_EventMonitor); safecall;
    procedure RegisterInputFocusMonitor(const pMonitor: IUIX_InputFocusMonitor); safecall;
    procedure UnregisterInputFocusMonitor(const pMonitor: IUIX_InputFocusMonitor); safecall;
    procedure RegisterMouseOverMonitor(const pMonitor: IUIX_MouseOverMonitor); safecall;
    procedure UnregisterMouseOverMonitor(const pMonitor: IUIX_MouseOverMonitor); safecall;
    procedure RegisterMouseCaptureMonitor(const pMonitor: IUIX_MouseCaptureMonitor); safecall;
    procedure UnregisterMouseCaptureMonitor(const pMonitor: IUIX_MouseCaptureMonitor); safecall;
    procedure StartInertialScroll(const pObj: IUIX_Obj; nVSpeed: Double; nHSpeed: Double); safecall;
    procedure StopInertialScroll(const pObj: IUIX_Obj); safecall;
    function GetTouchProcState: Integer; safecall;
    function Get_FullScreen: IUIX_LayoutItem; safecall;
    procedure RegisterEventLoopMonitor(const pMonitor: IUIX_EventLoopMonitor); safecall;
    procedure UnregisterEventLoopMonitor(const pMonitor: IUIX_EventLoopMonitor); safecall;
    function Get_DefaultDropTarget: IDropTarget; safecall;
    procedure Set_DefaultDropTarget(const pDropTarget: IDropTarget); safecall;
    property MouseCapture: IUIX_Obj read Get_MouseCapture;
    property InputFocus: IUIX_Obj read Get_InputFocus;
    property MouseOver: IUIX_Obj read Get_MouseOver;
    property CmdManager: IUIX_CmdManager read Get_CmdManager;
    property Inst: IUIX_Inst read Get_Inst;
    property ThreadID: Integer read Get_ThreadID;
    property FullScreen: IUIX_LayoutItem read Get_FullScreen;
    property DefaultDropTarget: IDropTarget read Get_DefaultDropTarget write Set_DefaultDropTarget;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ThreadContextDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E0AAB4D6-161B-4ED0-8BA2-BDD15BF79C47}
// *********************************************************************//
  IUIX_ThreadContextDisp = dispinterface
    ['{E0AAB4D6-161B-4ED0-8BA2-BDD15BF79C47}']
    property MouseCapture: IUIX_Obj readonly dispid 1610743808;
    property InputFocus: IUIX_Obj readonly dispid 1610743809;
    property MouseOver: IUIX_Obj readonly dispid 1610743810;
    property CmdManager: IUIX_CmdManager readonly dispid 1610743811;
    property Inst: IUIX_Inst readonly dispid 1610743812;
    property ThreadID: Integer readonly dispid 1610743813;
    procedure RegisterEventMonitor(const pMonitor: IUIX_EventMonitor); dispid 1610743814;
    procedure UnregisterEventMonitor(const pMonitor: IUIX_EventMonitor); dispid 1610743815;
    procedure RegisterInputFocusMonitor(const pMonitor: IUIX_InputFocusMonitor); dispid 1610743816;
    procedure UnregisterInputFocusMonitor(const pMonitor: IUIX_InputFocusMonitor); dispid 1610743817;
    procedure RegisterMouseOverMonitor(const pMonitor: IUIX_MouseOverMonitor); dispid 1610743818;
    procedure UnregisterMouseOverMonitor(const pMonitor: IUIX_MouseOverMonitor); dispid 1610743819;
    procedure RegisterMouseCaptureMonitor(const pMonitor: IUIX_MouseCaptureMonitor); dispid 1610743820;
    procedure UnregisterMouseCaptureMonitor(const pMonitor: IUIX_MouseCaptureMonitor); dispid 1610743821;
    procedure StartInertialScroll(const pObj: IUIX_Obj; nVSpeed: Double; nHSpeed: Double); dispid 1610743822;
    procedure StopInertialScroll(const pObj: IUIX_Obj); dispid 1610743823;
    function GetTouchProcState: Integer; dispid 1610743824;
    property FullScreen: IUIX_LayoutItem readonly dispid 1610743825;
    procedure RegisterEventLoopMonitor(const pMonitor: IUIX_EventLoopMonitor); dispid 1610743826;
    procedure UnregisterEventLoopMonitor(const pMonitor: IUIX_EventLoopMonitor); dispid 1610743827;
    property DefaultDropTarget: IDropTarget dispid 1610743828;
  end;

// *********************************************************************//
// Interface: IUIX_CmdManager
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {88D5604A-0C19-4F47-BD4A-969D740A5B16}
// *********************************************************************//
  IUIX_CmdManager = interface(IDispatch)
    ['{88D5604A-0C19-4F47-BD4A-969D740A5B16}']
    function Get_Cmds: IUIX_CmdCollection; safecall;
    function Get_Cmd(nCmdID: Integer): IUIX_Cmd; safecall;
    procedure ShowProCmds(bShow: WordBool); safecall;
    procedure UpdateCmdItems(nUpdateFlags: Integer; nCmdID: Integer); safecall;
    procedure UpdateCmdItemsByTarget(nUpdateFlags: Integer; nTargetID: Integer); safecall;
    procedure FlushCmdItemsUpdates; safecall;
    function ShowPopupMenu(const pOwner: IUIX_Obj; const pMenu: IUIX_CmdMenu; var pPos: tagRECT; 
                           bReturnCmd: WordBool; nPopupFlags: Integer): Integer; safecall;
    procedure LockAllPanesUpdates; safecall;
    procedure UnlockAllPanesUpdates; safecall;
    function Get_PanesUpdatesLocked: WordBool; safecall;
    function Get_AccelsAllowed: WordBool; safecall;
    procedure Set_AccelsAllowed(bAllowed: WordBool); safecall;
    function Get_LockedToolbars: WordBool; safecall;
    procedure Set_LockedToolbars(bLocked: WordBool); safecall;
    function Get_LockedPanes: WordBool; safecall;
    procedure Set_LockedPanes(bLocked: WordBool); safecall;
    procedure LockAccels; safecall;
    procedure UnlockAccels; safecall;
    function Get_AccelsLocks: Integer; safecall;
    function Get_AccelTargetCallback: IUIX_CmdAccelTargetCallback; safecall;
    procedure Set_AccelTargetCallback(const pCb: IUIX_CmdAccelTargetCallback); safecall;
    procedure ExecCmd(const sCmdID: WideString; const pOwner: IUIX_Obj); safecall;
    procedure ExecCmd2(nCmdID: Integer; const pOwner: IUIX_Obj); safecall;
    procedure GetContextMenuNotifyInfo(out pOwner: IUIX_Obj; out stOrigin: tagPOINT; 
                                       out bFromKeyboard: WordBool); safecall;
    function IsNotifyFromContextMenu: WordBool; safecall;
    function IsNotifyFromMenu: WordBool; safecall;
    function IsNotifyFromToolbar: WordBool; safecall;
    function IsNotifyFromAccel: WordBool; safecall;
    procedure GetCmdCtlOwner(const pICtl: IUIX_Obj; var pOwner: IUIX_Obj); safecall;
    function Get_ExtraOpts: Integer; safecall;
    procedure Set_ExtraOpts(nOpts: Integer); safecall;
    procedure SetExtraOpts(nOpts: Integer; nOptsMask: Integer); safecall;
    function Get_AppBtnTitle: WideString; safecall;
    procedure Set_AppBtnTitle(const pTitle: WideString); safecall;
    function Get_AppBtnColor: Integer; safecall;
    procedure Set_AppBtnColor(nColor: Integer); safecall;
    procedure ShowAppMenu(const pContext: IUIX_Obj; bShow: WordBool; const sItemSel: WideString); safecall;
    procedure HideAllAppMenus; safecall;
    procedure InsertCmdItems(const pOwner: IUIX_Obj; const pCmds: INumArray; 
                             const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); safecall;
    procedure InsertCmdItems2(const pOwner: IUIX_Obj; var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); safecall;
    function GetBarDefaultHeight(const pCtx: IUIX_Obj): Integer; safecall;
    function GetFirstCmdBar(nID: Integer): IUIX_CmdBar; safecall;
    function GetFirstRibbonTab(nID: Integer): IUIX_CmdRibbonTab; safecall;
    function Get_CmdBarsCount: ULONG_T; safecall;
    function Get_CmdBar(nIndex: Integer): IUIX_CmdBar; safecall;
    function IsStdRibbonTab(nTabID: Integer): WordBool; safecall;
    function IsStdBar(nBarID: Integer): WordBool; safecall;
    property Cmds: IUIX_CmdCollection read Get_Cmds;
    property Cmd[nCmdID: Integer]: IUIX_Cmd read Get_Cmd;
    property PanesUpdatesLocked: WordBool read Get_PanesUpdatesLocked;
    property AccelsAllowed: WordBool read Get_AccelsAllowed write Set_AccelsAllowed;
    property LockedToolbars: WordBool read Get_LockedToolbars write Set_LockedToolbars;
    property LockedPanes: WordBool read Get_LockedPanes write Set_LockedPanes;
    property AccelsLocks: Integer read Get_AccelsLocks;
    property AccelTargetCallback: IUIX_CmdAccelTargetCallback read Get_AccelTargetCallback write Set_AccelTargetCallback;
    property ExtraOpts: Integer read Get_ExtraOpts write Set_ExtraOpts;
    property AppBtnTitle: WideString read Get_AppBtnTitle write Set_AppBtnTitle;
    property AppBtnColor: Integer read Get_AppBtnColor write Set_AppBtnColor;
    property CmdBarsCount: ULONG_T read Get_CmdBarsCount;
    property CmdBar[nIndex: Integer]: IUIX_CmdBar read Get_CmdBar;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdManagerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {88D5604A-0C19-4F47-BD4A-969D740A5B16}
// *********************************************************************//
  IUIX_CmdManagerDisp = dispinterface
    ['{88D5604A-0C19-4F47-BD4A-969D740A5B16}']
    property Cmds: IUIX_CmdCollection readonly dispid 1610743808;
    property Cmd[nCmdID: Integer]: IUIX_Cmd readonly dispid 1610743809;
    procedure ShowProCmds(bShow: WordBool); dispid 1610743810;
    procedure UpdateCmdItems(nUpdateFlags: Integer; nCmdID: Integer); dispid 1610743811;
    procedure UpdateCmdItemsByTarget(nUpdateFlags: Integer; nTargetID: Integer); dispid 1610743812;
    procedure FlushCmdItemsUpdates; dispid 1610743813;
    function ShowPopupMenu(const pOwner: IUIX_Obj; const pMenu: IUIX_CmdMenu; 
                           var pPos: {NOT_OLEAUTO(tagRECT)}OleVariant; bReturnCmd: WordBool; 
                           nPopupFlags: Integer): Integer; dispid 1610743814;
    procedure LockAllPanesUpdates; dispid 1610743815;
    procedure UnlockAllPanesUpdates; dispid 1610743816;
    property PanesUpdatesLocked: WordBool readonly dispid 1610743817;
    property AccelsAllowed: WordBool dispid 1610743818;
    property LockedToolbars: WordBool dispid 1610743820;
    property LockedPanes: WordBool dispid 1610743822;
    procedure LockAccels; dispid 1610743824;
    procedure UnlockAccels; dispid 1610743825;
    property AccelsLocks: Integer readonly dispid 1610743826;
    property AccelTargetCallback: IUIX_CmdAccelTargetCallback dispid 1610743827;
    procedure ExecCmd(const sCmdID: WideString; const pOwner: IUIX_Obj); dispid 1610743829;
    procedure ExecCmd2(nCmdID: Integer; const pOwner: IUIX_Obj); dispid 1610743830;
    procedure GetContextMenuNotifyInfo(out pOwner: IUIX_Obj; 
                                       out stOrigin: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                                       out bFromKeyboard: WordBool); dispid 1610743831;
    function IsNotifyFromContextMenu: WordBool; dispid 1610743832;
    function IsNotifyFromMenu: WordBool; dispid 1610743833;
    function IsNotifyFromToolbar: WordBool; dispid 1610743834;
    function IsNotifyFromAccel: WordBool; dispid 1610743835;
    procedure GetCmdCtlOwner(const pICtl: IUIX_Obj; var pOwner: IUIX_Obj); dispid 1610743836;
    property ExtraOpts: Integer dispid 1610743837;
    procedure SetExtraOpts(nOpts: Integer; nOptsMask: Integer); dispid 1610743839;
    property AppBtnTitle: WideString dispid 1610743840;
    property AppBtnColor: Integer dispid 1610743842;
    procedure ShowAppMenu(const pContext: IUIX_Obj; bShow: WordBool; const sItemSel: WideString); dispid 1610743844;
    procedure HideAllAppMenus; dispid 1610743845;
    procedure InsertCmdItems(const pOwner: IUIX_Obj; const pCmds: INumArray; 
                             const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610743846;
    procedure InsertCmdItems2(const pOwner: IUIX_Obj; var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610743847;
    function GetBarDefaultHeight(const pCtx: IUIX_Obj): Integer; dispid 1610743848;
    function GetFirstCmdBar(nID: Integer): IUIX_CmdBar; dispid 1610743849;
    function GetFirstRibbonTab(nID: Integer): IUIX_CmdRibbonTab; dispid 1610743850;
    property CmdBarsCount: ULONG_T readonly dispid 1610743851;
    property CmdBar[nIndex: Integer]: IUIX_CmdBar readonly dispid 1610743852;
    function IsStdRibbonTab(nTabID: Integer): WordBool; dispid 1610743853;
    function IsStdBar(nBarID: Integer): WordBool; dispid 1610743854;
  end;

// *********************************************************************//
// Interface: IUIX_CmdCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E31522CE-AB58-45E5-95CC-D51B4429C8EB}
// *********************************************************************//
  IUIX_CmdCollection = interface(IDispatch)
    ['{E31522CE-AB58-45E5-95CC-D51B4429C8EB}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_Cmd; safecall;
    function Get_Count: ULONG_T; safecall;
    function AddNew(const sID: WideString; const sTargetID: WideString; 
                    const pHandler: IUIX_CmdHandler): IUIX_Cmd; safecall;
    function AddNew2(nID: Integer; nTargetID: Integer; const pHandler: IUIX_CmdHandler): IUIX_Cmd; safecall;
    procedure Delete(const pCmd: IUIX_Cmd); safecall;
    procedure Delete2(nCmdID: Integer); safecall;
    procedure DeleteItems(const pCmd: IUIX_Cmd; nFlags: Integer); safecall;
    function Find(const sID: WideString): IUIX_Cmd; safecall;
    function Find2(nID: Integer): IUIX_Cmd; safecall;
    procedure DeleteAll(const pHandler: IUIX_CmdHandler); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_Cmd read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdCollectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E31522CE-AB58-45E5-95CC-D51B4429C8EB}
// *********************************************************************//
  IUIX_CmdCollectionDisp = dispinterface
    ['{E31522CE-AB58-45E5-95CC-D51B4429C8EB}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_Cmd readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    function AddNew(const sID: WideString; const sTargetID: WideString; 
                    const pHandler: IUIX_CmdHandler): IUIX_Cmd; dispid 1610743811;
    function AddNew2(nID: Integer; nTargetID: Integer; const pHandler: IUIX_CmdHandler): IUIX_Cmd; dispid 1610743812;
    procedure Delete(const pCmd: IUIX_Cmd); dispid 1610743813;
    procedure Delete2(nCmdID: Integer); dispid 1610743814;
    procedure DeleteItems(const pCmd: IUIX_Cmd; nFlags: Integer); dispid 1610743815;
    function Find(const sID: WideString): IUIX_Cmd; dispid 1610743816;
    function Find2(nID: Integer): IUIX_Cmd; dispid 1610743817;
    procedure DeleteAll(const pHandler: IUIX_CmdHandler); dispid 1610743818;
  end;

// *********************************************************************//
// Interface: IUIX_Cmd
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C11678C5-B6D8-4321-944C-ED576708886A}
// *********************************************************************//
  IUIX_Cmd = interface(IDispatch)
    ['{C11678C5-B6D8-4321-944C-ED576708886A}']
    function Get_ID: Integer; safecall;
    function Get_TargetID: Integer; safecall;
    function Get_Handler: IUIX_CmdHandler; safecall;
    procedure Set_Handler(const pHandler: IUIX_CmdHandler); safecall;
    function Get_Icon: IUIX_Icon; safecall;
    procedure Set_Icon(const pIcon: IUIX_Icon); safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const sTitle: WideString); safecall;
    function Get_ShortTitle: WideString; safecall;
    procedure Set_ShortTitle(const sShortTitle: WideString); safecall;
    function Get_Tip: WideString; safecall;
    procedure Set_Tip(const sTip: WideString); safecall;
    function Get_Offline: WordBool; safecall;
    procedure Set_Offline(bVal: WordBool); safecall;
    function Get_Hidden: WordBool; safecall;
    procedure Set_Hidden(bVal: WordBool); safecall;
    function Get_NewItemStyle: Integer; safecall;
    procedure Set_NewItemStyle(nStyle: Integer); safecall;
    function Get_NewItemStyleMaskEU: Integer; safecall;
    procedure Set_NewItemStyleMaskEU(nStyleMask: Integer); safecall;
    function Get_Flags: Integer; safecall;
    function Get_ShortcutsCount: Integer; safecall;
    procedure GetShortcut(nIndex: Integer; out stA1: UIX_CmdAccel; out stA2: UIX_CmdAccel); safecall;
    procedure AddShortcut(var stA: UIX_CmdAccel; nPriority: Integer); safecall;
    procedure AddShortcut2(var stA1: UIX_CmdAccel; var stA2: UIX_CmdAccel; nPriority: Integer); safecall;
    procedure RemoveShortcut(nIndex: Integer); safecall;
    procedure ModifyShortcut(nIndex: Integer; var stA: UIX_CmdAccel); safecall;
    procedure ModifyShortcut2(nIndex: Integer; var stA1: UIX_CmdAccel; var stA2: UIX_CmdAccel); safecall;
    function Get_Alias: WideString; safecall;
    procedure Set_Alias(const sAlias: WideString); safecall;
    function Get_CtgID: WideString; safecall;
    procedure Set_CtgID(const sCategoryID: WideString); safecall;
    function Get_UserData: PARAM_T; safecall;
    procedure Set_UserData(nData: PARAM_T); safecall;
    function Get_KeyTip: WideString; safecall;
    procedure Set_KeyTip(const sKeyTip: WideString); safecall;
    property ID: Integer read Get_ID;
    property TargetID: Integer read Get_TargetID;
    property Handler: IUIX_CmdHandler read Get_Handler write Set_Handler;
    property Icon: IUIX_Icon read Get_Icon write Set_Icon;
    property Title: WideString read Get_Title write Set_Title;
    property ShortTitle: WideString read Get_ShortTitle write Set_ShortTitle;
    property Tip: WideString read Get_Tip write Set_Tip;
    property Offline: WordBool read Get_Offline write Set_Offline;
    property Hidden: WordBool read Get_Hidden write Set_Hidden;
    property NewItemStyle: Integer read Get_NewItemStyle write Set_NewItemStyle;
    property NewItemStyleMaskEU: Integer read Get_NewItemStyleMaskEU write Set_NewItemStyleMaskEU;
    property Flags: Integer read Get_Flags;
    property ShortcutsCount: Integer read Get_ShortcutsCount;
    property Alias: WideString read Get_Alias write Set_Alias;
    property CtgID: WideString read Get_CtgID write Set_CtgID;
    property UserData: PARAM_T read Get_UserData write Set_UserData;
    property KeyTip: WideString read Get_KeyTip write Set_KeyTip;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C11678C5-B6D8-4321-944C-ED576708886A}
// *********************************************************************//
  IUIX_CmdDisp = dispinterface
    ['{C11678C5-B6D8-4321-944C-ED576708886A}']
    property ID: Integer readonly dispid 1610743808;
    property TargetID: Integer readonly dispid 1610743809;
    property Handler: IUIX_CmdHandler dispid 1610743810;
    property Icon: IUIX_Icon dispid 1610743812;
    property Title: WideString dispid 1610743814;
    property ShortTitle: WideString dispid 1610743816;
    property Tip: WideString dispid 1610743818;
    property Offline: WordBool dispid 1610743820;
    property Hidden: WordBool dispid 1610743822;
    property NewItemStyle: Integer dispid 1610743824;
    property NewItemStyleMaskEU: Integer dispid 1610743826;
    property Flags: Integer readonly dispid 1610743828;
    property ShortcutsCount: Integer readonly dispid 1610743829;
    procedure GetShortcut(nIndex: Integer; out stA1: {NOT_OLEAUTO(UIX_CmdAccel)}OleVariant; 
                          out stA2: {NOT_OLEAUTO(UIX_CmdAccel)}OleVariant); dispid 1610743830;
    procedure AddShortcut(var stA: {NOT_OLEAUTO(UIX_CmdAccel)}OleVariant; nPriority: Integer); dispid 1610743831;
    procedure AddShortcut2(var stA1: {NOT_OLEAUTO(UIX_CmdAccel)}OleVariant; 
                           var stA2: {NOT_OLEAUTO(UIX_CmdAccel)}OleVariant; nPriority: Integer); dispid 1610743832;
    procedure RemoveShortcut(nIndex: Integer); dispid 1610743833;
    procedure ModifyShortcut(nIndex: Integer; var stA: {NOT_OLEAUTO(UIX_CmdAccel)}OleVariant); dispid 1610743834;
    procedure ModifyShortcut2(nIndex: Integer; var stA1: {NOT_OLEAUTO(UIX_CmdAccel)}OleVariant; 
                              var stA2: {NOT_OLEAUTO(UIX_CmdAccel)}OleVariant); dispid 1610743835;
    property Alias: WideString dispid 1610743836;
    property CtgID: WideString dispid 1610743838;
    property UserData: PARAM_T dispid 1610743840;
    property KeyTip: WideString dispid 1610743842;
  end;

// *********************************************************************//
// Interface: IUIX_CmdHandler
// Flags:     (0)
// GUID:      {157CA85B-4378-4A20-B060-37C61DED02A9}
// *********************************************************************//
  IUIX_CmdHandler = interface(IUnknown)
    ['{157CA85B-4378-4A20-B060-37C61DED02A9}']
    function OnCreateNewCtl(const pCmd: IUIX_Cmd; const pParent: IUIX_CmdBar; out pCtl: IUIX_Obj): HResult; stdcall;
    function OnGetCtlSizes(const pItem: IUIX_CmdItem; var nSize: tagSIZE; var nMinSize: tagSIZE; 
                           var nMaxSize: tagSIZE): HResult; stdcall;
    function OnGetItemState(const pCmd: IUIX_Cmd; const pItem: IUIX_CmdItem; 
                            const pOwner: IUIX_Obj; out nState: Integer): HResult; stdcall;
    function OnGetItemSubMenu(const pItem: IUIX_CmdItem; out pSubMenu: IUIX_CmdMenu): HResult; stdcall;
    function OnNotify(nCode: Integer; const pCmd: IUIX_Cmd; const pItem: IUIX_CmdItem; 
                      const pOwner: IUIX_Obj; nNotifyData: PARAM_T): HResult; stdcall;
    function OnDrawItemIcon(const pRC: IUIX_RenderContext; const pItem: IUIX_CmdItem; 
                            var stIconRect: tagRECT; var stClip: tagRECT): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ObjImpl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A4F44B54-E71F-41F9-95E7-401437931922}
// *********************************************************************//
  IUIX_ObjImpl = interface(IDispatch)
    ['{A4F44B54-E71F-41F9-95E7-401437931922}']
    function Get_Obj: IUIX_Obj; safecall;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); safecall;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); safecall;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); safecall;
    property Obj: IUIX_Obj read Get_Obj;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ObjImplDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A4F44B54-E71F-41F9-95E7-401437931922}
// *********************************************************************//
  IUIX_ObjImplDisp = dispinterface
    ['{A4F44B54-E71F-41F9-95E7-401437931922}']
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_CmdBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {87CBE853-7868-4688-8847-BFE67802F826}
// *********************************************************************//
  IUIX_CmdBar = interface(IUIX_ObjImpl)
    ['{87CBE853-7868-4688-8847-BFE67802F826}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_CmdItemBox; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_ID: Integer; safecall;
    function Get_Line: IUIX_CmdLine; safecall;
    function Get_Parent: IUIX_CmdBar; safecall;
    function Get_Owner: IUIX_Obj; safecall;
    procedure Set_Owner(const pOwner: IUIX_Obj); safecall;
    function Get_IsPopupMenu: WordBool; safecall;
    function Get_IsPopupBox: WordBool; safecall;
    function Get_IsVert: WordBool; safecall;
    function Get_HasChevron: WordBool; safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const sTitle: WideString); safecall;
    function Get_Icon: IUIX_Icon; safecall;
    procedure Set_Icon(const pIcon: IUIX_Icon); safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    function Get_Size: UIX_CmdBarSize; safecall;
    procedure Set_Size(nSize: UIX_CmdBarSize); safecall;
    function Get_ActualSize: UIX_CmdBarSize; safecall;
    function InsertNewBox(const pNewBoxID: WideString; nInsertBefore: Integer; 
                          nIdealSize: UIX_CmdItemSize; nLowerSize: UIX_CmdItemSize; nStyle: Integer): IUIX_CmdItemBox; safecall;
    function InsertNewBox2(nNewBoxID: Integer; nInsertBefore: Integer; nIdealSize: UIX_CmdItemSize; 
                           nLowerSize: UIX_CmdItemSize; nStyle: Integer): IUIX_CmdItemBox; safecall;
    procedure DeleteBoxes(nIndex: Integer; nCount: Integer); safecall;
    procedure Clear; safecall;
    procedure MoveBoxes(nIndex: Integer; nNewIndex: Integer; nCount: Integer; 
                        const pNewBar: IUIX_CmdBar); safecall;
    function InsertItem(const pCmd: IUIX_Cmd; nIndexBefore: Integer; nNewStyle: Integer; 
                        nNewStyleMask: Integer; nBoxIndex: Integer): IUIX_CmdItem; safecall;
    function InsertItem2(nCmdID: Integer; nIndexBefore: Integer; nNewStyle: Integer; 
                         nNewStyleMask: Integer; nBoxIndex: Integer): IUIX_CmdItem; safecall;
    function InsertSeparator(nIndexBefore: Integer; nStyle: Integer; nBoxIndex: Integer): IUIX_CmdItem; safecall;
    procedure DeleteItemsByCmd(const pCmd: IUIX_Cmd; bRecursive: WordBool; bFirstOnly: WordBool); safecall;
    function FindFirstItemByCmdName(const sCmdName: WideString): IUIX_CmdItem; safecall;
    function FindFirstItemByCmdID(nCmdID: Integer): IUIX_CmdItem; safecall;
    function FindItemByCtl(const pCtl: IUIX_Obj): IUIX_CmdItem; safecall;
    function FlatInsertItem(const pCmd: IUIX_Cmd; nFlatIndexBefore: Integer; nNewStyle: Integer; 
                            nNewStyleMask: Integer): IUIX_CmdItem; safecall;
    function FlatInsertItem2(nCmdID: Integer; nFlatIndexBefore: Integer; nNewStyle: Integer; 
                             nNewStyleMask: Integer): IUIX_CmdItem; safecall;
    function FlatInsertSeparator(nFlatIndexBefore: Integer; nStyle: Integer): IUIX_CmdItem; safecall;
    function FlatFindFirstItemByCmdName(const sCmdName: WideString): Integer; safecall;
    function FlatFindFirstItemByCmdID(nCmdID: Integer): Integer; safecall;
    function FlatGetItemsCount: ULONG_T; safecall;
    function FlatGetItem(nFlatIndex: Integer): IUIX_CmdItem; safecall;
    procedure FlatDeleteItem(nFlatIndex: Integer); safecall;
    function FlatItemIsSeparator(nFlatIndex: Integer): WordBool; safecall;
    function Get_UpdatesLocked: WordBool; safecall;
    procedure LockUpdates; safecall;
    procedure UnLockUpdates; safecall;
    procedure Update; safecall;
    function Get_IsFloating: WordBool; safecall;
    procedure MakeFloating(bIdealSize: WordBool); safecall;
    procedure MakeFloating2(var stPos: tagRECT; bIdealSize: WordBool); safecall;
    procedure Show; safecall;
    procedure Hide; safecall;
    function Get_IsHidden: WordBool; safecall;
    function Get_IsMinimized: WordBool; safecall;
    procedure Expand; safecall;
    procedure Minimize; safecall;
    function Get_BorderStyle: Integer; safecall;
    procedure Set_BorderStyle(nBorderStyle: Integer); safecall;
    procedure Highlight(bHighlight: WordBool); safecall;
    procedure Redraw; safecall;
    function HitTest(var stRelPos: tagPOINT; out nRes: Integer; out nFlags: Integer): IUIX_CmdItem; safecall;
    function Get_AppMenuContainer: IUIX_Obj; safecall;
    function Get_IsTemp: WordBool; safecall;
    function Get_IsSpecial: WordBool; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_CmdItemBox read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property ID: Integer read Get_ID;
    property Line: IUIX_CmdLine read Get_Line;
    property Parent: IUIX_CmdBar read Get_Parent;
    property Owner: IUIX_Obj read Get_Owner write Set_Owner;
    property IsPopupMenu: WordBool read Get_IsPopupMenu;
    property IsPopupBox: WordBool read Get_IsPopupBox;
    property IsVert: WordBool read Get_IsVert;
    property HasChevron: WordBool read Get_HasChevron;
    property Title: WideString read Get_Title write Set_Title;
    property Icon: IUIX_Icon read Get_Icon write Set_Icon;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property Size: UIX_CmdBarSize read Get_Size write Set_Size;
    property ActualSize: UIX_CmdBarSize read Get_ActualSize;
    property UpdatesLocked: WordBool read Get_UpdatesLocked;
    property IsFloating: WordBool read Get_IsFloating;
    property IsHidden: WordBool read Get_IsHidden;
    property IsMinimized: WordBool read Get_IsMinimized;
    property BorderStyle: Integer read Get_BorderStyle write Set_BorderStyle;
    property AppMenuContainer: IUIX_Obj read Get_AppMenuContainer;
    property IsTemp: WordBool read Get_IsTemp;
    property IsSpecial: WordBool read Get_IsSpecial;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdBarDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {87CBE853-7868-4688-8847-BFE67802F826}
// *********************************************************************//
  IUIX_CmdBarDisp = dispinterface
    ['{87CBE853-7868-4688-8847-BFE67802F826}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_CmdItemBox readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610809346;
    property ID: Integer readonly dispid 1610809347;
    property Line: IUIX_CmdLine readonly dispid 1610809348;
    property Parent: IUIX_CmdBar readonly dispid 1610809349;
    property Owner: IUIX_Obj dispid 1610809350;
    property IsPopupMenu: WordBool readonly dispid 1610809352;
    property IsPopupBox: WordBool readonly dispid 1610809353;
    property IsVert: WordBool readonly dispid 1610809354;
    property HasChevron: WordBool readonly dispid 1610809355;
    property Title: WideString dispid 1610809356;
    property Icon: IUIX_Icon dispid 1610809358;
    property Font: IUIX_Font dispid 1610809360;
    property Size: UIX_CmdBarSize dispid 1610809362;
    property ActualSize: UIX_CmdBarSize readonly dispid 1610809364;
    function InsertNewBox(const pNewBoxID: WideString; nInsertBefore: Integer; 
                          nIdealSize: UIX_CmdItemSize; nLowerSize: UIX_CmdItemSize; nStyle: Integer): IUIX_CmdItemBox; dispid 1610809365;
    function InsertNewBox2(nNewBoxID: Integer; nInsertBefore: Integer; nIdealSize: UIX_CmdItemSize; 
                           nLowerSize: UIX_CmdItemSize; nStyle: Integer): IUIX_CmdItemBox; dispid 1610809366;
    procedure DeleteBoxes(nIndex: Integer; nCount: Integer); dispid 1610809367;
    procedure Clear; dispid 1610809368;
    procedure MoveBoxes(nIndex: Integer; nNewIndex: Integer; nCount: Integer; 
                        const pNewBar: IUIX_CmdBar); dispid 1610809369;
    function InsertItem(const pCmd: IUIX_Cmd; nIndexBefore: Integer; nNewStyle: Integer; 
                        nNewStyleMask: Integer; nBoxIndex: Integer): IUIX_CmdItem; dispid 1610809370;
    function InsertItem2(nCmdID: Integer; nIndexBefore: Integer; nNewStyle: Integer; 
                         nNewStyleMask: Integer; nBoxIndex: Integer): IUIX_CmdItem; dispid 1610809371;
    function InsertSeparator(nIndexBefore: Integer; nStyle: Integer; nBoxIndex: Integer): IUIX_CmdItem; dispid 1610809372;
    procedure DeleteItemsByCmd(const pCmd: IUIX_Cmd; bRecursive: WordBool; bFirstOnly: WordBool); dispid 1610809373;
    function FindFirstItemByCmdName(const sCmdName: WideString): IUIX_CmdItem; dispid 1610809374;
    function FindFirstItemByCmdID(nCmdID: Integer): IUIX_CmdItem; dispid 1610809375;
    function FindItemByCtl(const pCtl: IUIX_Obj): IUIX_CmdItem; dispid 1610809376;
    function FlatInsertItem(const pCmd: IUIX_Cmd; nFlatIndexBefore: Integer; nNewStyle: Integer; 
                            nNewStyleMask: Integer): IUIX_CmdItem; dispid 1610809377;
    function FlatInsertItem2(nCmdID: Integer; nFlatIndexBefore: Integer; nNewStyle: Integer; 
                             nNewStyleMask: Integer): IUIX_CmdItem; dispid 1610809378;
    function FlatInsertSeparator(nFlatIndexBefore: Integer; nStyle: Integer): IUIX_CmdItem; dispid 1610809379;
    function FlatFindFirstItemByCmdName(const sCmdName: WideString): Integer; dispid 1610809380;
    function FlatFindFirstItemByCmdID(nCmdID: Integer): Integer; dispid 1610809381;
    function FlatGetItemsCount: ULONG_T; dispid 1610809382;
    function FlatGetItem(nFlatIndex: Integer): IUIX_CmdItem; dispid 1610809383;
    procedure FlatDeleteItem(nFlatIndex: Integer); dispid 1610809384;
    function FlatItemIsSeparator(nFlatIndex: Integer): WordBool; dispid 1610809385;
    property UpdatesLocked: WordBool readonly dispid 1610809386;
    procedure LockUpdates; dispid 1610809387;
    procedure UnLockUpdates; dispid 1610809388;
    procedure Update; dispid 1610809389;
    property IsFloating: WordBool readonly dispid 1610809390;
    procedure MakeFloating(bIdealSize: WordBool); dispid 1610809391;
    procedure MakeFloating2(var stPos: {NOT_OLEAUTO(tagRECT)}OleVariant; bIdealSize: WordBool); dispid 1610809392;
    procedure Show; dispid 1610809393;
    procedure Hide; dispid 1610809394;
    property IsHidden: WordBool readonly dispid 1610809395;
    property IsMinimized: WordBool readonly dispid 1610809396;
    procedure Expand; dispid 1610809397;
    procedure Minimize; dispid 1610809398;
    property BorderStyle: Integer dispid 1610809399;
    procedure Highlight(bHighlight: WordBool); dispid 1610809401;
    procedure Redraw; dispid 1610809402;
    function HitTest(var stRelPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; out nRes: Integer; 
                     out nFlags: Integer): IUIX_CmdItem; dispid 1610809403;
    property AppMenuContainer: IUIX_Obj readonly dispid 1610809404;
    property IsTemp: WordBool readonly dispid 1610809405;
    property IsSpecial: WordBool readonly dispid 1610809406;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_CmdItemBox
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6D513F74-9FC7-4179-A268-92E62D4F03A7}
// *********************************************************************//
  IUIX_CmdItemBox = interface(IDispatch)
    ['{6D513F74-9FC7-4179-A268-92E62D4F03A7}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_CmdItem; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_ID: Integer; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(nStyle: Integer); safecall;
    procedure SetStyle(nStyle: Integer; nStyleMask: Integer); safecall;
    function Get_ItemsIdealSize: UIX_CmdItemSize; safecall;
    procedure Set_ItemsIdealSize(nSize: UIX_CmdItemSize); safecall;
    function Get_ItemsLowerSize: UIX_CmdItemSize; safecall;
    procedure Set_ItemsLowerSize(nSize: UIX_CmdItemSize); safecall;
    function Get_ItemsCurrentSize: UIX_CmdItemSize; safecall;
    function Get_Index: Integer; safecall;
    function Get_Rect: tagRECT; safecall;
    function GetRect(nRectIndex: Integer): tagRECT; safecall;
    function InsertItem(const pCmd: IUIX_Cmd; nIndexBefore: Integer; nNewStyle: Integer; 
                        nNewStyleMask: Integer): IUIX_CmdItem; safecall;
    function InsertItem2(nCmdID: Integer; nIndexBefore: Integer; nNewStyle: Integer; 
                         nNewStyleMask: Integer): IUIX_CmdItem; safecall;
    function InsertSeparator(nIndexBefore: Integer; nStyle: Integer): IUIX_CmdItem; safecall;
    procedure DeleteItems(nIndex: Integer; nCount: Integer); safecall;
    procedure DeleteItemsByCmd(const pCmd: IUIX_Cmd; bRecursive: WordBool; bFirstOnly: WordBool); safecall;
    function FindFirstItemByCmdName(const sCmdName: WideString): Integer; safecall;
    function FindFirstItemByCmdID(nCmdID: Integer): Integer; safecall;
    function FindItemByCtl(const pCtl: IUIX_Obj): Integer; safecall;
    procedure MoveItems(nIndex: Integer; nNewIndex: Integer; nCount: Integer; 
                        const pNewBox: IUIX_CmdItemBox); safecall;
    procedure Redraw; safecall;
    procedure Delete; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_CmdItem read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property ID: Integer read Get_ID;
    property Style: Integer read Get_Style write Set_Style;
    property ItemsIdealSize: UIX_CmdItemSize read Get_ItemsIdealSize write Set_ItemsIdealSize;
    property ItemsLowerSize: UIX_CmdItemSize read Get_ItemsLowerSize write Set_ItemsLowerSize;
    property ItemsCurrentSize: UIX_CmdItemSize read Get_ItemsCurrentSize;
    property Index: Integer read Get_Index;
    property Rect: tagRECT read Get_Rect;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdItemBoxDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6D513F74-9FC7-4179-A268-92E62D4F03A7}
// *********************************************************************//
  IUIX_CmdItemBoxDisp = dispinterface
    ['{6D513F74-9FC7-4179-A268-92E62D4F03A7}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_CmdItem readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    property ID: Integer readonly dispid 1610743811;
    property Style: Integer dispid 1610743812;
    procedure SetStyle(nStyle: Integer; nStyleMask: Integer); dispid 1610743814;
    property ItemsIdealSize: UIX_CmdItemSize dispid 1610743815;
    property ItemsLowerSize: UIX_CmdItemSize dispid 1610743817;
    property ItemsCurrentSize: UIX_CmdItemSize readonly dispid 1610743819;
    property Index: Integer readonly dispid 1610743820;
    property Rect: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610743821;
    function GetRect(nRectIndex: Integer): {NOT_OLEAUTO(tagRECT)}OleVariant; dispid 1610743822;
    function InsertItem(const pCmd: IUIX_Cmd; nIndexBefore: Integer; nNewStyle: Integer; 
                        nNewStyleMask: Integer): IUIX_CmdItem; dispid 1610743823;
    function InsertItem2(nCmdID: Integer; nIndexBefore: Integer; nNewStyle: Integer; 
                         nNewStyleMask: Integer): IUIX_CmdItem; dispid 1610743824;
    function InsertSeparator(nIndexBefore: Integer; nStyle: Integer): IUIX_CmdItem; dispid 1610743825;
    procedure DeleteItems(nIndex: Integer; nCount: Integer); dispid 1610743826;
    procedure DeleteItemsByCmd(const pCmd: IUIX_Cmd; bRecursive: WordBool; bFirstOnly: WordBool); dispid 1610743827;
    function FindFirstItemByCmdName(const sCmdName: WideString): Integer; dispid 1610743828;
    function FindFirstItemByCmdID(nCmdID: Integer): Integer; dispid 1610743829;
    function FindItemByCtl(const pCtl: IUIX_Obj): Integer; dispid 1610743830;
    procedure MoveItems(nIndex: Integer; nNewIndex: Integer; nCount: Integer; 
                        const pNewBox: IUIX_CmdItemBox); dispid 1610743831;
    procedure Redraw; dispid 1610743832;
    procedure Delete; dispid 1610743833;
  end;

// *********************************************************************//
// Interface: IUIX_CmdItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F64923D-567C-4603-82D9-1AAABB307C20}
// *********************************************************************//
  IUIX_CmdItem = interface(IDispatch)
    ['{6F64923D-567C-4603-82D9-1AAABB307C20}']
    function Get_Cmd: IUIX_Cmd; safecall;
    function Get_Box: IUIX_CmdItemBox; safecall;
    function Get_Bar: IUIX_CmdBar; safecall;
    function Get_Ctl: IUIX_Obj; safecall;
    function Get_State: Integer; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(nStyle: Integer); safecall;
    procedure SetStyle(nStyle: Integer; nStyleMask: Integer); safecall;
    function Get_SubMenu: IUIX_CmdMenu; safecall;
    procedure Set_SubMenu(const pSubMenu: IUIX_CmdMenu); safecall;
    function Get_Index: Integer; safecall;
    function Get_FlatIndex: Integer; safecall;
    function Get_Rect: tagRECT; safecall;
    function GetRect(nRectIndex: Integer): tagRECT; safecall;
    function Get_IsSeparator: WordBool; safecall;
    function Get_IsNonBreakSeparator: WordBool; safecall;
    function Get_IsHardBreakSeparator: WordBool; safecall;
    procedure ShowPopup(bShow: WordBool; bAnimated: WordBool); safecall;
    procedure Highlight(nFlags: Integer; nDuration: ULONG_T); safecall;
    procedure Redraw; safecall;
    procedure Delete; safecall;
    procedure Show(bShow: WordBool); safecall;
    function Get_IsVisible: WordBool; safecall;
    function Get_IsDisabled: WordBool; safecall;
    property Cmd: IUIX_Cmd read Get_Cmd;
    property Box: IUIX_CmdItemBox read Get_Box;
    property Bar: IUIX_CmdBar read Get_Bar;
    property Ctl: IUIX_Obj read Get_Ctl;
    property State: Integer read Get_State;
    property Style: Integer read Get_Style write Set_Style;
    property SubMenu: IUIX_CmdMenu read Get_SubMenu write Set_SubMenu;
    property Index: Integer read Get_Index;
    property FlatIndex: Integer read Get_FlatIndex;
    property Rect: tagRECT read Get_Rect;
    property IsSeparator: WordBool read Get_IsSeparator;
    property IsNonBreakSeparator: WordBool read Get_IsNonBreakSeparator;
    property IsHardBreakSeparator: WordBool read Get_IsHardBreakSeparator;
    property IsVisible: WordBool read Get_IsVisible;
    property IsDisabled: WordBool read Get_IsDisabled;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdItemDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6F64923D-567C-4603-82D9-1AAABB307C20}
// *********************************************************************//
  IUIX_CmdItemDisp = dispinterface
    ['{6F64923D-567C-4603-82D9-1AAABB307C20}']
    property Cmd: IUIX_Cmd readonly dispid 1610743808;
    property Box: IUIX_CmdItemBox readonly dispid 1610743809;
    property Bar: IUIX_CmdBar readonly dispid 1610743810;
    property Ctl: IUIX_Obj readonly dispid 1610743811;
    property State: Integer readonly dispid 1610743812;
    property Style: Integer dispid 1610743813;
    procedure SetStyle(nStyle: Integer; nStyleMask: Integer); dispid 1610743815;
    property SubMenu: IUIX_CmdMenu dispid 1610743816;
    property Index: Integer readonly dispid 1610743818;
    property FlatIndex: Integer readonly dispid 1610743819;
    property Rect: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610743820;
    function GetRect(nRectIndex: Integer): {NOT_OLEAUTO(tagRECT)}OleVariant; dispid 1610743821;
    property IsSeparator: WordBool readonly dispid 1610743822;
    property IsNonBreakSeparator: WordBool readonly dispid 1610743823;
    property IsHardBreakSeparator: WordBool readonly dispid 1610743824;
    procedure ShowPopup(bShow: WordBool; bAnimated: WordBool); dispid 1610743825;
    procedure Highlight(nFlags: Integer; nDuration: ULONG_T); dispid 1610743826;
    procedure Redraw; dispid 1610743827;
    procedure Delete; dispid 1610743828;
    procedure Show(bShow: WordBool); dispid 1610743829;
    property IsVisible: WordBool readonly dispid 1610743830;
    property IsDisabled: WordBool readonly dispid 1610743831;
  end;

// *********************************************************************//
// Interface: IUIX_CmdMenu
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {531DF7F3-0513-443E-BAD5-A1EF75A87C09}
// *********************************************************************//
  IUIX_CmdMenu = interface(IDispatch)
    ['{531DF7F3-0513-443E-BAD5-A1EF75A87C09}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_CmdMenu; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_Cmd: IUIX_Cmd; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(nStyle: Integer); safecall;
    function Get_IsSeparator: WordBool; safecall;
    procedure SetStyle(nStyle: Integer; nStyleMask: Integer); safecall;
    function InsertItem(const pCmd: IUIX_Cmd; nIndexBefore: Integer; nNewStyle: Integer; 
                        nNewStyleMask: Integer): IUIX_CmdMenu; safecall;
    function InsertItem2(nCmdID: Integer; nIndexBefore: Integer; nNewStyle: Integer; 
                         nNewStyleMask: Integer; const pCustomHandler: IUIX_CmdHandler): IUIX_CmdMenu; safecall;
    function InsertItem3(const sItemID: WideString; const sText: WideString; 
                         const pCmdHandler: IUIX_CmdHandler; nTargetID: Integer; 
                         const pIcon: IUIX_Icon; const sTip: WideString; nIndexBefore: Integer; 
                         nStyle: Integer): IUIX_CmdMenu; safecall;
    function InsertItem4(const sItemID: WideString; const sText: WideString; nState: Integer; 
                         const pIcon: IUIX_Icon; const sTip: WideString; nIndexBefore: Integer; 
                         nStyle: Integer): IUIX_CmdMenu; safecall;
    procedure InsertSeparator(nIndexBefore: Integer); safecall;
    procedure DeleteItem(nIndex: Integer); safecall;
    procedure DeleteItemsByCmd(const pCmd: IUIX_Cmd; bRecursive: WordBool; bFirstOnly: WordBool); safecall;
    procedure DeleteItemsByCmdID(nCmdID: Integer; bRecursive: WordBool; bFirstOnly: WordBool); safecall;
    procedure DeleteAllItems; safecall;
    procedure CopyItemsFrom(const pSrcMenu: IUIX_CmdMenu); safecall;
    procedure SetSubMenu(nCmdID: Integer; const pSrcMenu: IUIX_CmdMenu; bRecursive: WordBool); safecall;
    function FindFirstItemByCmdID(nCmdID: Integer; bReversed: WordBool): Integer; safecall;
    function FindFirstItemByCmdName(const sCmdName: WideString): Integer; safecall;
    procedure DeepFindFirstItemByCmdID(nCmdID: Integer; out nIndex: Integer; 
                                       out pOwner: IUIX_CmdMenu); safecall;
    function FindFirstCmd(nCmdID: Integer; bRecursive: WordBool): IUIX_Cmd; safecall;
    function Get_State: Integer; safecall;
    procedure Set_State(nState: Integer); safecall;
    procedure SetState(nState: Integer; nStateMask: Integer); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_CmdMenu read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property Cmd: IUIX_Cmd read Get_Cmd;
    property Style: Integer read Get_Style write Set_Style;
    property IsSeparator: WordBool read Get_IsSeparator;
    property State: Integer read Get_State write Set_State;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdMenuDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {531DF7F3-0513-443E-BAD5-A1EF75A87C09}
// *********************************************************************//
  IUIX_CmdMenuDisp = dispinterface
    ['{531DF7F3-0513-443E-BAD5-A1EF75A87C09}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_CmdMenu readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    property Cmd: IUIX_Cmd readonly dispid 1610743811;
    property Style: Integer dispid 1610743812;
    property IsSeparator: WordBool readonly dispid 1610743814;
    procedure SetStyle(nStyle: Integer; nStyleMask: Integer); dispid 1610743815;
    function InsertItem(const pCmd: IUIX_Cmd; nIndexBefore: Integer; nNewStyle: Integer; 
                        nNewStyleMask: Integer): IUIX_CmdMenu; dispid 1610743816;
    function InsertItem2(nCmdID: Integer; nIndexBefore: Integer; nNewStyle: Integer; 
                         nNewStyleMask: Integer; const pCustomHandler: IUIX_CmdHandler): IUIX_CmdMenu; dispid 1610743817;
    function InsertItem3(const sItemID: WideString; const sText: WideString; 
                         const pCmdHandler: IUIX_CmdHandler; nTargetID: Integer; 
                         const pIcon: IUIX_Icon; const sTip: WideString; nIndexBefore: Integer; 
                         nStyle: Integer): IUIX_CmdMenu; dispid 1610743818;
    function InsertItem4(const sItemID: WideString; const sText: WideString; nState: Integer; 
                         const pIcon: IUIX_Icon; const sTip: WideString; nIndexBefore: Integer; 
                         nStyle: Integer): IUIX_CmdMenu; dispid 1610743819;
    procedure InsertSeparator(nIndexBefore: Integer); dispid 1610743820;
    procedure DeleteItem(nIndex: Integer); dispid 1610743821;
    procedure DeleteItemsByCmd(const pCmd: IUIX_Cmd; bRecursive: WordBool; bFirstOnly: WordBool); dispid 1610743822;
    procedure DeleteItemsByCmdID(nCmdID: Integer; bRecursive: WordBool; bFirstOnly: WordBool); dispid 1610743823;
    procedure DeleteAllItems; dispid 1610743824;
    procedure CopyItemsFrom(const pSrcMenu: IUIX_CmdMenu); dispid 1610743825;
    procedure SetSubMenu(nCmdID: Integer; const pSrcMenu: IUIX_CmdMenu; bRecursive: WordBool); dispid 1610743826;
    function FindFirstItemByCmdID(nCmdID: Integer; bReversed: WordBool): Integer; dispid 1610743827;
    function FindFirstItemByCmdName(const sCmdName: WideString): Integer; dispid 1610743828;
    procedure DeepFindFirstItemByCmdID(nCmdID: Integer; out nIndex: Integer; 
                                       out pOwner: IUIX_CmdMenu); dispid 1610743829;
    function FindFirstCmd(nCmdID: Integer; bRecursive: WordBool): IUIX_Cmd; dispid 1610743830;
    property State: Integer dispid 1610743831;
    procedure SetState(nState: Integer; nStateMask: Integer); dispid 1610743833;
  end;

// *********************************************************************//
// Interface: IUIX_CmdLine
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {41B1AADD-61EE-406C-A8C6-FC02BA66CA67}
// *********************************************************************//
  IUIX_CmdLine = interface(IDispatch)
    ['{41B1AADD-61EE-406C-A8C6-FC02BA66CA67}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_CmdBar; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_Pane: IUIX_CmdPane; safecall;
    function Get_ActualSize: Integer; safecall;
    function Get_BarSize: UIX_CmdBarSize; safecall;
    procedure Set_BarSize(nSize: UIX_CmdBarSize); safecall;
    procedure InsertBar(const pBar: IUIX_CmdBar; nIndexBefore: Integer); safecall;
    procedure DeleteBar(nIndex: Integer; bDestroy: WordBool); safecall;
    function GetBarIndex(const pBar: IUIX_CmdBar): Integer; safecall;
    function Get_IsMinimized: WordBool; safecall;
    procedure Expand; safecall;
    procedure Minimize; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_CmdBar read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property Pane: IUIX_CmdPane read Get_Pane;
    property ActualSize: Integer read Get_ActualSize;
    property BarSize: UIX_CmdBarSize read Get_BarSize write Set_BarSize;
    property IsMinimized: WordBool read Get_IsMinimized;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdLineDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {41B1AADD-61EE-406C-A8C6-FC02BA66CA67}
// *********************************************************************//
  IUIX_CmdLineDisp = dispinterface
    ['{41B1AADD-61EE-406C-A8C6-FC02BA66CA67}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_CmdBar readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    property Pane: IUIX_CmdPane readonly dispid 1610743811;
    property ActualSize: Integer readonly dispid 1610743812;
    property BarSize: UIX_CmdBarSize dispid 1610743813;
    procedure InsertBar(const pBar: IUIX_CmdBar; nIndexBefore: Integer); dispid 1610743815;
    procedure DeleteBar(nIndex: Integer; bDestroy: WordBool); dispid 1610743816;
    function GetBarIndex(const pBar: IUIX_CmdBar): Integer; dispid 1610743817;
    property IsMinimized: WordBool readonly dispid 1610743818;
    procedure Expand; dispid 1610743819;
    procedure Minimize; dispid 1610743820;
  end;

// *********************************************************************//
// Interface: IUIX_CmdPane
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9764FFB4-99C8-4FE5-BF07-225580214F60}
// *********************************************************************//
  IUIX_CmdPane = interface(IUIX_ObjImpl)
    ['{9764FFB4-99C8-4FE5-BF07-225580214F60}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_CmdLine; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_Side: Integer; safecall;
    function Get_ActualSize: Integer; safecall;
    function Get_IsVert: WordBool; safecall;
    procedure SetParentClientArea(var stNewClientArea: tagRECT; bCalcOnly: WordBool); safecall;
    procedure Update; safecall;
    procedure InsertBar(const pBar: IUIX_CmdBar; nLineIndex: Integer; nBarIndex: Integer; 
                        bForceToNewLine: WordBool); safecall;
    function InsertLine(nIndexBefore: Integer; bMinimized: WordBool): IUIX_CmdLine; safecall;
    procedure DeleteLine(nIndex: Integer); safecall;
    function GetLineIndex(const pLine: IUIX_CmdLine): Integer; safecall;
    procedure Clear; safecall;
    function Get_IsMinimized: WordBool; safecall;
    procedure Expand; safecall;
    procedure Minimize; safecall;
    function Get_IsHidden: WordBool; safecall;
    procedure Show; safecall;
    procedure Hide; safecall;
    function Get_BorderStyle: Integer; safecall;
    procedure Set_BorderStyle(nBorderStyle: Integer); safecall;
    procedure Highlight(bHighlight: WordBool); safecall;
    function Get_IsRibbonMode: WordBool; safecall;
    function Get_Tabs: IUIX_CmdRibbonTabs; safecall;
    function Get_QABar: IUIX_CmdBar; safecall;
    function Get_QABarPos: UIX_QABarPos; safecall;
    procedure Set_QABarPos(nPos: UIX_QABarPos); safecall;
    function Get_QLBar: IUIX_CmdBar; safecall;
    procedure MinimizeRibbon; safecall;
    procedure ExpandRibbon(bAsPopup: WordBool); safecall;
    function Get_IsRibbonMinimized: WordBool; safecall;
    function Get_AppMenu: IUIX_CmdMenu; safecall;
    procedure UpdateAppMenu; safecall;
    procedure ShowAppMenu(bShow: WordBool; const sItemSel: WideString); safecall;
    function Get_IsAppMenuVisible: WordBool; safecall;
    function Get_AppMenuContainer: IUIX_Obj; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_CmdLine read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property Side: Integer read Get_Side;
    property ActualSize: Integer read Get_ActualSize;
    property IsVert: WordBool read Get_IsVert;
    property IsMinimized: WordBool read Get_IsMinimized;
    property IsHidden: WordBool read Get_IsHidden;
    property BorderStyle: Integer read Get_BorderStyle write Set_BorderStyle;
    property IsRibbonMode: WordBool read Get_IsRibbonMode;
    property Tabs: IUIX_CmdRibbonTabs read Get_Tabs;
    property QABar: IUIX_CmdBar read Get_QABar;
    property QABarPos: UIX_QABarPos read Get_QABarPos write Set_QABarPos;
    property QLBar: IUIX_CmdBar read Get_QLBar;
    property IsRibbonMinimized: WordBool read Get_IsRibbonMinimized;
    property AppMenu: IUIX_CmdMenu read Get_AppMenu;
    property IsAppMenuVisible: WordBool read Get_IsAppMenuVisible;
    property AppMenuContainer: IUIX_Obj read Get_AppMenuContainer;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdPaneDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9764FFB4-99C8-4FE5-BF07-225580214F60}
// *********************************************************************//
  IUIX_CmdPaneDisp = dispinterface
    ['{9764FFB4-99C8-4FE5-BF07-225580214F60}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_CmdLine readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610809346;
    property Side: Integer readonly dispid 1610809347;
    property ActualSize: Integer readonly dispid 1610809348;
    property IsVert: WordBool readonly dispid 1610809349;
    procedure SetParentClientArea(var stNewClientArea: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                  bCalcOnly: WordBool); dispid 1610809350;
    procedure Update; dispid 1610809351;
    procedure InsertBar(const pBar: IUIX_CmdBar; nLineIndex: Integer; nBarIndex: Integer; 
                        bForceToNewLine: WordBool); dispid 1610809352;
    function InsertLine(nIndexBefore: Integer; bMinimized: WordBool): IUIX_CmdLine; dispid 1610809353;
    procedure DeleteLine(nIndex: Integer); dispid 1610809354;
    function GetLineIndex(const pLine: IUIX_CmdLine): Integer; dispid 1610809355;
    procedure Clear; dispid 1610809356;
    property IsMinimized: WordBool readonly dispid 1610809357;
    procedure Expand; dispid 1610809358;
    procedure Minimize; dispid 1610809359;
    property IsHidden: WordBool readonly dispid 1610809360;
    procedure Show; dispid 1610809361;
    procedure Hide; dispid 1610809362;
    property BorderStyle: Integer dispid 1610809363;
    procedure Highlight(bHighlight: WordBool); dispid 1610809365;
    property IsRibbonMode: WordBool readonly dispid 1610809366;
    property Tabs: IUIX_CmdRibbonTabs readonly dispid 1610809367;
    property QABar: IUIX_CmdBar readonly dispid 1610809368;
    property QABarPos: UIX_QABarPos dispid 1610809369;
    property QLBar: IUIX_CmdBar readonly dispid 1610809371;
    procedure MinimizeRibbon; dispid 1610809372;
    procedure ExpandRibbon(bAsPopup: WordBool); dispid 1610809373;
    property IsRibbonMinimized: WordBool readonly dispid 1610809374;
    property AppMenu: IUIX_CmdMenu readonly dispid 1610809375;
    procedure UpdateAppMenu; dispid 1610809376;
    procedure ShowAppMenu(bShow: WordBool; const sItemSel: WideString); dispid 1610809377;
    property IsAppMenuVisible: WordBool readonly dispid 1610809378;
    property AppMenuContainer: IUIX_Obj readonly dispid 1610809379;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_CmdRibbonTabs
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5B539001-204C-4960-9AE6-9246D044961F}
// *********************************************************************//
  IUIX_CmdRibbonTabs = interface(IUIX_ObjImpl)
    ['{5B539001-204C-4960-9AE6-9246D044961F}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_CmdRibbonTab; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_Active: IUIX_CmdRibbonTab; safecall;
    procedure Activate(nIndex: Integer); safecall;
    procedure ActivateByID(const sTabID: WideString); safecall;
    procedure ActivateByID2(nTabID: Integer); safecall;
    procedure InsertNew(const sTabID: WideString; const sText: WideString; nStyle: Integer; 
                        nIndexBefore: Integer; const pIcon: IUIX_Icon; 
                        var pNewTab: IUIX_CmdRibbonTab); safecall;
    procedure Delete(nIndex: Integer; nCount: Integer; bDestroyBars: WordBool); safecall;
    procedure DeleteBar(const pBar: IUIX_CmdBar; bDestroy: WordBool); safecall;
    procedure Move(nIndex: Integer; nNewIndex: Integer); safecall;
    function Find(const pTab: IUIX_CmdRibbonTab): Integer; safecall;
    function FindByID(const sTabID: WideString): Integer; safecall;
    function FindByID2(nTabID: Integer): Integer; safecall;
    procedure RegisterContextualGroup(nGroupID: Integer; const sTitle: WideString; 
                                      nWeight: Integer; const pTabs: INumArray); safecall;
    procedure ShowContextualGroup(nGroupID: Integer; bShow: WordBool; bIncremental: WordBool); safecall;
    function HitTest(var stRelPos: tagPOINT; out nRes: Integer): IUIX_CmdRibbonTab; safecall;
    function GetAppTab: IUIX_CmdRibbonTab; safecall;
    function GetAppTabRect: tagRECT; safecall;
    function GetTabRect(nIndex: Integer): tagRECT; safecall;
    function IsContextualBar(nBarID: Integer): WordBool; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_CmdRibbonTab read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property Active: IUIX_CmdRibbonTab read Get_Active;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdRibbonTabsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5B539001-204C-4960-9AE6-9246D044961F}
// *********************************************************************//
  IUIX_CmdRibbonTabsDisp = dispinterface
    ['{5B539001-204C-4960-9AE6-9246D044961F}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_CmdRibbonTab readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610809346;
    property Active: IUIX_CmdRibbonTab readonly dispid 1610809347;
    procedure Activate(nIndex: Integer); dispid 1610809348;
    procedure ActivateByID(const sTabID: WideString); dispid 1610809349;
    procedure ActivateByID2(nTabID: Integer); dispid 1610809350;
    procedure InsertNew(const sTabID: WideString; const sText: WideString; nStyle: Integer; 
                        nIndexBefore: Integer; const pIcon: IUIX_Icon; 
                        var pNewTab: IUIX_CmdRibbonTab); dispid 1610809351;
    procedure Delete(nIndex: Integer; nCount: Integer; bDestroyBars: WordBool); dispid 1610809352;
    procedure DeleteBar(const pBar: IUIX_CmdBar; bDestroy: WordBool); dispid 1610809353;
    procedure Move(nIndex: Integer; nNewIndex: Integer); dispid 1610809354;
    function Find(const pTab: IUIX_CmdRibbonTab): Integer; dispid 1610809355;
    function FindByID(const sTabID: WideString): Integer; dispid 1610809356;
    function FindByID2(nTabID: Integer): Integer; dispid 1610809357;
    procedure RegisterContextualGroup(nGroupID: Integer; const sTitle: WideString; 
                                      nWeight: Integer; const pTabs: INumArray); dispid 1610809358;
    procedure ShowContextualGroup(nGroupID: Integer; bShow: WordBool; bIncremental: WordBool); dispid 1610809359;
    function HitTest(var stRelPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; out nRes: Integer): IUIX_CmdRibbonTab; dispid 1610809360;
    function GetAppTab: IUIX_CmdRibbonTab; dispid 1610809361;
    function GetAppTabRect: {NOT_OLEAUTO(tagRECT)}OleVariant; dispid 1610809362;
    function GetTabRect(nIndex: Integer): {NOT_OLEAUTO(tagRECT)}OleVariant; dispid 1610809363;
    function IsContextualBar(nBarID: Integer): WordBool; dispid 1610809364;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_CmdRibbonTab
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {081DC047-58D5-42E2-B263-2477CE37D502}
// *********************************************************************//
  IUIX_CmdRibbonTab = interface(IDispatch)
    ['{081DC047-58D5-42E2-B263-2477CE37D502}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_CmdBar; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_ContextualGroupID: Integer; safecall;
    function Get_VisualIndex: Integer; safecall;
    function Get_Index: Integer; safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const sTitle: WideString); safecall;
    function Get_Style: Integer; safecall;
    procedure SetStyle(nStyle: Integer; nStyleMask: Integer); safecall;
    function Get_Hidden: WordBool; safecall;
    procedure Set_Hidden(bVal: WordBool); safecall;
    function Get_Icon: IUIX_Icon; safecall;
    procedure Set_Icon(const pIcon: IUIX_Icon); safecall;
    function Get_IsActive: WordBool; safecall;
    procedure Activate; safecall;
    procedure Insert(const pBar: IUIX_CmdBar; nIndexBefore: Integer); safecall;
    procedure Delete(nIndex: Integer; nCount: Integer; bDestroy: WordBool); safecall;
    function Find(const pBar: IUIX_CmdBar): Integer; safecall;
    function FindByID(const sBarID: WideString): Integer; safecall;
    function FindByID2(nBarID: Integer): Integer; safecall;
    procedure Move(nIndex: Integer; nNewIndex: Integer); safecall;
    procedure ShowBar(nIndex: Integer; bShow: WordBool); safecall;
    function Get_KeyTip: WideString; safecall;
    procedure Set_KeyTip(const sKeyTip: WideString); safecall;
    function Get_ID: Integer; safecall;
    function Get_IsTemp: WordBool; safecall;
    function Get_IsBarHidden(nIndex: Integer): WordBool; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_CmdBar read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property ContextualGroupID: Integer read Get_ContextualGroupID;
    property VisualIndex: Integer read Get_VisualIndex;
    property Index: Integer read Get_Index;
    property Title: WideString read Get_Title write Set_Title;
    property Style: Integer read Get_Style;
    property Hidden: WordBool read Get_Hidden write Set_Hidden;
    property Icon: IUIX_Icon read Get_Icon write Set_Icon;
    property IsActive: WordBool read Get_IsActive;
    property KeyTip: WideString read Get_KeyTip write Set_KeyTip;
    property ID: Integer read Get_ID;
    property IsTemp: WordBool read Get_IsTemp;
    property IsBarHidden[nIndex: Integer]: WordBool read Get_IsBarHidden;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdRibbonTabDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {081DC047-58D5-42E2-B263-2477CE37D502}
// *********************************************************************//
  IUIX_CmdRibbonTabDisp = dispinterface
    ['{081DC047-58D5-42E2-B263-2477CE37D502}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_CmdBar readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    property ContextualGroupID: Integer readonly dispid 1610743811;
    property VisualIndex: Integer readonly dispid 1610743812;
    property Index: Integer readonly dispid 1610743813;
    property Title: WideString dispid 1610743814;
    property Style: Integer readonly dispid 1610743816;
    procedure SetStyle(nStyle: Integer; nStyleMask: Integer); dispid 1610743817;
    property Hidden: WordBool dispid 1610743818;
    property Icon: IUIX_Icon dispid 1610743820;
    property IsActive: WordBool readonly dispid 1610743822;
    procedure Activate; dispid 1610743823;
    procedure Insert(const pBar: IUIX_CmdBar; nIndexBefore: Integer); dispid 1610743824;
    procedure Delete(nIndex: Integer; nCount: Integer; bDestroy: WordBool); dispid 1610743825;
    function Find(const pBar: IUIX_CmdBar): Integer; dispid 1610743826;
    function FindByID(const sBarID: WideString): Integer; dispid 1610743827;
    function FindByID2(nBarID: Integer): Integer; dispid 1610743828;
    procedure Move(nIndex: Integer; nNewIndex: Integer); dispid 1610743829;
    procedure ShowBar(nIndex: Integer; bShow: WordBool); dispid 1610743830;
    property KeyTip: WideString dispid 1610743831;
    property ID: Integer readonly dispid 1610743833;
    property IsTemp: WordBool readonly dispid 1610743834;
    property IsBarHidden[nIndex: Integer]: WordBool readonly dispid 1610743835;
  end;

// *********************************************************************//
// Interface: IUIX_CmdAccelTargetCallback
// Flags:     (0)
// GUID:      {374C9D37-9198-463D-8EEE-6B82581DD413}
// *********************************************************************//
  IUIX_CmdAccelTargetCallback = interface(IUnknown)
    ['{374C9D37-9198-463D-8EEE-6B82581DD413}']
    function OnGetCmdAccelTarget(const pStart: IUIX_Obj; var stA1: UIX_CmdAccel; 
                                 var stA2: UIX_CmdAccel; out nCmdID: Integer; 
                                 out nCmdState: Integer; out pCmdTarget: IUIX_Obj): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Inst
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D5CABA2F-B413-4C6F-94B6-0B573AFD07EB}
// *********************************************************************//
  IUIX_Inst = interface(IDispatch)
    ['{D5CABA2F-B413-4C6F-94B6-0B573AFD07EB}']
    function Get_Theme: IUIX_Theme; safecall;
    procedure Set_Theme(const pTheme: IUIX_Theme); safecall;
    function Get_SpellChecker: ISpellCheckCallbacks; safecall;
    procedure Set_SpellChecker(const pSP: ISpellCheckCallbacks); safecall;
    function Get_ContextHelpHandler: IUIX_ContextHelpHandler; safecall;
    procedure Set_ContextHelpHandler(const pCHH: IUIX_ContextHelpHandler); safecall;
    function LoadTheme(const pPathName: IAFS_Name; const sProductID: WideString; 
                       const sMinVersion: WideString; const sMaxVersion: WideString; 
                       const pLoadMon: IUIX_ThemeLoadMonitor): IUIX_Theme; safecall;
    function CreateNewImage(nWidth: Integer; nHeight: Integer): IUIX_ImageData; safecall;
    function CreateImageFromFile(const pSource: IAFS_File): IUIX_ImageData; safecall;
    function CreateImageFromFile2(const sSourceFileName: WideString): IUIX_ImageData; safecall;
    function CreateImageFromMemBlock(const pMemBlock: IMemBlock): IUIX_ImageData; safecall;
    function CreateImageFromIStream(const pStream: IStream): IUIX_ImageData; safecall;
    function CreateNewIcon: IUIX_Icon; safecall;
    function CreateIconFromHandle(hIcon: HANDLE_T): IUIX_Icon; safecall;
    function CreateIconFromIStream(const pSource: IStream): IUIX_Icon; safecall;
    function CreateFontFromHandle(hFont: HANDLE_T; nNewFontSize: Double; nFlags: Integer; 
                                  nFlagsMask: Integer): IUIX_Font; safecall;
    function CreateFontFromFont(const pSrcFont: IUIX_Font; nNewFontSize: Double; nFlags: Integer; 
                                nFlagsMask: Integer): IUIX_Font; safecall;
    function CreateNewFont(const sFontName: WideString; nFontSize: Double; nFlags: Integer): IUIX_Font; safecall;
    function CreateCharFormat: IUIX_CharFormat; safecall;
    function CreateParaFormat: IUIX_ParaFormat; safecall;
    function CreateTextTabStops: IUIX_TextTabStops; safecall;
    function CreateTabStopFormat: IUIX_TabStopFormat; safecall;
    function CreateColorsTbl: IUIX_ColorsTable; safecall;
    function CreateNumEditFilterConvTbl: IUIX_NumEditFilterConvTbl; safecall;
    function CreateNumEditFilter: IUIX_NumEditFilter; safecall;
    function CreateColor(nColorType: ColorType): IColor; safecall;
    function CreateObj(var stCreateParams: UIX_CreateObjParams): IUIX_Obj; safecall;
    function CreateScrollableObj(var stCreateParams: UIX_CreateObjParams; nScrollStyle: Int64; 
                                 out pNewScrollView: IUIX_Obj): IUIX_Obj; safecall;
    procedure ShowPopup(const pOwner: IUIX_Obj; const pContent: IUIX_Obj; var stPos: tagRECT; 
                        nFlags: Integer; const pNotifyTarget: IUIX_Obj); safecall;
    procedure ClosePopups(bAnimated: WordBool); safecall;
    function IsPopupDisplayed: WordBool; safecall;
    function IsObjOnPopup(const pObj: IUIX_Obj): WordBool; safecall;
    function IsObjOnPopupMenu(const pObj: IUIX_Obj): WordBool; safecall;
    function IsModalDisplayed: WordBool; safecall;
    function IsAppModalDisplayed: WordBool; safecall;
    function Str2ID(const sStr: WideString; bAddIfNotExists: WordBool): Integer; safecall;
    function ID2Str(nID: Integer): WideString; safecall;
    function ShowMsgBox(const sText: WideString; const sTitle: WideString; 
                        const sHeader: WideString; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR; safecall;
    function ShowMsgBoxWithOpt(const pText: WideString; const pTitle: WideString; 
                               const pHeader: WideString; const pOptionText: WideString; 
                               var pOptionState: Integer; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR; safecall;
    function ShowMsgBoxEx(var pConfig: UIX_MsgBoxConfig; out pOptionState: Integer; 
                          out pSelectedRadioID: Integer; out ppEditText: WideString): LONG_PTR; safecall;
    function RegisterCursor(const sCursorName: WideString; var hCursor: _RemotableHandle): Integer; safecall;
    function GetCursorID(const sCursorName: WideString): Integer; safecall;
    procedure SetCursor(nCursorID: Integer); safecall;
    procedure UnregisterCursor(var hCursor: _RemotableHandle); safecall;
    function CreateCustomCtl(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                             const pCustomImpl: IUnknown; nStyle: Int64; nScrollStyle: Int64; 
                             const pThemeClassID: WideString; nCreateFlags: Integer): IUIX_Obj; safecall;
    function CreateButton(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                          const pText: WideString; nStyle: Int64; const pImageOrIcon: IUnknown; 
                          const pCustomImpl: IUnknown): IUIX_Button; safecall;
    function CreateColorPicker(const pParent: IUIX_Obj; nStyle: Int64): IUIX_ColorPicker; safecall;
    function CreatePicture(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                           const pImage: IUnknown; nStyle: Int64; const pCustomImpl: IUnknown): IUIX_Picture; safecall;
    function CreateScrollBar(const pParent: IUIX_Obj; var pRect: tagRECT; nStyle: Int64; 
                             const pCustomImpl: IUnknown): IUIX_ScrollBar; safecall;
    function CreateScrollContainer(const pParent: IUIX_Obj; var pRect: tagRECT; nStyle: Int64; 
                                   const pCustomImpl: IUnknown): IUIX_ScrollContainer; safecall;
    function CreateLabel(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                         const pText: WideString; nStyle: Int64; const pCustomImpl: IUnknown): IUIX_Label; safecall;
    function CreateCombo(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                         nStyle: Int64; const pCustomImpl: IUnknown): IUIX_Combo; safecall;
    function CreateEdit(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                        nStyle: Int64; nScrollStyle: Int64; const pCustomImpl: IUnknown): IUIX_Edit; safecall;
    function CreateList(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                        nStyle: Int64; nScrollStyle: Int64; const pCustomImpl: IUnknown): IUIX_List; safecall;
    function CreateTree(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                        nStyle: Int64; nScrollStyle: Int64; const pCustomImpl: IUnknown): IUIX_Tree; safecall;
    function CreateCmdPane(const pParent: IUIX_Obj; var pRect: tagRECT; nSide: Integer; 
                           nStyle: Int64): IUIX_CmdPane; safecall;
    function CreateCmdBar(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                          const pTitle: WideString; nStyle: Int64): IUIX_CmdBar; safecall;
    function CreateCmdMenu: IUIX_CmdMenu; safecall;
    function Get_CurrentThreadCtx: IUIX_ThreadContext; safecall;
    function MakeCmdNotifyParam(nCmdID: Integer; nCmdNotifyID: Integer): PARAM_T; safecall;
    procedure ReadCmdNotifyParam(nCmdNotifyParam: PARAM_T; out nCmdID: Integer; 
                                 out nCmdNotifyID: Integer); safecall;
    function CreatePropSheets(const pParent: IUIX_Obj; const pID: WideString; 
                              const pTitle: WideString; nPageNavWidth: Integer; 
                              var pPageAreaSize: tagSIZE; const pSrc: IUnknown; 
                              const pCtx: IUnknown; nStyle: Int64): IUIX_PropSheets; safecall;
    procedure FireLangChangedNotify; safecall;
    function Get_CmdManager: IUIX_CmdManager; safecall;
    function MakeObjStyle(nStyle: Integer; nStyleEx: Integer): Int64; safecall;
    procedure CrackObjStyle(nWholeStyle: Int64; out nStyle: Integer; out nStyleEx: Integer); safecall;
    function CreateComboBtn(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                            nStyle: Int64; const pCustomImpl: IUnknown): IUIX_ComboButton; safecall;
    function Get_FullScreen: IUIX_LayoutItem; safecall;
    function CreatePropSheets2(hWndParent: HANDLE_T; const pID: WideString; 
                               const pTitle: WideString; nPageNavWidth: Integer; 
                               var pPageAreaSize: tagSIZE; const pSrc: IUnknown; 
                               const pCtx: IUnknown; nStyle: Int64): IUIX_PropSheets; safecall;
    procedure LockCursor; safecall;
    procedure UnlockCursor; safecall;
    function CreateInfoBtn(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                           nStyle: Int64; const pCustomImpl: IUnknown): IUIX_InfoBtn; safecall;
    function Get_DPI: Integer; safecall;
    function Px96toPx(nSize: Integer): Integer; safecall;
    function CreateNewBrush(nType: UIX_BrushType): IUIX_Brush; safecall;
    function CreateNewPen: IUIX_Pen; safecall;
    function GetScrollBarSize(bVert: WordBool): Integer; safecall;
    function HoldPopups: IUIX_PopupsHolder; safecall;
    function CreatePolygonSrc: IUIX_PolygonSrc; safecall;
    function CreatePolyPolygonSrc: IUIX_PolyPolygonSrc; safecall;
    function CreateFileTypeIcon(sFileExt: PWideChar; nFlags: Integer): IUIX_Icon; safecall;
    function CreateDrawStringTags: IUIX_DrawStringTags; safecall;
    function CreateDrawStringHighlight: IUIX_DrawStringHighlight; safecall;
    function CreateColorsTable: IUIX_ColorsTable; safecall;
    function CalcLabelIdealSize(nStyle: Int64; nClientWidth: Integer; sText: PWideChar; 
                                nDrawTextFlags: Integer; const pFont: IUIX_Font): tagSIZE; safecall;
    procedure SendCmdNotify(const pTarget: IUIX_Obj; nNotifyCode: Integer; const pCmd: IUIX_Cmd; 
                            const pItem: IUIX_CmdItem; const pOwner: IUIX_Obj; pNotifyData: PARAM_T); safecall;
    function DoDragDrop(const pDataObject: IDataObject; const pDropSource: IDropSource): ULONG_T; safecall;
    function DoDragDrop2(const pDataObject: IDataObject; const pDropSource: IDropSource; 
                         const pDragImage: IUIX_ImageData; var pDragImageOffset: tagPOINT; 
                         dwSupportedEffects: LongWord): ULONG_T; safecall;
    function GetPrivateData(var stFmtEtc: tagFORMATETC; stStdMed: PPUserType3): IUnknown; safecall;
    function Get_PrivateDataFmtID: Integer; safecall;
    procedure SetAppIcon(hIcon: HANDLE_T); safecall;
    function CreateIconFromFile(const pSource: IAFS_File): IUIX_Icon; safecall;
    function CreateIconFromFile2(const sSourceFileName: WideString): IUIX_Icon; safecall;
    procedure GetHyperLinkColors(out nNormal: Integer; out nHot: Integer; out nVisited: Integer); safecall;
    function CreateProgress(const pParent: IUIX_Obj; var pRect: tagRECT; const pID: WideString; 
                            nStyle: Int64; const pCustomImpl: IUnknown): IUIX_Progress; safecall;
    procedure RevokeCurrentThreadContext; safecall;
    procedure SetStdCursor(nCur: UIX_StdCursor); safecall;
    property Theme: IUIX_Theme read Get_Theme write Set_Theme;
    property SpellChecker: ISpellCheckCallbacks read Get_SpellChecker write Set_SpellChecker;
    property ContextHelpHandler: IUIX_ContextHelpHandler read Get_ContextHelpHandler write Set_ContextHelpHandler;
    property CurrentThreadCtx: IUIX_ThreadContext read Get_CurrentThreadCtx;
    property CmdManager: IUIX_CmdManager read Get_CmdManager;
    property FullScreen: IUIX_LayoutItem read Get_FullScreen;
    property DPI: Integer read Get_DPI;
    property PrivateDataFmtID: Integer read Get_PrivateDataFmtID;
  end;

// *********************************************************************//
// DispIntf:  IUIX_InstDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D5CABA2F-B413-4C6F-94B6-0B573AFD07EB}
// *********************************************************************//
  IUIX_InstDisp = dispinterface
    ['{D5CABA2F-B413-4C6F-94B6-0B573AFD07EB}']
    property Theme: IUIX_Theme dispid 1610743808;
    property SpellChecker: ISpellCheckCallbacks dispid 1610743810;
    property ContextHelpHandler: IUIX_ContextHelpHandler dispid 1610743812;
    function LoadTheme(const pPathName: IAFS_Name; const sProductID: WideString; 
                       const sMinVersion: WideString; const sMaxVersion: WideString; 
                       const pLoadMon: IUIX_ThemeLoadMonitor): IUIX_Theme; dispid 1610743814;
    function CreateNewImage(nWidth: Integer; nHeight: Integer): IUIX_ImageData; dispid 1610743815;
    function CreateImageFromFile(const pSource: IAFS_File): IUIX_ImageData; dispid 1610743816;
    function CreateImageFromFile2(const sSourceFileName: WideString): IUIX_ImageData; dispid 1610743817;
    function CreateImageFromMemBlock(const pMemBlock: IMemBlock): IUIX_ImageData; dispid 1610743818;
    function CreateImageFromIStream(const pStream: IStream): IUIX_ImageData; dispid 1610743819;
    function CreateNewIcon: IUIX_Icon; dispid 1610743820;
    function CreateIconFromHandle(hIcon: HANDLE_T): IUIX_Icon; dispid 1610743821;
    function CreateIconFromIStream(const pSource: IStream): IUIX_Icon; dispid 1610743822;
    function CreateFontFromHandle(hFont: HANDLE_T; nNewFontSize: Double; nFlags: Integer; 
                                  nFlagsMask: Integer): IUIX_Font; dispid 1610743823;
    function CreateFontFromFont(const pSrcFont: IUIX_Font; nNewFontSize: Double; nFlags: Integer; 
                                nFlagsMask: Integer): IUIX_Font; dispid 1610743824;
    function CreateNewFont(const sFontName: WideString; nFontSize: Double; nFlags: Integer): IUIX_Font; dispid 1610743825;
    function CreateCharFormat: IUIX_CharFormat; dispid 1610743826;
    function CreateParaFormat: IUIX_ParaFormat; dispid 1610743827;
    function CreateTextTabStops: IUIX_TextTabStops; dispid 1610743828;
    function CreateTabStopFormat: IUIX_TabStopFormat; dispid 1610743829;
    function CreateColorsTbl: IUIX_ColorsTable; dispid 1610743830;
    function CreateNumEditFilterConvTbl: IUIX_NumEditFilterConvTbl; dispid 1610743831;
    function CreateNumEditFilter: IUIX_NumEditFilter; dispid 1610743832;
    function CreateColor(nColorType: ColorType): IColor; dispid 1610743833;
    function CreateObj(var stCreateParams: {NOT_OLEAUTO(UIX_CreateObjParams)}OleVariant): IUIX_Obj; dispid 1610743834;
    function CreateScrollableObj(var stCreateParams: {NOT_OLEAUTO(UIX_CreateObjParams)}OleVariant; 
                                 nScrollStyle: Int64; out pNewScrollView: IUIX_Obj): IUIX_Obj; dispid 1610743835;
    procedure ShowPopup(const pOwner: IUIX_Obj; const pContent: IUIX_Obj; 
                        var stPos: {NOT_OLEAUTO(tagRECT)}OleVariant; nFlags: Integer; 
                        const pNotifyTarget: IUIX_Obj); dispid 1610743836;
    procedure ClosePopups(bAnimated: WordBool); dispid 1610743837;
    function IsPopupDisplayed: WordBool; dispid 1610743838;
    function IsObjOnPopup(const pObj: IUIX_Obj): WordBool; dispid 1610743839;
    function IsObjOnPopupMenu(const pObj: IUIX_Obj): WordBool; dispid 1610743840;
    function IsModalDisplayed: WordBool; dispid 1610743841;
    function IsAppModalDisplayed: WordBool; dispid 1610743842;
    function Str2ID(const sStr: WideString; bAddIfNotExists: WordBool): Integer; dispid 1610743843;
    function ID2Str(nID: Integer): WideString; dispid 1610743844;
    function ShowMsgBox(const sText: WideString; const sTitle: WideString; 
                        const sHeader: WideString; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR; dispid 1610743845;
    function ShowMsgBoxWithOpt(const pText: WideString; const pTitle: WideString; 
                               const pHeader: WideString; const pOptionText: WideString; 
                               var pOptionState: Integer; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR; dispid 1610743846;
    function ShowMsgBoxEx(var pConfig: {NOT_OLEAUTO(UIX_MsgBoxConfig)}OleVariant; 
                          out pOptionState: Integer; out pSelectedRadioID: Integer; 
                          out ppEditText: WideString): LONG_PTR; dispid 1610743847;
    function RegisterCursor(const sCursorName: WideString; 
                            var hCursor: {NOT_OLEAUTO(_RemotableHandle)}OleVariant): Integer; dispid 1610743848;
    function GetCursorID(const sCursorName: WideString): Integer; dispid 1610743849;
    procedure SetCursor(nCursorID: Integer); dispid 1610743850;
    procedure UnregisterCursor(var hCursor: {NOT_OLEAUTO(_RemotableHandle)}OleVariant); dispid 1610743851;
    function CreateCustomCtl(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                             const pID: WideString; const pCustomImpl: IUnknown; nStyle: Int64; 
                             nScrollStyle: Int64; const pThemeClassID: WideString; 
                             nCreateFlags: Integer): IUIX_Obj; dispid 1610743852;
    function CreateButton(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                          const pID: WideString; const pText: WideString; nStyle: Int64; 
                          const pImageOrIcon: IUnknown; const pCustomImpl: IUnknown): IUIX_Button; dispid 1610743853;
    function CreateColorPicker(const pParent: IUIX_Obj; nStyle: Int64): IUIX_ColorPicker; dispid 1610743854;
    function CreatePicture(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                           const pID: WideString; const pImage: IUnknown; nStyle: Int64; 
                           const pCustomImpl: IUnknown): IUIX_Picture; dispid 1610743855;
    function CreateScrollBar(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                             nStyle: Int64; const pCustomImpl: IUnknown): IUIX_ScrollBar; dispid 1610743856;
    function CreateScrollContainer(const pParent: IUIX_Obj; 
                                   var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; nStyle: Int64; 
                                   const pCustomImpl: IUnknown): IUIX_ScrollContainer; dispid 1610743857;
    function CreateLabel(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                         const pID: WideString; const pText: WideString; nStyle: Int64; 
                         const pCustomImpl: IUnknown): IUIX_Label; dispid 1610743858;
    function CreateCombo(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                         const pID: WideString; nStyle: Int64; const pCustomImpl: IUnknown): IUIX_Combo; dispid 1610743859;
    function CreateEdit(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                        const pID: WideString; nStyle: Int64; nScrollStyle: Int64; 
                        const pCustomImpl: IUnknown): IUIX_Edit; dispid 1610743860;
    function CreateList(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                        const pID: WideString; nStyle: Int64; nScrollStyle: Int64; 
                        const pCustomImpl: IUnknown): IUIX_List; dispid 1610743861;
    function CreateTree(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                        const pID: WideString; nStyle: Int64; nScrollStyle: Int64; 
                        const pCustomImpl: IUnknown): IUIX_Tree; dispid 1610743862;
    function CreateCmdPane(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                           nSide: Integer; nStyle: Int64): IUIX_CmdPane; dispid 1610743863;
    function CreateCmdBar(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                          const pID: WideString; const pTitle: WideString; nStyle: Int64): IUIX_CmdBar; dispid 1610743864;
    function CreateCmdMenu: IUIX_CmdMenu; dispid 1610743865;
    property CurrentThreadCtx: IUIX_ThreadContext readonly dispid 1610743866;
    function MakeCmdNotifyParam(nCmdID: Integer; nCmdNotifyID: Integer): PARAM_T; dispid 1610743867;
    procedure ReadCmdNotifyParam(nCmdNotifyParam: PARAM_T; out nCmdID: Integer; 
                                 out nCmdNotifyID: Integer); dispid 1610743868;
    function CreatePropSheets(const pParent: IUIX_Obj; const pID: WideString; 
                              const pTitle: WideString; nPageNavWidth: Integer; 
                              var pPageAreaSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; 
                              const pSrc: IUnknown; const pCtx: IUnknown; nStyle: Int64): IUIX_PropSheets; dispid 1610743869;
    procedure FireLangChangedNotify; dispid 1610743870;
    property CmdManager: IUIX_CmdManager readonly dispid 1610743871;
    function MakeObjStyle(nStyle: Integer; nStyleEx: Integer): Int64; dispid 1610743872;
    procedure CrackObjStyle(nWholeStyle: Int64; out nStyle: Integer; out nStyleEx: Integer); dispid 1610743873;
    function CreateComboBtn(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                            const pID: WideString; nStyle: Int64; const pCustomImpl: IUnknown): IUIX_ComboButton; dispid 1610743874;
    property FullScreen: IUIX_LayoutItem readonly dispid 1610743875;
    function CreatePropSheets2(hWndParent: HANDLE_T; const pID: WideString; 
                               const pTitle: WideString; nPageNavWidth: Integer; 
                               var pPageAreaSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; 
                               const pSrc: IUnknown; const pCtx: IUnknown; nStyle: Int64): IUIX_PropSheets; dispid 1610743876;
    procedure LockCursor; dispid 1610743877;
    procedure UnlockCursor; dispid 1610743878;
    function CreateInfoBtn(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                           const pID: WideString; nStyle: Int64; const pCustomImpl: IUnknown): IUIX_InfoBtn; dispid 1610743879;
    property DPI: Integer readonly dispid 1610743880;
    function Px96toPx(nSize: Integer): Integer; dispid 1610743881;
    function CreateNewBrush(nType: UIX_BrushType): IUIX_Brush; dispid 1610743882;
    function CreateNewPen: IUIX_Pen; dispid 1610743883;
    function GetScrollBarSize(bVert: WordBool): Integer; dispid 1610743884;
    function HoldPopups: IUIX_PopupsHolder; dispid 1610743885;
    function CreatePolygonSrc: IUIX_PolygonSrc; dispid 1610743886;
    function CreatePolyPolygonSrc: IUIX_PolyPolygonSrc; dispid 1610743887;
    function CreateFileTypeIcon(sFileExt: {NOT_OLEAUTO(PWideChar)}OleVariant; nFlags: Integer): IUIX_Icon; dispid 1610743888;
    function CreateDrawStringTags: IUIX_DrawStringTags; dispid 1610743889;
    function CreateDrawStringHighlight: IUIX_DrawStringHighlight; dispid 1610743890;
    function CreateColorsTable: IUIX_ColorsTable; dispid 1610743891;
    function CalcLabelIdealSize(nStyle: Int64; nClientWidth: Integer; 
                                sText: {NOT_OLEAUTO(PWideChar)}OleVariant; nDrawTextFlags: Integer; 
                                const pFont: IUIX_Font): {NOT_OLEAUTO(tagSIZE)}OleVariant; dispid 1610743892;
    procedure SendCmdNotify(const pTarget: IUIX_Obj; nNotifyCode: Integer; const pCmd: IUIX_Cmd; 
                            const pItem: IUIX_CmdItem; const pOwner: IUIX_Obj; pNotifyData: PARAM_T); dispid 1610743893;
    function DoDragDrop(const pDataObject: IDataObject; const pDropSource: IDropSource): ULONG_T; dispid 1610743894;
    function DoDragDrop2(const pDataObject: IDataObject; const pDropSource: IDropSource; 
                         const pDragImage: IUIX_ImageData; 
                         var pDragImageOffset: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                         dwSupportedEffects: LongWord): ULONG_T; dispid 1610743895;
    function GetPrivateData(var stFmtEtc: {NOT_OLEAUTO(tagFORMATETC)}OleVariant; 
                            stStdMed: {NOT_OLEAUTO(PPUserType3)}OleVariant): IUnknown; dispid 1610743896;
    property PrivateDataFmtID: Integer readonly dispid 1610743897;
    procedure SetAppIcon(hIcon: HANDLE_T); dispid 1610743898;
    function CreateIconFromFile(const pSource: IAFS_File): IUIX_Icon; dispid 1610743899;
    function CreateIconFromFile2(const sSourceFileName: WideString): IUIX_Icon; dispid 1610743900;
    procedure GetHyperLinkColors(out nNormal: Integer; out nHot: Integer; out nVisited: Integer); dispid 1610743901;
    function CreateProgress(const pParent: IUIX_Obj; var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                            const pID: WideString; nStyle: Int64; const pCustomImpl: IUnknown): IUIX_Progress; dispid 1610743902;
    procedure RevokeCurrentThreadContext; dispid 1610743903;
    procedure SetStdCursor(nCur: UIX_StdCursor); dispid 1610743904;
  end;

// *********************************************************************//
// Interface: IUIX_ContextHelpHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {237F6B6F-DAB7-4230-B2E9-49D5C6AB9243}
// *********************************************************************//
  IUIX_ContextHelpHandler = interface(IDispatch)
    ['{237F6B6F-DAB7-4230-B2E9-49D5C6AB9243}']
    procedure OnContextHelp(const pContext: IUIX_Obj; const sContexHelpID: WideString); safecall;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ContextHelpHandlerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {237F6B6F-DAB7-4230-B2E9-49D5C6AB9243}
// *********************************************************************//
  IUIX_ContextHelpHandlerDisp = dispinterface
    ['{237F6B6F-DAB7-4230-B2E9-49D5C6AB9243}']
    procedure OnContextHelp(const pContext: IUIX_Obj; const sContexHelpID: WideString); dispid 1610743808;
  end;

// *********************************************************************//
// Interface: IUIX_ThemeLoadMonitor
// Flags:     (0)
// GUID:      {3AFA83C4-4932-491C-849C-A605B11B7B42}
// *********************************************************************//
  IUIX_ThemeLoadMonitor = interface(IUnknown)
    ['{3AFA83C4-4932-491C-849C-A605B11B7B42}']
    function OnMessage(hCode: HResult; const sText: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_CharFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {092DCFE6-4B0E-4392-A71A-137E9F5DBF17}
// *********************************************************************//
  IUIX_CharFormat = interface(IDispatch)
    ['{092DCFE6-4B0E-4392-A71A-137E9F5DBF17}']
    function Get_Mask: Integer; safecall;
    procedure Set_Mask(nMask: Integer); safecall;
    function Get_FontNameID: Integer; safecall;
    procedure Set_FontNameID(nFontID: Integer); safecall;
    function Get_FontSize: Double; safecall;
    procedure Set_FontSize(nFontSize: Double); safecall;
    function Get_FontWeight: Integer; safecall;
    procedure Set_FontWeight(nFontWeight: Integer); safecall;
    function Get_FontStyle: Integer; safecall;
    procedure Set_FontStyle(nFontStyle: Integer); safecall;
    function Get_FontStyleMask: Integer; safecall;
    procedure Set_FontStyleMask(nFontStyleMask: Integer); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(nColor: Integer); safecall;
    function Get_BkColor: Integer; safecall;
    procedure Set_BkColor(nBkColor: Integer); safecall;
    function Get_OffsetY: Double; safecall;
    procedure Set_OffsetY(nOffsetY: Double); safecall;
    function Get_HScale: Double; safecall;
    procedure Set_HScale(nHScale: Double); safecall;
    function Get_VScale: Double; safecall;
    procedure Set_VScale(nVScale: Double); safecall;
    function Get_CharSpacing: Double; safecall;
    procedure Set_CharSpacing(nCharSpacing: Double); safecall;
    function Get_LinkID: Integer; safecall;
    procedure Set_LinkID(nLinkID: Integer); safecall;
    property Mask: Integer read Get_Mask write Set_Mask;
    property FontNameID: Integer read Get_FontNameID write Set_FontNameID;
    property FontSize: Double read Get_FontSize write Set_FontSize;
    property FontWeight: Integer read Get_FontWeight write Set_FontWeight;
    property FontStyle: Integer read Get_FontStyle write Set_FontStyle;
    property FontStyleMask: Integer read Get_FontStyleMask write Set_FontStyleMask;
    property Color: Integer read Get_Color write Set_Color;
    property BkColor: Integer read Get_BkColor write Set_BkColor;
    property OffsetY: Double read Get_OffsetY write Set_OffsetY;
    property HScale: Double read Get_HScale write Set_HScale;
    property VScale: Double read Get_VScale write Set_VScale;
    property CharSpacing: Double read Get_CharSpacing write Set_CharSpacing;
    property LinkID: Integer read Get_LinkID write Set_LinkID;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CharFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {092DCFE6-4B0E-4392-A71A-137E9F5DBF17}
// *********************************************************************//
  IUIX_CharFormatDisp = dispinterface
    ['{092DCFE6-4B0E-4392-A71A-137E9F5DBF17}']
    property Mask: Integer dispid 1610743808;
    property FontNameID: Integer dispid 1610743810;
    property FontSize: Double dispid 1610743812;
    property FontWeight: Integer dispid 1610743814;
    property FontStyle: Integer dispid 1610743816;
    property FontStyleMask: Integer dispid 1610743818;
    property Color: Integer dispid 1610743820;
    property BkColor: Integer dispid 1610743822;
    property OffsetY: Double dispid 1610743824;
    property HScale: Double dispid 1610743826;
    property VScale: Double dispid 1610743828;
    property CharSpacing: Double dispid 1610743830;
    property LinkID: Integer dispid 1610743832;
  end;

// *********************************************************************//
// Interface: IUIX_ParaFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {13A68D58-65AC-43B2-A0D6-A3D9DFA47170}
// *********************************************************************//
  IUIX_ParaFormat = interface(IDispatch)
    ['{13A68D58-65AC-43B2-A0D6-A3D9DFA47170}']
    function Get_Mask: Integer; safecall;
    procedure Set_Mask(nMask: Integer); safecall;
    function Get_Align: UIX_TextAlign; safecall;
    procedure Set_Align(nAlign: UIX_TextAlign); safecall;
    function Get_StartIndent: Double; safecall;
    procedure Set_StartIndent(nStartIndent: Double); safecall;
    function Get_HangIndent: Double; safecall;
    procedure Set_HangIndent(nHangIndent: Double); safecall;
    function Get_LineSpacing: Double; safecall;
    procedure Set_LineSpacing(nLineSpacing: Double); safecall;
    function Get_MarginTop: Double; safecall;
    procedure Set_MarginTop(nMarginTop: Double); safecall;
    function Get_MarginBottom: Double; safecall;
    procedure Set_MarginBottom(nMarginBottom: Double); safecall;
    function Get_MarginLeft: Double; safecall;
    procedure Set_MarginLeft(nMarginLeft: Double); safecall;
    function Get_MarginRight: Double; safecall;
    procedure Set_MarginRight(nMarginRight: Double); safecall;
    function Get_DefTab: Double; safecall;
    procedure Set_DefTab(nDefTab: Double); safecall;
    function Get_Radix: Double; safecall;
    procedure Set_Radix(nRadix: Double); safecall;
    function Get_TextDir: UIX_TextDir; safecall;
    procedure Set_TextDir(nTextDir: UIX_TextDir); safecall;
    function Get_TabStops: IUIX_TextTabStops; safecall;
    procedure Set_TabStops(const pTabStops: IUIX_TextTabStops); safecall;
    property Mask: Integer read Get_Mask write Set_Mask;
    property Align: UIX_TextAlign read Get_Align write Set_Align;
    property StartIndent: Double read Get_StartIndent write Set_StartIndent;
    property HangIndent: Double read Get_HangIndent write Set_HangIndent;
    property LineSpacing: Double read Get_LineSpacing write Set_LineSpacing;
    property MarginTop: Double read Get_MarginTop write Set_MarginTop;
    property MarginBottom: Double read Get_MarginBottom write Set_MarginBottom;
    property MarginLeft: Double read Get_MarginLeft write Set_MarginLeft;
    property MarginRight: Double read Get_MarginRight write Set_MarginRight;
    property DefTab: Double read Get_DefTab write Set_DefTab;
    property Radix: Double read Get_Radix write Set_Radix;
    property TextDir: UIX_TextDir read Get_TextDir write Set_TextDir;
    property TabStops: IUIX_TextTabStops read Get_TabStops write Set_TabStops;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ParaFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {13A68D58-65AC-43B2-A0D6-A3D9DFA47170}
// *********************************************************************//
  IUIX_ParaFormatDisp = dispinterface
    ['{13A68D58-65AC-43B2-A0D6-A3D9DFA47170}']
    property Mask: Integer dispid 1610743808;
    property Align: UIX_TextAlign dispid 1610743810;
    property StartIndent: Double dispid 1610743812;
    property HangIndent: Double dispid 1610743814;
    property LineSpacing: Double dispid 1610743816;
    property MarginTop: Double dispid 1610743818;
    property MarginBottom: Double dispid 1610743820;
    property MarginLeft: Double dispid 1610743822;
    property MarginRight: Double dispid 1610743824;
    property DefTab: Double dispid 1610743826;
    property Radix: Double dispid 1610743828;
    property TextDir: UIX_TextDir dispid 1610743830;
    property TabStops: IUIX_TextTabStops dispid 1610743832;
  end;

// *********************************************************************//
// Interface: IUIX_TextTabStops
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {29A02EF5-5573-44CA-B272-D8AD94ABFA08}
// *********************************************************************//
  IUIX_TextTabStops = interface(IDispatch)
    ['{29A02EF5-5573-44CA-B272-D8AD94ABFA08}']
    function Get_Item(nIndex: Integer): IUIX_TabStopFormat; safecall;
    function Get_Count: Integer; safecall;
    procedure Insert(const pItem: IUIX_TabStopFormat; nIndex: Integer); safecall;
    procedure Remove(nIndex: Integer); safecall;
    procedure Clear; safecall;
    property Item[nIndex: Integer]: IUIX_TabStopFormat read Get_Item; default;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IUIX_TextTabStopsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {29A02EF5-5573-44CA-B272-D8AD94ABFA08}
// *********************************************************************//
  IUIX_TextTabStopsDisp = dispinterface
    ['{29A02EF5-5573-44CA-B272-D8AD94ABFA08}']
    property Item[nIndex: Integer]: IUIX_TabStopFormat readonly dispid 0; default;
    property Count: Integer readonly dispid 1610743809;
    procedure Insert(const pItem: IUIX_TabStopFormat; nIndex: Integer); dispid 1610743810;
    procedure Remove(nIndex: Integer); dispid 1610743811;
    procedure Clear; dispid 1610743812;
  end;

// *********************************************************************//
// Interface: IUIX_TabStopFormat
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E3B7703D-456F-4B3B-B3F4-1B207653B25F}
// *********************************************************************//
  IUIX_TabStopFormat = interface(IDispatch)
    ['{E3B7703D-456F-4B3B-B3F4-1B207653B25F}']
    function Get_Pos: Double; safecall;
    procedure Set_Pos(nPos: Double); safecall;
    function Get_Align: UIX_TabStopAlign; safecall;
    procedure Set_Align(nAlign: UIX_TabStopAlign); safecall;
    function Get_LeaderType: UIX_TabStopLeaderType; safecall;
    procedure Set_LeaderType(nLeaderType: UIX_TabStopLeaderType); safecall;
    function Get_LeaderContent: WideString; safecall;
    procedure Set_LeaderContent(const sLeaderContent: WideString); safecall;
    function Get_LeaderAlign: Integer; safecall;
    procedure Set_LeaderAlign(nAlign: Integer); safecall;
    function Get_LeaderContentWidth: Double; safecall;
    procedure Set_LeaderContentWidth(nContentWidth: Double); safecall;
    function Get_LeaderRuleThickness: Double; safecall;
    procedure Set_LeaderRuleThickness(nRuleThickness: Double); safecall;
    property Pos: Double read Get_Pos write Set_Pos;
    property Align: UIX_TabStopAlign read Get_Align write Set_Align;
    property LeaderType: UIX_TabStopLeaderType read Get_LeaderType write Set_LeaderType;
    property LeaderContent: WideString read Get_LeaderContent write Set_LeaderContent;
    property LeaderAlign: Integer read Get_LeaderAlign write Set_LeaderAlign;
    property LeaderContentWidth: Double read Get_LeaderContentWidth write Set_LeaderContentWidth;
    property LeaderRuleThickness: Double read Get_LeaderRuleThickness write Set_LeaderRuleThickness;
  end;

// *********************************************************************//
// DispIntf:  IUIX_TabStopFormatDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E3B7703D-456F-4B3B-B3F4-1B207653B25F}
// *********************************************************************//
  IUIX_TabStopFormatDisp = dispinterface
    ['{E3B7703D-456F-4B3B-B3F4-1B207653B25F}']
    property Pos: Double dispid 1610743808;
    property Align: UIX_TabStopAlign dispid 1610743810;
    property LeaderType: UIX_TabStopLeaderType dispid 1610743812;
    property LeaderContent: WideString dispid 1610743814;
    property LeaderAlign: Integer dispid 1610743816;
    property LeaderContentWidth: Double dispid 1610743818;
    property LeaderRuleThickness: Double dispid 1610743820;
  end;

// *********************************************************************//
// Interface: IUIX_NumEditFilterConvTbl
// Flags:     (0)
// GUID:      {C2AFD4D9-48E5-430C-827B-7356C1BEA319}
// *********************************************************************//
  IUIX_NumEditFilterConvTbl = interface(IUnknown)
    ['{C2AFD4D9-48E5-430C-827B-7356C1BEA319}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Insert(const sTemplate: WideString; nConvCoeff: Double; nInsertIndex: Integer): HResult; stdcall;
    function Remove(nItemIndex: Integer): HResult; stdcall;
    function GetItem(nItemIndex: Integer; out sTemplate: WideString; out nConvCoeff: Double): HResult; stdcall;
    function CopyFrom(const pSrc: IUIX_NumEditFilterConvTbl): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_EditFilterCallbacks
// Flags:     (0)
// GUID:      {DD0435A3-CB83-4FE1-AC39-D8F1E2BA47BE}
// *********************************************************************//
  IUIX_EditFilterCallbacks = interface(IUnknown)
    ['{DD0435A3-CB83-4FE1-AC39-D8F1E2BA47BE}']
    function EditFilter_OnInit(const pEdit: IUIX_Edit): HResult; stdcall;
    function EditFilter_OnFinal(const pEdit: IUIX_Edit): HResult; stdcall;
    function EditFilter_OnInsertText(const pEdit: IUIX_Edit; sText: PWideChar; nLen: Integer; 
                                     nInsertLen: Integer; out sNewText: WideString): HResult; stdcall;
    function EditFilter_OnSpin(const pEdit: IUIX_Edit; nSpinDir: Integer): HResult; stdcall;
    function EditFilter_OnSetFocus(const pEdit: IUIX_Edit): HResult; stdcall;
    function EditFilter_OnLostFocus(const pEdit: IUIX_Edit): HResult; stdcall;
    function EditFilter_OnChanged(const pEdit: IUIX_Edit): HResult; stdcall;
    function EditFilter_OnKeyDown(const pEdit: IUIX_Edit; nKeyCode: Integer; nFlags: Integer): HResult; stdcall;
    function EditFilter_Commit(out bOK: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_NumEditFilter
// Flags:     (0)
// GUID:      {E3B769D7-49DD-4FD9-8CEC-B524F910B7EB}
// *********************************************************************//
  IUIX_NumEditFilter = interface(IUIX_EditFilterCallbacks)
    ['{E3B769D7-49DD-4FD9-8CEC-B524F910B7EB}']
    function Get_Value(out nVal: Double): HResult; stdcall;
    function Set_Value(nVal: Double): HResult; stdcall;
    function GetDispValue(out bOK: WordBool; out nVal: Double): HResult; stdcall;
    function Setup(nMin: Double; nMax: Double; nDispCoef: Double; nDispPrec: Integer; 
                   bTrimTrailingZeros: WordBool; const pDispPattern: WideString; nScrollStep: Double): HResult; stdcall;
    function Get_ConvTbl(out pConvTbl: IUIX_NumEditFilterConvTbl): HResult; stdcall;
    function Set_ConvTbl(const pConvTbl: IUIX_NumEditFilterConvTbl): HResult; stdcall;
    function Get_AllowedChars(out sChars: WideString): HResult; stdcall;
    function Set_AllowedChars(const sChars: WideString): HResult; stdcall;
    function Get_DeniedChars(out sChars: WideString): HResult; stdcall;
    function Set_DeniedChars(const sChars: WideString): HResult; stdcall;
    function Get_DispCoef(out nCoef: Double): HResult; stdcall;
    function Set_DispCoef(nCoef: Double): HResult; stdcall;
    function Get_DispPattern(out sPattern: WideString): HResult; stdcall;
    function Set_DispPattern(const sPattern: WideString): HResult; stdcall;
    function Get_UndefinedValue(out bVal: WordBool): HResult; stdcall;
    function Set_UndefinedValue(bVal: WordBool): HResult; stdcall;
    function TextToValue(const sText: WideString; out bOK: WordBool; out nVal: Double): HResult; stdcall;
    function AddNamedVal(const sName: WideString; nVal: Double): HResult; stdcall;
    function RemoveAllNamedValues: HResult; stdcall;
    function SetMinMax(nMin: Double; nMax: Double): HResult; stdcall;
    function GetMinMax(out nMin: Double; out nMax: Double): HResult; stdcall;
    function Set_DispPrec(nVal: Integer): HResult; stdcall;
    function Get_DispPrec(out nVal: Integer): HResult; stdcall;
    function Set_TrimTrailingZeros(bVal: WordBool): HResult; stdcall;
    function Get_TrimTrailingZeros(out bVal: WordBool): HResult; stdcall;
    function Set_ScrollStep(nVal: Double): HResult; stdcall;
    function Get_ScrollStep(out nVal: Double): HResult; stdcall;
    function Get_CommitedValue(out nVal: Double): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Edit
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BD7FAFAA-9748-4CFC-B134-D3B2CA96B4F8}
// *********************************************************************//
  IUIX_Edit = interface(IUIX_ObjImpl)
    ['{BD7FAFAA-9748-4CFC-B134-D3B2CA96B4F8}']
    function Get_Callbacks: IUIX_EditCallbacks; safecall;
    procedure Set_Callbacks(const pCallbacks: IUIX_EditCallbacks); safecall;
    function Get_Filter: IUIX_EditFilterCallbacks; safecall;
    procedure Set_Filter(const pFilter: IUIX_EditFilterCallbacks); safecall;
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_PasswordChar: Word; safecall;
    procedure Set_PasswordChar(nChar: Word); safecall;
    function Get_MaxLength: Integer; safecall;
    procedure Set_MaxLength(nRet: Integer); safecall;
    function Get_Multiline: WordBool; safecall;
    procedure Set_Multiline(bRet: WordBool); safecall;
    function Get_PasswordMode: WordBool; safecall;
    procedure Set_PasswordMode(bRet: WordBool); safecall;
    function Get_History: IOperationHistory; safecall;
    procedure Undo; safecall;
    procedure Redo; safecall;
    procedure SetDefaultTextFormat(const pCharFmt: IUIX_CharFormat; const pParaFmt: IUIX_ParaFormat); safecall;
    procedure GetDefaultTextFormat(const pCharFmt: IUIX_CharFormat; const pParaFmt: IUIX_ParaFormat); safecall;
    procedure SetTextFormat(const pCharFmt: IUIX_CharFormat; const pParaFmt: IUIX_ParaFormat); safecall;
    procedure GetTextFormat(const pCharFmt: IUIX_CharFormat; const pParaFmt: IUIX_ParaFormat); safecall;
    procedure GetTextFormatFromPos(var stTextPos: UIX_EditTextPos; const pCharFmt: IUIX_CharFormat; 
                                   const pParaFmt: IUIX_ParaFormat); safecall;
    function Get_DefaultTextAlign: UIX_TextAlign; safecall;
    procedure Set_DefaultTextAlign(nRet: UIX_TextAlign); safecall;
    function Get_DefaultFont: IUIX_Font; safecall;
    procedure Set_DefaultFont(const pFont: IUIX_Font); safecall;
    function Get_DefaultTextColor: Integer; safecall;
    procedure Set_DefaultTextColor(nTextColor: Integer); safecall;
    procedure SetFont(const pFont: IUIX_Font); safecall;
    procedure SetTextColor(nTextColor: Integer); safecall;
    procedure SetTextAlign(nVal: UIX_TextAlign); safecall;
    procedure SetFontStyle(nVal: Integer); safecall;
    procedure GetMargins(out nLeft: Integer; out nTop: Integer; out nRight: Integer; 
                         out nBottom: Integer); safecall;
    procedure SetMargins(nLeft: Integer; nTop: Integer; nRight: Integer; nBottom: Integer); safecall;
    function FontNameToID(const sFontName: WideString): Integer; safecall;
    function FontNameFromID(nFontNameID: Integer): WideString; safecall;
    function Get_ScrollPos: tagPOINT; safecall;
    procedure Set_ScrollPos(stCurScrollPos: PUserType22); safecall;
    function Get_Changed: ULONG_T; safecall;
    procedure Set_Changed(nVal: ULONG_T); safecall;
    function Get_EditState: Integer; safecall;
    procedure SetAutoFitMinMax(nMinFontSize: Double; nMaxFontSize: Double); safecall;
    procedure GetAutoFitMinMax(out nMinFontSize: Double; out nMaxFontSize: Double); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const sRet: WideString); safecall;
    function Get_TextLength: Integer; safecall;
    function GetText(sCharsBuff: PWideChar; nCharsBuffSize: Integer): Integer; safecall;
    procedure SetText(sText: PWideChar; nLength: Integer); safecall;
    procedure InsertText(sText: PWideChar; nLength: Integer); safecall;
    procedure GetTextEnd(out stEnd: UIX_EditTextPos); safecall;
    procedure GetTextStart(out stStart: UIX_EditTextPos); safecall;
    function TextIsEqual(sText: PWideChar; nLen: Integer): WordBool; safecall;
    function TextIsEqualBSTR(const sText: WideString): WordBool; safecall;
    function Get_HasSel: WordBool; safecall;
    procedure SetSel(var stBegin: UIX_EditTextPos; var stEnd: UIX_EditTextPos); safecall;
    procedure GetSel(out stBegin: UIX_EditTextPos; out stEnd: UIX_EditTextPos); safecall;
    procedure SetPlainSel(nBegin: Integer; nEnd: Integer); safecall;
    procedure GetPlainSel(out nBegin: Integer; out nEnd: Integer); safecall;
    procedure ClearSel; safecall;
    procedure SelectAll; safecall;
    procedure ShowSel(bShow: WordBool); safecall;
    procedure DeleteSel; safecall;
    function Get_SelTextLen: Integer; safecall;
    function GetSelText(sCharsBuff: PWideChar; nCharsBuffSize: Integer): Integer; safecall;
    function GetSelBSTR: WideString; safecall;
    procedure Cut; safecall;
    procedure Copy; safecall;
    procedure Paste; safecall;
    function Get_IsEmpty: WordBool; safecall;
    procedure Clear; safecall;
    function Get_UpdatesLocked: WordBool; safecall;
    procedure LockUpdates; safecall;
    procedure UnLockUpdates; safecall;
    procedure AppendText(sText: PWideChar; nTextLen: Integer); safecall;
    procedure AppendBSTR(const sText: WideString); safecall;
    procedure ShowCaret(bShow: WordBool); safecall;
    function Get_CaretPos: UIX_EditTextPos; safecall;
    procedure Set_CaretPos(stCurCaretPos: PUserType30); safecall;
    procedure SetCaretPos(var stNewCaretPos: UIX_EditTextPos; bKeepSelection: WordBool); safecall;
    function Get_IdealSize: tagSIZE; safecall;
    function Get_LeftCtl: IUIX_Obj; safecall;
    procedure Set_LeftCtl(const pCtl: IUIX_Obj); safecall;
    function Get_RightCtl: IUIX_Obj; safecall;
    procedure Set_RightCtl(const pCtl: IUIX_Obj); safecall;
    function Get_CueText: WideString; safecall;
    procedure Set_CueText(const sCueText: WideString); safecall;
    function Get_TextVAlign: UIX_TextVAlign; safecall;
    procedure Set_TextVAlign(nRet: UIX_TextVAlign); safecall;
    function Get_ReadOnly: WordBool; safecall;
    procedure Set_ReadOnly(bRet: WordBool); safecall;
    function Get_LinksCount: Integer; safecall;
    function Get_Link(nIndex: Integer): Integer; safecall;
    function AddLink(const sURL: WideString): Integer; safecall;
    function GetLinkURL(nLinkID: Integer): WideString; safecall;
    procedure SetLinkURL(nLinkID: Integer; const sURL: WideString); safecall;
    function GetLinkFromPt(var stPoint: tagPOINT): Integer; safecall;
    procedure RemoveAllLinks; safecall;
    procedure SetDefaultLinkFormat(const pActive: IUIX_CharFormat; const pClicked: IUIX_CharFormat); safecall;
    function Get_ParaCount: Integer; safecall;
    function Get_ParaText(nParaIndex: Integer): WideString; safecall;
    function Get_ParaTextLen(nParaIndex: Integer): Integer; safecall;
    function GetParaText(nParaIndex: Integer; sCharsBuff: PWideChar; nCharsBuffSize: Integer): Integer; safecall;
    procedure GetRichText(nType: UIX_RichTextType; const pDest: IStream; nFlags: Integer); safecall;
    procedure SetRichText(const pSrc: IStream; nFlags: Integer); safecall;
    property Callbacks: IUIX_EditCallbacks read Get_Callbacks write Set_Callbacks;
    property Filter: IUIX_EditFilterCallbacks read Get_Filter write Set_Filter;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property PasswordChar: Word read Get_PasswordChar write Set_PasswordChar;
    property MaxLength: Integer read Get_MaxLength write Set_MaxLength;
    property Multiline: WordBool read Get_Multiline write Set_Multiline;
    property PasswordMode: WordBool read Get_PasswordMode write Set_PasswordMode;
    property History: IOperationHistory read Get_History;
    property DefaultTextAlign: UIX_TextAlign read Get_DefaultTextAlign write Set_DefaultTextAlign;
    property DefaultFont: IUIX_Font read Get_DefaultFont write Set_DefaultFont;
    property DefaultTextColor: Integer read Get_DefaultTextColor write Set_DefaultTextColor;
    // Skipped Property "ScrollPos"
    property Changed: ULONG_T read Get_Changed write Set_Changed;
    property EditState: Integer read Get_EditState;
    property Text: WideString read Get_Text write Set_Text;
    property TextLength: Integer read Get_TextLength;
    property HasSel: WordBool read Get_HasSel;
    property SelTextLen: Integer read Get_SelTextLen;
    property IsEmpty: WordBool read Get_IsEmpty;
    property UpdatesLocked: WordBool read Get_UpdatesLocked;
    // Skipped Property "CaretPos"
    property IdealSize: tagSIZE read Get_IdealSize;
    property LeftCtl: IUIX_Obj read Get_LeftCtl write Set_LeftCtl;
    property RightCtl: IUIX_Obj read Get_RightCtl write Set_RightCtl;
    property CueText: WideString read Get_CueText write Set_CueText;
    property TextVAlign: UIX_TextVAlign read Get_TextVAlign write Set_TextVAlign;
    property ReadOnly: WordBool read Get_ReadOnly write Set_ReadOnly;
    property LinksCount: Integer read Get_LinksCount;
    property Link[nIndex: Integer]: Integer read Get_Link;
    property ParaCount: Integer read Get_ParaCount;
    property ParaText[nParaIndex: Integer]: WideString read Get_ParaText;
    property ParaTextLen[nParaIndex: Integer]: Integer read Get_ParaTextLen;
  end;

// *********************************************************************//
// DispIntf:  IUIX_EditDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BD7FAFAA-9748-4CFC-B134-D3B2CA96B4F8}
// *********************************************************************//
  IUIX_EditDisp = dispinterface
    ['{BD7FAFAA-9748-4CFC-B134-D3B2CA96B4F8}']
    property Callbacks: IUIX_EditCallbacks dispid 1610809344;
    property Filter: IUIX_EditFilterCallbacks dispid 1610809346;
    property NotifyTarget: IUIX_Obj dispid 1610809348;
    property PasswordChar: Word dispid 1610809350;
    property MaxLength: Integer dispid 1610809352;
    property Multiline: WordBool dispid 1610809354;
    property PasswordMode: WordBool dispid 1610809356;
    property History: IOperationHistory readonly dispid 1610809358;
    procedure Undo; dispid 1610809359;
    procedure Redo; dispid 1610809360;
    procedure SetDefaultTextFormat(const pCharFmt: IUIX_CharFormat; const pParaFmt: IUIX_ParaFormat); dispid 1610809361;
    procedure GetDefaultTextFormat(const pCharFmt: IUIX_CharFormat; const pParaFmt: IUIX_ParaFormat); dispid 1610809362;
    procedure SetTextFormat(const pCharFmt: IUIX_CharFormat; const pParaFmt: IUIX_ParaFormat); dispid 1610809363;
    procedure GetTextFormat(const pCharFmt: IUIX_CharFormat; const pParaFmt: IUIX_ParaFormat); dispid 1610809364;
    procedure GetTextFormatFromPos(var stTextPos: {NOT_OLEAUTO(UIX_EditTextPos)}OleVariant; 
                                   const pCharFmt: IUIX_CharFormat; const pParaFmt: IUIX_ParaFormat); dispid 1610809365;
    property DefaultTextAlign: UIX_TextAlign dispid 1610809366;
    property DefaultFont: IUIX_Font dispid 1610809368;
    property DefaultTextColor: Integer dispid 1610809370;
    procedure SetFont(const pFont: IUIX_Font); dispid 1610809372;
    procedure SetTextColor(nTextColor: Integer); dispid 1610809373;
    procedure SetTextAlign(nVal: UIX_TextAlign); dispid 1610809374;
    procedure SetFontStyle(nVal: Integer); dispid 1610809375;
    procedure GetMargins(out nLeft: Integer; out nTop: Integer; out nRight: Integer; 
                         out nBottom: Integer); dispid 1610809376;
    procedure SetMargins(nLeft: Integer; nTop: Integer; nRight: Integer; nBottom: Integer); dispid 1610809377;
    function FontNameToID(const sFontName: WideString): Integer; dispid 1610809378;
    function FontNameFromID(nFontNameID: Integer): WideString; dispid 1610809379;
    function ScrollPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; dispid 1610809380;
    property Changed: ULONG_T dispid 1610809382;
    property EditState: Integer readonly dispid 1610809384;
    procedure SetAutoFitMinMax(nMinFontSize: Double; nMaxFontSize: Double); dispid 1610809385;
    procedure GetAutoFitMinMax(out nMinFontSize: Double; out nMaxFontSize: Double); dispid 1610809386;
    property Text: WideString dispid 1610809387;
    property TextLength: Integer readonly dispid 1610809389;
    function GetText(sCharsBuff: {NOT_OLEAUTO(PWideChar)}OleVariant; nCharsBuffSize: Integer): Integer; dispid 1610809390;
    procedure SetText(sText: {NOT_OLEAUTO(PWideChar)}OleVariant; nLength: Integer); dispid 1610809391;
    procedure InsertText(sText: {NOT_OLEAUTO(PWideChar)}OleVariant; nLength: Integer); dispid 1610809392;
    procedure GetTextEnd(out stEnd: {NOT_OLEAUTO(UIX_EditTextPos)}OleVariant); dispid 1610809393;
    procedure GetTextStart(out stStart: {NOT_OLEAUTO(UIX_EditTextPos)}OleVariant); dispid 1610809394;
    function TextIsEqual(sText: {NOT_OLEAUTO(PWideChar)}OleVariant; nLen: Integer): WordBool; dispid 1610809395;
    function TextIsEqualBSTR(const sText: WideString): WordBool; dispid 1610809396;
    property HasSel: WordBool readonly dispid 1610809397;
    procedure SetSel(var stBegin: {NOT_OLEAUTO(UIX_EditTextPos)}OleVariant; 
                     var stEnd: {NOT_OLEAUTO(UIX_EditTextPos)}OleVariant); dispid 1610809398;
    procedure GetSel(out stBegin: {NOT_OLEAUTO(UIX_EditTextPos)}OleVariant; 
                     out stEnd: {NOT_OLEAUTO(UIX_EditTextPos)}OleVariant); dispid 1610809399;
    procedure SetPlainSel(nBegin: Integer; nEnd: Integer); dispid 1610809400;
    procedure GetPlainSel(out nBegin: Integer; out nEnd: Integer); dispid 1610809401;
    procedure ClearSel; dispid 1610809402;
    procedure SelectAll; dispid 1610809403;
    procedure ShowSel(bShow: WordBool); dispid 1610809404;
    procedure DeleteSel; dispid 1610809405;
    property SelTextLen: Integer readonly dispid 1610809406;
    function GetSelText(sCharsBuff: {NOT_OLEAUTO(PWideChar)}OleVariant; nCharsBuffSize: Integer): Integer; dispid 1610809407;
    function GetSelBSTR: WideString; dispid 1610809408;
    procedure Cut; dispid 1610809409;
    procedure Copy; dispid 1610809410;
    procedure Paste; dispid 1610809411;
    property IsEmpty: WordBool readonly dispid 1610809412;
    procedure Clear; dispid 1610809413;
    property UpdatesLocked: WordBool readonly dispid 1610809414;
    procedure LockUpdates; dispid 1610809415;
    procedure UnLockUpdates; dispid 1610809416;
    procedure AppendText(sText: {NOT_OLEAUTO(PWideChar)}OleVariant; nTextLen: Integer); dispid 1610809417;
    procedure AppendBSTR(const sText: WideString); dispid 1610809418;
    procedure ShowCaret(bShow: WordBool); dispid 1610809419;
    function CaretPos: {NOT_OLEAUTO(UIX_EditTextPos)}OleVariant; dispid 1610809420;
    procedure SetCaretPos(var stNewCaretPos: {NOT_OLEAUTO(UIX_EditTextPos)}OleVariant; 
                          bKeepSelection: WordBool); dispid 1610809422;
    property IdealSize: {NOT_OLEAUTO(tagSIZE)}OleVariant readonly dispid 1610809423;
    property LeftCtl: IUIX_Obj dispid 1610809424;
    property RightCtl: IUIX_Obj dispid 1610809426;
    property CueText: WideString dispid 1610809428;
    property TextVAlign: UIX_TextVAlign dispid 1610809430;
    property ReadOnly: WordBool dispid 1610809432;
    property LinksCount: Integer readonly dispid 1610809434;
    property Link[nIndex: Integer]: Integer readonly dispid 1610809435;
    function AddLink(const sURL: WideString): Integer; dispid 1610809436;
    function GetLinkURL(nLinkID: Integer): WideString; dispid 1610809437;
    procedure SetLinkURL(nLinkID: Integer; const sURL: WideString); dispid 1610809438;
    function GetLinkFromPt(var stPoint: {NOT_OLEAUTO(tagPOINT)}OleVariant): Integer; dispid 1610809439;
    procedure RemoveAllLinks; dispid 1610809440;
    procedure SetDefaultLinkFormat(const pActive: IUIX_CharFormat; const pClicked: IUIX_CharFormat); dispid 1610809441;
    property ParaCount: Integer readonly dispid 1610809442;
    property ParaText[nParaIndex: Integer]: WideString readonly dispid 1610809443;
    property ParaTextLen[nParaIndex: Integer]: Integer readonly dispid 1610809444;
    function GetParaText(nParaIndex: Integer; sCharsBuff: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                         nCharsBuffSize: Integer): Integer; dispid 1610809445;
    procedure GetRichText(nType: UIX_RichTextType; const pDest: IStream; nFlags: Integer); dispid 1610809446;
    procedure SetRichText(const pSrc: IStream; nFlags: Integer); dispid 1610809447;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_EditCallbacks
// Flags:     (0)
// GUID:      {D67A9099-8C4A-49AD-BA3C-E92F58C86A63}
// *********************************************************************//
  IUIX_EditCallbacks = interface(IUnknown)
    ['{D67A9099-8C4A-49AD-BA3C-E92F58C86A63}']
    function Edit_OnDraw(const pEdit: IUIX_Edit; const pRC: IUIX_RenderContext; 
                         nDrawStage: Integer; var stRects: tagRECT; nRects: Integer; 
                         var stBoundsRect: tagRECT): HResult; stdcall;
    function Edit_OnSelChanged(const pEdit: IUIX_Edit; nFlags: Integer): HResult; stdcall;
    function Edit_OnSelChanging(const pEdit: IUIX_Edit; nFlags: Integer): HResult; stdcall;
    function Edit_OnChanged(const pEdit: IUIX_Edit; nFlags: Integer): HResult; stdcall;
    function Edit_OnChangedFormat(const pEdit: IUIX_Edit; nCharFmtMask: Integer; 
                                  nParaFmtMask: Integer): HResult; stdcall;
    function Edit_OnContextMenu(const pEdit: IUIX_Edit; var stPos: tagPOINT; bByKey: WordBool; 
                                const pMenu: IUIX_CmdMenu): HResult; stdcall;
    function Edit_OnCut(const pEdit: IUIX_Edit): HResult; stdcall;
    function Edit_OnCopy(const pEdit: IUIX_Edit): HResult; stdcall;
    function Edit_OnPaste(const pEdit: IUIX_Edit): HResult; stdcall;
    function Edit_CheckState(const pEdit: IUIX_Edit; var nEditState: Integer): HResult; stdcall;
    function Edit_OnSetFocus(const pEdit: IUIX_Edit): HResult; stdcall;
    function Edit_OnLostFocus(const pEdit: IUIX_Edit): HResult; stdcall;
    function Edit_OnKeyDown(const pEdit: IUIX_Edit; nKeyCode: Integer; nFlags: Integer): HResult; stdcall;
    function Edit_OnKeyUp(const pEdit: IUIX_Edit; nKeyCode: Integer; nFlags: Integer): HResult; stdcall;
    function Edit_OnSysKeyDown(const pEdit: IUIX_Edit; nKeyCode: Integer; nFlags: Integer): HResult; stdcall;
    function Edit_OnSysKeyUp(const pEdit: IUIX_Edit; nKeyCode: Integer; nFlags: Integer): HResult; stdcall;
    function Edit_OnChar(const pEdit: IUIX_Edit; nKeyCode: Integer; nFlags: Integer): HResult; stdcall;
    function Edit_OnSysChar(const pEdit: IUIX_Edit; nKeyCode: Integer; nFlags: Integer): HResult; stdcall;
    function Edit_OnInsertText(const pEdit: IUIX_Edit; sText: PWideChar; nLen: Integer; 
                               nInsertLen: Integer; out sNewText: WideString): HResult; stdcall;
    function Edit_OnPreInsertText(const pEdit: IUIX_Edit; sText: PWideChar; nLen: Integer; 
                                  nInsertLen: Integer): HResult; stdcall;
    function Edit_OnPostInsertText(const pEdit: IUIX_Edit; sText: PWideChar; nLen: Integer; 
                                   nInsertLen: Integer; bOK: WordBool): HResult; stdcall;
    function Edit_OnClick(const pEdit: IUIX_Edit; var stPos: tagPOINT; bDblClick: WordBool): HResult; stdcall;
    function Edit_OnClicked(const pEdit: IUIX_Edit; var stPos: tagPOINT; bDblClick: WordBool): HResult; stdcall;
    function Edit_OnLinkClicked(const pEdit: IUIX_Edit; var stPos: tagPOINT; nLinkID: Integer; 
                                sURL: PWideChar): HResult; stdcall;
    function Edit_OnSetCursor(const pEdit: IUIX_Edit; var stPos: tagPOINT): HResult; stdcall;
    function Edit_OnMouseEnter(const pEdit: IUIX_Edit; var stPos: tagPOINT): HResult; stdcall;
    function Edit_OnMouseExit(const pEdit: IUIX_Edit): HResult; stdcall;
    function Edit_CanChangeParaFormat(const pEdit: IUIX_Edit; out bCan: WordBool): HResult; stdcall;
    function Edit_OnChangeParaFormat(const pEdit: IUIX_Edit): HResult; stdcall;
    function Edit_OnChangedHistory(const pEdit: IUIX_Edit): HResult; stdcall;
    function Edit_OnChangedStyle(const pEdit: IUIX_Edit; nOldStyle: Int64): HResult; stdcall;
    function Edit_OnClearTextFormat(const pEdit: IUIX_Edit): HResult; stdcall;
    function Edit_OnHitTest(const pEdit: IUIX_Edit; var stPos: tagPOINT; out nRes: PARAM_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_MsgBoxCallback
// Flags:     (0)
// GUID:      {DC986623-173C-43D4-B32E-D5F49C85E33A}
// *********************************************************************//
  IUIX_MsgBoxCallback = interface(IUnknown)
    ['{DC986623-173C-43D4-B32E-D5F49C85E33A}']
    function MsgBox_OnInit(const pMsgBox: IUIX_Dialog): HResult; stdcall;
    function MsgBox_OnFinal(const pMsgBox: IUIX_Dialog): HResult; stdcall;
    function MsgBox_OnNotify(const pMsgBox: IUIX_Dialog; var stNotify: UIX_NotifyInfo; 
                             out nResult: PARAM_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Dialog
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1987CCA-CF31-47CE-932A-A19A07AFBAB2}
// *********************************************************************//
  IUIX_Dialog = interface(IUIX_ObjImpl)
    ['{B1987CCA-CF31-47CE-932A-A19A07AFBAB2}']
    function Get_ID: Integer; safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    procedure ShowLayer(const sLayerName: WideString; bShow: WordBool); safecall;
    function IsLayerVisible(const sLayerName: WideString): WordBool; safecall;
    procedure EnableLayer(const sLayerName: WideString; bEnable: WordBool); safecall;
    function Get_ScrollArea: IUIX_Dialog; safecall;
    function GetItemsBoundRect(bSkipHidden: WordBool): tagRECT; safecall;
    function GetItem(const sItemID: WideString; bTranspSC: WordBool): IUIX_Obj; safecall;
    function GetItem2(nItemID: Integer; bTranspSC: WordBool): IUIX_Obj; safecall;
    function GetNextItem(const pCurItem: IUIX_Obj; nEnumFlags: Integer): IUIX_Obj; safecall;
    procedure ShowItem(const sItemID: WideString; bShow: WordBool); safecall;
    procedure ShowItem2(nItemID: Integer; bShow: WordBool); safecall;
    function IsItemVisible(const sItemID: WideString): WordBool; safecall;
    function IsItemVisible2(nItemID: Integer): WordBool; safecall;
    procedure EnableItem(const sItemID: WideString; bEnable: WordBool); safecall;
    procedure EnableItem2(nItemID: Integer; bEnable: WordBool); safecall;
    function IsItemEnabled(const sItemID: WideString): WordBool; safecall;
    function IsItemEnabled2(nItemID: Integer): WordBool; safecall;
    function GetItemCheckState(const sItemID: WideString): Integer; safecall;
    function GetItemCheckState2(nItemID: Integer): Integer; safecall;
    procedure CheckItem(const sItemID: WideString; nNewCheckState: Integer; 
                        bUpdateRadioGroup: WordBool); safecall;
    procedure CheckItem2(nItemID: Integer; nNewCheckState: Integer; bUpdateRadioGroup: WordBool); safecall;
    procedure SetItemSel(const sItemID: WideString; nNewSel: Integer); safecall;
    procedure SetItemSel2(nItemID: Integer; nNewSel: Integer); safecall;
    function GetItemSel(const sItemID: WideString): Integer; safecall;
    function GetItemSel2(nItemID: Integer): Integer; safecall;
    procedure SetItemText(const sItemID: WideString; const sText: WideString); safecall;
    procedure SetItemText2(nItemID: Integer; const sText: WideString); safecall;
    function GetItemText(const sItemID: WideString): WideString; safecall;
    function GetItemText2(nItemID: Integer): WideString; safecall;
    procedure SetItemCueText(const sItemID: WideString; const sText: WideString); safecall;
    procedure SetItemCueText2(nItemID: Integer; const sText: WideString); safecall;
    procedure EnableAllItems(bEnable: WordBool); safecall;
    procedure UpdateLayout(nFlags: Integer); safecall;
    function GetItemSelParam(const sItemID: WideString; nDef: PARAM_T): PARAM_T; safecall;
    function GetItemSelParam2(nItemID: Integer; nDef: PARAM_T): PARAM_T; safecall;
    procedure SetItemSelByParam(const sItemID: WideString; nParam: PARAM_T); safecall;
    procedure SetItemSelByParam2(nItemID: Integer; nParam: PARAM_T); safecall;
    function Get_ContextHelp: WordBool; safecall;
    procedure Set_ContextHelp(bValue: WordBool); safecall;
    function Get_ContextHelpIndex: WideString; safecall;
    procedure Set_ContextHelpIndex(const sValue: WideString); safecall;
    function Get_TemplScaleFactor: Double; safecall;
    function Get_ForegroundMargin: Integer; safecall;
    property ID: Integer read Get_ID;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property ScrollArea: IUIX_Dialog read Get_ScrollArea;
    property ContextHelp: WordBool read Get_ContextHelp write Set_ContextHelp;
    property ContextHelpIndex: WideString read Get_ContextHelpIndex write Set_ContextHelpIndex;
    property TemplScaleFactor: Double read Get_TemplScaleFactor;
    property ForegroundMargin: Integer read Get_ForegroundMargin;
  end;

// *********************************************************************//
// DispIntf:  IUIX_DialogDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B1987CCA-CF31-47CE-932A-A19A07AFBAB2}
// *********************************************************************//
  IUIX_DialogDisp = dispinterface
    ['{B1987CCA-CF31-47CE-932A-A19A07AFBAB2}']
    property ID: Integer readonly dispid 1610809344;
    property Font: IUIX_Font dispid 1610809345;
    procedure ShowLayer(const sLayerName: WideString; bShow: WordBool); dispid 1610809347;
    function IsLayerVisible(const sLayerName: WideString): WordBool; dispid 1610809348;
    procedure EnableLayer(const sLayerName: WideString; bEnable: WordBool); dispid 1610809349;
    property ScrollArea: IUIX_Dialog readonly dispid 1610809350;
    function GetItemsBoundRect(bSkipHidden: WordBool): {NOT_OLEAUTO(tagRECT)}OleVariant; dispid 1610809351;
    function GetItem(const sItemID: WideString; bTranspSC: WordBool): IUIX_Obj; dispid 1610809352;
    function GetItem2(nItemID: Integer; bTranspSC: WordBool): IUIX_Obj; dispid 1610809353;
    function GetNextItem(const pCurItem: IUIX_Obj; nEnumFlags: Integer): IUIX_Obj; dispid 1610809354;
    procedure ShowItem(const sItemID: WideString; bShow: WordBool); dispid 1610809355;
    procedure ShowItem2(nItemID: Integer; bShow: WordBool); dispid 1610809356;
    function IsItemVisible(const sItemID: WideString): WordBool; dispid 1610809357;
    function IsItemVisible2(nItemID: Integer): WordBool; dispid 1610809358;
    procedure EnableItem(const sItemID: WideString; bEnable: WordBool); dispid 1610809359;
    procedure EnableItem2(nItemID: Integer; bEnable: WordBool); dispid 1610809360;
    function IsItemEnabled(const sItemID: WideString): WordBool; dispid 1610809361;
    function IsItemEnabled2(nItemID: Integer): WordBool; dispid 1610809362;
    function GetItemCheckState(const sItemID: WideString): Integer; dispid 1610809363;
    function GetItemCheckState2(nItemID: Integer): Integer; dispid 1610809364;
    procedure CheckItem(const sItemID: WideString; nNewCheckState: Integer; 
                        bUpdateRadioGroup: WordBool); dispid 1610809365;
    procedure CheckItem2(nItemID: Integer; nNewCheckState: Integer; bUpdateRadioGroup: WordBool); dispid 1610809366;
    procedure SetItemSel(const sItemID: WideString; nNewSel: Integer); dispid 1610809367;
    procedure SetItemSel2(nItemID: Integer; nNewSel: Integer); dispid 1610809368;
    function GetItemSel(const sItemID: WideString): Integer; dispid 1610809369;
    function GetItemSel2(nItemID: Integer): Integer; dispid 1610809370;
    procedure SetItemText(const sItemID: WideString; const sText: WideString); dispid 1610809371;
    procedure SetItemText2(nItemID: Integer; const sText: WideString); dispid 1610809372;
    function GetItemText(const sItemID: WideString): WideString; dispid 1610809373;
    function GetItemText2(nItemID: Integer): WideString; dispid 1610809374;
    procedure SetItemCueText(const sItemID: WideString; const sText: WideString); dispid 1610809375;
    procedure SetItemCueText2(nItemID: Integer; const sText: WideString); dispid 1610809376;
    procedure EnableAllItems(bEnable: WordBool); dispid 1610809377;
    procedure UpdateLayout(nFlags: Integer); dispid 1610809378;
    function GetItemSelParam(const sItemID: WideString; nDef: PARAM_T): PARAM_T; dispid 1610809379;
    function GetItemSelParam2(nItemID: Integer; nDef: PARAM_T): PARAM_T; dispid 1610809380;
    procedure SetItemSelByParam(const sItemID: WideString; nParam: PARAM_T); dispid 1610809381;
    procedure SetItemSelByParam2(nItemID: Integer; nParam: PARAM_T); dispid 1610809382;
    property ContextHelp: WordBool dispid 1610809383;
    property ContextHelpIndex: WideString dispid 1610809385;
    property TemplScaleFactor: Double readonly dispid 1610809387;
    property ForegroundMargin: Integer readonly dispid 1610809388;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_Button
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EBB31E2-2E6A-4463-B53B-EA7C502D564D}
// *********************************************************************//
  IUIX_Button = interface(IUIX_ObjImpl)
    ['{6EBB31E2-2E6A-4463-B53B-EA7C502D564D}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const sTitle: WideString); safecall;
    function Get_Header: WideString; safecall;
    procedure Set_Header(const sHeader: WideString); safecall;
    function Get_Image: IUnknown; safecall;
    procedure Set_Image(const pImage: IUnknown); safecall;
    function Get_ImageSize: tagSIZE; safecall;
    procedure Set_ImageSize(nImageSize: PUserType24); safecall;
    function Get_Tooltip: WideString; safecall;
    procedure Set_Tooltip(const sTooltip: WideString); safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    function Get_HeaderFont: IUIX_Font; safecall;
    procedure Set_HeaderFont(const pFont: IUIX_Font); safecall;
    function Get_Color: IColor; safecall;
    procedure Set_Color(const pColor: IColor); safecall;
    function Get_TextColor: Integer; safecall;
    procedure Set_TextColor(nColor: Integer); safecall;
    function Get_Pressed: WordBool; safecall;
    procedure Set_Pressed(bPressed: WordBool); safecall;
    function Get_ColorPicker: IUIX_ColorPicker; safecall;
    procedure AutoClick(nTimeout: ULONG_T); safecall;
    procedure Set_IconScaleType(nIconScaleType: Integer); safecall;
    function Get_IconScaleType: Integer; safecall;
    function Get_Menu: IUIX_CmdMenu; safecall;
    procedure Set_Menu(const pMenu: IUIX_CmdMenu); safecall;
    procedure ShowDropdown(bShow: WordBool); safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Text: WideString read Get_Text write Set_Text;
    property Header: WideString read Get_Header write Set_Header;
    property Image: IUnknown read Get_Image write Set_Image;
    // Skipped Property "ImageSize"
    property Tooltip: WideString read Get_Tooltip write Set_Tooltip;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property HeaderFont: IUIX_Font read Get_HeaderFont write Set_HeaderFont;
    property Color: IColor read Get_Color write Set_Color;
    property TextColor: Integer read Get_TextColor write Set_TextColor;
    property Pressed: WordBool read Get_Pressed write Set_Pressed;
    property ColorPicker: IUIX_ColorPicker read Get_ColorPicker;
    property IconScaleType: Integer read Get_IconScaleType write Set_IconScaleType;
    property Menu: IUIX_CmdMenu read Get_Menu write Set_Menu;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ButtonDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6EBB31E2-2E6A-4463-B53B-EA7C502D564D}
// *********************************************************************//
  IUIX_ButtonDisp = dispinterface
    ['{6EBB31E2-2E6A-4463-B53B-EA7C502D564D}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property Text: WideString dispid 1610809346;
    property Header: WideString dispid 1610809348;
    property Image: IUnknown dispid 1610809350;
    function ImageSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; dispid 1610809352;
    property Tooltip: WideString dispid 1610809354;
    property Font: IUIX_Font dispid 1610809356;
    property HeaderFont: IUIX_Font dispid 1610809358;
    property Color: IColor dispid 1610809360;
    property TextColor: Integer dispid 1610809362;
    property Pressed: WordBool dispid 1610809364;
    property ColorPicker: IUIX_ColorPicker readonly dispid 1610809366;
    procedure AutoClick(nTimeout: ULONG_T); dispid 1610809367;
    property IconScaleType: Integer dispid 1610809368;
    property Menu: IUIX_CmdMenu dispid 1610809370;
    procedure ShowDropdown(bShow: WordBool); dispid 1610809372;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_ColorPicker
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {374870A4-B4C3-45F6-8253-4E880ECD9B61}
// *********************************************************************//
  IUIX_ColorPicker = interface(IUIX_ObjImpl)
    ['{374870A4-B4C3-45F6-8253-4E880ECD9B61}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    function Get_DefaultColor: IColor; safecall;
    procedure Set_DefaultColor(const pColor: IColor); safecall;
    function Get_Color: IColor; safecall;
    procedure Set_Color(const pColor: IColor); safecall;
    procedure AddCustomColor(const pItem: IColor; const sTitle: WideString); safecall;
    function Get_CustomColorsCount: Integer; safecall;
    function Get_CustomColor(nIndex: Integer): IColor; safecall;
    procedure ClearCustomColors; safecall;
    procedure ShowPopup(var stPos: tagRECT; nFlags: Integer); safecall;
    procedure HidePopup(bAnimated: WordBool); safecall;
    procedure ShowMoreColorsDlg(nModalFlags: Integer); safecall;
    procedure ShowMoreColorsDlg2(var stDlgPos: tagRECT; nModalFlags: Integer); safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property DefaultColor: IColor read Get_DefaultColor write Set_DefaultColor;
    property Color: IColor read Get_Color write Set_Color;
    property CustomColorsCount: Integer read Get_CustomColorsCount;
    property CustomColor[nIndex: Integer]: IColor read Get_CustomColor;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ColorPickerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {374870A4-B4C3-45F6-8253-4E880ECD9B61}
// *********************************************************************//
  IUIX_ColorPickerDisp = dispinterface
    ['{374870A4-B4C3-45F6-8253-4E880ECD9B61}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property Font: IUIX_Font dispid 1610809346;
    property DefaultColor: IColor dispid 1610809348;
    property Color: IColor dispid 1610809350;
    procedure AddCustomColor(const pItem: IColor; const sTitle: WideString); dispid 1610809352;
    property CustomColorsCount: Integer readonly dispid 1610809353;
    property CustomColor[nIndex: Integer]: IColor readonly dispid 1610809354;
    procedure ClearCustomColors; dispid 1610809355;
    procedure ShowPopup(var stPos: {NOT_OLEAUTO(tagRECT)}OleVariant; nFlags: Integer); dispid 1610809356;
    procedure HidePopup(bAnimated: WordBool); dispid 1610809357;
    procedure ShowMoreColorsDlg(nModalFlags: Integer); dispid 1610809358;
    procedure ShowMoreColorsDlg2(var stDlgPos: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                 nModalFlags: Integer); dispid 1610809359;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_Picture
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7EC7DCD5-6BCF-45EF-9D8B-10C69174FFC5}
// *********************************************************************//
  IUIX_Picture = interface(IUIX_ObjImpl)
    ['{7EC7DCD5-6BCF-45EF-9D8B-10C69174FFC5}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Image: IUnknown; safecall;
    procedure Set_Image(const pImage: IUnknown); safecall;
    procedure Set_ImageSize(nImageSize: PUserType24); safecall;
    function Get_ImageSize: tagSIZE; safecall;
    procedure Set_IconScaleType(nIconScaleType: Integer); safecall;
    function Get_IconScaleType: Integer; safecall;
    procedure Set_ImageScaleType(nImageScaleType: Integer); safecall;
    function Get_ImageScaleType: Integer; safecall;
    procedure Set_ImageOpacity(nOpacity: Double); safecall;
    function Get_ImageOpacity: Double; safecall;
    procedure FitByImage; safecall;
    procedure Set_StrokeColor(nColor: Integer); safecall;
    function Get_StrokeColor: Integer; safecall;
    procedure Set_FillColor(nColor: Integer); safecall;
    function Get_FillColor: Integer; safecall;
    procedure Set_StrokeWidth(nWidth: Integer); safecall;
    function Get_StrokeWidth: Integer; safecall;
    procedure Set_RoundRadius(nRadius: Integer); safecall;
    function Get_RoundRadius: Integer; safecall;
    procedure Set_Tooltip(const sTooltip: WideString); safecall;
    function Get_Tooltip: WideString; safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Image: IUnknown read Get_Image write Set_Image;
    // Skipped Property "ImageSize"
    property IconScaleType: Integer read Get_IconScaleType write Set_IconScaleType;
    property ImageScaleType: Integer read Get_ImageScaleType write Set_ImageScaleType;
    property ImageOpacity: Double read Get_ImageOpacity write Set_ImageOpacity;
    property StrokeColor: Integer read Get_StrokeColor write Set_StrokeColor;
    property FillColor: Integer read Get_FillColor write Set_FillColor;
    property StrokeWidth: Integer read Get_StrokeWidth write Set_StrokeWidth;
    property RoundRadius: Integer read Get_RoundRadius write Set_RoundRadius;
    property Tooltip: WideString read Get_Tooltip write Set_Tooltip;
  end;

// *********************************************************************//
// DispIntf:  IUIX_PictureDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7EC7DCD5-6BCF-45EF-9D8B-10C69174FFC5}
// *********************************************************************//
  IUIX_PictureDisp = dispinterface
    ['{7EC7DCD5-6BCF-45EF-9D8B-10C69174FFC5}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property Image: IUnknown dispid 1610809346;
    function ImageSize: {NOT_OLEAUTO(PUserType24)}OleVariant; dispid 1610809348;
    property IconScaleType: Integer dispid 1610809350;
    property ImageScaleType: Integer dispid 1610809352;
    property ImageOpacity: Double dispid 1610809354;
    procedure FitByImage; dispid 1610809356;
    property StrokeColor: Integer dispid 1610809357;
    property FillColor: Integer dispid 1610809359;
    property StrokeWidth: Integer dispid 1610809361;
    property RoundRadius: Integer dispid 1610809363;
    property Tooltip: WideString dispid 1610809365;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_ScrollBar
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C5BB3E9-6AFE-4894-BA80-5B774BE40011}
// *********************************************************************//
  IUIX_ScrollBar = interface(IUIX_ObjImpl)
    ['{4C5BB3E9-6AFE-4894-BA80-5B774BE40011}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_CanScroll: WordBool; safecall;
    function Get_Horz: WordBool; safecall;
    procedure SetInfo(var stInfo: UIX_ScrollBarInfo); safecall;
    function GetInfo: UIX_ScrollBarInfo; safecall;
    procedure GetPartsInfo(out stScrollArea: tagRECT; out stLineUp: tagRECT; 
                           out stLineDown: tagRECT; out stThumbBtn: tagRECT; out nDispCoef: Double); safecall;
    function Get_IsThumbTracking: WordBool; safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property CanScroll: WordBool read Get_CanScroll;
    property Horz: WordBool read Get_Horz;
    property IsThumbTracking: WordBool read Get_IsThumbTracking;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ScrollBarDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C5BB3E9-6AFE-4894-BA80-5B774BE40011}
// *********************************************************************//
  IUIX_ScrollBarDisp = dispinterface
    ['{4C5BB3E9-6AFE-4894-BA80-5B774BE40011}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property CanScroll: WordBool readonly dispid 1610809346;
    property Horz: WordBool readonly dispid 1610809347;
    procedure SetInfo(var stInfo: {NOT_OLEAUTO(UIX_ScrollBarInfo)}OleVariant); dispid 1610809348;
    function GetInfo: {NOT_OLEAUTO(UIX_ScrollBarInfo)}OleVariant; dispid 1610809349;
    procedure GetPartsInfo(out stScrollArea: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                           out stLineUp: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                           out stLineDown: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                           out stThumbBtn: {NOT_OLEAUTO(tagRECT)}OleVariant; out nDispCoef: Double); dispid 1610809350;
    property IsThumbTracking: WordBool readonly dispid 1610809351;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_ScrollContainer
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91F594C1-7C1A-465D-BC9C-004E2FD7C6C4}
// *********************************************************************//
  IUIX_ScrollContainer = interface(IUIX_ObjImpl)
    ['{91F594C1-7C1A-465D-BC9C-004E2FD7C6C4}']
    function Get_Client: IUIX_Obj; safecall;
    procedure Set_Client(const pClient: IUIX_Obj); safecall;
    function Get_NeedUpdate: WordBool; safecall;
    procedure ScrollClient(nDX: Integer; nDY: Integer; bSmooth: WordBool); safecall;
    procedure SetScrollInfo(var stViewPos: tagPOINT; var nAllSize: tagSIZE); safecall;
    procedure GetScrollInfo(out stViewPos: tagPOINT; out nAllSize: tagSIZE); safecall;
    procedure InsertNClient(const pNClient: IUIX_Obj; nSide: Integer; nInsertBefore: Integer; 
                            var nSize: tagSIZE; bNewLine: WordBool; bUpdate: WordBool); safecall;
    procedure RemoveNClient(const pNClient: IUIX_Obj; bUpdate: WordBool); safecall;
    procedure Update(bForce: WordBool); safecall;
    procedure FindNClient(const pNClient: IUIX_Obj; out nSide: Integer; out nIndex: Integer); safecall;
    procedure GetNClientsCount(nSide: Integer; out nCount: Integer); safecall;
    function GetNClient(nSide: Integer; nIndex: Integer): IUIX_Obj; safecall;
    procedure SetNClientParams(nSide: Integer; nIndex: Integer; var nSize: tagSIZE; 
                               bNewLine: WordBool; bUpdate: WordBool); safecall;
    procedure GetNClientParams(nSide: Integer; nIndex: Integer; out nSize: tagSIZE; 
                               out bNewLine: WordBool); safecall;
    function Get_CmdPaneTop: IUIX_CmdPane; safecall;
    function Get_CmdPaneBottom: IUIX_CmdPane; safecall;
    function Get_CmdPaneLeft: IUIX_CmdPane; safecall;
    function Get_CmdPaneRight: IUIX_CmdPane; safecall;
    function Get_CmdPane(nSide: UIX_CmdPaneSides): IUIX_CmdPane; safecall;
    function Get_CmdBar(nBarID: Integer): IUIX_CmdBar; safecall;
    function GetScrollBar(bHorz: WordBool): IUIX_ScrollBar; safecall;
    procedure ResizeNClient(const pNClient: IUIX_Obj; var pSize: tagSIZE; bUpdate: WordBool); safecall;
    procedure GetActualScrollBars(out nVertWidth: Integer; out nHorzHeight: Integer); safecall;
    procedure ShowNClient(const pNClient: IUIX_Obj; bShow: WordBool; bUpdate: WordBool); safecall;
    function IsHiddenNClient(const pNClient: IUIX_Obj): WordBool; safecall;
    property Client: IUIX_Obj read Get_Client write Set_Client;
    property NeedUpdate: WordBool read Get_NeedUpdate;
    property CmdPaneTop: IUIX_CmdPane read Get_CmdPaneTop;
    property CmdPaneBottom: IUIX_CmdPane read Get_CmdPaneBottom;
    property CmdPaneLeft: IUIX_CmdPane read Get_CmdPaneLeft;
    property CmdPaneRight: IUIX_CmdPane read Get_CmdPaneRight;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane read Get_CmdPane;
    property CmdBar[nBarID: Integer]: IUIX_CmdBar read Get_CmdBar;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ScrollContainerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {91F594C1-7C1A-465D-BC9C-004E2FD7C6C4}
// *********************************************************************//
  IUIX_ScrollContainerDisp = dispinterface
    ['{91F594C1-7C1A-465D-BC9C-004E2FD7C6C4}']
    property Client: IUIX_Obj dispid 1610809344;
    property NeedUpdate: WordBool readonly dispid 1610809346;
    procedure ScrollClient(nDX: Integer; nDY: Integer; bSmooth: WordBool); dispid 1610809347;
    procedure SetScrollInfo(var stViewPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                            var nAllSize: {NOT_OLEAUTO(tagSIZE)}OleVariant); dispid 1610809348;
    procedure GetScrollInfo(out stViewPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                            out nAllSize: {NOT_OLEAUTO(tagSIZE)}OleVariant); dispid 1610809349;
    procedure InsertNClient(const pNClient: IUIX_Obj; nSide: Integer; nInsertBefore: Integer; 
                            var nSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; bNewLine: WordBool; 
                            bUpdate: WordBool); dispid 1610809350;
    procedure RemoveNClient(const pNClient: IUIX_Obj; bUpdate: WordBool); dispid 1610809351;
    procedure Update(bForce: WordBool); dispid 1610809352;
    procedure FindNClient(const pNClient: IUIX_Obj; out nSide: Integer; out nIndex: Integer); dispid 1610809353;
    procedure GetNClientsCount(nSide: Integer; out nCount: Integer); dispid 1610809354;
    function GetNClient(nSide: Integer; nIndex: Integer): IUIX_Obj; dispid 1610809355;
    procedure SetNClientParams(nSide: Integer; nIndex: Integer; 
                               var nSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; bNewLine: WordBool; 
                               bUpdate: WordBool); dispid 1610809356;
    procedure GetNClientParams(nSide: Integer; nIndex: Integer; 
                               out nSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; out bNewLine: WordBool); dispid 1610809357;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809358;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809359;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809360;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809361;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809362;
    property CmdBar[nBarID: Integer]: IUIX_CmdBar readonly dispid 1610809363;
    function GetScrollBar(bHorz: WordBool): IUIX_ScrollBar; dispid 1610809364;
    procedure ResizeNClient(const pNClient: IUIX_Obj; var pSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; 
                            bUpdate: WordBool); dispid 1610809365;
    procedure GetActualScrollBars(out nVertWidth: Integer; out nHorzHeight: Integer); dispid 1610809366;
    procedure ShowNClient(const pNClient: IUIX_Obj; bShow: WordBool; bUpdate: WordBool); dispid 1610809367;
    function IsHiddenNClient(const pNClient: IUIX_Obj): WordBool; dispid 1610809368;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_Label
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CF3EA9CF-3882-4A6A-A9A4-BC56D8B5B083}
// *********************************************************************//
  IUIX_Label = interface(IUIX_ObjImpl)
    ['{CF3EA9CF-3882-4A6A-A9A4-BC56D8B5B083}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const sText: WideString); safecall;
    function Get_Tooltip: WideString; safecall;
    procedure Set_Tooltip(const sTooltip: WideString); safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    function Get_TextColor: Integer; safecall;
    procedure Set_TextColor(nColor: Integer); safecall;
    function Get_DrawTextFlags: Integer; safecall;
    procedure Set_DrawTextFlags(nDrawTextFlags: Integer); safecall;
    function Get_State: Integer; safecall;
    procedure Set_State(nState: Integer); safecall;
    function Get_IdealSize: tagSIZE; safecall;
    function CalcIdealSize(nClientWidth: Integer): tagSIZE; safecall;
    function Get_TextRect: tagRECT; safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Text: WideString read Get_Text write Set_Text;
    property Tooltip: WideString read Get_Tooltip write Set_Tooltip;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property TextColor: Integer read Get_TextColor write Set_TextColor;
    property DrawTextFlags: Integer read Get_DrawTextFlags write Set_DrawTextFlags;
    property State: Integer read Get_State write Set_State;
    property IdealSize: tagSIZE read Get_IdealSize;
    property TextRect: tagRECT read Get_TextRect;
  end;

// *********************************************************************//
// DispIntf:  IUIX_LabelDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CF3EA9CF-3882-4A6A-A9A4-BC56D8B5B083}
// *********************************************************************//
  IUIX_LabelDisp = dispinterface
    ['{CF3EA9CF-3882-4A6A-A9A4-BC56D8B5B083}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property Text: WideString dispid 1610809346;
    property Tooltip: WideString dispid 1610809348;
    property Font: IUIX_Font dispid 1610809350;
    property TextColor: Integer dispid 1610809352;
    property DrawTextFlags: Integer dispid 1610809354;
    property State: Integer dispid 1610809356;
    property IdealSize: {NOT_OLEAUTO(tagSIZE)}OleVariant readonly dispid 1610809358;
    function CalcIdealSize(nClientWidth: Integer): {NOT_OLEAUTO(tagSIZE)}OleVariant; dispid 1610809359;
    property TextRect: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610809360;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_Combo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {27F3CABC-31C1-4B29-A782-B68D4F4EA61A}
// *********************************************************************//
  IUIX_Combo = interface(IUIX_ObjImpl)
    ['{27F3CABC-31C1-4B29-A782-B68D4F4EA61A}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_TextLength: Integer; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const sText: WideString); safecall;
    function Get_Tooltip: WideString; safecall;
    procedure Set_Tooltip(const sTooltip: WideString); safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    function Get_TextColor: Integer; safecall;
    procedure Set_TextColor(nColor: Integer); safecall;
    function Get_Edit: IUIX_Obj; safecall;
    function Get_List: IUIX_Obj; safecall;
    function Get_SelItem: Integer; safecall;
    procedure Set_SelItem(nIndex: Integer); safecall;
    function FindItemByParam(nItemParam: PARAM_T): Integer; safecall;
    function FindItemByText(const sText: WideString; nFlags: Integer): Integer; safecall;
    function SelItemByParam(nItemParam: PARAM_T): Integer; safecall;
    function SelItemByText(const sText: WideString; nFlags: Integer): Integer; safecall;
    function Get_Count: Integer; safecall;
    procedure InsertItem(nInsertBefore: Integer; const sText: WideString; 
                         const sTooltip: WideString; const pImage: IUnknown; nItemParam: PARAM_T; 
                         nItemStyle: Integer); safecall;
    procedure InsertSeparator(nInsertBefore: Integer); safecall;
    procedure RemoveItem(nItem: Integer); safecall;
    procedure MoveItem(nItem: Integer; nNewIndex: Integer); safecall;
    procedure Clear; safecall;
    procedure SetItemText(nItem: Integer; const sText: WideString); safecall;
    procedure SetItemTooltip(nItem: Integer; const sTooltip: WideString); safecall;
    procedure SetItemImage(nItem: Integer; const pImage: IUnknown); safecall;
    procedure SetItemParam(nItem: Integer; nParam: PARAM_T); safecall;
    function GetItemText(nItem: Integer): WideString; safecall;
    function GetItemTooltip(nItem: Integer): WideString; safecall;
    function GetItemImage(nItem: Integer): IUnknown; safecall;
    function GetItemParam(nItem: Integer): PARAM_T; safecall;
    function GetItemStyle(nItem: Integer): Integer; safecall;
    procedure SetItemStyle(nItem: Integer; nStyle: Integer; nStyleMask: Integer); safecall;
    function IsItemDisabled(nItem: Integer): WordBool; safecall;
    function IsItemSeparator(nItem: Integer): WordBool; safecall;
    procedure Set_ItemImageSize(nImageSize: PUserType24); safecall;
    function Get_ItemImageSize: tagSIZE; safecall;
    function Get_CueText: WideString; safecall;
    procedure Set_CueText(const sCueText: WideString); safecall;
    procedure ShowDropdown(bShow: WordBool); safecall;
    function IsItemChecked(nItem: Integer): WordBool; safecall;
    procedure CheckItem(nItem: Integer; bState: WordBool); safecall;
    function Get_CheckListSep: WideString; safecall;
    procedure Set_CheckListSep(const sSep: WideString); safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property TextLength: Integer read Get_TextLength;
    property Text: WideString read Get_Text write Set_Text;
    property Tooltip: WideString read Get_Tooltip write Set_Tooltip;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property TextColor: Integer read Get_TextColor write Set_TextColor;
    property Edit: IUIX_Obj read Get_Edit;
    property List: IUIX_Obj read Get_List;
    property SelItem: Integer read Get_SelItem write Set_SelItem;
    property Count: Integer read Get_Count;
    // Skipped Property "ItemImageSize"
    property CueText: WideString read Get_CueText write Set_CueText;
    property CheckListSep: WideString read Get_CheckListSep write Set_CheckListSep;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ComboDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {27F3CABC-31C1-4B29-A782-B68D4F4EA61A}
// *********************************************************************//
  IUIX_ComboDisp = dispinterface
    ['{27F3CABC-31C1-4B29-A782-B68D4F4EA61A}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property TextLength: Integer readonly dispid 1610809346;
    property Text: WideString dispid 1610809347;
    property Tooltip: WideString dispid 1610809349;
    property Font: IUIX_Font dispid 1610809351;
    property TextColor: Integer dispid 1610809353;
    property Edit: IUIX_Obj readonly dispid 1610809355;
    property List: IUIX_Obj readonly dispid 1610809356;
    property SelItem: Integer dispid 1610809357;
    function FindItemByParam(nItemParam: PARAM_T): Integer; dispid 1610809359;
    function FindItemByText(const sText: WideString; nFlags: Integer): Integer; dispid 1610809360;
    function SelItemByParam(nItemParam: PARAM_T): Integer; dispid 1610809361;
    function SelItemByText(const sText: WideString; nFlags: Integer): Integer; dispid 1610809362;
    property Count: Integer readonly dispid 1610809363;
    procedure InsertItem(nInsertBefore: Integer; const sText: WideString; 
                         const sTooltip: WideString; const pImage: IUnknown; nItemParam: PARAM_T; 
                         nItemStyle: Integer); dispid 1610809364;
    procedure InsertSeparator(nInsertBefore: Integer); dispid 1610809365;
    procedure RemoveItem(nItem: Integer); dispid 1610809366;
    procedure MoveItem(nItem: Integer; nNewIndex: Integer); dispid 1610809367;
    procedure Clear; dispid 1610809368;
    procedure SetItemText(nItem: Integer; const sText: WideString); dispid 1610809369;
    procedure SetItemTooltip(nItem: Integer; const sTooltip: WideString); dispid 1610809370;
    procedure SetItemImage(nItem: Integer; const pImage: IUnknown); dispid 1610809371;
    procedure SetItemParam(nItem: Integer; nParam: PARAM_T); dispid 1610809372;
    function GetItemText(nItem: Integer): WideString; dispid 1610809373;
    function GetItemTooltip(nItem: Integer): WideString; dispid 1610809374;
    function GetItemImage(nItem: Integer): IUnknown; dispid 1610809375;
    function GetItemParam(nItem: Integer): PARAM_T; dispid 1610809376;
    function GetItemStyle(nItem: Integer): Integer; dispid 1610809377;
    procedure SetItemStyle(nItem: Integer; nStyle: Integer; nStyleMask: Integer); dispid 1610809378;
    function IsItemDisabled(nItem: Integer): WordBool; dispid 1610809379;
    function IsItemSeparator(nItem: Integer): WordBool; dispid 1610809380;
    function ItemImageSize: {NOT_OLEAUTO(PUserType24)}OleVariant; dispid 1610809381;
    property CueText: WideString dispid 1610809383;
    procedure ShowDropdown(bShow: WordBool); dispid 1610809385;
    function IsItemChecked(nItem: Integer): WordBool; dispid 1610809386;
    procedure CheckItem(nItem: Integer; bState: WordBool); dispid 1610809387;
    property CheckListSep: WideString dispid 1610809388;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_List
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8D5F404-EDB5-400C-92CD-4DD4180C13BB}
// *********************************************************************//
  IUIX_List = interface(IUIX_ObjImpl)
    ['{C8D5F404-EDB5-400C-92CD-4DD4180C13BB}']
    function Get_ItemsCount(nGroup: Integer): Integer; safecall;
    function Get_Callbacks: IUIX_ListCallbacks; safecall;
    procedure Set_Callbacks(const pCallbacks: IUIX_ListCallbacks); safecall;
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    function Get_HeaderFont: IUIX_Font; safecall;
    procedure Set_HeaderFont(const pFont: IUIX_Font); safecall;
    function Get_GroupTitleFont: IUIX_Font; safecall;
    procedure Set_GroupTitleFont(const pFont: IUIX_Font); safecall;
    procedure InsertItem(nInsertBefore: Integer; nItemParam: PARAM_T; nGroup: Integer); safecall;
    procedure InsertItems(nInsertBefore: Integer; nItemsCount: Integer; var pItemParams: PARAM_T; 
                          nGroup: Integer); safecall;
    procedure InsertGroup(nInsertBefore: Integer; nGroupParam: PARAM_T; bExpanded: WordBool); safecall;
    procedure InsertGroups(nInsertBefore: Integer; nGroupsCount: Integer; 
                           var pGroupParams: PARAM_T; bExpanded: WordBool); safecall;
    procedure RemoveItems(nFirstIndex: Integer; nItemsCount: Integer; nGroup: Integer); safecall;
    procedure RemoveGroups(nFirstIndex: Integer; nGroupsCount: Integer); safecall;
    function Get_GroupsCount: Integer; safecall;
    function Get_IsEmpty: WordBool; safecall;
    procedure Clear; safecall;
    procedure ExpandGroup(nGroup: Integer; bExpand: WordBool); safecall;
    function Get_IsGroupExpanded(nGroup: Integer): WordBool; safecall;
    procedure RedrawItems(nFirstIndex: Integer; nItemsCount: Integer; nGroup: Integer); safecall;
    procedure UpdateItems(nFirstIndex: Integer; nItemsCount: Integer; nGroup: Integer); safecall;
    procedure HitTest(var stPos: tagPOINT; out nItem: Integer; out nColumn: Integer; 
                      out nGroup: Integer; out nItemHT: Integer); safecall;
    function GetItemRect(nItem: Integer; nColumn: Integer; nGroup: Integer): tagRECT; safecall;
    function GetItemParam(nItem: Integer; nGroup: Integer): PARAM_T; safecall;
    procedure SetItemParam(nItem: Integer; nItemParam: PARAM_T; nGroup: Integer); safecall;
    function FindItemByParam(nItemParam: PARAM_T; out nGroup: Integer): Integer; safecall;
    function FindGroupByParam(nGroupParam: PARAM_T): Integer; safecall;
    procedure CheckItem(nItem: Integer; nCheckState: Integer; nGroup: Integer); safecall;
    function IsItemChecked(nItem: Integer; nGroup: Integer): WordBool; safecall;
    function GetItemCheckState(nItem: Integer; nGroup: Integer): Integer; safecall;
    function Get_HasSel: WordBool; safecall;
    function Get_HasSingleSel: WordBool; safecall;
    function Get_HasMultSel: WordBool; safecall;
    procedure SelectItems(nFirstIndex: Integer; nItemsCount: Integer; nGroup: Integer; 
                          bSelect: WordBool; bExclusive: WordBool); safecall;
    function IsItemSelected(nItem: Integer; nGroup: Integer): WordBool; safecall;
    function GetFirstSelItem(out nGroup: Integer): Integer; safecall;
    function GetNextSelItem(nItem: Integer; var nGroup: Integer): Integer; safecall;
    procedure GetSel(const pEnumSelClbk: IUIX_ListGetSelCallback); safecall;
    procedure ClearSel; safecall;
    procedure GetHotItem(out nItem: Integer; out nGroup: Integer; out nItemHT: Integer); safecall;
    function GetItemVisibility(nItem: Integer; nColumn: Integer; nGroup: Integer): Integer; safecall;
    procedure MakeItemVisible(nItem: Integer; nColumn: Integer; nGroup: Integer; 
                              bAllowPartialVisible: WordBool; bAllowSmoothScroll: WordBool); safecall;
    procedure MakeItemTop(nItem: Integer; nColumn: Integer; nGroup: Integer; 
                          bAllowSmoothScroll: WordBool); safecall;
    function Get_ColumnsCount: Integer; safecall;
    procedure InsertColumn(nInsertBeforeCol: Integer; nWidth: Integer; const sTitle: WideString; 
                           const pIcon: IUIX_Icon; const sTooltip: WideString; nStyle: Integer; 
                           nParam: PARAM_T); safecall;
    procedure RemoveColumn(nColIndex: Integer); safecall;
    procedure MoveColumn(nColIndex: Integer; nNewColIndex: Integer); safecall;
    procedure RemoveAllColumns; safecall;
    procedure SetColumn(nColIndex: Integer; nSetMask: Integer; const pNewTitle: WideString; 
                        const pNewIcon: IUIX_Icon; const pNewTooltip: WideString; 
                        nNewWidth: Integer; nNewStyle: Integer; nNewStyleMask: Integer; 
                        nNewParam: PARAM_T); safecall;
    procedure GetColumn(nColIndex: Integer; out sTitle: WideString; out pIcon: IUIX_Icon; 
                        out sTooltip: WideString; out nWidth: Integer; out nStyle: Integer; 
                        out nParam: PARAM_T); safecall;
    function GetColumnStyle(nColumn: Integer): Integer; safecall;
    procedure SetColumnWidth(nColIndex: Integer; nNewWidth: Integer); safecall;
    function GetColumnWidth(nColIndex: Integer): Integer; safecall;
    function GetColumnParam(nColIndex: Integer): PARAM_T; safecall;
    function Get_GroupTitleImageSize: tagSIZE; safecall;
    procedure Set_GroupTitleImageSize(nImageSize: PUserType24); safecall;
    function Get_ItemImageSize: tagSIZE; safecall;
    procedure Set_ItemImageSize(nImageSize: PUserType24); safecall;
    procedure SetGroupTitleMinMaxHeight(nMinHeight: Integer; nMaxHeight: Integer); safecall;
    procedure GetGroupTitleMinMaxHeight(out nMinHeight: Integer; out nMaxHeight: Integer); safecall;
    procedure SetItemMinMaxSize(var nMinSize: tagSIZE; var nMaxSize: tagSIZE); safecall;
    procedure GetItemMinMaxSize(out nMinSize: tagSIZE; out nMaxSize: tagSIZE); safecall;
    procedure FitColumnWidthByItems(nColumn: Integer); safecall;
    procedure SetColumnUpDownIcon(nColumn: Integer; nIconStyle: Integer; bExclusive: WordBool); safecall;
    procedure HighlightItem(nItem: Integer; nGroup: Integer); safecall;
    procedure GetHighlightedItem(out nItem: Integer; out nGroup: Integer); safecall;
    function Get_HeaderHeight: Integer; safecall;
    function FindItemByText(const pText: WideString; nStartItem: Integer; nStartGroup: Integer; 
                            nStartColumn: Integer; nFlags: Integer): UIX_ListItemID; safecall;
    procedure InvalidateSelMarkers; safecall;
    function Get_CueText: WideString; safecall;
    procedure Set_CueText(const sCueText: WideString); safecall;
    procedure GetFirstVisibleItem(out nItem: Integer; out nGroup: Integer); safecall;
    procedure GetLastVisibleItem(out nItem: Integer; out nGroup: Integer); safecall;
    procedure GetFirstSelItem2(out nItem: Integer; out nGroup: Integer); safecall;
    procedure GetNextSelItem2(var nIndex: Integer; var nGroup: Integer); safecall;
    function IsColumnVisible(nColIndex: Integer): WordBool; safecall;
    procedure ShowColumn(nColIndex: Integer; bShow: WordBool); safecall;
    function Get_CueImage: IUnknown; safecall;
    procedure Set_CueImage(const pCueImage: IUnknown); safecall;
    function Get_CueImageOpacity: Double; safecall;
    procedure Set_CueImageOpacity(nOpacity: Double); safecall;
    function Get_CueImageAlign: Integer; safecall;
    procedure Set_CueImageAlign(nAlign: Integer); safecall;
    function Get_ProgressMon: IProgressMon; safecall;
    function Get_ProgressAlign: Integer; safecall;
    procedure Set_ProgressAlign(nAlign: Integer); safecall;
    procedure StartEditText(nItem: Integer; nColumn: Integer; nGroup: Integer); safecall;
    procedure StopEditText(bCancel: WordBool); safecall;
    procedure GetTextEditingItem(out nItem: Integer; out nColumn: Integer; out nGroup: Integer); safecall;
    procedure ResizeColumnsByNewClient(var nSkipColumns: Integer; nSkipColumnsCnt: Integer; 
                                       nMinColumnWidth: Integer); safecall;
    function Get_ItemContentMargin: Integer; safecall;
    procedure Set_ItemContentMargin(nMargin: Integer); safecall;
    function Get_ItemDistAfterImage: Integer; safecall;
    procedure Set_ItemDistAfterImage(nDist: Integer); safecall;
    function FindItemByParam2(nItemParam: PARAM_T; var stStartFrom: UIX_ListItemID): UIX_ListItemID; safecall;
    procedure DoDragDrop(var stStartPos: tagPOINT); safecall;
    property ItemsCount[nGroup: Integer]: Integer read Get_ItemsCount;
    property Callbacks: IUIX_ListCallbacks read Get_Callbacks write Set_Callbacks;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property HeaderFont: IUIX_Font read Get_HeaderFont write Set_HeaderFont;
    property GroupTitleFont: IUIX_Font read Get_GroupTitleFont write Set_GroupTitleFont;
    property GroupsCount: Integer read Get_GroupsCount;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsGroupExpanded[nGroup: Integer]: WordBool read Get_IsGroupExpanded;
    property HasSel: WordBool read Get_HasSel;
    property HasSingleSel: WordBool read Get_HasSingleSel;
    property HasMultSel: WordBool read Get_HasMultSel;
    property ColumnsCount: Integer read Get_ColumnsCount;
    // Skipped Property "GroupTitleImageSize"
    // Skipped Property "ItemImageSize"
    property HeaderHeight: Integer read Get_HeaderHeight;
    property CueText: WideString read Get_CueText write Set_CueText;
    property CueImage: IUnknown read Get_CueImage write Set_CueImage;
    property CueImageOpacity: Double read Get_CueImageOpacity write Set_CueImageOpacity;
    property CueImageAlign: Integer read Get_CueImageAlign write Set_CueImageAlign;
    property ProgressMon: IProgressMon read Get_ProgressMon;
    property ProgressAlign: Integer read Get_ProgressAlign write Set_ProgressAlign;
    property ItemContentMargin: Integer read Get_ItemContentMargin write Set_ItemContentMargin;
    property ItemDistAfterImage: Integer read Get_ItemDistAfterImage write Set_ItemDistAfterImage;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8D5F404-EDB5-400C-92CD-4DD4180C13BB}
// *********************************************************************//
  IUIX_ListDisp = dispinterface
    ['{C8D5F404-EDB5-400C-92CD-4DD4180C13BB}']
    property ItemsCount[nGroup: Integer]: Integer readonly dispid 1610809344;
    property Callbacks: IUIX_ListCallbacks dispid 1610809345;
    property NotifyTarget: IUIX_Obj dispid 1610809347;
    property Font: IUIX_Font dispid 1610809349;
    property HeaderFont: IUIX_Font dispid 1610809351;
    property GroupTitleFont: IUIX_Font dispid 1610809353;
    procedure InsertItem(nInsertBefore: Integer; nItemParam: PARAM_T; nGroup: Integer); dispid 1610809355;
    procedure InsertItems(nInsertBefore: Integer; nItemsCount: Integer; var pItemParams: PARAM_T; 
                          nGroup: Integer); dispid 1610809356;
    procedure InsertGroup(nInsertBefore: Integer; nGroupParam: PARAM_T; bExpanded: WordBool); dispid 1610809357;
    procedure InsertGroups(nInsertBefore: Integer; nGroupsCount: Integer; 
                           var pGroupParams: PARAM_T; bExpanded: WordBool); dispid 1610809358;
    procedure RemoveItems(nFirstIndex: Integer; nItemsCount: Integer; nGroup: Integer); dispid 1610809359;
    procedure RemoveGroups(nFirstIndex: Integer; nGroupsCount: Integer); dispid 1610809360;
    property GroupsCount: Integer readonly dispid 1610809361;
    property IsEmpty: WordBool readonly dispid 1610809362;
    procedure Clear; dispid 1610809363;
    procedure ExpandGroup(nGroup: Integer; bExpand: WordBool); dispid 1610809364;
    property IsGroupExpanded[nGroup: Integer]: WordBool readonly dispid 1610809365;
    procedure RedrawItems(nFirstIndex: Integer; nItemsCount: Integer; nGroup: Integer); dispid 1610809366;
    procedure UpdateItems(nFirstIndex: Integer; nItemsCount: Integer; nGroup: Integer); dispid 1610809367;
    procedure HitTest(var stPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; out nItem: Integer; 
                      out nColumn: Integer; out nGroup: Integer; out nItemHT: Integer); dispid 1610809368;
    function GetItemRect(nItem: Integer; nColumn: Integer; nGroup: Integer): {NOT_OLEAUTO(tagRECT)}OleVariant; dispid 1610809369;
    function GetItemParam(nItem: Integer; nGroup: Integer): PARAM_T; dispid 1610809370;
    procedure SetItemParam(nItem: Integer; nItemParam: PARAM_T; nGroup: Integer); dispid 1610809371;
    function FindItemByParam(nItemParam: PARAM_T; out nGroup: Integer): Integer; dispid 1610809372;
    function FindGroupByParam(nGroupParam: PARAM_T): Integer; dispid 1610809373;
    procedure CheckItem(nItem: Integer; nCheckState: Integer; nGroup: Integer); dispid 1610809374;
    function IsItemChecked(nItem: Integer; nGroup: Integer): WordBool; dispid 1610809375;
    function GetItemCheckState(nItem: Integer; nGroup: Integer): Integer; dispid 1610809376;
    property HasSel: WordBool readonly dispid 1610809377;
    property HasSingleSel: WordBool readonly dispid 1610809378;
    property HasMultSel: WordBool readonly dispid 1610809379;
    procedure SelectItems(nFirstIndex: Integer; nItemsCount: Integer; nGroup: Integer; 
                          bSelect: WordBool; bExclusive: WordBool); dispid 1610809380;
    function IsItemSelected(nItem: Integer; nGroup: Integer): WordBool; dispid 1610809381;
    function GetFirstSelItem(out nGroup: Integer): Integer; dispid 1610809382;
    function GetNextSelItem(nItem: Integer; var nGroup: Integer): Integer; dispid 1610809383;
    procedure GetSel(const pEnumSelClbk: IUIX_ListGetSelCallback); dispid 1610809384;
    procedure ClearSel; dispid 1610809385;
    procedure GetHotItem(out nItem: Integer; out nGroup: Integer; out nItemHT: Integer); dispid 1610809386;
    function GetItemVisibility(nItem: Integer; nColumn: Integer; nGroup: Integer): Integer; dispid 1610809387;
    procedure MakeItemVisible(nItem: Integer; nColumn: Integer; nGroup: Integer; 
                              bAllowPartialVisible: WordBool; bAllowSmoothScroll: WordBool); dispid 1610809388;
    procedure MakeItemTop(nItem: Integer; nColumn: Integer; nGroup: Integer; 
                          bAllowSmoothScroll: WordBool); dispid 1610809389;
    property ColumnsCount: Integer readonly dispid 1610809390;
    procedure InsertColumn(nInsertBeforeCol: Integer; nWidth: Integer; const sTitle: WideString; 
                           const pIcon: IUIX_Icon; const sTooltip: WideString; nStyle: Integer; 
                           nParam: PARAM_T); dispid 1610809391;
    procedure RemoveColumn(nColIndex: Integer); dispid 1610809392;
    procedure MoveColumn(nColIndex: Integer; nNewColIndex: Integer); dispid 1610809393;
    procedure RemoveAllColumns; dispid 1610809394;
    procedure SetColumn(nColIndex: Integer; nSetMask: Integer; const pNewTitle: WideString; 
                        const pNewIcon: IUIX_Icon; const pNewTooltip: WideString; 
                        nNewWidth: Integer; nNewStyle: Integer; nNewStyleMask: Integer; 
                        nNewParam: PARAM_T); dispid 1610809395;
    procedure GetColumn(nColIndex: Integer; out sTitle: WideString; out pIcon: IUIX_Icon; 
                        out sTooltip: WideString; out nWidth: Integer; out nStyle: Integer; 
                        out nParam: PARAM_T); dispid 1610809396;
    function GetColumnStyle(nColumn: Integer): Integer; dispid 1610809397;
    procedure SetColumnWidth(nColIndex: Integer; nNewWidth: Integer); dispid 1610809398;
    function GetColumnWidth(nColIndex: Integer): Integer; dispid 1610809399;
    function GetColumnParam(nColIndex: Integer): PARAM_T; dispid 1610809400;
    function GroupTitleImageSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; dispid 1610809401;
    function ItemImageSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; dispid 1610809403;
    procedure SetGroupTitleMinMaxHeight(nMinHeight: Integer; nMaxHeight: Integer); dispid 1610809405;
    procedure GetGroupTitleMinMaxHeight(out nMinHeight: Integer; out nMaxHeight: Integer); dispid 1610809406;
    procedure SetItemMinMaxSize(var nMinSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; 
                                var nMaxSize: {NOT_OLEAUTO(tagSIZE)}OleVariant); dispid 1610809407;
    procedure GetItemMinMaxSize(out nMinSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; 
                                out nMaxSize: {NOT_OLEAUTO(tagSIZE)}OleVariant); dispid 1610809408;
    procedure FitColumnWidthByItems(nColumn: Integer); dispid 1610809409;
    procedure SetColumnUpDownIcon(nColumn: Integer; nIconStyle: Integer; bExclusive: WordBool); dispid 1610809410;
    procedure HighlightItem(nItem: Integer; nGroup: Integer); dispid 1610809411;
    procedure GetHighlightedItem(out nItem: Integer; out nGroup: Integer); dispid 1610809412;
    property HeaderHeight: Integer readonly dispid 1610809413;
    function FindItemByText(const pText: WideString; nStartItem: Integer; nStartGroup: Integer; 
                            nStartColumn: Integer; nFlags: Integer): {NOT_OLEAUTO(UIX_ListItemID)}OleVariant; dispid 1610809414;
    procedure InvalidateSelMarkers; dispid 1610809415;
    property CueText: WideString dispid 1610809416;
    procedure GetFirstVisibleItem(out nItem: Integer; out nGroup: Integer); dispid 1610809418;
    procedure GetLastVisibleItem(out nItem: Integer; out nGroup: Integer); dispid 1610809419;
    procedure GetFirstSelItem2(out nItem: Integer; out nGroup: Integer); dispid 1610809420;
    procedure GetNextSelItem2(var nIndex: Integer; var nGroup: Integer); dispid 1610809421;
    function IsColumnVisible(nColIndex: Integer): WordBool; dispid 1610809422;
    procedure ShowColumn(nColIndex: Integer; bShow: WordBool); dispid 1610809423;
    property CueImage: IUnknown dispid 1610809424;
    property CueImageOpacity: Double dispid 1610809426;
    property CueImageAlign: Integer dispid 1610809428;
    property ProgressMon: IProgressMon readonly dispid 1610809430;
    property ProgressAlign: Integer dispid 1610809431;
    procedure StartEditText(nItem: Integer; nColumn: Integer; nGroup: Integer); dispid 1610809433;
    procedure StopEditText(bCancel: WordBool); dispid 1610809434;
    procedure GetTextEditingItem(out nItem: Integer; out nColumn: Integer; out nGroup: Integer); dispid 1610809435;
    procedure ResizeColumnsByNewClient(var nSkipColumns: Integer; nSkipColumnsCnt: Integer; 
                                       nMinColumnWidth: Integer); dispid 1610809436;
    property ItemContentMargin: Integer dispid 1610809437;
    property ItemDistAfterImage: Integer dispid 1610809439;
    function FindItemByParam2(nItemParam: PARAM_T; 
                              var stStartFrom: {NOT_OLEAUTO(UIX_ListItemID)}OleVariant): {NOT_OLEAUTO(UIX_ListItemID)}OleVariant; dispid 1610809441;
    procedure DoDragDrop(var stStartPos: {NOT_OLEAUTO(tagPOINT)}OleVariant); dispid 1610809442;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_ListCallbacks
// Flags:     (0)
// GUID:      {1FFC36B5-0925-42F7-AB1A-DB148305ECF1}
// *********************************************************************//
  IUIX_ListCallbacks = interface(IUnknown)
    ['{1FFC36B5-0925-42F7-AB1A-DB148305ECF1}']
    function List_OnGetItemSize(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                nAvailWidth: Integer; out nItemSize: tagSIZE): HResult; stdcall;
    function List_OnGetItemText(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                out sText: PWideChar; out nTextLen: Integer; out pFont: IUIX_Font; 
                                out nDrawTextFlags: Integer): HResult; stdcall;
    function List_OnGetItemTextSize(const pList: IUIX_List; var stItem: UIX_ListItemID; 
                                    sText: PWideChar; nTextLen: Integer; const pFont: IUIX_Font; 
                                    nDrawTextFlags: Integer; nAvailTextWidth: Integer; 
                                    out nTextSize: tagSIZE): HResult; stdcall;
    function List_OnGetItemImageSize(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                     out nImageSize: tagSIZE): HResult; stdcall;
    function List_OnGetItemImage(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                 out pImage: IUnknown; out nOpacity: Double): HResult; stdcall;
    function List_OnDraw(const pList: IUIX_List; const pRC: IUIX_RenderContext; 
                         nDrawStage: Integer; var stRects: tagRECT; nRects: Integer; 
                         var stBoundsRect: tagRECT): HResult; stdcall;
    function List_OnGetItemTextColor(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                     out nTextColor: Integer): HResult; stdcall;
    function List_OnDrawItem(const pList: IUIX_List; const pRC: IUIX_RenderContext; 
                             var stItemID: UIX_ListItemID; var stItemRect: tagRECT; 
                             var stClip: tagRECT): HResult; stdcall;
    function List_OnPostDrawItem(const pList: IUIX_List; const pRC: IUIX_RenderContext; 
                                 var stItemID: UIX_ListItemID; var stItemRect: tagRECT; 
                                 var stClip: tagRECT): HResult; stdcall;
    function List_OnDrawItemText(const pList: IUIX_List; const pRC: IUIX_RenderContext; 
                                 var pItemID: UIX_ListItemID; pText: PWideChar; nTextLen: Integer; 
                                 const pFont: IUIX_Font; nTextColor: Integer; 
                                 nDrawTextFlags: Integer; var pTextRect: tagRECT; var pClip: tagRECT): HResult; stdcall;
    function List_OnDrawItemImage(const pList: IUIX_List; const pRC: IUIX_RenderContext; 
                                  var stItemID: UIX_ListItemID; var stImageRect: tagRECT; 
                                  var stClip: tagRECT): HResult; stdcall;
    function List_OnHitTestItem(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                var stItemPos: tagPOINT; out nItemHT: Integer): HResult; stdcall;
    function List_OnBeforeToggleGroup(const pList: IUIX_List; nGroup: Integer; bExpand: WordBool; 
                                      bByDblClick: WordBool): HResult; stdcall;
    function List_OnGroupToggled(const pList: IUIX_List; nGroup: Integer): HResult; stdcall;
    function List_OnContextMenu(const pList: IUIX_List; var stPos: tagPOINT; bByKey: WordBool): HResult; stdcall;
    function List_OnItemClick(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                              nItemHT: Integer; bDblClick: WordBool): HResult; stdcall;
    function List_OnItemClicked(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                nItemHT: Integer; nFlags: Integer): HResult; stdcall;
    function List_OnItemChecked(const pList: IUIX_List; var stItemID: UIX_ListItemID): HResult; stdcall;
    function List_OnSelChanged(const pList: IUIX_List; nFlags: Integer): HResult; stdcall;
    function List_OnChanged(const pList: IUIX_List): HResult; stdcall;
    function List_OnBeforeCheckItem(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                    var nNewCheckState: Integer): HResult; stdcall;
    function List_OnGetItemCheckState(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                      out nCheckState: Integer): HResult; stdcall;
    function List_OnSetItemCheckState(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                      nNewCheckState: Integer): HResult; stdcall;
    function List_OnGetItemSelState(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                    out bSelected: WordBool): HResult; stdcall;
    function List_OnSetItemSelState(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                    bSelect: WordBool): HResult; stdcall;
    function List_OnHdrItemContextMenu(const pList: IUIX_List; nItem: Integer; nItemHT: Integer; 
                                       var stPos: tagPOINT): HResult; stdcall;
    function List_OnHdrItemClicked(const pList: IUIX_List; nItem: Integer; nItemHT: Integer; 
                                   nFlags: Integer): HResult; stdcall;
    function List_OnColumnWidthChanged(const pList: IUIX_List; nColumn: Integer; nOldWidth: Integer): HResult; stdcall;
    function List_OnHotItemChanged(const pList: IUIX_List; var stOldHotItemID: UIX_ListItemID; 
                                   nOldHotItemHT: Integer): HResult; stdcall;
    function List_OnGetItemFlags(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                 out nFlags: Integer): HResult; stdcall;
    function List_OnScrollChanged(const pList: IUIX_List; var stScrollDeltas: tagPOINT): HResult; stdcall;
    function List_OnSize(const pList: IUIX_List): HResult; stdcall;
    function List_OnGetData(const pList: IUIX_List; var stFmtEtc: tagFORMATETC; 
                            stStdMed: PPUserType3): HResult; stdcall;
    function List_OnDragEnter(const pList: IUIX_List; var pFmtEtc: tagFORMATETC; 
                              pStdMed: PPUserType3; nKeyState: Integer; var pPos: tagPOINT; 
                              var pDropPos: UIX_ListItemID; out pEffect: Integer): HResult; stdcall;
    function List_OnDragOver(const pList: IUIX_List; var pFmtEtc: tagFORMATETC; 
                             pStdMed: PPUserType3; nKeyState: Integer; var pPos: tagPOINT; 
                             var pDropPos: UIX_ListItemID; out pEffect: Integer): HResult; stdcall;
    function List_OnDragLeave(const pList: IUIX_List): HResult; stdcall;
    function List_OnDrop(const pList: IUIX_List; var pFmtEtc: tagFORMATETC; pStdMed: PPUserType3; 
                         nEffect: Integer; var pPos: tagPOINT; var pDropPos: UIX_ListItemID): HResult; stdcall;
    function List_OnBeginDrag(const pList: IUIX_List; var stPos: tagPOINT; 
                              var nSuppEffects: Integer; out pDragImage: IUIX_ImageData): HResult; stdcall;
    function List_OnEndDrag(const pList: IUIX_List; nDropEffect: Integer): HResult; stdcall;
    function List_OnBeforeShowTooltip(const pList: IUIX_List; var stItem: UIX_ListItemID; 
                                      nHotItemHT: Integer; const pTooltipCtl: IUIX_Tooltip): HResult; stdcall;
    function List_OnBeginTextEdit(const pList: IUIX_List; var stItem: UIX_ListItemID; 
                                  const pEditCtl: IUIX_Edit): HResult; stdcall;
    function List_OnEndTextEdit(const pList: IUIX_List; var stItem: UIX_ListItemID; 
                                const pEditCtl: IUIX_Edit; bCancel: WordBool): HResult; stdcall;
    function List_OnSetItemText(const pList: IUIX_List; var stItem: UIX_ListItemID; 
                                sText: PWideChar; nTextLen: Integer): HResult; stdcall;
    function List_OnGetItemText2(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                                 out sText: WideString; out pFont: IUIX_Font; 
                                 out nDrawTextFlags: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Tooltip
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F3BBC168-3896-467E-9C5D-D46845C0E25E}
// *********************************************************************//
  IUIX_Tooltip = interface(IUIX_ObjImpl)
    ['{F3BBC168-3896-467E-9C5D-D46845C0E25E}']
    function Get_Text: WideString; safecall;
    procedure Set_Text(const sText: WideString); safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    function Get_Image: IUnknown; safecall;
    procedure Set_Image(const pImage: IUnknown); safecall;
    function Get_ImageSize: tagSIZE; safecall;
    procedure Set_ImageSize(nImageSize: PUserType24); safecall;
    function Get_Picture: IUIX_Picture; safecall;
    function Get_Label_: IUIX_Label; safecall;
    function Get_HeaderLabel: IUIX_Label; safecall;
    function Get_FooterLabel: IUIX_Label; safecall;
    function Get_FooterPicture: IUIX_Picture; safecall;
    procedure SetTrackInfo(const pTarget: IUIX_Obj); safecall;
    procedure SetTrackInfo2(const pTarget: IUIX_Obj; var stTargetRect: tagRECT); safecall;
    procedure GetTrackInfo(out pTarget: IUIX_Obj; out stTargetRect: tagRECT); safecall;
    procedure Activate(bActivate: WordBool); safecall;
    procedure ShowPopup(bShow: WordBool); safecall;
    property Text: WideString read Get_Text write Set_Text;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property Image: IUnknown read Get_Image write Set_Image;
    // Skipped Property "ImageSize"
    property Picture: IUIX_Picture read Get_Picture;
    property Label_: IUIX_Label read Get_Label_;
    property HeaderLabel: IUIX_Label read Get_HeaderLabel;
    property FooterLabel: IUIX_Label read Get_FooterLabel;
    property FooterPicture: IUIX_Picture read Get_FooterPicture;
  end;

// *********************************************************************//
// DispIntf:  IUIX_TooltipDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F3BBC168-3896-467E-9C5D-D46845C0E25E}
// *********************************************************************//
  IUIX_TooltipDisp = dispinterface
    ['{F3BBC168-3896-467E-9C5D-D46845C0E25E}']
    property Text: WideString dispid 1610809344;
    property Font: IUIX_Font dispid 1610809346;
    property Image: IUnknown dispid 1610809348;
    function ImageSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; dispid 1610809350;
    property Picture: IUIX_Picture readonly dispid 1610809352;
    property Label_: IUIX_Label readonly dispid 1610809353;
    property HeaderLabel: IUIX_Label readonly dispid 1610809354;
    property FooterLabel: IUIX_Label readonly dispid 1610809355;
    property FooterPicture: IUIX_Picture readonly dispid 1610809356;
    procedure SetTrackInfo(const pTarget: IUIX_Obj); dispid 1610809357;
    procedure SetTrackInfo2(const pTarget: IUIX_Obj; 
                            var stTargetRect: {NOT_OLEAUTO(tagRECT)}OleVariant); dispid 1610809358;
    procedure GetTrackInfo(out pTarget: IUIX_Obj; out stTargetRect: {NOT_OLEAUTO(tagRECT)}OleVariant); dispid 1610809359;
    procedure Activate(bActivate: WordBool); dispid 1610809360;
    procedure ShowPopup(bShow: WordBool); dispid 1610809361;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_ListGetSelCallback
// Flags:     (0)
// GUID:      {FA0F52E6-82DC-4A5D-B0DC-2AF2319E716D}
// *********************************************************************//
  IUIX_ListGetSelCallback = interface(IUnknown)
    ['{FA0F52E6-82DC-4A5D-B0DC-2AF2319E716D}']
    function ListGetSel_OnItem(const pList: IUIX_List; var stItemID: UIX_ListItemID; 
                               bHidden: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Tree
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {69E71C54-93FD-403B-BED2-E9B703EFCCF8}
// *********************************************************************//
  IUIX_Tree = interface(IUIX_ObjImpl)
    ['{69E71C54-93FD-403B-BED2-E9B703EFCCF8}']
    function Get_Callbacks: IUIX_TreeCallbacks; safecall;
    procedure Set_Callbacks(const pCallbacks: IUIX_TreeCallbacks); safecall;
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    function Get_Root: IUIX_TreeItem; safecall;
    function Get_UpdatesLocked: WordBool; safecall;
    procedure LockUpdates; safecall;
    procedure UnLockUpdates; safecall;
    function HitTest(var stPos: tagPOINT; out nItemHT: Integer): IUIX_TreeItem; safecall;
    function Get_HasSel: WordBool; safecall;
    function Get_HasSingleSel: WordBool; safecall;
    function Get_HasMultSel: WordBool; safecall;
    function GetFirstSelItem(out pEnumCtx: IUnknown): IUIX_TreeItem; safecall;
    function GetNextSelItem(const pEnumCtx: IUnknown): IUIX_TreeItem; safecall;
    procedure GetSel(const pEnumSelClbk: IUIX_TreeGetSelCallback); safecall;
    procedure ClearSel; safecall;
    procedure GetHotItem(out pItem: IUIX_TreeItem; out nItemHT: Integer); safecall;
    function Get_ItemImageSize: tagSIZE; safecall;
    procedure Set_ItemImageSize(nImageSize: PUserType24); safecall;
    procedure SetItemMinMaxHeight(nMinHeight: Integer; nMaxHeight: Integer); safecall;
    procedure GetItemMinMaxHeight(out nMinHeight: Integer; out nMaxHeight: Integer); safecall;
    function Get_IsEmpty: WordBool; safecall;
    procedure Clear; safecall;
    function Get_CueText: WideString; safecall;
    procedure Set_CueText(const sCueText: WideString); safecall;
    procedure ExpandAll(bExpand: WordBool); safecall;
    procedure SelectAll(bVisibleOnly: WordBool); safecall;
    procedure RedrawAllItems; safecall;
    procedure StopEditText(bCancel: WordBool); safecall;
    function GetTextEditingItem: IUIX_TreeItem; safecall;
    function Get_HighlightedItem: IUIX_TreeItem; safecall;
    procedure Set_HighlightedItem(const pItem: IUIX_TreeItem); safecall;
    function Get_CueImage: IUnknown; safecall;
    procedure Set_CueImage(const pCueImage: IUnknown); safecall;
    function Get_CueImageOpacity: Double; safecall;
    procedure Set_CueImageOpacity(nOpacity: Double); safecall;
    function Get_CueImageAlign: Integer; safecall;
    procedure Set_CueImageAlign(nAlign: Integer); safecall;
    function Get_ProgressMon: IProgressMon; safecall;
    function Get_ProgressAlign: Integer; safecall;
    procedure Set_ProgressAlign(nAlign: Integer); safecall;
    function Get_ItemImageAlign: Integer; safecall;
    procedure Set_ItemImageAlign(nAlign: Integer); safecall;
    procedure DoDragDrop(var stStartPos: tagPOINT); safecall;
    procedure StartEditText(const pItem: IUIX_TreeItem); safecall;
    property Callbacks: IUIX_TreeCallbacks read Get_Callbacks write Set_Callbacks;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property Root: IUIX_TreeItem read Get_Root;
    property UpdatesLocked: WordBool read Get_UpdatesLocked;
    property HasSel: WordBool read Get_HasSel;
    property HasSingleSel: WordBool read Get_HasSingleSel;
    property HasMultSel: WordBool read Get_HasMultSel;
    // Skipped Property "ItemImageSize"
    property IsEmpty: WordBool read Get_IsEmpty;
    property CueText: WideString read Get_CueText write Set_CueText;
    property HighlightedItem: IUIX_TreeItem read Get_HighlightedItem write Set_HighlightedItem;
    property CueImage: IUnknown read Get_CueImage write Set_CueImage;
    property CueImageOpacity: Double read Get_CueImageOpacity write Set_CueImageOpacity;
    property CueImageAlign: Integer read Get_CueImageAlign write Set_CueImageAlign;
    property ProgressMon: IProgressMon read Get_ProgressMon;
    property ProgressAlign: Integer read Get_ProgressAlign write Set_ProgressAlign;
    property ItemImageAlign: Integer read Get_ItemImageAlign write Set_ItemImageAlign;
  end;

// *********************************************************************//
// DispIntf:  IUIX_TreeDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {69E71C54-93FD-403B-BED2-E9B703EFCCF8}
// *********************************************************************//
  IUIX_TreeDisp = dispinterface
    ['{69E71C54-93FD-403B-BED2-E9B703EFCCF8}']
    property Callbacks: IUIX_TreeCallbacks dispid 1610809344;
    property NotifyTarget: IUIX_Obj dispid 1610809346;
    property Font: IUIX_Font dispid 1610809348;
    property Root: IUIX_TreeItem readonly dispid 1610809350;
    property UpdatesLocked: WordBool readonly dispid 1610809351;
    procedure LockUpdates; dispid 1610809352;
    procedure UnLockUpdates; dispid 1610809353;
    function HitTest(var stPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; out nItemHT: Integer): IUIX_TreeItem; dispid 1610809354;
    property HasSel: WordBool readonly dispid 1610809355;
    property HasSingleSel: WordBool readonly dispid 1610809356;
    property HasMultSel: WordBool readonly dispid 1610809357;
    function GetFirstSelItem(out pEnumCtx: IUnknown): IUIX_TreeItem; dispid 1610809358;
    function GetNextSelItem(const pEnumCtx: IUnknown): IUIX_TreeItem; dispid 1610809359;
    procedure GetSel(const pEnumSelClbk: IUIX_TreeGetSelCallback); dispid 1610809360;
    procedure ClearSel; dispid 1610809361;
    procedure GetHotItem(out pItem: IUIX_TreeItem; out nItemHT: Integer); dispid 1610809362;
    function ItemImageSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; dispid 1610809363;
    procedure SetItemMinMaxHeight(nMinHeight: Integer; nMaxHeight: Integer); dispid 1610809365;
    procedure GetItemMinMaxHeight(out nMinHeight: Integer; out nMaxHeight: Integer); dispid 1610809366;
    property IsEmpty: WordBool readonly dispid 1610809367;
    procedure Clear; dispid 1610809368;
    property CueText: WideString dispid 1610809369;
    procedure ExpandAll(bExpand: WordBool); dispid 1610809371;
    procedure SelectAll(bVisibleOnly: WordBool); dispid 1610809372;
    procedure RedrawAllItems; dispid 1610809373;
    procedure StopEditText(bCancel: WordBool); dispid 1610809374;
    function GetTextEditingItem: IUIX_TreeItem; dispid 1610809375;
    property HighlightedItem: IUIX_TreeItem dispid 1610809376;
    property CueImage: IUnknown dispid 1610809378;
    property CueImageOpacity: Double dispid 1610809380;
    property CueImageAlign: Integer dispid 1610809382;
    property ProgressMon: IProgressMon readonly dispid 1610809384;
    property ProgressAlign: Integer dispid 1610809385;
    property ItemImageAlign: Integer dispid 1610809387;
    procedure DoDragDrop(var stStartPos: {NOT_OLEAUTO(tagPOINT)}OleVariant); dispid 1610809389;
    procedure StartEditText(const pItem: IUIX_TreeItem); dispid 1610809390;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_TreeCallbacks
// Flags:     (0)
// GUID:      {513FAA1B-FB3F-405F-8883-E80EA094BE48}
// *********************************************************************//
  IUIX_TreeCallbacks = interface(IUnknown)
    ['{513FAA1B-FB3F-405F-8883-E80EA094BE48}']
    function Tree_OnGetItemSize(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                nAvailWidth: Integer; out pItemSize: tagSIZE): HResult; stdcall;
    function Tree_OnGetItemText(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                out ppText: PWideChar; out pTextLen: Integer; out pFont: IUIX_Font; 
                                out pDrawTextFlags: Integer): HResult; stdcall;
    function Tree_OnGetItemTextSize(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                    pText: PWideChar; nTextLen: Integer; const pFont: IUIX_Font; 
                                    nDrawTextFlags: Integer; nAvailTextWidth: Integer; 
                                    out pTextSize: tagSIZE): HResult; stdcall;
    function Tree_OnGetItemImageSize(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                     out pImageSize: tagSIZE): HResult; stdcall;
    function Tree_OnGetItemImage(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                 out pImage: IUnknown): HResult; stdcall;
    function Tree_OnDraw(const pTree: IUIX_Tree; const pRC: IUIX_RenderContext; 
                         nDrawStage: Integer; var stRects: tagRECT; nRects: Integer; 
                         var stBoundsRect: tagRECT): HResult; stdcall;
    function Tree_OnGetItemTextColor(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                     out nTextColor: Integer): HResult; stdcall;
    function Tree_OnDrawItem(const pTree: IUIX_Tree; const pRC: IUIX_RenderContext; 
                             const pItem: IUIX_TreeItem; var stItemRect: tagRECT; 
                             var stClip: tagRECT): HResult; stdcall;
    function Tree_OnPostDrawItem(const pTree: IUIX_Tree; const pRC: IUIX_RenderContext; 
                                 const pItem: IUIX_TreeItem; var stItemRect: tagRECT; 
                                 var stClip: tagRECT): HResult; stdcall;
    function Tree_OnDrawItemText(const pTree: IUIX_Tree; const pRC: IUIX_RenderContext; 
                                 const pItem: IUIX_TreeItem; pText: PWideChar; nTextLen: Integer; 
                                 const pFont: IUIX_Font; nColor: Integer; nDrawTextFlags: Integer; 
                                 var pTextRect: tagRECT; var pClip: tagRECT): HResult; stdcall;
    function Tree_OnDrawItemImage(const pTree: IUIX_Tree; const pRC: IUIX_RenderContext; 
                                  const pItem: IUIX_TreeItem; var stImageRect: tagRECT; 
                                  var stClip: tagRECT): HResult; stdcall;
    function Tree_OnDrawItemCheckBox(const pTree: IUIX_Tree; const pRC: IUIX_RenderContext; 
                                     const pItem: IUIX_TreeItem; var stCheckBoxRect: tagRECT; 
                                     var stClip: tagRECT): HResult; stdcall;
    function Tree_OnHitTestItem(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                var stItemPos: tagPOINT; out nItemHT: Integer): HResult; stdcall;
    function Tree_OnItemClick(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; nItemHT: Integer; 
                              bDblClick: WordBool): HResult; stdcall;
    function Tree_OnItemClicked(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                nItemHT: Integer; nFlags: Integer): HResult; stdcall;
    function Tree_OnItemChecked(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem): HResult; stdcall;
    function Tree_OnSelChanged(const pTree: IUIX_Tree; nFlags: Integer): HResult; stdcall;
    function Tree_OnChanged(const pTree: IUIX_Tree): HResult; stdcall;
    function Tree_OnBeforeToggleItem(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                     bExpand: WordBool; bByDblClick: WordBool): HResult; stdcall;
    function Tree_OnItemToggled(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem): HResult; stdcall;
    function Tree_OnBeforeSingleSel(const pTree: IUIX_Tree; const pNewSelItem: IUIX_TreeItem): HResult; stdcall;
    function Tree_OnBeforeCheckItem(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                    var nNewCheckState: Integer): HResult; stdcall;
    function Tree_OnGetItemCheckState(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                      out nCheckState: Integer): HResult; stdcall;
    function Tree_OnSetItemCheckState(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                      nNewCheckState: Integer): HResult; stdcall;
    function Tree_OnItemDeleted(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem): HResult; stdcall;
    function Tree_OnContextMenu(const pTree: IUIX_Tree; var stPos: tagPOINT; bByKey: WordBool): HResult; stdcall;
    function Tree_OnHotItemChanged(const pTree: IUIX_Tree; const pOldHotItem: IUIX_TreeItem; 
                                   nOldHotItemHT: Integer): HResult; stdcall;
    function Tree_OnGetItemSelState(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                    out bSelected: WordBool): HResult; stdcall;
    function Tree_OnSetItemSelState(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                    bSelect: WordBool): HResult; stdcall;
    function Tree_OnItemHasChildren(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                    out bHasChildren: WordBool): HResult; stdcall;
    function Tree_OnGetItemFlags(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                 out nFlags: Integer): HResult; stdcall;
    function Tree_OnBeforeClearSel(const pTree: IUIX_Tree; out nFlags: Integer): HResult; stdcall;
    function Tree_OnAfterClearSel(const pTree: IUIX_Tree): HResult; stdcall;
    function Tree_OnScrollChanged(const pTree: IUIX_Tree; var stScrollDeltas: tagPOINT): HResult; stdcall;
    function Tree_OnSize(const pTree: IUIX_Tree): HResult; stdcall;
    function Tree_OnGetItemToggleRect(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                      var stItemRect: tagRECT; var nToggleSize: tagSIZE; 
                                      var stToggleRect: tagRECT): HResult; stdcall;
    function Tree_OnGetData(const pTree: IUIX_Tree; var stFmtEtc: tagFORMATETC; 
                            stStdMed: PPUserType3): HResult; stdcall;
    function Tree_OnDragEnter(const pTree: IUIX_Tree; var pFmtEtc: tagFORMATETC; 
                              pStdMed: PPUserType3; nKeyState: Integer; var pPos: tagPOINT; 
                              var pDropParent: IUIX_TreeItem; var pDropChildIndex: Integer; 
                              out pEffect: Integer): HResult; stdcall;
    function Tree_OnDragOver(const pTree: IUIX_Tree; var pFmtEtc: tagFORMATETC; 
                             pStdMed: PPUserType3; nKeyState: Integer; var pPos: tagPOINT; 
                             var pDropParent: IUIX_TreeItem; var pDropChildIndex: Integer; 
                             out pEffect: Integer): HResult; stdcall;
    function Tree_OnDragLeave(const pTree: IUIX_Tree): HResult; stdcall;
    function Tree_OnDrop(const pTree: IUIX_Tree; var pFmtEtc: tagFORMATETC; pStdMed: PPUserType3; 
                         nEffect: Integer; var pPos: tagPOINT; const pDropParent: IUIX_TreeItem; 
                         nDropChildIndex: Integer): HResult; stdcall;
    function Tree_OnBeginDrag(const pTree: IUIX_Tree; var stPos: tagPOINT; 
                              var nSuppEffects: Integer; out pDragImage: IUIX_ImageData): HResult; stdcall;
    function Tree_OnEndDrag(const pTree: IUIX_Tree; nDropEffect: Integer): HResult; stdcall;
    function Tree_OnSelectRange(const pTree: IUIX_Tree; bStart: WordBool): HResult; stdcall;
    function Tree_OnBeforeShowTooltip(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                      nHotItemHT: Integer; const pTooltip: IUIX_Tooltip): HResult; stdcall;
    function Tree_OnBeginTextEdit(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                  const pEditCtl: IUIX_Edit): HResult; stdcall;
    function Tree_OnEndTextEdit(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                const pEditCtl: IUIX_Edit; bCancel: WordBool): HResult; stdcall;
    function Tree_OnSetItemText(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                sText: PWideChar; nTextLen: Integer): HResult; stdcall;
    function Tree_OnGetItemText2(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; 
                                 out ppText: WideString; out pFont: IUIX_Font; 
                                 out pDrawTextFlags: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_TreeItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B148BBD-F357-4166-A073-16B44503B6AC}
// *********************************************************************//
  IUIX_TreeItem = interface(IDispatch)
    ['{8B148BBD-F357-4166-A073-16B44503B6AC}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_TreeItem; safecall;
    function Get_Count: ULONG_T; safecall;
    function GetChildIndex(const pItem: IUIX_TreeItem): Integer; safecall;
    function Get_IsDeleted: WordBool; safecall;
    function Get_Param: PARAM_T; safecall;
    procedure Set_Param(nParam: PARAM_T); safecall;
    function Get_Parent: IUIX_TreeItem; safecall;
    function Get_Owner: IUIX_Tree; safecall;
    function Get_CheckState: Integer; safecall;
    procedure Set_CheckState(nCheckState: Integer); safecall;
    function Get_Expanded: WordBool; safecall;
    procedure Set_Expanded(bExpanded: WordBool); safecall;
    procedure Remove; safecall;
    function InsertChild(nInsertBefore: Integer; nItemParam: PARAM_T; bExpanded: WordBool): IUIX_TreeItem; safecall;
    procedure RemoveChildren(nFirstIndex: Integer; nCount: Integer); safecall;
    function FindChild(nItemParam: PARAM_T; bRecursive: WordBool): IUIX_TreeItem; safecall;
    function Get_IsSelected: WordBool; safecall;
    procedure Select(bSelect: WordBool; bExclusive: WordBool); safecall;
    procedure SelectChildren(nFirstIndex: Integer; nCount: Integer; bSelect: WordBool; 
                             bExclusive: WordBool); safecall;
    function Get_Rect: tagRECT; safecall;
    function Get_TextRect: tagRECT; safecall;
    function Get_VisibilityState: Integer; safecall;
    procedure MakeVisible(bAllowPartialVisible: WordBool; bAllowSmoothScroll: WordBool); safecall;
    procedure Update(bRecursive: WordBool); safecall;
    procedure UpdateChildren(nFirstIndex: Integer; nCount: Integer; bRecursive: WordBool); safecall;
    procedure Redraw; safecall;
    procedure MoveTo(const pNewParent: IUIX_TreeItem; nInsertIndex: Integer); safecall;
    procedure MoveChildrenTo(nFirstIndex: Integer; nCount: Integer; 
                             const pNewParent: IUIX_TreeItem; nNewFirstIndex: Integer); safecall;
    procedure SetData(nSetFlags: ULONG_T; const sText: WideString; const pImage: IUnknown; 
                      bUpdate: WordBool); safecall;
    procedure GetData(out sText: WideString; out pImage: IUnknown); safecall;
    procedure RevokeData(bUpdate: WordBool); safecall;
    procedure Expand(bExpand: WordBool; bRecursive: WordBool); safecall;
    procedure RedrawAllChildren(bRecursive: WordBool); safecall;
    procedure StartEditText; safecall;
    function Get_ToggleRect: tagRECT; safecall;
    function Get_CheckBoxRect: tagRECT; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_TreeItem read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property IsDeleted: WordBool read Get_IsDeleted;
    property Param: PARAM_T read Get_Param write Set_Param;
    property Parent: IUIX_TreeItem read Get_Parent;
    property Owner: IUIX_Tree read Get_Owner;
    property CheckState: Integer read Get_CheckState write Set_CheckState;
    property Expanded: WordBool read Get_Expanded write Set_Expanded;
    property IsSelected: WordBool read Get_IsSelected;
    property Rect: tagRECT read Get_Rect;
    property TextRect: tagRECT read Get_TextRect;
    property VisibilityState: Integer read Get_VisibilityState;
    property ToggleRect: tagRECT read Get_ToggleRect;
    property CheckBoxRect: tagRECT read Get_CheckBoxRect;
  end;

// *********************************************************************//
// DispIntf:  IUIX_TreeItemDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8B148BBD-F357-4166-A073-16B44503B6AC}
// *********************************************************************//
  IUIX_TreeItemDisp = dispinterface
    ['{8B148BBD-F357-4166-A073-16B44503B6AC}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_TreeItem readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    function GetChildIndex(const pItem: IUIX_TreeItem): Integer; dispid 1610743811;
    property IsDeleted: WordBool readonly dispid 1610743812;
    property Param: PARAM_T dispid 1610743813;
    property Parent: IUIX_TreeItem readonly dispid 1610743815;
    property Owner: IUIX_Tree readonly dispid 1610743816;
    property CheckState: Integer dispid 1610743817;
    property Expanded: WordBool dispid 1610743819;
    procedure Remove; dispid 1610743821;
    function InsertChild(nInsertBefore: Integer; nItemParam: PARAM_T; bExpanded: WordBool): IUIX_TreeItem; dispid 1610743822;
    procedure RemoveChildren(nFirstIndex: Integer; nCount: Integer); dispid 1610743823;
    function FindChild(nItemParam: PARAM_T; bRecursive: WordBool): IUIX_TreeItem; dispid 1610743824;
    property IsSelected: WordBool readonly dispid 1610743825;
    procedure Select(bSelect: WordBool; bExclusive: WordBool); dispid 1610743826;
    procedure SelectChildren(nFirstIndex: Integer; nCount: Integer; bSelect: WordBool; 
                             bExclusive: WordBool); dispid 1610743827;
    property Rect: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610743828;
    property TextRect: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610743829;
    property VisibilityState: Integer readonly dispid 1610743830;
    procedure MakeVisible(bAllowPartialVisible: WordBool; bAllowSmoothScroll: WordBool); dispid 1610743831;
    procedure Update(bRecursive: WordBool); dispid 1610743832;
    procedure UpdateChildren(nFirstIndex: Integer; nCount: Integer; bRecursive: WordBool); dispid 1610743833;
    procedure Redraw; dispid 1610743834;
    procedure MoveTo(const pNewParent: IUIX_TreeItem; nInsertIndex: Integer); dispid 1610743835;
    procedure MoveChildrenTo(nFirstIndex: Integer; nCount: Integer; 
                             const pNewParent: IUIX_TreeItem; nNewFirstIndex: Integer); dispid 1610743836;
    procedure SetData(nSetFlags: ULONG_T; const sText: WideString; const pImage: IUnknown; 
                      bUpdate: WordBool); dispid 1610743837;
    procedure GetData(out sText: WideString; out pImage: IUnknown); dispid 1610743838;
    procedure RevokeData(bUpdate: WordBool); dispid 1610743839;
    procedure Expand(bExpand: WordBool; bRecursive: WordBool); dispid 1610743840;
    procedure RedrawAllChildren(bRecursive: WordBool); dispid 1610743841;
    procedure StartEditText; dispid 1610743842;
    property ToggleRect: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610743843;
    property CheckBoxRect: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610743844;
  end;

// *********************************************************************//
// Interface: IUIX_TreeGetSelCallback
// Flags:     (0)
// GUID:      {56209213-99A9-4ACE-8BD2-2AB616FB3763}
// *********************************************************************//
  IUIX_TreeGetSelCallback = interface(IUnknown)
    ['{56209213-99A9-4ACE-8BD2-2AB616FB3763}']
    function TreeGetSel_OnItem(const pTree: IUIX_Tree; const pItem: IUIX_TreeItem; bHidden: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_PropSheets
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A5010807-2297-4FD6-AA36-269CEFD9B97E}
// *********************************************************************//
  IUIX_PropSheets = interface(IUIX_ObjImpl)
    ['{A5010807-2297-4FD6-AA36-269CEFD9B97E}']
    function Get_ID: WideString; safecall;
    function Get_Ctx: IUnknown; safecall;
    function Get_Src: IUnknown; safecall;
    function Get_ActivePage: WideString; safecall;
    procedure Set_ActivePage(const sPageID: WideString); safecall;
    function Get_Page(const sPageID: WideString): IUIX_PropSheetPage; safecall;
    function Get_OpList: IOperationList; safecall;
    function Get_DlgRes: LONG_PTR; safecall;
    function Get_Dlg: IUIX_Dialog; safecall;
    function Get_ValidateCb: IUIX_ValidatePropSheetsCallback; safecall;
    procedure Set_ValidateCb(const pValidateCb: IUIX_ValidatePropSheetsCallback); safecall;
    procedure ActivatePage(const pPage: IUIX_PropSheetPage); safecall;
    procedure GetActivePage(out pPage: IUIX_PropSheetPage); safecall;
    function GetPageUI(const sPageID: WideString; bCreateIfNot: WordBool): IUIX_Obj; safecall;
    function GetPageID(const pPage: IUIX_PropSheetPage): WideString; safecall;
    procedure UpdatePageInfo(const sPageID: WideString); safecall;
    procedure InsertPage(const pPage: IUIX_PropSheetPage; const sID: WideString; 
                         const sInsertBeforeID: WideString; const sParentID: WideString); safecall;
    procedure EnumPages(const pEnumPagesCb: IUIX_EnumPropSheetPagesCallback; 
                        const pParent: IUIX_PropSheetPage); safecall;
    procedure RemovePage(const sPageID: WideString); safecall;
    procedure RemoveAllPages; safecall;
    function DoDialog(bAppModal: WordBool): WordBool; safecall;
    function DoDialog2(var stPos: tagPOINT; bAppModal: WordBool): WordBool; safecall;
    procedure EndDialog(nRes: LONG_PTR); safecall;
    procedure Destroy; safecall;
    function IsPageDisabled(const pPageID: WideString): WordBool; safecall;
    property ID: WideString read Get_ID;
    property Ctx: IUnknown read Get_Ctx;
    property Src: IUnknown read Get_Src;
    property ActivePage: WideString read Get_ActivePage write Set_ActivePage;
    property Page[const sPageID: WideString]: IUIX_PropSheetPage read Get_Page;
    property OpList: IOperationList read Get_OpList;
    property DlgRes: LONG_PTR read Get_DlgRes;
    property Dlg: IUIX_Dialog read Get_Dlg;
    property ValidateCb: IUIX_ValidatePropSheetsCallback read Get_ValidateCb write Set_ValidateCb;
  end;

// *********************************************************************//
// DispIntf:  IUIX_PropSheetsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A5010807-2297-4FD6-AA36-269CEFD9B97E}
// *********************************************************************//
  IUIX_PropSheetsDisp = dispinterface
    ['{A5010807-2297-4FD6-AA36-269CEFD9B97E}']
    property ID: WideString readonly dispid 1610809344;
    property Ctx: IUnknown readonly dispid 1610809345;
    property Src: IUnknown readonly dispid 1610809346;
    property ActivePage: WideString dispid 1610809347;
    property Page[const sPageID: WideString]: IUIX_PropSheetPage readonly dispid 1610809349;
    property OpList: IOperationList readonly dispid 1610809350;
    property DlgRes: LONG_PTR readonly dispid 1610809351;
    property Dlg: IUIX_Dialog readonly dispid 1610809352;
    property ValidateCb: IUIX_ValidatePropSheetsCallback dispid 1610809353;
    procedure ActivatePage(const pPage: IUIX_PropSheetPage); dispid 1610809355;
    procedure GetActivePage(out pPage: IUIX_PropSheetPage); dispid 1610809356;
    function GetPageUI(const sPageID: WideString; bCreateIfNot: WordBool): IUIX_Obj; dispid 1610809357;
    function GetPageID(const pPage: IUIX_PropSheetPage): WideString; dispid 1610809358;
    procedure UpdatePageInfo(const sPageID: WideString); dispid 1610809359;
    procedure InsertPage(const pPage: IUIX_PropSheetPage; const sID: WideString; 
                         const sInsertBeforeID: WideString; const sParentID: WideString); dispid 1610809360;
    procedure EnumPages(const pEnumPagesCb: IUIX_EnumPropSheetPagesCallback; 
                        const pParent: IUIX_PropSheetPage); dispid 1610809361;
    procedure RemovePage(const sPageID: WideString); dispid 1610809362;
    procedure RemoveAllPages; dispid 1610809363;
    function DoDialog(bAppModal: WordBool): WordBool; dispid 1610809364;
    function DoDialog2(var stPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; bAppModal: WordBool): WordBool; dispid 1610809365;
    procedure EndDialog(nRes: LONG_PTR); dispid 1610809366;
    procedure Destroy; dispid 1610809367;
    function IsPageDisabled(const pPageID: WideString): WordBool; dispid 1610809368;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_PropSheetPage
// Flags:     (128) NonExtensible
// GUID:      {756FF635-5F59-425B-B6C6-6BCDE1F7178E}
// *********************************************************************//
  IUIX_PropSheetPage = interface(IUnknown)
    ['{756FF635-5F59-425B-B6C6-6BCDE1F7178E}']
    function Get_Icon(out pIcon: IUIX_Icon): HResult; stdcall;
    function Get_Name(out sText: WideString): HResult; stdcall;
    function Get_Title(out sTitle: WideString): HResult; stdcall;
    function Get_Tip(out sTip: WideString): HResult; stdcall;
    function Get_HasChanges(out bHasChanges: WordBool): HResult; stdcall;
    function OnCreateNewUI(const pHost: IUIX_PropSheets; const pParent: IUIX_Obj; 
                           var stPos: tagRECT; out pNewUI: IUIX_Obj): HResult; stdcall;
    function OnBeginDialog(const pHost: IUIX_PropSheets): HResult; stdcall;
    function OnPreEndDialog(const pHost: IUIX_PropSheets; bOK: WordBool; out bBreak: WordBool): HResult; stdcall;
    function OnEndDialog(const pHost: IUIX_PropSheets; bOK: WordBool): HResult; stdcall;
    function OnInit(const pHost: IUIX_PropSheets): HResult; stdcall;
    function OnFinal(const pHost: IUIX_PropSheets): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ValidatePropSheetsCallback
// Flags:     (128) NonExtensible
// GUID:      {E7F8074E-DF5C-4FB3-AA0B-E3EF63B926D8}
// *********************************************************************//
  IUIX_ValidatePropSheetsCallback = interface(IUnknown)
    ['{E7F8074E-DF5C-4FB3-AA0B-E3EF63B926D8}']
    function OnValidateProps(const pHost: IUIX_PropSheets; 
                             const pPageToDeactivate: IUIX_PropSheetPage; out bOK: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_EnumPropSheetPagesCallback
// Flags:     (128) NonExtensible
// GUID:      {3400D21B-9F5A-4C0D-9D27-B91C9DBA6E51}
// *********************************************************************//
  IUIX_EnumPropSheetPagesCallback = interface(IUnknown)
    ['{3400D21B-9F5A-4C0D-9D27-B91C9DBA6E51}']
    function OnPropSheetPage(const pHost: IUIX_PropSheets; const sParentID: WideString; 
                             const sPageID: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ComboButton
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {77FC3DBC-DB44-48C6-AC03-51E54646A4D9}
// *********************************************************************//
  IUIX_ComboButton = interface(IUIX_ObjImpl)
    ['{77FC3DBC-DB44-48C6-AC03-51E54646A4D9}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Pressed: WordBool; safecall;
    procedure Set_Pressed(bPressed: WordBool); safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Pressed: WordBool read Get_Pressed write Set_Pressed;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ComboButtonDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {77FC3DBC-DB44-48C6-AC03-51E54646A4D9}
// *********************************************************************//
  IUIX_ComboButtonDisp = dispinterface
    ['{77FC3DBC-DB44-48C6-AC03-51E54646A4D9}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property Pressed: WordBool dispid 1610809346;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_LayoutItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CD3E64CE-677F-4A57-89A3-08250712CCF2}
// *********************************************************************//
  IUIX_LayoutItem = interface(IDispatch)
    ['{CD3E64CE-677F-4A57-89A3-08250712CCF2}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_LayoutItem; safecall;
    function Get_Count: ULONG_T; safecall;
    function GetItemIndex(const pItem: IUIX_LayoutItem): Integer; safecall;
    function Get_Parent: IUIX_LayoutItem; safecall;
    function Get_Visible: WordBool; safecall;
    function Get_Obj: IUIX_Obj; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(nStyle: Integer); safecall;
    function Get_Hidden: WordBool; safecall;
    function Get_Rect: tagRECT; safecall;
    function Get_ID: Integer; safecall;
    function Get_FixedSize: tagSIZE; safecall;
    procedure Set_FixedSize(nSize: PUserType24); safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const sTitle: WideString); safecall;
    function Get_Tooltip: WideString; safecall;
    procedure Set_Tooltip(const sTooltip: WideString); safecall;
    function Get_IsContainer: WordBool; safecall;
    function Get_IsClient: WordBool; safecall;
    function Get_CustomTag: WideString; safecall;
    procedure Set_CustomTag(const sTag: WideString); safecall;
    procedure Resize(var nNewSize: tagSIZE; nFlags: Integer); safecall;
    function Get_IsFloating: WordBool; safecall;
    procedure MakeFloating(bForce: WordBool); safecall;
    procedure MakeFloating2(var stPos: tagRECT; bForce: WordBool); safecall;
    procedure Show; safecall;
    procedure Hide(bAnimated: WordBool); safecall;
    procedure SetStyle(nStyle: Integer; nStyleMask: Integer); safecall;
    function Get_IsFullScreen: WordBool; safecall;
    procedure CancelFullScreen; safecall;
    procedure MakeFullScreen; safecall;
    procedure MakeFullScreen2(var stPos: tagPOINT); safecall;
    procedure Remove; safecall;
    procedure Highlight; safecall;
    function Get_Minimized: WordBool; safecall;
    procedure Minimize(bAnimated: WordBool); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_LayoutItem read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property Parent: IUIX_LayoutItem read Get_Parent;
    property Visible: WordBool read Get_Visible;
    property Obj: IUIX_Obj read Get_Obj;
    property Style: Integer read Get_Style write Set_Style;
    property Hidden: WordBool read Get_Hidden;
    property Rect: tagRECT read Get_Rect;
    property ID: Integer read Get_ID;
    // Skipped Property "FixedSize"
    property Title: WideString read Get_Title write Set_Title;
    property Tooltip: WideString read Get_Tooltip write Set_Tooltip;
    property IsContainer: WordBool read Get_IsContainer;
    property IsClient: WordBool read Get_IsClient;
    property CustomTag: WideString read Get_CustomTag write Set_CustomTag;
    property IsFloating: WordBool read Get_IsFloating;
    property IsFullScreen: WordBool read Get_IsFullScreen;
    property Minimized: WordBool read Get_Minimized;
  end;

// *********************************************************************//
// DispIntf:  IUIX_LayoutItemDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {CD3E64CE-677F-4A57-89A3-08250712CCF2}
// *********************************************************************//
  IUIX_LayoutItemDisp = dispinterface
    ['{CD3E64CE-677F-4A57-89A3-08250712CCF2}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_LayoutItem readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    function GetItemIndex(const pItem: IUIX_LayoutItem): Integer; dispid 1610743811;
    property Parent: IUIX_LayoutItem readonly dispid 1610743812;
    property Visible: WordBool readonly dispid 1610743813;
    property Obj: IUIX_Obj readonly dispid 1610743814;
    property Style: Integer dispid 1610743815;
    property Hidden: WordBool readonly dispid 1610743817;
    property Rect: {NOT_OLEAUTO(tagRECT)}OleVariant readonly dispid 1610743818;
    property ID: Integer readonly dispid 1610743819;
    function FixedSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; dispid 1610743820;
    property Title: WideString dispid 1610743822;
    property Tooltip: WideString dispid 1610743824;
    property IsContainer: WordBool readonly dispid 1610743826;
    property IsClient: WordBool readonly dispid 1610743827;
    property CustomTag: WideString dispid 1610743828;
    procedure Resize(var nNewSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; nFlags: Integer); dispid 1610743830;
    property IsFloating: WordBool readonly dispid 1610743831;
    procedure MakeFloating(bForce: WordBool); dispid 1610743832;
    procedure MakeFloating2(var stPos: {NOT_OLEAUTO(tagRECT)}OleVariant; bForce: WordBool); dispid 1610743833;
    procedure Show; dispid 1610743834;
    procedure Hide(bAnimated: WordBool); dispid 1610743835;
    procedure SetStyle(nStyle: Integer; nStyleMask: Integer); dispid 1610743836;
    property IsFullScreen: WordBool readonly dispid 1610743837;
    procedure CancelFullScreen; dispid 1610743838;
    procedure MakeFullScreen; dispid 1610743839;
    procedure MakeFullScreen2(var stPos: {NOT_OLEAUTO(tagPOINT)}OleVariant); dispid 1610743840;
    procedure Remove; dispid 1610743841;
    procedure Highlight; dispid 1610743842;
    property Minimized: WordBool readonly dispid 1610743843;
    procedure Minimize(bAnimated: WordBool); dispid 1610743844;
  end;

// *********************************************************************//
// Interface: IUIX_InfoBtn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB35E2D7-12DB-4DD7-AE5E-43B6E2B9D163}
// *********************************************************************//
  IUIX_InfoBtn = interface(IUIX_ObjImpl)
    ['{BB35E2D7-12DB-4DD7-AE5E-43B6E2B9D163}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const sText: WideString); safecall;
    function Get_Tooltip: WideString; safecall;
    procedure Set_Tooltip(const sTooltip: WideString); safecall;
    function Get_DrawTextFlags: Integer; safecall;
    procedure Set_DrawTextFlags(nDrawTextFlags: Integer); safecall;
    function Get_Icon: IUIX_Icon; safecall;
    procedure Set_Icon(const pIcon: IUIX_Icon); safecall;
    function Get_IconScaleType: Integer; safecall;
    procedure Set_IconScaleType(nIconScaleType: Integer); safecall;
    function GetIdealSize(var nAvailSize: tagSIZE): tagSIZE; safecall;
    procedure FitToIdealSize; safecall;
    procedure BindToBuddyCtl(const pBuddyCtl: IUIX_Obj); safecall;
    procedure ShowPopup(bShow: WordBool); safecall;
    function Get_BuddyCtl: IUIX_Obj; safecall;
    procedure Set_BuddyCtl(const pBuddyCtl: IUIX_Obj); safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Text: WideString read Get_Text write Set_Text;
    property Tooltip: WideString read Get_Tooltip write Set_Tooltip;
    property DrawTextFlags: Integer read Get_DrawTextFlags write Set_DrawTextFlags;
    property Icon: IUIX_Icon read Get_Icon write Set_Icon;
    property IconScaleType: Integer read Get_IconScaleType write Set_IconScaleType;
    property BuddyCtl: IUIX_Obj read Get_BuddyCtl write Set_BuddyCtl;
  end;

// *********************************************************************//
// DispIntf:  IUIX_InfoBtnDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BB35E2D7-12DB-4DD7-AE5E-43B6E2B9D163}
// *********************************************************************//
  IUIX_InfoBtnDisp = dispinterface
    ['{BB35E2D7-12DB-4DD7-AE5E-43B6E2B9D163}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property Text: WideString dispid 1610809346;
    property Tooltip: WideString dispid 1610809348;
    property DrawTextFlags: Integer dispid 1610809350;
    property Icon: IUIX_Icon dispid 1610809352;
    property IconScaleType: Integer dispid 1610809354;
    function GetIdealSize(var nAvailSize: {NOT_OLEAUTO(tagSIZE)}OleVariant): {NOT_OLEAUTO(tagSIZE)}OleVariant; dispid 1610809356;
    procedure FitToIdealSize; dispid 1610809357;
    procedure BindToBuddyCtl(const pBuddyCtl: IUIX_Obj); dispid 1610809358;
    procedure ShowPopup(bShow: WordBool); dispid 1610809359;
    property BuddyCtl: IUIX_Obj dispid 1610809360;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_PopupsHolder
// Flags:     (0)
// GUID:      {5834AB57-13A8-41BF-BE06-506EEAC4D15F}
// *********************************************************************//
  IUIX_PopupsHolder = interface(IUnknown)
    ['{5834AB57-13A8-41BF-BE06-506EEAC4D15F}']
    function Unhold: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDataObject
// Flags:     (0)
// GUID:      {0000010E-0000-0000-C000-000000000046}
// *********************************************************************//
  IDataObject = interface(IUnknown)
    ['{0000010E-0000-0000-C000-000000000046}']
    function RemoteGetData(var pformatetcIn: tagFORMATETC; out pRemoteMedium: wireSTGMEDIUM): HResult; stdcall;
    function RemoteGetDataHere(var pformatetc: tagFORMATETC; var pRemoteMedium: wireSTGMEDIUM): HResult; stdcall;
    function QueryGetData(var pformatetc: tagFORMATETC): HResult; stdcall;
    function GetCanonicalFormatEtc(var pformatectIn: tagFORMATETC; out pformatetcOut: tagFORMATETC): HResult; stdcall;
    function RemoteSetData(var pformatetc: tagFORMATETC; pmedium: PPUserType4; fRelease: Integer): HResult; stdcall;
    function EnumFormatEtc(dwDirection: LongWord; out ppenumFormatEtc: IEnumFORMATETC): HResult; stdcall;
    function DAdvise(var pformatetc: tagFORMATETC; advf: LongWord; const pAdvSink: IAdviseSink; 
                     out pdwConnection: LongWord): HResult; stdcall;
    function DUnadvise(dwConnection: LongWord): HResult; stdcall;
    function EnumDAdvise(out ppenumAdvise: IEnumSTATDATA): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumFORMATETC
// Flags:     (0)
// GUID:      {00000103-0000-0000-C000-000000000046}
// *********************************************************************//
  IEnumFORMATETC = interface(IUnknown)
    ['{00000103-0000-0000-C000-000000000046}']
    function RemoteNext(celt: LongWord; out rgelt: tagFORMATETC; out pceltFetched: LongWord): HResult; stdcall;
    function Skip(celt: LongWord): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumFORMATETC): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAdviseSink
// Flags:     (0)
// GUID:      {0000010F-0000-0000-C000-000000000046}
// *********************************************************************//
  IAdviseSink = interface(IUnknown)
    ['{0000010F-0000-0000-C000-000000000046}']
    function RemoteOnDataChange(var pformatetc: tagFORMATETC; pStgmed: PPUserType5): HResult; stdcall;
    function RemoteOnViewChange(dwAspect: LongWord; lindex: Integer): HResult; stdcall;
    function RemoteOnRename(const pmk: IMoniker): HResult; stdcall;
    function RemoteOnSave: HResult; stdcall;
    function RemoteOnClose: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPersist
// Flags:     (0)
// GUID:      {0000010C-0000-0000-C000-000000000046}
// *********************************************************************//
  IPersist = interface(IUnknown)
    ['{0000010C-0000-0000-C000-000000000046}']
    function GetClassID(out pClassID: TGUID): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPersistStream
// Flags:     (0)
// GUID:      {00000109-0000-0000-C000-000000000046}
// *********************************************************************//
  IPersistStream = interface(IPersist)
    ['{00000109-0000-0000-C000-000000000046}']
    function IsDirty: HResult; stdcall;
    function Load(const pstm: IStream): HResult; stdcall;
    function Save(const pstm: IStream; fClearDirty: Integer): HResult; stdcall;
    function GetSizeMax(out pcbSize: _ULARGE_INTEGER): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IMoniker
// Flags:     (0)
// GUID:      {0000000F-0000-0000-C000-000000000046}
// *********************************************************************//
  IMoniker = interface(IPersistStream)
    ['{0000000F-0000-0000-C000-000000000046}']
    function RemoteBindToObject(const pbc: IBindCtx; const pmkToLeft: IMoniker; 
                                var riidResult: TGUID; out ppvResult: IUnknown): HResult; stdcall;
    function RemoteBindToStorage(const pbc: IBindCtx; const pmkToLeft: IMoniker; var riid: TGUID; 
                                 out ppvObj: IUnknown): HResult; stdcall;
    function Reduce(const pbc: IBindCtx; dwReduceHowFar: LongWord; var ppmkToLeft: IMoniker; 
                    out ppmkReduced: IMoniker): HResult; stdcall;
    function ComposeWith(const pmkRight: IMoniker; fOnlyIfNotGeneric: Integer; 
                         out ppmkComposite: IMoniker): HResult; stdcall;
    function Enum(fForward: Integer; out ppenumMoniker: IEnumMoniker): HResult; stdcall;
    function IsEqual(const pmkOtherMoniker: IMoniker): HResult; stdcall;
    function Hash(out pdwHash: LongWord): HResult; stdcall;
    function IsRunning(const pbc: IBindCtx; const pmkToLeft: IMoniker; 
                       const pmkNewlyRunning: IMoniker): HResult; stdcall;
    function GetTimeOfLastChange(const pbc: IBindCtx; const pmkToLeft: IMoniker; 
                                 out pfiletime: _FILETIME): HResult; stdcall;
    function Inverse(out ppmk: IMoniker): HResult; stdcall;
    function CommonPrefixWith(const pmkOther: IMoniker; out ppmkPrefix: IMoniker): HResult; stdcall;
    function RelativePathTo(const pmkOther: IMoniker; out ppmkRelPath: IMoniker): HResult; stdcall;
    function GetDisplayName(const pbc: IBindCtx; const pmkToLeft: IMoniker; 
                            out ppszDisplayName: PWideChar): HResult; stdcall;
    function ParseDisplayName(const pbc: IBindCtx; const pmkToLeft: IMoniker; 
                              pszDisplayName: PWideChar; out pchEaten: LongWord; 
                              out ppmkOut: IMoniker): HResult; stdcall;
    function IsSystemMoniker(out pdwMksys: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IBindCtx
// Flags:     (0)
// GUID:      {0000000E-0000-0000-C000-000000000046}
// *********************************************************************//
  IBindCtx = interface(IUnknown)
    ['{0000000E-0000-0000-C000-000000000046}']
    function RegisterObjectBound(const punk: IUnknown): HResult; stdcall;
    function RevokeObjectBound(const punk: IUnknown): HResult; stdcall;
    function ReleaseBoundObjects: HResult; stdcall;
    function RemoteSetBindOptions(var pbindopts: tagBIND_OPTS2): HResult; stdcall;
    function RemoteGetBindOptions(var pbindopts: tagBIND_OPTS2): HResult; stdcall;
    function GetRunningObjectTable(out pprot: IRunningObjectTable): HResult; stdcall;
    function RegisterObjectParam(pszKey: PWideChar; const punk: IUnknown): HResult; stdcall;
    function GetObjectParam(pszKey: PWideChar; out ppunk: IUnknown): HResult; stdcall;
    function EnumObjectParam(out ppenum: IEnumString): HResult; stdcall;
    function RevokeObjectParam(pszKey: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IRunningObjectTable
// Flags:     (0)
// GUID:      {00000010-0000-0000-C000-000000000046}
// *********************************************************************//
  IRunningObjectTable = interface(IUnknown)
    ['{00000010-0000-0000-C000-000000000046}']
    function Register(grfFlags: LongWord; const punkObject: IUnknown; 
                      const pmkObjectName: IMoniker; out pdwRegister: LongWord): HResult; stdcall;
    function Revoke(dwRegister: LongWord): HResult; stdcall;
    function IsRunning(const pmkObjectName: IMoniker): HResult; stdcall;
    function GetObject(const pmkObjectName: IMoniker; out ppunkObject: IUnknown): HResult; stdcall;
    function NoteChangeTime(dwRegister: LongWord; var pfiletime: _FILETIME): HResult; stdcall;
    function GetTimeOfLastChange(const pmkObjectName: IMoniker; out pfiletime: _FILETIME): HResult; stdcall;
    function EnumRunning(out ppenumMoniker: IEnumMoniker): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumMoniker
// Flags:     (0)
// GUID:      {00000102-0000-0000-C000-000000000046}
// *********************************************************************//
  IEnumMoniker = interface(IUnknown)
    ['{00000102-0000-0000-C000-000000000046}']
    function RemoteNext(celt: LongWord; out rgelt: IMoniker; out pceltFetched: LongWord): HResult; stdcall;
    function Skip(celt: LongWord): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumMoniker): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumString
// Flags:     (0)
// GUID:      {00000101-0000-0000-C000-000000000046}
// *********************************************************************//
  IEnumString = interface(IUnknown)
    ['{00000101-0000-0000-C000-000000000046}']
    function RemoteNext(celt: LongWord; out rgelt: PWideChar; out pceltFetched: LongWord): HResult; stdcall;
    function Skip(celt: LongWord): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumSTATDATA
// Flags:     (0)
// GUID:      {00000105-0000-0000-C000-000000000046}
// *********************************************************************//
  IEnumSTATDATA = interface(IUnknown)
    ['{00000105-0000-0000-C000-000000000046}']
    function RemoteNext(celt: LongWord; out rgelt: tagSTATDATA; out pceltFetched: LongWord): HResult; stdcall;
    function Skip(celt: LongWord): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumSTATDATA): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDropSource
// Flags:     (0)
// GUID:      {00000121-0000-0000-C000-000000000046}
// *********************************************************************//
  IDropSource = interface(IUnknown)
    ['{00000121-0000-0000-C000-000000000046}']
    function QueryContinueDrag(fEscapePressed: Integer; grfKeyState: LongWord): HResult; stdcall;
    function GiveFeedback(dwEffect: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Progress
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4EDC5163-6E6C-411C-994F-FD3FD74483DE}
// *********************************************************************//
  IUIX_Progress = interface(IUIX_ObjImpl)
    ['{4EDC5163-6E6C-411C-994F-FD3FD74483DE}']
    function Get_Size: Double; safecall;
    procedure Set_Size(nSize: Double); safecall;
    function Get_Pos: Double; safecall;
    procedure Set_Pos(nPos: Double); safecall;
    function Get_State: Integer; safecall;
    procedure Set_State(nState: Integer); safecall;
    function Get_Monitor: IProgressMon; safecall;
    property Size: Double read Get_Size write Set_Size;
    property Pos: Double read Get_Pos write Set_Pos;
    property State: Integer read Get_State write Set_State;
    property Monitor: IProgressMon read Get_Monitor;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ProgressDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4EDC5163-6E6C-411C-994F-FD3FD74483DE}
// *********************************************************************//
  IUIX_ProgressDisp = dispinterface
    ['{4EDC5163-6E6C-411C-994F-FD3FD74483DE}']
    property Size: Double dispid 1610809344;
    property Pos: Double dispid 1610809346;
    property State: Integer dispid 1610809348;
    property Monitor: IProgressMon readonly dispid 1610809350;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_EventMonitor
// Flags:     (384) NonExtensible OleAutomation
// GUID:      {D083D8FD-73C0-4467-B913-43FAE1F15FD4}
// *********************************************************************//
  IUIX_EventMonitor = interface(IUnknown)
    ['{D083D8FD-73C0-4467-B913-43FAE1F15FD4}']
    function OnEventMonitor(const pTarget: IUIX_Obj; const pEvent: IUIX_Event): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_InputFocusMonitor
// Flags:     (384) NonExtensible OleAutomation
// GUID:      {7BB3E2D5-EC9F-468F-834C-4CEC84FB2325}
// *********************************************************************//
  IUIX_InputFocusMonitor = interface(IUnknown)
    ['{7BB3E2D5-EC9F-468F-834C-4CEC84FB2325}']
    function OnInputFocusMonitor(const pThreadContext: IUIX_ThreadContext): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_MouseOverMonitor
// Flags:     (384) NonExtensible OleAutomation
// GUID:      {7AE52AAD-8807-46DA-8EF6-C20E2E8AEF2D}
// *********************************************************************//
  IUIX_MouseOverMonitor = interface(IUnknown)
    ['{7AE52AAD-8807-46DA-8EF6-C20E2E8AEF2D}']
    function OnMouseOverMonitor(const pThreadContext: IUIX_ThreadContext): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_MouseCaptureMonitor
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5A908F79-E673-4776-8CFC-AF29DE009BCD}
// *********************************************************************//
  IUIX_MouseCaptureMonitor = interface(IDispatch)
    ['{5A908F79-E673-4776-8CFC-AF29DE009BCD}']
    procedure OnMouseCaptureMonitor(const pThreadContext: IUIX_ThreadContext); safecall;
  end;

// *********************************************************************//
// DispIntf:  IUIX_MouseCaptureMonitorDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5A908F79-E673-4776-8CFC-AF29DE009BCD}
// *********************************************************************//
  IUIX_MouseCaptureMonitorDisp = dispinterface
    ['{5A908F79-E673-4776-8CFC-AF29DE009BCD}']
    procedure OnMouseCaptureMonitor(const pThreadContext: IUIX_ThreadContext); dispid 1610743808;
  end;

// *********************************************************************//
// Interface: IUIX_EventLoopMonitor
// Flags:     (384) NonExtensible OleAutomation
// GUID:      {DF67F023-1C25-481D-8EE2-D522FC578CC5}
// *********************************************************************//
  IUIX_EventLoopMonitor = interface(IUnknown)
    ['{DF67F023-1C25-481D-8EE2-D522FC578CC5}']
    function OnEventLoopMonitor(hWndTarget: HANDLE_T; const pEvent: IUIX_Event): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDropTarget
// Flags:     (0)
// GUID:      {00000122-0000-0000-C000-000000000046}
// *********************************************************************//
  IDropTarget = interface(IUnknown)
    ['{00000122-0000-0000-C000-000000000046}']
    function DragEnter(const pDataObj: IDataObject; grfKeyState: LongWord; pt: _POINTL; 
                       var pdwEffect: LongWord): HResult; stdcall;
    function DragOver(grfKeyState: LongWord; pt: _POINTL; var pdwEffect: LongWord): HResult; stdcall;
    function DragLeave: HResult; stdcall;
    function Drop(const pDataObj: IDataObject; grfKeyState: LongWord; pt: _POINTL; 
                  var pdwEffect: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_ObjCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2A6B0EFB-F95A-4D9B-87F3-8BDAFB073E77}
// *********************************************************************//
  IUIX_ObjCollection = interface(IDispatch)
    ['{2A6B0EFB-F95A-4D9B-87F3-8BDAFB073E77}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IUIX_Obj; safecall;
    function Get_Count: ULONG_T; safecall;
    function GetItemIndex(const pObj: IUIX_Obj): Integer; safecall;
    procedure Insert(nIndexBefore: Integer; const pObj: IUIX_Obj); safecall;
    procedure Add(const pObj: IUIX_Obj); safecall;
    procedure DestroyAll; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IUIX_Obj read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ObjCollectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2A6B0EFB-F95A-4D9B-87F3-8BDAFB073E77}
// *********************************************************************//
  IUIX_ObjCollectionDisp = dispinterface
    ['{2A6B0EFB-F95A-4D9B-87F3-8BDAFB073E77}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IUIX_Obj readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    function GetItemIndex(const pObj: IUIX_Obj): Integer; dispid 1610743811;
    procedure Insert(nIndexBefore: Integer; const pObj: IUIX_Obj); dispid 1610743812;
    procedure Add(const pObj: IUIX_Obj); dispid 1610743813;
    procedure DestroyAll; dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IUIX_LayoutLoadCallback
// Flags:     (0)
// GUID:      {FAF26053-1649-4FED-82A4-9941C93B463E}
// *********************************************************************//
  IUIX_LayoutLoadCallback = interface(IUnknown)
    ['{FAF26053-1649-4FED-82A4-9941C93B463E}']
    function OnGetNewObj(const pLayout: IUIX_Layout; const pParent: IUIX_Obj; 
                         const pItem: IUIX_LayoutItem; sCustomTag: PWideChar; var stPos: tagRECT; 
                         out pNewObj: IUIX_Obj): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Layout
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {79A56420-B280-448E-B2DC-9ECF68F82A34}
// *********************************************************************//
  IUIX_Layout = interface(IUIX_ObjImpl)
    ['{79A56420-B280-448E-B2DC-9ECF68F82A34}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    procedure Set_ClusterID(nID: Integer); safecall;
    function Get_ClusterID: Integer; safecall;
    function Get_UpdatesLocked: WordBool; safecall;
    procedure LockUpdates; safecall;
    procedure UnLockUpdates; safecall;
    procedure Update(bForce: WordBool); safecall;
    procedure Load(const pSrc: ICabNode; const pLoadCb: IUIX_LayoutLoadCallback; nFlags: Integer); safecall;
    procedure Save(const pDest: ICabNode; nFlags: Integer); safecall;
    function Get_Root: IUIX_LayoutItem; safecall;
    function Get_FloatingRootsCount: ULONG_T; safecall;
    function Get_FloatingRoot(nIndex: ULONG_T): IUIX_LayoutItem; safecall;
    function Get_PanesCount: ULONG_T; safecall;
    function Get_Pane(nIndex: ULONG_T): IUIX_Obj; safecall;
    function Get_LastActivePane(nID: Integer): IUIX_Obj; safecall;
    function Get_ActivePane: IUIX_Obj; safecall;
    function Insert(const pPane: IUIX_Obj; const pTitle: WideString; 
                    const pParentContainer: IUIX_LayoutItem; var pSize: tagSIZE; 
                    nItemStyle: Integer; nInsertBeforeChild: Integer; bHidden: WordBool): IUIX_LayoutItem; safecall;
    function InsertNewSubContainer(const pParentContainer: IUIX_LayoutItem; var pSize: tagSIZE; 
                                   nSubContainerStyle: Integer; nInsertBeforeChild: Integer; 
                                   bHidden: WordBool): IUIX_LayoutItem; safecall;
    function GetItem(const pPane: IUIX_Obj): IUIX_LayoutItem; safecall;
    procedure Remove(const pPane: IUIX_Obj; nFlags: Integer); safecall;
    procedure RemoveAll; safecall;
    procedure MoveItem(const pItem: IUIX_LayoutItem; const pDestParentContainer: IUIX_LayoutItem; 
                       nDestInsertBeforeChild: Integer); safecall;
    function WrapItemByNewContainer(const pItem: IUIX_LayoutItem; nNewContainerStyle: Integer): IUIX_LayoutItem; safecall;
    function WrapAllChildrenByNewSubContainer(const pSrcContainer: IUIX_LayoutItem; 
                                              nNewSubContainerStyle: Integer): IUIX_LayoutItem; safecall;
    procedure DisposeContainer(const pContainer: IUIX_LayoutItem); safecall;
    function Get_NewContainerStyle: Integer; safecall;
    procedure Set_NewContainerStyle(nStyle: Integer); safecall;
    function Get_Client: IUIX_LayoutItem; safecall;
    procedure Set_Client(const pClientItem: IUIX_LayoutItem); safecall;
    procedure HighlightPane(const pPane: IUIX_Obj); safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property ClusterID: Integer read Get_ClusterID write Set_ClusterID;
    property UpdatesLocked: WordBool read Get_UpdatesLocked;
    property Root: IUIX_LayoutItem read Get_Root;
    property FloatingRootsCount: ULONG_T read Get_FloatingRootsCount;
    property FloatingRoot[nIndex: ULONG_T]: IUIX_LayoutItem read Get_FloatingRoot;
    property PanesCount: ULONG_T read Get_PanesCount;
    property Pane[nIndex: ULONG_T]: IUIX_Obj read Get_Pane;
    property LastActivePane[nID: Integer]: IUIX_Obj read Get_LastActivePane;
    property ActivePane: IUIX_Obj read Get_ActivePane;
    property NewContainerStyle: Integer read Get_NewContainerStyle write Set_NewContainerStyle;
    property Client: IUIX_LayoutItem read Get_Client write Set_Client;
  end;

// *********************************************************************//
// DispIntf:  IUIX_LayoutDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {79A56420-B280-448E-B2DC-9ECF68F82A34}
// *********************************************************************//
  IUIX_LayoutDisp = dispinterface
    ['{79A56420-B280-448E-B2DC-9ECF68F82A34}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property ClusterID: Integer dispid 1610809346;
    property UpdatesLocked: WordBool readonly dispid 1610809348;
    procedure LockUpdates; dispid 1610809349;
    procedure UnLockUpdates; dispid 1610809350;
    procedure Update(bForce: WordBool); dispid 1610809351;
    procedure Load(const pSrc: ICabNode; const pLoadCb: IUIX_LayoutLoadCallback; nFlags: Integer); dispid 1610809352;
    procedure Save(const pDest: ICabNode; nFlags: Integer); dispid 1610809353;
    property Root: IUIX_LayoutItem readonly dispid 1610809354;
    property FloatingRootsCount: ULONG_T readonly dispid 1610809355;
    property FloatingRoot[nIndex: ULONG_T]: IUIX_LayoutItem readonly dispid 1610809356;
    property PanesCount: ULONG_T readonly dispid 1610809357;
    property Pane[nIndex: ULONG_T]: IUIX_Obj readonly dispid 1610809358;
    property LastActivePane[nID: Integer]: IUIX_Obj readonly dispid 1610809359;
    property ActivePane: IUIX_Obj readonly dispid 1610809360;
    function Insert(const pPane: IUIX_Obj; const pTitle: WideString; 
                    const pParentContainer: IUIX_LayoutItem; 
                    var pSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; nItemStyle: Integer; 
                    nInsertBeforeChild: Integer; bHidden: WordBool): IUIX_LayoutItem; dispid 1610809361;
    function InsertNewSubContainer(const pParentContainer: IUIX_LayoutItem; 
                                   var pSize: {NOT_OLEAUTO(tagSIZE)}OleVariant; 
                                   nSubContainerStyle: Integer; nInsertBeforeChild: Integer; 
                                   bHidden: WordBool): IUIX_LayoutItem; dispid 1610809362;
    function GetItem(const pPane: IUIX_Obj): IUIX_LayoutItem; dispid 1610809363;
    procedure Remove(const pPane: IUIX_Obj; nFlags: Integer); dispid 1610809364;
    procedure RemoveAll; dispid 1610809365;
    procedure MoveItem(const pItem: IUIX_LayoutItem; const pDestParentContainer: IUIX_LayoutItem; 
                       nDestInsertBeforeChild: Integer); dispid 1610809366;
    function WrapItemByNewContainer(const pItem: IUIX_LayoutItem; nNewContainerStyle: Integer): IUIX_LayoutItem; dispid 1610809367;
    function WrapAllChildrenByNewSubContainer(const pSrcContainer: IUIX_LayoutItem; 
                                              nNewSubContainerStyle: Integer): IUIX_LayoutItem; dispid 1610809368;
    procedure DisposeContainer(const pContainer: IUIX_LayoutItem); dispid 1610809369;
    property NewContainerStyle: Integer dispid 1610809370;
    property Client: IUIX_LayoutItem dispid 1610809372;
    procedure HighlightPane(const pPane: IUIX_Obj); dispid 1610809374;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_IndProgress
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1F3AF5ED-2318-4412-8EAD-758ACE549097}
// *********************************************************************//
  IUIX_IndProgress = interface(IUIX_ObjImpl)
    ['{1F3AF5ED-2318-4412-8EAD-758ACE549097}']
    procedure Start; safecall;
    procedure Stop; safecall;
    function Get_Color0: Integer; safecall;
    procedure Set_Color0(nColor: Integer); safecall;
    function Get_Color1: Integer; safecall;
    procedure Set_Color1(nColor: Integer); safecall;
    function Get_StrokeWidth: Double; safecall;
    procedure Set_StrokeWidth(nWidth: Double); safecall;
    function Get_Radius: Integer; safecall;
    procedure Set_Radius(nRadius: Integer); safecall;
    function Get_Speed: Double; safecall;
    procedure Set_Speed(nSpeed: Double); safecall;
    function Get_DotsCount: Integer; safecall;
    procedure Set_DotsCount(nCount: Integer); safecall;
    function Get_Opacity: Double; safecall;
    procedure Set_Opacity(nOpacity: Double); safecall;
    property Color0: Integer read Get_Color0 write Set_Color0;
    property Color1: Integer read Get_Color1 write Set_Color1;
    property StrokeWidth: Double read Get_StrokeWidth write Set_StrokeWidth;
    property Radius: Integer read Get_Radius write Set_Radius;
    property Speed: Double read Get_Speed write Set_Speed;
    property DotsCount: Integer read Get_DotsCount write Set_DotsCount;
    property Opacity: Double read Get_Opacity write Set_Opacity;
  end;

// *********************************************************************//
// DispIntf:  IUIX_IndProgressDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1F3AF5ED-2318-4412-8EAD-758ACE549097}
// *********************************************************************//
  IUIX_IndProgressDisp = dispinterface
    ['{1F3AF5ED-2318-4412-8EAD-758ACE549097}']
    procedure Start; dispid 1610809344;
    procedure Stop; dispid 1610809345;
    property Color0: Integer dispid 1610809346;
    property Color1: Integer dispid 1610809348;
    property StrokeWidth: Double dispid 1610809350;
    property Radius: Integer dispid 1610809352;
    property Speed: Double dispid 1610809354;
    property DotsCount: Integer dispid 1610809356;
    property Opacity: Double dispid 1610809358;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_ToggleBtn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C5A57C2-81CA-4F69-BC52-A86F244934AF}
// *********************************************************************//
  IUIX_ToggleBtn = interface(IUIX_ObjImpl)
    ['{8C5A57C2-81CA-4F69-BC52-A86F244934AF}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Expanded: WordBool; safecall;
    procedure Set_Expanded(bExpanded: WordBool); safecall;
    function Get_Opacity: Double; safecall;
    procedure Set_Opacity(nOpacity: Double); safecall;
    function Get_MinSize: tagSIZE; safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Expanded: WordBool read Get_Expanded write Set_Expanded;
    property Opacity: Double read Get_Opacity write Set_Opacity;
    property MinSize: tagSIZE read Get_MinSize;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ToggleBtnDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8C5A57C2-81CA-4F69-BC52-A86F244934AF}
// *********************************************************************//
  IUIX_ToggleBtnDisp = dispinterface
    ['{8C5A57C2-81CA-4F69-BC52-A86F244934AF}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property Expanded: WordBool dispid 1610809346;
    property Opacity: Double dispid 1610809348;
    property MinSize: {NOT_OLEAUTO(tagSIZE)}OleVariant readonly dispid 1610809350;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_DropTargetSupport
// Flags:     (128) NonExtensible
// GUID:      {F3A88E81-7D24-4B55-828E-B4BBC5EA6D8F}
// *********************************************************************//
  IUIX_DropTargetSupport = interface(IUnknown)
    ['{F3A88E81-7D24-4B55-828E-B4BBC5EA6D8F}']
    function AddSuppFmt(nClipFmt: Integer): HResult; stdcall;
    function AddSuppFmt2(var stFmtEtc: tagFORMATETC): HResult; stdcall;
    function ClearSuppFmtList: HResult; stdcall;
    function Get_IsDragEntered(out bRes: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_DragSourceSupport
// Flags:     (128) NonExtensible
// GUID:      {EDFB5A01-2429-4274-9039-4CB2F5D190CA}
// *********************************************************************//
  IUIX_DragSourceSupport = interface(IUnknown)
    ['{EDFB5A01-2429-4274-9039-4CB2F5D190CA}']
    function AddSuppFmt(nClipFmt: Integer): HResult; stdcall;
    function AddSuppFmt2(var stFmtEtc: tagFORMATETC): HResult; stdcall;
    function ClearSuppFmtList: HResult; stdcall;
    function ClearData(bKeepExternal: WordBool): HResult; stdcall;
    function PutData(var stFmtEtc: tagFORMATETC; stStdMed: PPUserType3; nFlags: ULONG_T): HResult; stdcall;
    function PutPrivateData(const pPrivateData: IUnknown): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_DropData
// Flags:     (0)
// GUID:      {05967C74-C2AB-4944-80E9-B21159D3748B}
// *********************************************************************//
  IUIX_DropData = interface(IUnknown)
    ['{05967C74-C2AB-4944-80E9-B21159D3748B}']
    function Get_FmtEtc(out stFmtEtc: tagFORMATETC): HResult; stdcall;
    function Get_Stgmed(out stStgMed: wireSTGMEDIUM): HResult; stdcall;
    function Get_Effect(out nEffect: Integer): HResult; stdcall;
    function Get_Pos(out stPos: tagPOINT): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_RibbonFrameWindow
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {40294E36-4581-49A9-9DA5-61B829DCEA7C}
// *********************************************************************//
  IUIX_RibbonFrameWindow = interface(IUIX_ObjImpl)
    ['{40294E36-4581-49A9-9DA5-61B829DCEA7C}']
    function Get_Icon: IUIX_Icon; safecall;
    procedure Set_Icon(const pIcon: IUIX_Icon); safecall;
    property Icon: IUIX_Icon read Get_Icon write Set_Icon;
  end;

// *********************************************************************//
// DispIntf:  IUIX_RibbonFrameWindowDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {40294E36-4581-49A9-9DA5-61B829DCEA7C}
// *********************************************************************//
  IUIX_RibbonFrameWindowDisp = dispinterface
    ['{40294E36-4581-49A9-9DA5-61B829DCEA7C}']
    property Icon: IUIX_Icon dispid 1610809344;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_Frame
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C0265291-1DFC-4377-B60D-7AE9CA536A73}
// *********************************************************************//
  IUIX_Frame = interface(IUIX_ObjImpl)
    ['{C0265291-1DFC-4377-B60D-7AE9CA536A73}']
  end;

// *********************************************************************//
// DispIntf:  IUIX_FrameDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C0265291-1DFC-4377-B60D-7AE9CA536A73}
// *********************************************************************//
  IUIX_FrameDisp = dispinterface
    ['{C0265291-1DFC-4377-B60D-7AE9CA536A73}']
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_Spin
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FECBB317-0A10-475D-886A-1345F764D242}
// *********************************************************************//
  IUIX_Spin = interface(IUIX_ObjImpl)
    ['{FECBB317-0A10-475D-886A-1345F764D242}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Horz: WordBool; safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Horz: WordBool read Get_Horz;
  end;

// *********************************************************************//
// DispIntf:  IUIX_SpinDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FECBB317-0A10-475D-886A-1345F764D242}
// *********************************************************************//
  IUIX_SpinDisp = dispinterface
    ['{FECBB317-0A10-475D-886A-1345F764D242}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property Horz: WordBool readonly dispid 1610809346;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_Slider
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B0F82C35-358D-436A-94E3-2CB028BDC438}
// *********************************************************************//
  IUIX_Slider = interface(IUIX_ObjImpl)
    ['{B0F82C35-358D-436A-94E3-2CB028BDC438}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Pos: Double; safecall;
    procedure Set_Pos(nPos: Double); safecall;
    procedure SetMinMax(nMin: Double; nMax: Double); safecall;
    procedure GetMinMax(out nMin: Double; out nMax: Double); safecall;
    function Get_TicksCount: Integer; safecall;
    procedure AddTick(nTickPos: Double; const sTickTip: WideString); safecall;
    procedure RemoveTick(nIndex: Integer); safecall;
    function GetTickPos(nIndex: Integer): Double; safecall;
    function GetTickTip(nIndex: Integer): WideString; safecall;
    procedure RemoveAllTicks; safecall;
    procedure FillTicks(nTicksCount: Integer); safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Pos: Double read Get_Pos write Set_Pos;
    property TicksCount: Integer read Get_TicksCount;
  end;

// *********************************************************************//
// DispIntf:  IUIX_SliderDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B0F82C35-358D-436A-94E3-2CB028BDC438}
// *********************************************************************//
  IUIX_SliderDisp = dispinterface
    ['{B0F82C35-358D-436A-94E3-2CB028BDC438}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property Pos: Double dispid 1610809346;
    procedure SetMinMax(nMin: Double; nMax: Double); dispid 1610809348;
    procedure GetMinMax(out nMin: Double; out nMax: Double); dispid 1610809349;
    property TicksCount: Integer readonly dispid 1610809350;
    procedure AddTick(nTickPos: Double; const sTickTip: WideString); dispid 1610809351;
    procedure RemoveTick(nIndex: Integer); dispid 1610809352;
    function GetTickPos(nIndex: Integer): Double; dispid 1610809353;
    function GetTickTip(nIndex: Integer): WideString; dispid 1610809354;
    procedure RemoveAllTicks; dispid 1610809355;
    procedure FillTicks(nTicksCount: Integer); dispid 1610809356;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_RangesNavigator
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B55EFD3A-7639-45F0-A33E-12971B7DAAB7}
// *********************************************************************//
  IUIX_RangesNavigator = interface(IUIX_ObjImpl)
    ['{B55EFD3A-7639-45F0-A33E-12971B7DAAB7}']
    procedure SetMinMax(nMin: Integer; nMax: Integer); safecall;
    procedure GetMinMax(out nMin: Integer; out nMax: Integer); safecall;
    function Get_MinZoom: Double; safecall;
    function Get_MaxZoom: Double; safecall;
    function Get_Zoom: Double; safecall;
    procedure Set_Zoom(nZoom: Double); safecall;
    function Get_CanUndo: WordBool; safecall;
    function Get_CanRedo: WordBool; safecall;
    procedure Undo; safecall;
    procedure Redo; safecall;
    procedure DiscardChangesHistory; safecall;
    procedure LockChangesHistory; safecall;
    procedure UnlockChangesHistory; safecall;
    procedure BeginHistoryGroup; safecall;
    procedure EndHistoryGroup; safecall;
    function SplitRange(nStartPos: Integer; const pData: IUnknown): ULONG_T; safecall;
    procedure Reset(bClearHistory: WordBool); safecall;
    function Get_RangesCount: ULONG_T; safecall;
    procedure GetRangeFromPos(nPos: Integer; out nRangeIndex: ULONG_T); safecall;
    procedure GetRangeFromXPos(nXPos: Integer; out nRangeIndex: ULONG_T); safecall;
    function Get_SelRange: ULONG_T; safecall;
    procedure Set_SelRange(nRangeIndex: ULONG_T); safecall;
    procedure RemoveRange(nRangeIndex: ULONG_T); safecall;
    procedure GetMinMaxForRange(nRangeIndex: ULONG_T; out nMinPos: Integer; out nMaxPos: Integer); safecall;
    function Get_RangeStart(nRangeIndex: ULONG_T): Integer; safecall;
    procedure Set_RangeStart(nRangeIndex: ULONG_T; nStartPos: Integer); safecall;
    function Get_RangeEnd(nRangeIndex: ULONG_T): Integer; safecall;
    procedure MakeRangeStartVisible(nRangeIndex: ULONG_T); safecall;
    function Get_RangeData(nRangeIndex: ULONG_T): IUnknown; safecall;
    procedure Set_RangeData(nRangeIndex: ULONG_T; const pRangeData: IUnknown); safecall;
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_IsModified: WordBool; safecall;
    procedure ClearModifiedState; safecall;
    procedure SetThumbCallback(const pThumbCallback: IUIX_DrawThumbnailCallback); safecall;
    procedure SetCustomLabelsProvider(const pCustLabelProvider: IUIX_CustomLabelsProvider); safecall;
    procedure UpdateThumb(nPos: Integer); safecall;
    property MinZoom: Double read Get_MinZoom;
    property MaxZoom: Double read Get_MaxZoom;
    property Zoom: Double read Get_Zoom write Set_Zoom;
    property CanUndo: WordBool read Get_CanUndo;
    property CanRedo: WordBool read Get_CanRedo;
    property RangesCount: ULONG_T read Get_RangesCount;
    property SelRange: ULONG_T read Get_SelRange write Set_SelRange;
    property RangeStart[nRangeIndex: ULONG_T]: Integer read Get_RangeStart write Set_RangeStart;
    property RangeEnd[nRangeIndex: ULONG_T]: Integer read Get_RangeEnd;
    property RangeData[nRangeIndex: ULONG_T]: IUnknown read Get_RangeData write Set_RangeData;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property IsModified: WordBool read Get_IsModified;
  end;

// *********************************************************************//
// DispIntf:  IUIX_RangesNavigatorDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B55EFD3A-7639-45F0-A33E-12971B7DAAB7}
// *********************************************************************//
  IUIX_RangesNavigatorDisp = dispinterface
    ['{B55EFD3A-7639-45F0-A33E-12971B7DAAB7}']
    procedure SetMinMax(nMin: Integer; nMax: Integer); dispid 1610809344;
    procedure GetMinMax(out nMin: Integer; out nMax: Integer); dispid 1610809345;
    property MinZoom: Double readonly dispid 1610809346;
    property MaxZoom: Double readonly dispid 1610809347;
    property Zoom: Double dispid 1610809348;
    property CanUndo: WordBool readonly dispid 1610809350;
    property CanRedo: WordBool readonly dispid 1610809351;
    procedure Undo; dispid 1610809352;
    procedure Redo; dispid 1610809353;
    procedure DiscardChangesHistory; dispid 1610809354;
    procedure LockChangesHistory; dispid 1610809355;
    procedure UnlockChangesHistory; dispid 1610809356;
    procedure BeginHistoryGroup; dispid 1610809357;
    procedure EndHistoryGroup; dispid 1610809358;
    function SplitRange(nStartPos: Integer; const pData: IUnknown): ULONG_T; dispid 1610809359;
    procedure Reset(bClearHistory: WordBool); dispid 1610809360;
    property RangesCount: ULONG_T readonly dispid 1610809361;
    procedure GetRangeFromPos(nPos: Integer; out nRangeIndex: ULONG_T); dispid 1610809362;
    procedure GetRangeFromXPos(nXPos: Integer; out nRangeIndex: ULONG_T); dispid 1610809363;
    property SelRange: ULONG_T dispid 1610809364;
    procedure RemoveRange(nRangeIndex: ULONG_T); dispid 1610809366;
    procedure GetMinMaxForRange(nRangeIndex: ULONG_T; out nMinPos: Integer; out nMaxPos: Integer); dispid 1610809367;
    property RangeStart[nRangeIndex: ULONG_T]: Integer dispid 1610809368;
    property RangeEnd[nRangeIndex: ULONG_T]: Integer readonly dispid 1610809370;
    procedure MakeRangeStartVisible(nRangeIndex: ULONG_T); dispid 1610809371;
    property RangeData[nRangeIndex: ULONG_T]: IUnknown dispid 1610809372;
    property NotifyTarget: IUIX_Obj dispid 1610809374;
    property IsModified: WordBool readonly dispid 1610809376;
    procedure ClearModifiedState; dispid 1610809377;
    procedure SetThumbCallback(const pThumbCallback: IUIX_DrawThumbnailCallback); dispid 1610809378;
    procedure SetCustomLabelsProvider(const pCustLabelProvider: IUIX_CustomLabelsProvider); dispid 1610809379;
    procedure UpdateThumb(nPos: Integer); dispid 1610809380;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_DrawThumbnailCallback
// Flags:     (128) NonExtensible
// GUID:      {4AE13C75-9A10-411D-A797-1D21591BEE13}
// *********************************************************************//
  IUIX_DrawThumbnailCallback = interface(IUnknown)
    ['{4AE13C75-9A10-411D-A797-1D21591BEE13}']
    function DrawThumb(const pRC: IUIX_RenderContext; nThumbIdx: Integer; var stCellRect: tagRECT): HResult; stdcall;
    function VerifyThumbRenderTasks(nFirstVisThumbIdx: Integer; nLastVisThumbIdx: Integer; 
                                    var nCellSize: tagSIZE): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_CustomLabelsProvider
// Flags:     (128) NonExtensible
// GUID:      {748A819D-A866-4DB9-ACC2-563DD2774E20}
// *********************************************************************//
  IUIX_CustomLabelsProvider = interface(IUnknown)
    ['{748A819D-A866-4DB9-ACC2-563DD2774E20}']
    function GetCustomLabel(nItemLabelIndex: Integer; out sLabel: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_Ruler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {999A6C12-A602-4601-9866-0B9AE973B7F2}
// *********************************************************************//
  IUIX_Ruler = interface(IUIX_ObjImpl)
    ['{999A6C12-A602-4601-9866-0B9AE973B7F2}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    procedure Update(nOffsetToOrigin: Integer; nTotalSize: Integer; nUnitsCount: Double; 
                     bLazy: WordBool); safecall;
    procedure SetCursorPos(nNewCursorPos: Double); safecall;
    procedure SetCursorColor(nColor: Integer); safecall;
    procedure SetMarkersColor(nColor: Integer); safecall;
    procedure AddMarker(nTag: PARAM_T; nPos: Double; nFlags: Integer); safecall;
    procedure RemoveMarker(nTag: PARAM_T); safecall;
    procedure RemoveAllMarkers; safecall;
    function GetMarkerFromPoint(var stPoint: tagPOINT): PARAM_T; safecall;
    function GetMarkerFlags(nTag: PARAM_T): Integer; safecall;
    procedure SetMarkerFlags(nTag: PARAM_T; nFlags: Integer); safecall;
    procedure SetMarkerColor(nTag: PARAM_T; nColor: Integer); safecall;
    function GetMarkerColor(nTag: PARAM_T): Integer; safecall;
    procedure SetMarkerPos(nTag: PARAM_T; nPos: Double); safecall;
    function GetMarkerPos(nTag: PARAM_T): Double; safecall;
    function Get_ShowFractions: WordBool; safecall;
    procedure Set_ShowFractions(pVal: WordBool); safecall;
    function Get_Inverted: WordBool; safecall;
    procedure Set_Inverted(pVal: WordBool); safecall;
    procedure SetDivisions(var nDivisions: Integer; nDivisionsCount: ULONG_T; nTicksCount: Integer); safecall;
    function Get_IdealSize: Integer; safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property ShowFractions: WordBool read Get_ShowFractions write Set_ShowFractions;
    property Inverted: WordBool read Get_Inverted write Set_Inverted;
    property IdealSize: Integer read Get_IdealSize;
  end;

// *********************************************************************//
// DispIntf:  IUIX_RulerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {999A6C12-A602-4601-9866-0B9AE973B7F2}
// *********************************************************************//
  IUIX_RulerDisp = dispinterface
    ['{999A6C12-A602-4601-9866-0B9AE973B7F2}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    procedure Update(nOffsetToOrigin: Integer; nTotalSize: Integer; nUnitsCount: Double; 
                     bLazy: WordBool); dispid 1610809346;
    procedure SetCursorPos(nNewCursorPos: Double); dispid 1610809347;
    procedure SetCursorColor(nColor: Integer); dispid 1610809348;
    procedure SetMarkersColor(nColor: Integer); dispid 1610809349;
    procedure AddMarker(nTag: PARAM_T; nPos: Double; nFlags: Integer); dispid 1610809350;
    procedure RemoveMarker(nTag: PARAM_T); dispid 1610809351;
    procedure RemoveAllMarkers; dispid 1610809352;
    function GetMarkerFromPoint(var stPoint: {NOT_OLEAUTO(tagPOINT)}OleVariant): PARAM_T; dispid 1610809353;
    function GetMarkerFlags(nTag: PARAM_T): Integer; dispid 1610809354;
    procedure SetMarkerFlags(nTag: PARAM_T; nFlags: Integer); dispid 1610809355;
    procedure SetMarkerColor(nTag: PARAM_T; nColor: Integer); dispid 1610809356;
    function GetMarkerColor(nTag: PARAM_T): Integer; dispid 1610809357;
    procedure SetMarkerPos(nTag: PARAM_T; nPos: Double); dispid 1610809358;
    function GetMarkerPos(nTag: PARAM_T): Double; dispid 1610809359;
    property ShowFractions: WordBool dispid 1610809360;
    property Inverted: WordBool dispid 1610809362;
    procedure SetDivisions(var nDivisions: Integer; nDivisionsCount: ULONG_T; nTicksCount: Integer); dispid 1610809364;
    property IdealSize: Integer readonly dispid 1610809365;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_IndexNavigator
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6CCBAA52-8111-4806-B7EA-E0672F8382CD}
// *********************************************************************//
  IUIX_IndexNavigator = interface(IUIX_ObjImpl)
    ['{6CCBAA52-8111-4806-B7EA-E0672F8382CD}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Set_Count(nCount: ULONG_T); safecall;
    function Get_SelIndex: ULONG_T; safecall;
    procedure Set_SelIndex(nSelIndex: ULONG_T); safecall;
    function Get_IdealHeight: Integer; safecall;
    function Get_Callbacks: IUIX_IndexNavigatorCallbacks; safecall;
    procedure Set_Callbacks(const pCallbacks: IUIX_IndexNavigatorCallbacks); safecall;
    procedure UpdateItems(nStart: Integer; nCount: Integer); safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property Count: ULONG_T read Get_Count write Set_Count;
    property SelIndex: ULONG_T read Get_SelIndex write Set_SelIndex;
    property IdealHeight: Integer read Get_IdealHeight;
    property Callbacks: IUIX_IndexNavigatorCallbacks read Get_Callbacks write Set_Callbacks;
  end;

// *********************************************************************//
// DispIntf:  IUIX_IndexNavigatorDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6CCBAA52-8111-4806-B7EA-E0672F8382CD}
// *********************************************************************//
  IUIX_IndexNavigatorDisp = dispinterface
    ['{6CCBAA52-8111-4806-B7EA-E0672F8382CD}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property Count: ULONG_T dispid 1610809346;
    property SelIndex: ULONG_T dispid 1610809348;
    property IdealHeight: Integer readonly dispid 1610809350;
    property Callbacks: IUIX_IndexNavigatorCallbacks dispid 1610809351;
    procedure UpdateItems(nStart: Integer; nCount: Integer); dispid 1610809353;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_IndexNavigatorCallbacks
// Flags:     (0)
// GUID:      {2ABDF7CA-2EAD-4BCE-969F-64921A8741B4}
// *********************************************************************//
  IUIX_IndexNavigatorCallbacks = interface(IUnknown)
    ['{2ABDF7CA-2EAD-4BCE-969F-64921A8741B4}']
    function IndexNav_OnGetItemFlags(const pIndexNav: IUIX_IndexNavigator; nIndex: Integer; 
                                     out nFlags: Integer): HResult; stdcall;
    function IndexNav_OnGetItemText(const pIndexNav: IUIX_IndexNavigator; nIndex: Integer; 
                                    out sText: PWideChar; out nTextLen: Integer): HResult; stdcall;
    function IndexNav_OnGetItemText2(const pIndexNav: IUIX_IndexNavigator; nIndex: Integer; 
                                     out sText: WideString): HResult; stdcall;
    function IndexNav_OnGetItemTextColor(const pIndexNav: IUIX_IndexNavigator; nIndex: Integer; 
                                         nColorType: Integer; out nColor: Integer): HResult; stdcall;
    function IndexNav_OnCloseItem(const pIndexNav: IUIX_IndexNavigator; nIndex: Integer): HResult; stdcall;
    function IndexNav_OnAddNewItem(const pIndexNav: IUIX_IndexNavigator): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_OriginSelector
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {73075CBA-0FA9-4A85-9922-EE773B6C9FDC}
// *********************************************************************//
  IUIX_OriginSelector = interface(IUIX_ObjImpl)
    ['{73075CBA-0FA9-4A85-9922-EE773B6C9FDC}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    procedure Set_StrokeColor(nColor: Integer); safecall;
    function Get_StrokeColor: Integer; safecall;
    procedure Set_FillColor(nColor: Integer); safecall;
    function Get_FillColor: Integer; safecall;
    procedure Set_PressFillColor(nColor: Integer); safecall;
    function Get_PressFillColor: Integer; safecall;
    procedure Set_SelFillColor(nColor: Integer); safecall;
    function Get_SelFillColor: Integer; safecall;
    procedure Set_HotFillColor(nColor: Integer); safecall;
    function Get_HotFillColor: Integer; safecall;
    procedure Set_HotSelFillColor(nColor: Integer); safecall;
    function Get_HotSelFillColor: Integer; safecall;
    procedure Set_StrokeWidth(nWidth: Integer); safecall;
    function Get_StrokeWidth: Integer; safecall;
    procedure Set_RoundRadius(nRadius: Integer); safecall;
    function Get_RoundRadius: Integer; safecall;
    procedure Set_Tooltip(const sTooltip: WideString); safecall;
    function Get_Tooltip: WideString; safecall;
    procedure Set_SelIndex(nIndex: Integer); safecall;
    function Get_SelIndex: Integer; safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property StrokeColor: Integer read Get_StrokeColor write Set_StrokeColor;
    property FillColor: Integer read Get_FillColor write Set_FillColor;
    property PressFillColor: Integer read Get_PressFillColor write Set_PressFillColor;
    property SelFillColor: Integer read Get_SelFillColor write Set_SelFillColor;
    property HotFillColor: Integer read Get_HotFillColor write Set_HotFillColor;
    property HotSelFillColor: Integer read Get_HotSelFillColor write Set_HotSelFillColor;
    property StrokeWidth: Integer read Get_StrokeWidth write Set_StrokeWidth;
    property RoundRadius: Integer read Get_RoundRadius write Set_RoundRadius;
    property Tooltip: WideString read Get_Tooltip write Set_Tooltip;
    property SelIndex: Integer read Get_SelIndex write Set_SelIndex;
  end;

// *********************************************************************//
// DispIntf:  IUIX_OriginSelectorDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {73075CBA-0FA9-4A85-9922-EE773B6C9FDC}
// *********************************************************************//
  IUIX_OriginSelectorDisp = dispinterface
    ['{73075CBA-0FA9-4A85-9922-EE773B6C9FDC}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property StrokeColor: Integer dispid 1610809346;
    property FillColor: Integer dispid 1610809348;
    property PressFillColor: Integer dispid 1610809350;
    property SelFillColor: Integer dispid 1610809352;
    property HotFillColor: Integer dispid 1610809354;
    property HotSelFillColor: Integer dispid 1610809356;
    property StrokeWidth: Integer dispid 1610809358;
    property RoundRadius: Integer dispid 1610809360;
    property Tooltip: WideString dispid 1610809362;
    property SelIndex: Integer dispid 1610809364;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_Group
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C3E2C472-5A54-4169-98DE-CED5FEDB39F2}
// *********************************************************************//
  IUIX_Group = interface(IUIX_ObjImpl)
    ['{C3E2C472-5A54-4169-98DE-CED5FEDB39F2}']
    function Get_Text: WideString; safecall;
    procedure Set_Text(const sText: WideString); safecall;
    function Get_Tooltip: WideString; safecall;
    procedure Set_Tooltip(const sTooltip: WideString); safecall;
    function Get_Font: IUIX_Font; safecall;
    procedure Set_Font(const pFont: IUIX_Font); safecall;
    function Get_Icon: IUIX_Icon; safecall;
    procedure Set_Icon(const pIcon: IUIX_Icon); safecall;
    function Get_TextColor: Integer; safecall;
    procedure Set_TextColor(nColor: Integer); safecall;
    function Get_DrawTextFlags: Integer; safecall;
    procedure Set_DrawTextFlags(nDrawTextFlags: Integer); safecall;
    procedure AdjustRects(var stClientRect: tagRECT; out stHeaderRect: tagRECT; 
                          out stInnerRect: tagRECT; out stFooterRect: tagRECT); safecall;
    function Get_FooterText: WideString; safecall;
    procedure Set_FooterText(const sText: WideString); safecall;
    function Get_FooterIcon: IUIX_Icon; safecall;
    procedure Set_FooterIcon(const pIcon: IUIX_Icon); safecall;
    function Get_FooterTextColor: Integer; safecall;
    procedure Set_FooterTextColor(nColor: Integer); safecall;
    function Get_FooterDrawTextFlags: Integer; safecall;
    procedure Set_FooterDrawTextFlags(nDrawTextFlags: Integer); safecall;
    function Get_HeaderMinHeight: Integer; safecall;
    procedure Set_HeaderMinHeight(nMinHeight: Integer); safecall;
    function Get_FooterMinHeight: Integer; safecall;
    procedure Set_FooterMinHeight(nMinHeight: Integer); safecall;
    property Text: WideString read Get_Text write Set_Text;
    property Tooltip: WideString read Get_Tooltip write Set_Tooltip;
    property Font: IUIX_Font read Get_Font write Set_Font;
    property Icon: IUIX_Icon read Get_Icon write Set_Icon;
    property TextColor: Integer read Get_TextColor write Set_TextColor;
    property DrawTextFlags: Integer read Get_DrawTextFlags write Set_DrawTextFlags;
    property FooterText: WideString read Get_FooterText write Set_FooterText;
    property FooterIcon: IUIX_Icon read Get_FooterIcon write Set_FooterIcon;
    property FooterTextColor: Integer read Get_FooterTextColor write Set_FooterTextColor;
    property FooterDrawTextFlags: Integer read Get_FooterDrawTextFlags write Set_FooterDrawTextFlags;
    property HeaderMinHeight: Integer read Get_HeaderMinHeight write Set_HeaderMinHeight;
    property FooterMinHeight: Integer read Get_FooterMinHeight write Set_FooterMinHeight;
  end;

// *********************************************************************//
// DispIntf:  IUIX_GroupDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C3E2C472-5A54-4169-98DE-CED5FEDB39F2}
// *********************************************************************//
  IUIX_GroupDisp = dispinterface
    ['{C3E2C472-5A54-4169-98DE-CED5FEDB39F2}']
    property Text: WideString dispid 1610809344;
    property Tooltip: WideString dispid 1610809346;
    property Font: IUIX_Font dispid 1610809348;
    property Icon: IUIX_Icon dispid 1610809350;
    property TextColor: Integer dispid 1610809352;
    property DrawTextFlags: Integer dispid 1610809354;
    procedure AdjustRects(var stClientRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                          out stHeaderRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                          out stInnerRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                          out stFooterRect: {NOT_OLEAUTO(tagRECT)}OleVariant); dispid 1610809356;
    property FooterText: WideString dispid 1610809357;
    property FooterIcon: IUIX_Icon dispid 1610809359;
    property FooterTextColor: Integer dispid 1610809361;
    property FooterDrawTextFlags: Integer dispid 1610809363;
    property HeaderMinHeight: Integer dispid 1610809365;
    property FooterMinHeight: Integer dispid 1610809367;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_CmdColorBtn
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A527388D-E382-4227-BDAA-D8278C7B1924}
// *********************************************************************//
  IUIX_CmdColorBtn = interface(IUIX_ObjImpl)
    ['{A527388D-E382-4227-BDAA-D8278C7B1924}']
    function Get_Color: IColor; safecall;
    procedure Set_Color(const pColor: IColor); safecall;
    function Get_ColorPicker: IUIX_ColorPicker; safecall;
    property Color: IColor read Get_Color write Set_Color;
    property ColorPicker: IUIX_ColorPicker read Get_ColorPicker;
  end;

// *********************************************************************//
// DispIntf:  IUIX_CmdColorBtnDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A527388D-E382-4227-BDAA-D8278C7B1924}
// *********************************************************************//
  IUIX_CmdColorBtnDisp = dispinterface
    ['{A527388D-E382-4227-BDAA-D8278C7B1924}']
    property Color: IColor dispid 1610809344;
    property ColorPicker: IUIX_ColorPicker readonly dispid 1610809346;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_ControlsLock
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {78874680-AE90-4F97-8236-5016AFFE6569}
// *********************************************************************//
  IUIX_ControlsLock = interface(IUIX_ObjImpl)
    ['{78874680-AE90-4F97-8236-5016AFFE6569}']
    function Get_NotifyTarget: IUIX_Obj; safecall;
    procedure Set_NotifyTarget(const pTarget: IUIX_Obj); safecall;
    procedure Set_LockImage(const pImage: IUnknown); safecall;
    function Get_LockImage: IUnknown; safecall;
    procedure Set_UnLockImage(const pImage: IUnknown); safecall;
    function Get_UnLockImage: IUnknown; safecall;
    procedure Set_StrokeColor(nColor: Integer); safecall;
    function Get_StrokeColor: Integer; safecall;
    procedure Set_HotLineColor(nColor: Integer); safecall;
    function Get_HotLineColor: Integer; safecall;
    procedure Set_StrokeWidth(nWidth: Integer); safecall;
    function Get_StrokeWidth: Integer; safecall;
    procedure Set_RoundRadius(nRadius: Integer); safecall;
    function Get_RoundRadius: Integer; safecall;
    procedure Set_Tooltip(const sTooltip: WideString); safecall;
    function Get_Tooltip: WideString; safecall;
    procedure AddRelation(nCtlID: Integer); safecall;
    procedure AddRelation2(nCtlID: Integer; var stRelPoint: tagPOINT); safecall;
    procedure RemoveRelation(nCtlID: Integer); safecall;
    procedure RemoveAllRelations; safecall;
    procedure Set_Vertical(bVert: WordBool); safecall;
    function Get_Vertical: WordBool; safecall;
    procedure Set_Locked(bLock: WordBool); safecall;
    function Get_Locked: WordBool; safecall;
    procedure Update; safecall;
    property NotifyTarget: IUIX_Obj read Get_NotifyTarget write Set_NotifyTarget;
    property LockImage: IUnknown read Get_LockImage write Set_LockImage;
    property UnLockImage: IUnknown read Get_UnLockImage write Set_UnLockImage;
    property StrokeColor: Integer read Get_StrokeColor write Set_StrokeColor;
    property HotLineColor: Integer read Get_HotLineColor write Set_HotLineColor;
    property StrokeWidth: Integer read Get_StrokeWidth write Set_StrokeWidth;
    property RoundRadius: Integer read Get_RoundRadius write Set_RoundRadius;
    property Tooltip: WideString read Get_Tooltip write Set_Tooltip;
    property Vertical: WordBool read Get_Vertical write Set_Vertical;
    property Locked: WordBool read Get_Locked write Set_Locked;
  end;

// *********************************************************************//
// DispIntf:  IUIX_ControlsLockDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {78874680-AE90-4F97-8236-5016AFFE6569}
// *********************************************************************//
  IUIX_ControlsLockDisp = dispinterface
    ['{78874680-AE90-4F97-8236-5016AFFE6569}']
    property NotifyTarget: IUIX_Obj dispid 1610809344;
    property LockImage: IUnknown dispid 1610809346;
    property UnLockImage: IUnknown dispid 1610809348;
    property StrokeColor: Integer dispid 1610809350;
    property HotLineColor: Integer dispid 1610809352;
    property StrokeWidth: Integer dispid 1610809354;
    property RoundRadius: Integer dispid 1610809356;
    property Tooltip: WideString dispid 1610809358;
    procedure AddRelation(nCtlID: Integer); dispid 1610809360;
    procedure AddRelation2(nCtlID: Integer; var stRelPoint: {NOT_OLEAUTO(tagPOINT)}OleVariant); dispid 1610809361;
    procedure RemoveRelation(nCtlID: Integer); dispid 1610809362;
    procedure RemoveAllRelations; dispid 1610809363;
    property Vertical: WordBool dispid 1610809364;
    property Locked: WordBool dispid 1610809366;
    procedure Update; dispid 1610809368;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IUIX_PropHost
// Flags:     (128) NonExtensible
// GUID:      {E887AB04-2321-45FC-9BA0-2C9C8F42FB78}
// *********************************************************************//
  IUIX_PropHost = interface(IUnknown)
    ['{E887AB04-2321-45FC-9BA0-2C9C8F42FB78}']
    function Get_type_(out nType: Integer): HResult; stdcall;
    function Get_UID(out nID: Integer): HResult; stdcall;
    function Get_Title(out sTitle: WideString): HResult; stdcall;
    function Get_GroupsCount(out nCount: Integer): HResult; stdcall;
    function GroupID2Index(nGroupID: Integer; out pGroupID: Integer): HResult; stdcall;
    function GetGroupInfo(nGroupIndex: Integer; out pGroupID: Integer; out ppTitle: WideString; 
                          out ppDesc: WideString; out pIcon: IUIX_Icon; out pClosed: WordBool): HResult; stdcall;
    function Get_PropsCount(out nCount: Integer): HResult; stdcall;
    function PropID2Index(nPropID: Integer; out nPropIndex: Integer): HResult; stdcall;
    function GetPropInfo(nPropIndex: Integer; out pPropInfo: IUIX_PropInfo): HResult; stdcall;
    function GetPropValue(nPropID: Integer; out bFullUpdate: WordBool; out Val: OleVariant): HResult; stdcall;
    function OnSetPropValue(nPropID: Integer; const NewVal: OleVariant): HResult; stdcall;
    function OnGetNewPropCtl(nPropID: Integer; const pParent: IUIX_Obj; nPropStyle: Integer; 
                             out pNewPropCtl: IUIX_Obj): HResult; stdcall;
    function OnDrawPropTitle(const pRC: IUIX_RenderContext; nPropID: Integer; sTitle: PWideChar; 
                             nTitleLen: Integer; const pFont: IUIX_Font; nTextColor: Integer; 
                             var stItemRect: tagRECT; var stClipRect: tagRECT; nPropStyle: Integer): HResult; stdcall;
    function OnDrawPropValue(const pRC: IUIX_RenderContext; nPropID: Integer; 
                             const Value: OleVariant; sDispValue: PWideChar; 
                             nDispValueLen: Integer; const pFont: IUIX_Font; nTextColor: Integer; 
                             var stItemRect: tagRECT; var stClipRect: tagRECT; nPropStyle: Integer): HResult; stdcall;
    function OnUpdatePropCtl(nPropID: Integer; const pPropCtl: IUIX_Obj; bFirst: WordBool): HResult; stdcall;
    function OnPropCtlNotify(nPropID: Integer; const pPropCtl: IUIX_Obj; const pEvent: IUIX_Event): HResult; stdcall;
    function OnShowProps(const pCtx: IUnknown; const pPropsBar: IUIX_CmdBar; 
                         const pPropList: IUIX_PropList; bShow: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_PropInfo
// Flags:     (128) NonExtensible
// GUID:      {F253D679-1459-448D-B283-662005819BCB}
// *********************************************************************//
  IUIX_PropInfo = interface(IUnknown)
    ['{F253D679-1459-448D-B283-662005819BCB}']
    function Get_GroupID(out nGroupID: Integer): HResult; stdcall;
    function Get_ID(out nID: Integer): HResult; stdcall;
    function Get_type_(out nVal: Integer): HResult; stdcall;
    function Get_Style(out nVal: Integer): HResult; stdcall;
    function Get_Title(out sVal: WideString): HResult; stdcall;
    function Get_Desc(out sVal: WideString): HResult; stdcall;
    function Get_EmptyCue(out sVal: WideString): HResult; stdcall;
    function Get_UndefinedCue(out sVal: WideString): HResult; stdcall;
    function Get_ButtonTip(out sVal: WideString): HResult; stdcall;
    function Get_DispValue(out sVal: WideString): HResult; stdcall;
    function Get_CtlHeight(out nVal: Integer): HResult; stdcall;
    function Get_NamedValuesCount(out nCount: Integer): HResult; stdcall;
    function GetNamedValue(nIndex: Integer; out sName: WideString; out pIcon: IUIX_Icon): HResult; stdcall;
    function Get_NamedNumValuesCount(out nCount: Integer): HResult; stdcall;
    function GetNamedNumValue(nIndex: Integer; out sName: WideString; out nValue: Double): HResult; stdcall;
    function GetNumFormat(out pMin: Double; out pMax: Double; out pDispCoef: Double; 
                          out pDispPrec: Integer; out pTrimTrailingZeros: WordBool; 
                          out ppDispPattern: WideString; out pScrollStep: Double; 
                          out ppAllowedChars: WideString): HResult; stdcall;
    function Get_NumEditFilter(out pFilter: IUIX_NumEditFilter): HResult; stdcall;
    function Get_Hint(out sHint: WideString): HResult; stdcall;
    function Get_EditFilter(out pFilter: IUIX_EditFilterCallbacks): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IUIX_PropList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {34C6E22F-8BE0-454F-9BEB-0AA6BAD031D0}
// *********************************************************************//
  IUIX_PropList = interface(IUIX_ObjImpl)
    ['{34C6E22F-8BE0-454F-9BEB-0AA6BAD031D0}']
    function Get_PropHost: IUIX_PropHost; safecall;
    procedure ShowProps(const pPropHost: IUIX_PropHost); safecall;
    procedure UpdateProps(nPropID: Integer; nUpdateFlags: Integer); safecall;
    property PropHost: IUIX_PropHost read Get_PropHost;
  end;

// *********************************************************************//
// DispIntf:  IUIX_PropListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {34C6E22F-8BE0-454F-9BEB-0AA6BAD031D0}
// *********************************************************************//
  IUIX_PropListDisp = dispinterface
    ['{34C6E22F-8BE0-454F-9BEB-0AA6BAD031D0}']
    property PropHost: IUIX_PropHost readonly dispid 1610809344;
    procedure ShowProps(const pPropHost: IUIX_PropHost); dispid 1610809345;
    procedure UpdateProps(nPropID: Integer; nUpdateFlags: Integer); dispid 1610809346;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: ICabbedObject
// Flags:     (0)
// GUID:      {825CEFB3-61C7-439C-90C2-4E102005DFB5}
// *********************************************************************//
  ICabbedObject = interface(IUnknown)
    ['{825CEFB3-61C7-439C-90C2-4E102005DFB5}']
    function Get_ClassID(out stStClsid: TGUID): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICabbedObjectClass
// Flags:     (0)
// GUID:      {EA9637FA-8440-48E8-8C39-9F92B1E2A87A}
// *********************************************************************//
  ICabbedObjectClass = interface(IUnknown)
    ['{EA9637FA-8440-48E8-8C39-9F92B1E2A87A}']
    function LoadObject(var stStClsid: TGUID; const pCabDic: ICabNode; out pObject: IUnknown): HResult; stdcall;
    function SaveObject(var stStClsid: TGUID; const pObject: IUnknown; const pCabDic: ICabNode): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICabTemplate
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {53D6E3DD-6F2C-45BC-8B43-D74267B6BBB8}
// *********************************************************************//
  ICabTemplate = interface(IDispatch)
    ['{53D6E3DD-6F2C-45BC-8B43-D74267B6BBB8}']
    procedure Compile(const pRoot: WideString); safecall;
    function CreateCab(const pRoot: WideString): ICab; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICabTemplateDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {53D6E3DD-6F2C-45BC-8B43-D74267B6BBB8}
// *********************************************************************//
  ICabTemplateDisp = dispinterface
    ['{53D6E3DD-6F2C-45BC-8B43-D74267B6BBB8}']
    procedure Compile(const pRoot: WideString); dispid 1610743808;
    function CreateCab(const pRoot: WideString): ICab; dispid 1610743809;
  end;

// *********************************************************************//
// Interface: IPXV_Inst
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D726366D-34D6-49FC-A341-7B84C54CCA3E}
// *********************************************************************//
  IPXV_Inst = interface(IDispatch)
    ['{D726366D-34D6-49FC-A341-7B84C54CCA3E}']
    function Get_ThreadID: Integer; safecall;
    function CreateString(const sInitial: WideString): IString; safecall;
    procedure Init(const pCtx: IUnknown; const pLicKey: WideString; 
                   const pUserSettingsSrc: IUnknown; const pHistorySrc: IUnknown; 
                   const pHistoryThumbsSrc: IUnknown; nFlags: Integer; const pReserved: IUnknown); safecall;
    procedure SaveUserSettings(const pUserSettingsDest: IUnknown; nFlags: Integer); safecall;
    procedure Shutdown(nFlags: Integer); safecall;
    procedure CreateNewMainFrm(hWndParent: HANDLE_T; var stPos: tagRECT; nCreateFlags: Integer; 
                               out pMainFrm: IPXV_MainFrame); safecall;
    function Get_MainFrmCount: ULONG_T; safecall;
    function Get_MainFrm(nIndex: ULONG_T): IPXV_MainFrame; safecall;
    function Get_ActiveMainFrm: IPXV_MainFrame; safecall;
    function Get_ActiveDocView: IPXV_DocumentView; safecall;
    function Get_ActiveMainView: IPXV_MainView; safecall;
    function Get_ActiveDoc: IPXV_Document; safecall;
    procedure Set_ActiveDoc(const pActiveDoc: IPXV_Document); safecall;
    function Get_DocCount: ULONG_T; safecall;
    function Get_Doc(nIndex: ULONG_T): IPXV_Document; safecall;
    function FindDocByID(nDocID: ULONG_T): IPXV_Document; safecall;
    function FindDocByCoreDoc(const pCoreDoc: IPXC_Document): IPXV_Document; safecall;
    function FindDocBySrcFile(const pSrcFile: IAFS_File): IPXV_Document; safecall;
    function FindDocBySrcFileName(const pSrcFileName: IAFS_Name): IPXV_Document; safecall;
    function FindDocBySrcFileName2(const sSrcFileName: WideString; bDIPath: WordBool): IPXV_Document; safecall;
    procedure RegisterExtension(const sName: WideString; const pExtension: IUnknown); safecall;
    function GetExtension(const sName: WideString): IUnknown; safecall;
    procedure StartLoadingPlugins; safecall;
    procedure FinishLoadingPlugins; safecall;
    procedure AddPluginFromFile(const sFileName: WideString); safecall;
    procedure AddPlugin(const pPlugin: IPXV_Plugin); safecall;
    procedure RegisterActionHandler(const pHandler: IPXV_ActionHandler); safecall;
    function GetHandlerForAction(nActionType: ULONG_T): IPXV_ActionHandler; safecall;
    function Get_ActionHandlersCount: ULONG_T; safecall;
    function Get_ActionHandler(nIndex: ULONG_T): IPXV_ActionHandler; safecall;
    procedure RegisterViewCreator(const pViewCreator: IPXV_ViewCreator); safecall;
    procedure UnregisterViewCreator(const pViewCreator: IPXV_ViewCreator); safecall;
    function GetStdFolder(nFolderID: PXV_StdFolderID; bUser: WordBool; bCreateIfNotExists: WordBool): WideString; safecall;
    procedure SetStdFolder(nFolderID: PXV_StdFolderID; const sFolderPath: WideString; 
                           bUser: WordBool); safecall;
    function Get_IsPortable: WordBool; safecall;
    procedure AddDefaultTranslationData(const pDefaultTranslationXml: IStream); safecall;
    function GetLocalStr(const sStrID: WideString): WideString; safecall;
    function GetLocalStr2(nStrID: Integer): WideString; safecall;
    function Str2ID(const sStr: WideString; bAddIfNotExists: WordBool): Integer; safecall;
    function ID2Str(nID: Integer): WideString; safecall;
    function GetPluginSettings(const pPlugin: IPXV_Plugin; bCreateIfNotExists: WordBool): ICabNode; safecall;
    function ShowOpenFilesDlg(const pFileFilters: WideString; const pInitialFolderName: WideString; 
                              bAllowMult: WordBool; const pDlgTitle: WideString; 
                              hWndParent: HANDLE_T; bShowHidden: WordBool; nFilterIndex: Integer): IPXV_OpenFilesDlgRes; safecall;
    function ShowSaveFileDlg(const pFileFilters: WideString; const pInitialFolderName: WideString; 
                             const pInitialFileName: WideString; const pDefaultExt: WideString; 
                             const pDlgTitle: WideString; hWndParent: HANDLE_T; 
                             bOverwritePrompt: WordBool; bShowHidden: WordBool; 
                             nFilterIndex: Integer): IPXV_SaveFileDlgRes; safecall;
    function ShowSelectFolderDlg(const pInitialFolderName: WideString; const pDlgTitle: WideString; 
                                 hWndParent: HANDLE_T; bCanAddNew: WordBool): IAFS_Name; safecall;
    function GetTextFromHRes(hRes: HResult; bShort: WordBool): WideString; safecall;
    procedure RegisterTool(const pTool: IPXV_Tool); safecall;
    function GetTool(nTooID: Integer): IPXV_Tool; safecall;
    function Get_DefaultTool: IPXV_Tool; safecall;
    procedure Set_DefaultTool(const pTool: IPXV_Tool); safecall;
    function Get_DefaultToolID: Integer; safecall;
    function Get_LastActiveTool: IPXV_Tool; safecall;
    function Get_LastActiveToolID: Integer; safecall;
    function Get_EventServer: IEventServer; safecall;
    function StartTimer(const pTimerHandler: IPXV_TimerHandler; nElapse: ULONG_T; nFlags: ULONG_T): LONG_PTR; safecall;
    procedure RestartTimer(nTimerID: LONG_PTR; nNewElapse: ULONG_T); safecall;
    procedure StopTimer(nTimerID: LONG_PTR); safecall;
    procedure StopAllTimers(const pTimerHandler: IPXV_TimerHandler); safecall;
    procedure PerformActions(const pDoc: IPXV_Document; const pAList: IPXC_ActionsList; 
                             nClass: PXV_ActionTriggerClass; nSubclass: PXV_ActionTriggerSubclass; 
                             const pActionData: IUnknown); safecall;
    function ShowEditActionListDlg(const pDoc: IPXC_Document; const pActions: IPXC_ActionsList; 
                                   hWndParent: HANDLE_T): IPXC_ActionsList; safecall;
    procedure ExecuteJS(const pDoc: IPXV_Document; sScript: PWideChar; 
                        nClass: PXV_ActionTriggerClass; nSubclass: PXV_ActionTriggerSubclass; 
                        const pActionData: IUnknown; const pResult: IString); safecall;
    procedure ShowChooseFontDlg(const pIDoc: IPXC_Document; var pFontParams: ICabNode); safecall;
    function GetAnnotHandler(const pAnnot: IPXC_Annotation): IPXV_AnnotHandler; safecall;
    procedure RegisterImportConverter(const pConverter: IPXV_ImportConverter); safecall;
    procedure RegisterExportConverter(const pConverter: IPXV_ExportConverter); safecall;
    function Get_DefaultProgressMon: IProgressMon; safecall;
    function Get_ProgressMon: IProgressMon; safecall;
    procedure Set_ProgressMon(const pProgressMon: IProgressMon); safecall;
    function Get_AnnotStateModelManager: IPXV_AnnotStateModelManager; safecall;
    procedure ThreadSafeCall(const pCb: IPXV_ThreadSafeCallback; bWaitWithMsgLoop: WordBool); safecall;
    procedure RegisterDocSelectionHandler(const pSelHandler: IPXV_DocSelectionHandler); safecall;
    procedure UnregisterDocSelectionHandler(const pSelHandler: IPXV_DocSelectionHandler); safecall;
    function GetDocSelectionHandler(const pDoc: IPXV_Document; const pDocSel: IPXV_DocSelection): IPXV_DocSelectionHandler; safecall;
    procedure UpdateProps(bLazy: WordBool; bFull: WordBool); safecall;
    function GetPrinters: IUniqueStrings; safecall;
    function CreateBookmList: IPXV_BookmList; safecall;
    function CreateAnnotsList: IPXV_AnnotsList; safecall;
    function CreateOpenDocParams: ICab; safecall;
    procedure SaveHistory(const pHistoryDest: IUnknown; const pHistoryThumbsDest: IUnknown; 
                          nFlags: Integer); safecall;
    procedure AsyncDoAndWaitForFinish(const pOp: IOperation; nOpExecFlags: ULONG_T); safecall;
    function CreateOp(nOpID: Integer): IOperation; safecall;
    procedure RegisterOpCreator(const pOpCreator: IPXV_OperationsCreator); safecall;
    procedure UnregisterOpCreator(const pOpCreator: IPXV_OperationsCreator); safecall;
    function Get_State: ULONG_T; safecall;
    function Get_SelectedStamp: IPXC_StampInfo; safecall;
    procedure Set_SelectedStamp(const pStamp: IPXC_StampInfo); safecall;
    procedure ExecUICmd(const sCmdID: WideString; const pOwner: IUIX_Obj); safecall;
    procedure ExecUICmd2(nCmdID: Integer; const pOwner: IUIX_Obj); safecall;
    procedure UpdateProp(nPropID: Integer; nUpdateFlags: Integer; const pPropHost: IUIX_PropHost); safecall;
    procedure FireAppPrefsChanged(nFlagIndex: PXV_AppPrefsChanges; const pCumulChangeFlags: IBitSet); safecall;
    procedure FireAppPrefsChanged2(const pChangeFlags: IBitSet); safecall;
    function GetDlgParentWindow(const pRDoc: IPXC_Document): HANDLE_T; safecall;
    function Get_CommentStylesManager: IPXV_CommentStylesManager; safecall;
    procedure AsyncDo(const pOp: IOperation; nOpExecFlags: ULONG_T; 
                      const pAsyncDoCb: IPXV_AsyncDoCallback); safecall;
    procedure FireCmdCustomizationEvent(const pSource: IUIX_Obj; nFlags: Integer); safecall;
    procedure ShowCmdBar(const sBarID: WideString; bShow: WordBool); safecall;
    function IsCmdBarVisible(const sBarID: WideString): WordBool; safecall;
    procedure ShowCmdBar2(nBarID: Integer; bShow: WordBool); safecall;
    function IsCmdBarVisible2(nBarID: Integer): WordBool; safecall;
    procedure ResetCmdCustomization(nFlags: Integer); safecall;
    function Get_Settings: ICabNode; safecall;
    procedure ClearHistory(bSilent: WordBool); safecall;
    procedure ModifyCoreDoc(const pCoreDoc: IPXC_Document; nModType: PXC_DocModifyType; 
                            nModCount: Integer); safecall;
    procedure ModifyDoc(const pDoc: IPXV_Document; nModType: PXC_DocModifyType; nModCount: Integer); safecall;
    function Get_IsHistoryLoaded: WordBool; safecall;
    function CreateStdPresetsCallbacks(const sPathToPresetsArr: WideString; 
                                       const pCustomIoCallbacks: IPXV_PresetsIoCallbacks; 
                                       const pCustomStorage: ICab; nListStyle: Integer): IPXV_PresetsListCallbacks; safecall;
    function CreateStdPresetsButton(const pBtnObj: IUIX_Obj; 
                                    const pCallbacks: IPXV_PresetsListCallbacks): IPXV_PresetsButton; safecall;
    function Get_DispMeasureUnit: MeasureUnit; safecall;
    procedure GetMeasureUnitInfo(nUnit: MeasureUnit; out sName: WideString; 
                                 out sShortName: WideString; out nPt2UnitCoef: Double; 
                                 out nDispPrec: Integer); safecall;
    procedure SetupMeasureEditFilter(const pEditFilter: IUIX_NumEditFilter; nCurUnit: MeasureUnit; 
                                     nMin: Double; nMax: Double; nAdvDispCoef: Double; 
                                     nStep: Double; bNegative: WordBool); safecall;
    function FormatMeasureValue(nValueInPoints: Double; nDestUnit: MeasureUnit; nFmtFlags: Integer): WideString; safecall;
    function FormatNumber(nNum: Double; nDispPrec: Integer; bKeepZeroTrailers: WordBool; 
                          bAllowGrouping: WordBool): WideString; safecall;
    function Str2Number(const sStr: WideString; bSigned: WordBool; out bOK: WordBool): Double; safecall;
    function FormatFileSize(nSize: Largeuint; bShort: WordBool): WideString; safecall;
    procedure CreateMeasureUnitsConvTbl(var pConvTbl: IUIX_NumEditFilterConvTbl); safecall;
    function CreatePageSizeCtl: IPXV_PageSizeCtl; safecall;
    function CreateStdRangeCtl(const pDlgDlg: IUIX_Obj; const pSrcRange: IRangeHelper): IPXV_RangeCtl; safecall;
    function Get_EventsRegistry: IEventsRegistry; safecall;
    procedure SyncronizeAllDocPanesLayouts(bLazy: WordBool); safecall;
    function ShowCreateFileErrDlg(const pFileName: IAFS_Name; hErr: HResult; hWndParent: HANDLE_T; 
                                  nFlags: Integer; out pNewFileName: IAFS_Name): Integer; safecall;
    function NewCoreDoc(const pNewDocParams: ICab): IPXC_Document; safecall;
    procedure SetReservedLowMemory(pMemory: Pointer; cbMemory: ULONG_PTR); safecall;
    function Get_APIVersion: ULONG_T; safecall;
    function Get_AppType: ULONG_T; safecall;
    function Get_ImportConvertersCount: ULONG_T; safecall;
    function Get_ImportConverter(nIndex: ULONG_T): IPXV_ImportConverter; safecall;
    function Get_ExportConvertersCount: ULONG_T; safecall;
    function Get_ExportConverter(nIndex: ULONG_T): IPXV_ExportConverter; safecall;
    procedure SyncronizeCmdCustomization(const pISource: IUIX_Obj; nFlags: Integer; 
                                         bFireEvent: WordBool); safecall;
    procedure LockCmdCustomizationEvent; safecall;
    procedure UnlockCmdCustomizationEvent; safecall;
    function ShowMsgBox(const sText: WideString; const sTitle: WideString; 
                        const sHeader: WideString; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR; safecall;
    function ShowMsgBoxWithOpt(const sText: WideString; const sTitle: WideString; 
                               const sHeader: WideString; const sOptionText: WideString; 
                               var nOptionState: Integer; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR; safecall;
    function ShowMsgBoxEx(var pConfig: UIX_MsgBoxConfig; out pOptionState: Integer; 
                          out pSelectedRadioID: Integer; out ppEditText: WideString): LONG_PTR; safecall;
    function PathToName(sPath: PWideChar; bDIPath: WordBool; const sFSName: WideString; 
                        bAllowAuth: WordBool; hWndParent: HANDLE_T): IAFS_Name; safecall;
    function GetUILanguages: IPXV_UILanguages; safecall;
    procedure SetCurrentUILang(sLangCode: PWideChar); safecall;
    function GetCurrentUILang: WideString; safecall;
    function GetDefaultPrinter: WideString; safecall;
    function CreateStdBindContext: IAFS_BindContext; safecall;
    function GetDocViewFromUIObj(const pObj: IUIX_Obj; bGetActiveIfNotFound: WordBool): IPXV_DocumentView; safecall;
    function GetMainViewFromUIObj(const pObj: IUIX_Obj; bGetActiveIfNotFound: WordBool): IPXV_MainView; safecall;
    procedure RegisterSignatureProvider(const pProvider: IPXV_SignatureProvider); safecall;
    function Get_ActiveMainFrmWndHandle: HANDLE_T; safecall;
    function GetLocalStrID(const sStrID: WideString): WideString; safecall;
    function GetLocalStrID2(nStrID: Integer): WideString; safecall;
    function RevertDoc(const pDoc: IPXV_Document; const pNewTempData: IAFS_File): IPXV_Document; safecall;
    function ExpandOpenFileFilterAlias(pFilterAlias: PWideChar; nFlags: Integer): WideString; safecall;
    function CreatePagesPreviewCtl(const pParent: IUIX_Obj; var pRect: tagRECT; 
                                   const pID: WideString; nStyle: Int64; nScrollStyle: Int64; 
                                   bWindowed: WordBool): IPXV_PagesPreviewCtl; safecall;
    function CreateFileNamesProvider: IPXV_FileNamesProvider; safecall;
    function GetFormatConverterParams(bImport: WordBool; sConvID: PWideChar): ICab; safecall;
    procedure SetFormatConverterParams(bImport: WordBool; pConvID: PWideChar; 
                                       const pNewParams: ICabNode); safecall;
    function GetFormatConverterIndex(bImport: WordBool; pConvID: PWideChar): Integer; safecall;
    function CreateAttachList: IPXV_AttachList; safecall;
    function CreateDocList: IPXV_DocList; safecall;
    function CreateMacroHelper: IPXV_MacroHelper; safecall;
    procedure SetMainWindow(hWndMain: HANDLE_T); safecall;
    procedure LoadUserSettings(const pUserSettingsSrc: IUnknown; nFlags: Integer); safecall;
    function ExecuteJSEx(const pCoreDoc: IPXC_Document; sScript: PWideChar; 
                         nClass: PXV_ActionTriggerClass; nSubclass: PXV_ActionTriggerSubclass; 
                         const pActionData: IUnknown): IPXV_JSValue; safecall;
    function Get_JSCodeSnippets: IPXV_JSCodeSnippetsStorage; safecall;
    function EditImageFmtParams(const pFmtParams: IIXC_ImageFmtParams; hWndParent: HANDLE_T; 
                                nFlags: Integer): WordBool; safecall;
    function EditImage(const pImage: IUnknown; hWndParent: HANDLE_T; const sDlgTitle: WideString; 
                       nFlags: Integer): IIXC_Image; safecall;
    function ShowAppPrefsDlg(hWndParent: HANDLE_T; const sActivePageID: WideString; 
                             const sActiveCtlID: WideString): WordBool; safecall;
    procedure EnableRibbonUI(bEnable: WordBool); safecall;
    procedure RegisterDocInfoBarSpan(sSpanID: PWideChar; sTitle: PWideChar; sDesc: PWideChar; 
                                     nWeight: Integer; nColor: Integer; const pIcon: IUIX_Icon); safecall;
    procedure ShowRibbonTab(const sTabID: WideString; bShow: WordBool); safecall;
    procedure ShowRibbonTab2(nTabID: Integer; bShow: WordBool); safecall;
    property ThreadID: Integer read Get_ThreadID;
    property MainFrmCount: ULONG_T read Get_MainFrmCount;
    property MainFrm[nIndex: ULONG_T]: IPXV_MainFrame read Get_MainFrm;
    property ActiveMainFrm: IPXV_MainFrame read Get_ActiveMainFrm;
    property ActiveDocView: IPXV_DocumentView read Get_ActiveDocView;
    property ActiveMainView: IPXV_MainView read Get_ActiveMainView;
    property ActiveDoc: IPXV_Document read Get_ActiveDoc write Set_ActiveDoc;
    property DocCount: ULONG_T read Get_DocCount;
    property Doc[nIndex: ULONG_T]: IPXV_Document read Get_Doc;
    property ActionHandlersCount: ULONG_T read Get_ActionHandlersCount;
    property ActionHandler[nIndex: ULONG_T]: IPXV_ActionHandler read Get_ActionHandler;
    property IsPortable: WordBool read Get_IsPortable;
    property DefaultTool: IPXV_Tool read Get_DefaultTool write Set_DefaultTool;
    property DefaultToolID: Integer read Get_DefaultToolID;
    property LastActiveTool: IPXV_Tool read Get_LastActiveTool;
    property LastActiveToolID: Integer read Get_LastActiveToolID;
    property EventServer: IEventServer read Get_EventServer;
    property DefaultProgressMon: IProgressMon read Get_DefaultProgressMon;
    property ProgressMon: IProgressMon read Get_ProgressMon write Set_ProgressMon;
    property AnnotStateModelManager: IPXV_AnnotStateModelManager read Get_AnnotStateModelManager;
    property State: ULONG_T read Get_State;
    property SelectedStamp: IPXC_StampInfo read Get_SelectedStamp write Set_SelectedStamp;
    property CommentStylesManager: IPXV_CommentStylesManager read Get_CommentStylesManager;
    property Settings: ICabNode read Get_Settings;
    property IsHistoryLoaded: WordBool read Get_IsHistoryLoaded;
    property DispMeasureUnit: MeasureUnit read Get_DispMeasureUnit;
    property EventsRegistry: IEventsRegistry read Get_EventsRegistry;
    property APIVersion: ULONG_T read Get_APIVersion;
    property AppType: ULONG_T read Get_AppType;
    property ImportConvertersCount: ULONG_T read Get_ImportConvertersCount;
    property ImportConverter[nIndex: ULONG_T]: IPXV_ImportConverter read Get_ImportConverter;
    property ExportConvertersCount: ULONG_T read Get_ExportConvertersCount;
    property ExportConverter[nIndex: ULONG_T]: IPXV_ExportConverter read Get_ExportConverter;
    property ActiveMainFrmWndHandle: HANDLE_T read Get_ActiveMainFrmWndHandle;
    property JSCodeSnippets: IPXV_JSCodeSnippetsStorage read Get_JSCodeSnippets;
  end;

// *********************************************************************//
// DispIntf:  IPXV_InstDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D726366D-34D6-49FC-A341-7B84C54CCA3E}
// *********************************************************************//
  IPXV_InstDisp = dispinterface
    ['{D726366D-34D6-49FC-A341-7B84C54CCA3E}']
    property ThreadID: Integer readonly dispid 1610743808;
    function CreateString(const sInitial: WideString): IString; dispid 1610743809;
    procedure Init(const pCtx: IUnknown; const pLicKey: WideString; 
                   const pUserSettingsSrc: IUnknown; const pHistorySrc: IUnknown; 
                   const pHistoryThumbsSrc: IUnknown; nFlags: Integer; const pReserved: IUnknown); dispid 1610743810;
    procedure SaveUserSettings(const pUserSettingsDest: IUnknown; nFlags: Integer); dispid 1610743811;
    procedure Shutdown(nFlags: Integer); dispid 1610743812;
    procedure CreateNewMainFrm(hWndParent: HANDLE_T; var stPos: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                               nCreateFlags: Integer; out pMainFrm: IPXV_MainFrame); dispid 1610743813;
    property MainFrmCount: ULONG_T readonly dispid 1610743814;
    property MainFrm[nIndex: ULONG_T]: IPXV_MainFrame readonly dispid 1610743815;
    property ActiveMainFrm: IPXV_MainFrame readonly dispid 1610743816;
    property ActiveDocView: IPXV_DocumentView readonly dispid 1610743817;
    property ActiveMainView: IPXV_MainView readonly dispid 1610743818;
    property ActiveDoc: IPXV_Document dispid 1610743819;
    property DocCount: ULONG_T readonly dispid 1610743821;
    property Doc[nIndex: ULONG_T]: IPXV_Document readonly dispid 1610743822;
    function FindDocByID(nDocID: ULONG_T): IPXV_Document; dispid 1610743823;
    function FindDocByCoreDoc(const pCoreDoc: IPXC_Document): IPXV_Document; dispid 1610743824;
    function FindDocBySrcFile(const pSrcFile: IAFS_File): IPXV_Document; dispid 1610743825;
    function FindDocBySrcFileName(const pSrcFileName: IAFS_Name): IPXV_Document; dispid 1610743826;
    function FindDocBySrcFileName2(const sSrcFileName: WideString; bDIPath: WordBool): IPXV_Document; dispid 1610743827;
    procedure RegisterExtension(const sName: WideString; const pExtension: IUnknown); dispid 1610743828;
    function GetExtension(const sName: WideString): IUnknown; dispid 1610743829;
    procedure StartLoadingPlugins; dispid 1610743830;
    procedure FinishLoadingPlugins; dispid 1610743831;
    procedure AddPluginFromFile(const sFileName: WideString); dispid 1610743832;
    procedure AddPlugin(const pPlugin: IPXV_Plugin); dispid 1610743833;
    procedure RegisterActionHandler(const pHandler: IPXV_ActionHandler); dispid 1610743834;
    function GetHandlerForAction(nActionType: ULONG_T): IPXV_ActionHandler; dispid 1610743835;
    property ActionHandlersCount: ULONG_T readonly dispid 1610743836;
    property ActionHandler[nIndex: ULONG_T]: IPXV_ActionHandler readonly dispid 1610743837;
    procedure RegisterViewCreator(const pViewCreator: IPXV_ViewCreator); dispid 1610743838;
    procedure UnregisterViewCreator(const pViewCreator: IPXV_ViewCreator); dispid 1610743839;
    function GetStdFolder(nFolderID: PXV_StdFolderID; bUser: WordBool; bCreateIfNotExists: WordBool): WideString; dispid 1610743840;
    procedure SetStdFolder(nFolderID: PXV_StdFolderID; const sFolderPath: WideString; 
                           bUser: WordBool); dispid 1610743841;
    property IsPortable: WordBool readonly dispid 1610743842;
    procedure AddDefaultTranslationData(const pDefaultTranslationXml: IStream); dispid 1610743843;
    function GetLocalStr(const sStrID: WideString): WideString; dispid 1610743844;
    function GetLocalStr2(nStrID: Integer): WideString; dispid 1610743845;
    function Str2ID(const sStr: WideString; bAddIfNotExists: WordBool): Integer; dispid 1610743846;
    function ID2Str(nID: Integer): WideString; dispid 1610743847;
    function GetPluginSettings(const pPlugin: IPXV_Plugin; bCreateIfNotExists: WordBool): ICabNode; dispid 1610743848;
    function ShowOpenFilesDlg(const pFileFilters: WideString; const pInitialFolderName: WideString; 
                              bAllowMult: WordBool; const pDlgTitle: WideString; 
                              hWndParent: HANDLE_T; bShowHidden: WordBool; nFilterIndex: Integer): IPXV_OpenFilesDlgRes; dispid 1610743849;
    function ShowSaveFileDlg(const pFileFilters: WideString; const pInitialFolderName: WideString; 
                             const pInitialFileName: WideString; const pDefaultExt: WideString; 
                             const pDlgTitle: WideString; hWndParent: HANDLE_T; 
                             bOverwritePrompt: WordBool; bShowHidden: WordBool; 
                             nFilterIndex: Integer): IPXV_SaveFileDlgRes; dispid 1610743850;
    function ShowSelectFolderDlg(const pInitialFolderName: WideString; const pDlgTitle: WideString; 
                                 hWndParent: HANDLE_T; bCanAddNew: WordBool): IAFS_Name; dispid 1610743851;
    function GetTextFromHRes(hRes: HResult; bShort: WordBool): WideString; dispid 1610743852;
    procedure RegisterTool(const pTool: IPXV_Tool); dispid 1610743853;
    function GetTool(nTooID: Integer): IPXV_Tool; dispid 1610743854;
    property DefaultTool: IPXV_Tool dispid 1610743855;
    property DefaultToolID: Integer readonly dispid 1610743857;
    property LastActiveTool: IPXV_Tool readonly dispid 1610743858;
    property LastActiveToolID: Integer readonly dispid 1610743859;
    property EventServer: IEventServer readonly dispid 1610743860;
    function StartTimer(const pTimerHandler: IPXV_TimerHandler; nElapse: ULONG_T; nFlags: ULONG_T): LONG_PTR; dispid 1610743861;
    procedure RestartTimer(nTimerID: LONG_PTR; nNewElapse: ULONG_T); dispid 1610743862;
    procedure StopTimer(nTimerID: LONG_PTR); dispid 1610743863;
    procedure StopAllTimers(const pTimerHandler: IPXV_TimerHandler); dispid 1610743864;
    procedure PerformActions(const pDoc: IPXV_Document; const pAList: IPXC_ActionsList; 
                             nClass: PXV_ActionTriggerClass; nSubclass: PXV_ActionTriggerSubclass; 
                             const pActionData: IUnknown); dispid 1610743865;
    function ShowEditActionListDlg(const pDoc: IPXC_Document; const pActions: IPXC_ActionsList; 
                                   hWndParent: HANDLE_T): IPXC_ActionsList; dispid 1610743866;
    procedure ExecuteJS(const pDoc: IPXV_Document; sScript: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                        nClass: PXV_ActionTriggerClass; nSubclass: PXV_ActionTriggerSubclass; 
                        const pActionData: IUnknown; const pResult: IString); dispid 1610743867;
    procedure ShowChooseFontDlg(const pIDoc: IPXC_Document; var pFontParams: ICabNode); dispid 1610743868;
    function GetAnnotHandler(const pAnnot: IPXC_Annotation): IPXV_AnnotHandler; dispid 1610743869;
    procedure RegisterImportConverter(const pConverter: IPXV_ImportConverter); dispid 1610743870;
    procedure RegisterExportConverter(const pConverter: IPXV_ExportConverter); dispid 1610743871;
    property DefaultProgressMon: IProgressMon readonly dispid 1610743872;
    property ProgressMon: IProgressMon dispid 1610743873;
    property AnnotStateModelManager: IPXV_AnnotStateModelManager readonly dispid 1610743875;
    procedure ThreadSafeCall(const pCb: IPXV_ThreadSafeCallback; bWaitWithMsgLoop: WordBool); dispid 1610743876;
    procedure RegisterDocSelectionHandler(const pSelHandler: IPXV_DocSelectionHandler); dispid 1610743877;
    procedure UnregisterDocSelectionHandler(const pSelHandler: IPXV_DocSelectionHandler); dispid 1610743878;
    function GetDocSelectionHandler(const pDoc: IPXV_Document; const pDocSel: IPXV_DocSelection): IPXV_DocSelectionHandler; dispid 1610743879;
    procedure UpdateProps(bLazy: WordBool; bFull: WordBool); dispid 1610743880;
    function GetPrinters: IUniqueStrings; dispid 1610743881;
    function CreateBookmList: IPXV_BookmList; dispid 1610743882;
    function CreateAnnotsList: IPXV_AnnotsList; dispid 1610743883;
    function CreateOpenDocParams: ICab; dispid 1610743884;
    procedure SaveHistory(const pHistoryDest: IUnknown; const pHistoryThumbsDest: IUnknown; 
                          nFlags: Integer); dispid 1610743885;
    procedure AsyncDoAndWaitForFinish(const pOp: IOperation; nOpExecFlags: ULONG_T); dispid 1610743886;
    function CreateOp(nOpID: Integer): IOperation; dispid 1610743887;
    procedure RegisterOpCreator(const pOpCreator: IPXV_OperationsCreator); dispid 1610743888;
    procedure UnregisterOpCreator(const pOpCreator: IPXV_OperationsCreator); dispid 1610743889;
    property State: ULONG_T readonly dispid 1610743890;
    property SelectedStamp: IPXC_StampInfo dispid 1610743891;
    procedure ExecUICmd(const sCmdID: WideString; const pOwner: IUIX_Obj); dispid 1610743893;
    procedure ExecUICmd2(nCmdID: Integer; const pOwner: IUIX_Obj); dispid 1610743894;
    procedure UpdateProp(nPropID: Integer; nUpdateFlags: Integer; const pPropHost: IUIX_PropHost); dispid 1610743895;
    procedure FireAppPrefsChanged(nFlagIndex: PXV_AppPrefsChanges; const pCumulChangeFlags: IBitSet); dispid 1610743896;
    procedure FireAppPrefsChanged2(const pChangeFlags: IBitSet); dispid 1610743897;
    function GetDlgParentWindow(const pRDoc: IPXC_Document): HANDLE_T; dispid 1610743898;
    property CommentStylesManager: IPXV_CommentStylesManager readonly dispid 1610743899;
    procedure AsyncDo(const pOp: IOperation; nOpExecFlags: ULONG_T; 
                      const pAsyncDoCb: IPXV_AsyncDoCallback); dispid 1610743900;
    procedure FireCmdCustomizationEvent(const pSource: IUIX_Obj; nFlags: Integer); dispid 1610743901;
    procedure ShowCmdBar(const sBarID: WideString; bShow: WordBool); dispid 1610743902;
    function IsCmdBarVisible(const sBarID: WideString): WordBool; dispid 1610743903;
    procedure ShowCmdBar2(nBarID: Integer; bShow: WordBool); dispid 1610743904;
    function IsCmdBarVisible2(nBarID: Integer): WordBool; dispid 1610743905;
    procedure ResetCmdCustomization(nFlags: Integer); dispid 1610743906;
    property Settings: ICabNode readonly dispid 1610743907;
    procedure ClearHistory(bSilent: WordBool); dispid 1610743908;
    procedure ModifyCoreDoc(const pCoreDoc: IPXC_Document; nModType: PXC_DocModifyType; 
                            nModCount: Integer); dispid 1610743909;
    procedure ModifyDoc(const pDoc: IPXV_Document; nModType: PXC_DocModifyType; nModCount: Integer); dispid 1610743910;
    property IsHistoryLoaded: WordBool readonly dispid 1610743911;
    function CreateStdPresetsCallbacks(const sPathToPresetsArr: WideString; 
                                       const pCustomIoCallbacks: IPXV_PresetsIoCallbacks; 
                                       const pCustomStorage: ICab; nListStyle: Integer): IPXV_PresetsListCallbacks; dispid 1610743912;
    function CreateStdPresetsButton(const pBtnObj: IUIX_Obj; 
                                    const pCallbacks: IPXV_PresetsListCallbacks): IPXV_PresetsButton; dispid 1610743913;
    property DispMeasureUnit: MeasureUnit readonly dispid 1610743914;
    procedure GetMeasureUnitInfo(nUnit: MeasureUnit; out sName: WideString; 
                                 out sShortName: WideString; out nPt2UnitCoef: Double; 
                                 out nDispPrec: Integer); dispid 1610743915;
    procedure SetupMeasureEditFilter(const pEditFilter: IUIX_NumEditFilter; nCurUnit: MeasureUnit; 
                                     nMin: Double; nMax: Double; nAdvDispCoef: Double; 
                                     nStep: Double; bNegative: WordBool); dispid 1610743916;
    function FormatMeasureValue(nValueInPoints: Double; nDestUnit: MeasureUnit; nFmtFlags: Integer): WideString; dispid 1610743917;
    function FormatNumber(nNum: Double; nDispPrec: Integer; bKeepZeroTrailers: WordBool; 
                          bAllowGrouping: WordBool): WideString; dispid 1610743918;
    function Str2Number(const sStr: WideString; bSigned: WordBool; out bOK: WordBool): Double; dispid 1610743919;
    function FormatFileSize(nSize: Largeuint; bShort: WordBool): WideString; dispid 1610743920;
    procedure CreateMeasureUnitsConvTbl(var pConvTbl: IUIX_NumEditFilterConvTbl); dispid 1610743921;
    function CreatePageSizeCtl: IPXV_PageSizeCtl; dispid 1610743922;
    function CreateStdRangeCtl(const pDlgDlg: IUIX_Obj; const pSrcRange: IRangeHelper): IPXV_RangeCtl; dispid 1610743923;
    property EventsRegistry: IEventsRegistry readonly dispid 1610743924;
    procedure SyncronizeAllDocPanesLayouts(bLazy: WordBool); dispid 1610743925;
    function ShowCreateFileErrDlg(const pFileName: IAFS_Name; hErr: HResult; hWndParent: HANDLE_T; 
                                  nFlags: Integer; out pNewFileName: IAFS_Name): Integer; dispid 1610743926;
    function NewCoreDoc(const pNewDocParams: ICab): IPXC_Document; dispid 1610743927;
    procedure SetReservedLowMemory(pMemory: {NOT_OLEAUTO(Pointer)}OleVariant; cbMemory: ULONG_PTR); dispid 1610743928;
    property APIVersion: ULONG_T readonly dispid 1610743929;
    property AppType: ULONG_T readonly dispid 1610743930;
    property ImportConvertersCount: ULONG_T readonly dispid 1610743931;
    property ImportConverter[nIndex: ULONG_T]: IPXV_ImportConverter readonly dispid 1610743932;
    property ExportConvertersCount: ULONG_T readonly dispid 1610743933;
    property ExportConverter[nIndex: ULONG_T]: IPXV_ExportConverter readonly dispid 1610743934;
    procedure SyncronizeCmdCustomization(const pISource: IUIX_Obj; nFlags: Integer; 
                                         bFireEvent: WordBool); dispid 1610743935;
    procedure LockCmdCustomizationEvent; dispid 1610743936;
    procedure UnlockCmdCustomizationEvent; dispid 1610743937;
    function ShowMsgBox(const sText: WideString; const sTitle: WideString; 
                        const sHeader: WideString; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR; dispid 1610743938;
    function ShowMsgBoxWithOpt(const sText: WideString; const sTitle: WideString; 
                               const sHeader: WideString; const sOptionText: WideString; 
                               var nOptionState: Integer; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR; dispid 1610743939;
    function ShowMsgBoxEx(var pConfig: {NOT_OLEAUTO(UIX_MsgBoxConfig)}OleVariant; 
                          out pOptionState: Integer; out pSelectedRadioID: Integer; 
                          out ppEditText: WideString): LONG_PTR; dispid 1610743940;
    function PathToName(sPath: {NOT_OLEAUTO(PWideChar)}OleVariant; bDIPath: WordBool; 
                        const sFSName: WideString; bAllowAuth: WordBool; hWndParent: HANDLE_T): IAFS_Name; dispid 1610743941;
    function GetUILanguages: IPXV_UILanguages; dispid 1610743942;
    procedure SetCurrentUILang(sLangCode: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743943;
    function GetCurrentUILang: WideString; dispid 1610743944;
    function GetDefaultPrinter: WideString; dispid 1610743945;
    function CreateStdBindContext: IAFS_BindContext; dispid 1610743946;
    function GetDocViewFromUIObj(const pObj: IUIX_Obj; bGetActiveIfNotFound: WordBool): IPXV_DocumentView; dispid 1610743947;
    function GetMainViewFromUIObj(const pObj: IUIX_Obj; bGetActiveIfNotFound: WordBool): IPXV_MainView; dispid 1610743948;
    procedure RegisterSignatureProvider(const pProvider: IPXV_SignatureProvider); dispid 1610743949;
    property ActiveMainFrmWndHandle: HANDLE_T readonly dispid 1610743950;
    function GetLocalStrID(const sStrID: WideString): WideString; dispid 1610743951;
    function GetLocalStrID2(nStrID: Integer): WideString; dispid 1610743952;
    function RevertDoc(const pDoc: IPXV_Document; const pNewTempData: IAFS_File): IPXV_Document; dispid 1610743953;
    function ExpandOpenFileFilterAlias(pFilterAlias: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                       nFlags: Integer): WideString; dispid 1610743954;
    function CreatePagesPreviewCtl(const pParent: IUIX_Obj; 
                                   var pRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                                   const pID: WideString; nStyle: Int64; nScrollStyle: Int64; 
                                   bWindowed: WordBool): IPXV_PagesPreviewCtl; dispid 1610743955;
    function CreateFileNamesProvider: IPXV_FileNamesProvider; dispid 1610743956;
    function GetFormatConverterParams(bImport: WordBool; sConvID: {NOT_OLEAUTO(PWideChar)}OleVariant): ICab; dispid 1610743957;
    procedure SetFormatConverterParams(bImport: WordBool; 
                                       pConvID: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                       const pNewParams: ICabNode); dispid 1610743958;
    function GetFormatConverterIndex(bImport: WordBool; pConvID: {NOT_OLEAUTO(PWideChar)}OleVariant): Integer; dispid 1610743959;
    function CreateAttachList: IPXV_AttachList; dispid 1610743960;
    function CreateDocList: IPXV_DocList; dispid 1610743961;
    function CreateMacroHelper: IPXV_MacroHelper; dispid 1610743962;
    procedure SetMainWindow(hWndMain: HANDLE_T); dispid 1610743963;
    procedure LoadUserSettings(const pUserSettingsSrc: IUnknown; nFlags: Integer); dispid 1610743964;
    function ExecuteJSEx(const pCoreDoc: IPXC_Document; 
                         sScript: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                         nClass: PXV_ActionTriggerClass; nSubclass: PXV_ActionTriggerSubclass; 
                         const pActionData: IUnknown): IPXV_JSValue; dispid 1610743965;
    property JSCodeSnippets: IPXV_JSCodeSnippetsStorage readonly dispid 1610743966;
    function EditImageFmtParams(const pFmtParams: IIXC_ImageFmtParams; hWndParent: HANDLE_T; 
                                nFlags: Integer): WordBool; dispid 1610743967;
    function EditImage(const pImage: IUnknown; hWndParent: HANDLE_T; const sDlgTitle: WideString; 
                       nFlags: Integer): IIXC_Image; dispid 1610743968;
    function ShowAppPrefsDlg(hWndParent: HANDLE_T; const sActivePageID: WideString; 
                             const sActiveCtlID: WideString): WordBool; dispid 1610743969;
    procedure EnableRibbonUI(bEnable: WordBool); dispid 1610743970;
    procedure RegisterDocInfoBarSpan(sSpanID: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                     sTitle: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                                     sDesc: {NOT_OLEAUTO(PWideChar)}OleVariant; nWeight: Integer; 
                                     nColor: Integer; const pIcon: IUIX_Icon); dispid 1610743971;
    procedure ShowRibbonTab(const sTabID: WideString; bShow: WordBool); dispid 1610743972;
    procedure ShowRibbonTab2(nTabID: Integer; bShow: WordBool); dispid 1610743973;
  end;

// *********************************************************************//
// Interface: IPXV_MainFrame
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {058487BC-FAB1-43E1-B9E0-77E7ADB97460}
// *********************************************************************//
  IPXV_MainFrame = interface(IUIX_ObjImpl)
    ['{058487BC-FAB1-43E1-B9E0-77E7ADB97460}']
    procedure GetLastWndState(out stRect: tagRECT; out stRestoredRect: tagRECT; out nStyle: Integer); safecall;
    function Get_View: IPXV_MainView; safecall;
    function OpenDocFromPath(const sSrcPath: WideString; const pOpenParams: ICab): IPXV_Document; safecall;
    function OpenDocFrom(const pSrc: IUnknown; const pOpenParams: ICab): IPXV_Document; safecall;
    procedure ScreenPosChanged; safecall;
    procedure OpenDocs(const pSrcFileNames: IAFS_NamesCollection; const pOpenParams: ICab; 
                       nFlags: ULONG_T; const pResDocs: IPXV_DocList); safecall;
    property View: IPXV_MainView read Get_View;
  end;

// *********************************************************************//
// DispIntf:  IPXV_MainFrameDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {058487BC-FAB1-43E1-B9E0-77E7ADB97460}
// *********************************************************************//
  IPXV_MainFrameDisp = dispinterface
    ['{058487BC-FAB1-43E1-B9E0-77E7ADB97460}']
    procedure GetLastWndState(out stRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                              out stRestoredRect: {NOT_OLEAUTO(tagRECT)}OleVariant; 
                              out nStyle: Integer); dispid 1610809344;
    property View: IPXV_MainView readonly dispid 1610809345;
    function OpenDocFromPath(const sSrcPath: WideString; const pOpenParams: ICab): IPXV_Document; dispid 1610809346;
    function OpenDocFrom(const pSrc: IUnknown; const pOpenParams: ICab): IPXV_Document; dispid 1610809347;
    procedure ScreenPosChanged; dispid 1610809348;
    procedure OpenDocs(const pSrcFileNames: IAFS_NamesCollection; const pOpenParams: ICab; 
                       nFlags: ULONG_T; const pResDocs: IPXV_DocList); dispid 1610809349;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_View
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {92E704C0-CC84-41F2-97CB-EDCCA380EC25}
// *********************************************************************//
  IPXV_View = interface(IUIX_ObjImpl)
    ['{92E704C0-CC84-41F2-97CB-EDCCA380EC25}']
    function Get_ID: Integer; safecall;
    function Get_Parent: IPXV_View; safecall;
    function Get_Focus: IPXV_View; safecall;
    function Get_Panes: IPXV_ViewPanesCollection; safecall;
    function Get_CmdPaneTop: IUIX_CmdPane; safecall;
    function Get_CmdPaneBottom: IUIX_CmdPane; safecall;
    function Get_CmdPaneLeft: IUIX_CmdPane; safecall;
    function Get_CmdPaneRight: IUIX_CmdPane; safecall;
    function Get_CmdPane(nSide: UIX_CmdPaneSides): IUIX_CmdPane; safecall;
    function Get_CmdBar(const sCmdBarID: WideString): IUIX_CmdBar; safecall;
    function Get_CmdBar2(nCmdBarID: Integer): IUIX_CmdBar; safecall;
    function Get_IsRibbonMode: WordBool; safecall;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); safecall;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); safecall;
    property ID: Integer read Get_ID;
    property Parent: IPXV_View read Get_Parent;
    property Focus: IPXV_View read Get_Focus;
    property Panes: IPXV_ViewPanesCollection read Get_Panes;
    property CmdPaneTop: IUIX_CmdPane read Get_CmdPaneTop;
    property CmdPaneBottom: IUIX_CmdPane read Get_CmdPaneBottom;
    property CmdPaneLeft: IUIX_CmdPane read Get_CmdPaneLeft;
    property CmdPaneRight: IUIX_CmdPane read Get_CmdPaneRight;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane read Get_CmdPane;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar read Get_CmdBar;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar read Get_CmdBar2;
    property IsRibbonMode: WordBool read Get_IsRibbonMode;
  end;

// *********************************************************************//
// DispIntf:  IPXV_ViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {92E704C0-CC84-41F2-97CB-EDCCA380EC25}
// *********************************************************************//
  IPXV_ViewDisp = dispinterface
    ['{92E704C0-CC84-41F2-97CB-EDCCA380EC25}']
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_MainView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DB0C40F0-B92F-4B55-84BD-FFB6BC8B93DA}
// *********************************************************************//
  IPXV_MainView = interface(IPXV_View)
    ['{DB0C40F0-B92F-4B55-84BD-FFB6BC8B93DA}']
    function Get_Frame: IPXV_MainFrame; safecall;
    function Get_DocViewsArea: IPXV_DocumentViewsArea; safecall;
    function Get_PropsBar: IUIX_CmdBar; safecall;
    function Get_MenuBar: IUIX_CmdBar; safecall;
    procedure LoadPanesLayout; safecall;
    procedure ResetPanesLayout; safecall;
    function Get_ActiveDocView: IPXV_DocumentView; safecall;
    property Frame: IPXV_MainFrame read Get_Frame;
    property DocViewsArea: IPXV_DocumentViewsArea read Get_DocViewsArea;
    property PropsBar: IUIX_CmdBar read Get_PropsBar;
    property MenuBar: IUIX_CmdBar read Get_MenuBar;
    property ActiveDocView: IPXV_DocumentView read Get_ActiveDocView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_MainViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {DB0C40F0-B92F-4B55-84BD-FFB6BC8B93DA}
// *********************************************************************//
  IPXV_MainViewDisp = dispinterface
    ['{DB0C40F0-B92F-4B55-84BD-FFB6BC8B93DA}']
    property Frame: IPXV_MainFrame readonly dispid 1610874880;
    property DocViewsArea: IPXV_DocumentViewsArea readonly dispid 1610874881;
    property PropsBar: IUIX_CmdBar readonly dispid 1610874882;
    property MenuBar: IUIX_CmdBar readonly dispid 1610874883;
    procedure LoadPanesLayout; dispid 1610874884;
    procedure ResetPanesLayout; dispid 1610874885;
    property ActiveDocView: IPXV_DocumentView readonly dispid 1610874886;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_ViewPanesCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D0BCE7AC-1387-4C70-9184-912EB94AE3ED}
// *********************************************************************//
  IPXV_ViewPanesCollection = interface(IDispatch)
    ['{D0BCE7AC-1387-4C70-9184-912EB94AE3ED}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXV_View; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_Active(nID: Integer): IPXV_View; safecall;
    function Get_Layout: IUIX_Layout; safecall;
    procedure Remove(const pPane: IPXV_View); safecall;
    procedure Hide(const pPane: IPXV_View; bAnimated: WordBool); safecall;
    procedure Show(const pPane: IPXV_View; bHighlight: WordBool); safecall;
    function Get_IsVisible(const pPane: IPXV_View): WordBool; safecall;
    function Get_IsHidden(const pPane: IPXV_View): WordBool; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXV_View read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property Active[nID: Integer]: IPXV_View read Get_Active;
    property Layout: IUIX_Layout read Get_Layout;
    property IsVisible[const pPane: IPXV_View]: WordBool read Get_IsVisible;
    property IsHidden[const pPane: IPXV_View]: WordBool read Get_IsHidden;
  end;

// *********************************************************************//
// DispIntf:  IPXV_ViewPanesCollectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D0BCE7AC-1387-4C70-9184-912EB94AE3ED}
// *********************************************************************//
  IPXV_ViewPanesCollectionDisp = dispinterface
    ['{D0BCE7AC-1387-4C70-9184-912EB94AE3ED}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXV_View readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    property Active[nID: Integer]: IPXV_View readonly dispid 1610743811;
    property Layout: IUIX_Layout readonly dispid 1610743812;
    procedure Remove(const pPane: IPXV_View); dispid 1610743813;
    procedure Hide(const pPane: IPXV_View; bAnimated: WordBool); dispid 1610743814;
    procedure Show(const pPane: IPXV_View; bHighlight: WordBool); dispid 1610743815;
    property IsVisible[const pPane: IPXV_View]: WordBool readonly dispid 1610743816;
    property IsHidden[const pPane: IPXV_View]: WordBool readonly dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IPXV_DocumentViewsArea
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0647EED6-CE73-4167-8D0C-541654EADA08}
// *********************************************************************//
  IPXV_DocumentViewsArea = interface(IPXV_View)
    ['{0647EED6-CE73-4167-8D0C-541654EADA08}']
    function Get_ActiveDocView: IPXV_DocumentView; safecall;
    function AddDocView(const pDocView: IPXV_DocumentView; const pDestTabGroup: IUIX_LayoutItem; 
                        nInsertBeforeTab: Integer; bHidden: WordBool): IUIX_LayoutItem; safecall;
    procedure CloseAllDocViews(nFlags: Integer); safecall;
    function Get_DocViews: IPXV_DocViewsList; safecall;
    property ActiveDocView: IPXV_DocumentView read Get_ActiveDocView;
    property DocViews: IPXV_DocViewsList read Get_DocViews;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocumentViewsAreaDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {0647EED6-CE73-4167-8D0C-541654EADA08}
// *********************************************************************//
  IPXV_DocumentViewsAreaDisp = dispinterface
    ['{0647EED6-CE73-4167-8D0C-541654EADA08}']
    property ActiveDocView: IPXV_DocumentView readonly dispid 1610874880;
    function AddDocView(const pDocView: IPXV_DocumentView; const pDestTabGroup: IUIX_LayoutItem; 
                        nInsertBeforeTab: Integer; bHidden: WordBool): IUIX_LayoutItem; dispid 1610874881;
    procedure CloseAllDocViews(nFlags: Integer); dispid 1610874882;
    property DocViews: IPXV_DocViewsList readonly dispid 1610874883;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_DocumentView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FB8E43A8-D47B-4C41-B39D-52DD8D17E77C}
// *********************************************************************//
  IPXV_DocumentView = interface(IPXV_View)
    ['{FB8E43A8-D47B-4C41-B39D-52DD8D17E77C}']
    function Get_Doc: IPXV_Document; safecall;
    procedure Close(nFlags: Integer); safecall;
    procedure LoadPanesLayout; safecall;
    procedure ResetPanesLayout; safecall;
    procedure GetPlacement(out pContainer: IUIX_LayoutItem; out nTabIndex: Integer); safecall;
    function Get_ActiveView(nViewID: Integer): IPXV_View; safecall;
    function Get_PagesView: IPXV_PagesView; safecall;
    function Get_BookmarksView: IPXV_BookmarksView; safecall;
    function Get_PageThumbsView: IPXV_PageThumbnailsView; safecall;
    function Get_AttachmentsView: IPXV_AttachmentsView; safecall;
    function Get_SignaturesView: IPXV_SignaturesView; safecall;
    function Get_CommentsView: IPXV_CommentsView; safecall;
    function Get_LayersView: IPXV_LayersView; safecall;
    function Get_NamedDestsView: IPXV_PDFNamedDestsView; safecall;
    function Get_ContentsView: IPXV_ContentsView; safecall;
    procedure Activate(nFlags: Integer); safecall;
    property Doc: IPXV_Document read Get_Doc;
    property ActiveView[nViewID: Integer]: IPXV_View read Get_ActiveView;
    property PagesView: IPXV_PagesView read Get_PagesView;
    property BookmarksView: IPXV_BookmarksView read Get_BookmarksView;
    property PageThumbsView: IPXV_PageThumbnailsView read Get_PageThumbsView;
    property AttachmentsView: IPXV_AttachmentsView read Get_AttachmentsView;
    property SignaturesView: IPXV_SignaturesView read Get_SignaturesView;
    property CommentsView: IPXV_CommentsView read Get_CommentsView;
    property LayersView: IPXV_LayersView read Get_LayersView;
    property NamedDestsView: IPXV_PDFNamedDestsView read Get_NamedDestsView;
    property ContentsView: IPXV_ContentsView read Get_ContentsView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocumentViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FB8E43A8-D47B-4C41-B39D-52DD8D17E77C}
// *********************************************************************//
  IPXV_DocumentViewDisp = dispinterface
    ['{FB8E43A8-D47B-4C41-B39D-52DD8D17E77C}']
    property Doc: IPXV_Document readonly dispid 1610874880;
    procedure Close(nFlags: Integer); dispid 1610874881;
    procedure LoadPanesLayout; dispid 1610874882;
    procedure ResetPanesLayout; dispid 1610874883;
    procedure GetPlacement(out pContainer: IUIX_LayoutItem; out nTabIndex: Integer); dispid 1610874884;
    property ActiveView[nViewID: Integer]: IPXV_View readonly dispid 1610874885;
    property PagesView: IPXV_PagesView readonly dispid 1610874886;
    property BookmarksView: IPXV_BookmarksView readonly dispid 1610874887;
    property PageThumbsView: IPXV_PageThumbnailsView readonly dispid 1610874888;
    property AttachmentsView: IPXV_AttachmentsView readonly dispid 1610874889;
    property SignaturesView: IPXV_SignaturesView readonly dispid 1610874890;
    property CommentsView: IPXV_CommentsView readonly dispid 1610874891;
    property LayersView: IPXV_LayersView readonly dispid 1610874892;
    property NamedDestsView: IPXV_PDFNamedDestsView readonly dispid 1610874893;
    property ContentsView: IPXV_ContentsView readonly dispid 1610874894;
    procedure Activate(nFlags: Integer); dispid 1610874895;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_Document
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A31C9941-4A55-43F6-87BC-0738234B5CAB}
// *********************************************************************//
  IPXV_Document = interface(IDispatch)
    ['{A31C9941-4A55-43F6-87BC-0738234B5CAB}']
    function Get_ID: ULONG_T; safecall;
    procedure CloseAllViews(nFlags: Integer); safecall;
    procedure Close(nFlags: Integer); safecall;
    function Get_DelayedClose: WordBool; safecall;
    function Get_View(nIndex: ULONG_T): IPXV_DocumentView; safecall;
    function Get_ViewsCount: ULONG_T; safecall;
    function Get_CoreDoc: IPXC_Document; safecall;
    function Get_EventServer: IEventServer; safecall;
    function Get_OperationHistory: IOperationHistory; safecall;
    function Get_ActiveSel: IPXV_DocSelection; safecall;
    procedure Set_ActiveSel(const pActiveSel: IPXV_DocSelection); safecall;
    function Get_ActiveSelHandler: IPXV_DocSelectionHandler; safecall;
    procedure ActivateSel(nSelClusterID: Integer); safecall;
    procedure RemoveSelCluster(nSelClusterID: Integer; bAnimated: WordBool); safecall;
    function GetSel(nSelID: Integer): IPXV_DocSelection; safecall;
    function GetSelCluster(nSelClusterID: Integer): IPXV_DocSelection; safecall;
    procedure FireSelChangedEvent(nSelClusterID: Integer); safecall;
    function CreateStdSel(nSelID: ULONG_T): IPXV_DocSelection; safecall;
    function Get_ActiveTool: IPXV_Tool; safecall;
    procedure Set_ActiveTool(const pTool: IPXV_Tool); safecall;
    function Get_LastActiveTool: IPXV_Tool; safecall;
    function Get_LastActiveToolID: Integer; safecall;
    procedure ActivateTool(nToolID: Integer); safecall;
    procedure EnumViews(nViewTypeID: Integer; const pEnumCb: IPXV_EnumViewsCallback); safecall;
    function CreateInvPagesInfo: IPXV_InvalidatePagesInfo; safecall;
    procedure InvalidatePages(const pInvPagesInfo: IPXV_InvalidatePagesInfo; 
                              bInvalidateOCContexts: WordBool); safecall;
    procedure InvalidatePage(nPageIndex: ULONG_T; nFlags: ULONG_T; 
                             const pCumulInvInfo: IPXV_InvalidatePagesInfo); safecall;
    procedure InvalidatePageRects(nPageIndex: ULONG_T; var stRects: PXC_RectF; 
                                  nRectsCount: ULONG_T; nFlags: ULONG_T; 
                                  const pCumulInvInfo: IPXV_InvalidatePagesInfo); safecall;
    procedure InvalidateAnnot(const pAnnot: IPXC_Annotation; nFlags: ULONG_T; 
                              const pCumulInvInfo: IPXV_InvalidatePagesInfo); safecall;
    procedure InvalidateAnnots(const pAnnotsList: IPXV_AnnotsList; nFlags: ULONG_T; 
                               const pCumulInvInfo: IPXV_InvalidatePagesInfo); safecall;
    procedure FireAnnotsChangedEvent(const pAnnots: IPXV_AnnotsList); safecall;
    procedure FireAnnotChangedEvent(const pAnnot: IPXC_Annotation); safecall;
    procedure FireAnnotsInsertedEvent(const pAnnots: IPXV_AnnotsList); safecall;
    procedure FireAnnotInsertedEvent(const pAnnot: IPXC_Annotation); safecall;
    procedure FireAnnotsDeletedEvent(const pAnnots: IPXV_AnnotsList); safecall;
    procedure FireAnnotDeletedEvent(const pAnnot: IPXC_Annotation); safecall;
    procedure FireBookmarksChangedEvent(const pBookmarks: IPXV_BookmList); safecall;
    procedure FireBookmarkChangedEvent(const pBookmark: IPXC_Bookmark); safecall;
    procedure FireBookmarksInsertedEvent(const pBookmarks: IPXV_BookmList); safecall;
    procedure FireBookmarkInsertedEvent(const pBookmark: IPXC_Bookmark); safecall;
    procedure FireBookmarksDeletedEvent(const pBookmarks: IPXV_BookmList); safecall;
    procedure FireBookmarkDeletedEvent(const pBookmark: IPXC_Bookmark); safecall;
    function CreateContentsChangesInfo: IPXV_DocContentsChangesInfo; safecall;
    procedure FireContentsChangedEvent(const pChangesInfo: IPXV_DocContentsChangesInfo); safecall;
    function GetPlainText(nPageIndex: ULONG_T; nFirstCharIndex: ULONG_T; nCharsCount: ULONG_T): WideString; safecall;
    function Get_Modified: WordBool; safecall;
    procedure Set_Modified(bValue: WordBool); safecall;
    procedure SetModified(bModified: WordBool; nLevel: ULONG_T); safecall;
    function Get_ModificationLevel: Integer; safecall;
    function Get_PagesViewRotation: Integer; safecall;
    procedure Set_PagesViewRotation(nValue: Integer); safecall;
    function Get_ActiveView: IPXV_DocumentView; safecall;
    function Get_PrivateMode: WordBool; safecall;
    procedure Set_PrivateMode(bValue: WordBool); safecall;
    procedure InvalidateBookmarks(const pBookmarks: IPXV_BookmList; bUpdate: WordBool); safecall;
    procedure InvalidateBookmark(const pBookmark: IPXC_Bookmark; bUpdate: WordBool); safecall;
    function AddNewHighlighter(nType: PXV_DocHighlightType): IPXV_DocHighlighter; safecall;
    procedure RemoveHighlighter(const pHighlighter: IPXV_DocHighlighter); safecall;
    procedure Save(const pDest: IUnknown; nFlags: Integer; const pProgress: IProgressMon; 
                   const pDestConv: IPXV_ExportConverter; const pDestConvParams: ICab; 
                   const pDestFS: IAFS_FileSys; const pAdvancedParams: ICab; hWndParent: HANDLE_T); safecall;
    procedure ShowFullScreen(bShow: WordBool); safecall;
    function Get_InFullScreen: WordBool; safecall;
    procedure LoadPrintParamsFromDocProps(const pPrintOperation: IOperation); safecall;
    procedure RegisterPagesViewDrawCallback(nStage: PXV_PagesViewDrawStage; 
                                            const pCallback: IPXV_PagesViewDrawCallback; 
                                            nFlags: LongWord); safecall;
    procedure UnregisterPagesViewDrawCallback(nStage: PXV_PagesViewDrawStage; 
                                              const pCallback: IPXV_PagesViewDrawCallback); safecall;
    procedure UnregisterPagesViewDrawCallback2(const pCallback: IPXV_PagesViewDrawCallback); safecall;
    procedure FireFieldsChangedEvent(const pFields: IPXV_FormFieldsList); safecall;
    procedure FireFieldChangedEvent(const pField: IPXC_FormField); safecall;
    procedure FireFieldsInsertedEvent(const pFields: IPXV_FormFieldsList); safecall;
    procedure FireFieldInsertedEvent(const pField: IPXC_FormField); safecall;
    procedure FireFieldsDeletedEvent(const pFields: IPXV_FormFieldsList); safecall;
    procedure FireFieldDeletedEvent(const pField: IPXC_FormField); safecall;
    function Get_InfoBar: IPXV_DocInfoBar; safecall;
    function Get_Parent: IPXV_Document; safecall;
    procedure DiscardPDFACompilance; safecall;
    function GetDestFolderForSaveAs: IAFS_Name; safecall;
    procedure StartEditAnnotText(const pAnnot: IPXC_Annotation); safecall;
    procedure StartEditPageText(nPageIndex: ULONG_T; nTextBlockIndex: ULONG_T); safecall;
    function Get_ActiveTextEditor: IPXV_TextEditor; safecall;
    function CreateAdvancedSaveParams: ICab; safecall;
    property ID: ULONG_T read Get_ID;
    property DelayedClose: WordBool read Get_DelayedClose;
    property View[nIndex: ULONG_T]: IPXV_DocumentView read Get_View;
    property ViewsCount: ULONG_T read Get_ViewsCount;
    property CoreDoc: IPXC_Document read Get_CoreDoc;
    property EventServer: IEventServer read Get_EventServer;
    property OperationHistory: IOperationHistory read Get_OperationHistory;
    property ActiveSel: IPXV_DocSelection read Get_ActiveSel write Set_ActiveSel;
    property ActiveSelHandler: IPXV_DocSelectionHandler read Get_ActiveSelHandler;
    property ActiveTool: IPXV_Tool read Get_ActiveTool write Set_ActiveTool;
    property LastActiveTool: IPXV_Tool read Get_LastActiveTool;
    property LastActiveToolID: Integer read Get_LastActiveToolID;
    property Modified: WordBool read Get_Modified write Set_Modified;
    property ModificationLevel: Integer read Get_ModificationLevel;
    property PagesViewRotation: Integer read Get_PagesViewRotation write Set_PagesViewRotation;
    property ActiveView: IPXV_DocumentView read Get_ActiveView;
    property PrivateMode: WordBool read Get_PrivateMode write Set_PrivateMode;
    property InFullScreen: WordBool read Get_InFullScreen;
    property InfoBar: IPXV_DocInfoBar read Get_InfoBar;
    property Parent: IPXV_Document read Get_Parent;
    property ActiveTextEditor: IPXV_TextEditor read Get_ActiveTextEditor;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocumentDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A31C9941-4A55-43F6-87BC-0738234B5CAB}
// *********************************************************************//
  IPXV_DocumentDisp = dispinterface
    ['{A31C9941-4A55-43F6-87BC-0738234B5CAB}']
    property ID: ULONG_T readonly dispid 1610743808;
    procedure CloseAllViews(nFlags: Integer); dispid 1610743809;
    procedure Close(nFlags: Integer); dispid 1610743810;
    property DelayedClose: WordBool readonly dispid 1610743811;
    property View[nIndex: ULONG_T]: IPXV_DocumentView readonly dispid 1610743812;
    property ViewsCount: ULONG_T readonly dispid 1610743813;
    property CoreDoc: IPXC_Document readonly dispid 1610743814;
    property EventServer: IEventServer readonly dispid 1610743815;
    property OperationHistory: IOperationHistory readonly dispid 1610743816;
    property ActiveSel: IPXV_DocSelection dispid 1610743817;
    property ActiveSelHandler: IPXV_DocSelectionHandler readonly dispid 1610743819;
    procedure ActivateSel(nSelClusterID: Integer); dispid 1610743820;
    procedure RemoveSelCluster(nSelClusterID: Integer; bAnimated: WordBool); dispid 1610743821;
    function GetSel(nSelID: Integer): IPXV_DocSelection; dispid 1610743822;
    function GetSelCluster(nSelClusterID: Integer): IPXV_DocSelection; dispid 1610743823;
    procedure FireSelChangedEvent(nSelClusterID: Integer); dispid 1610743824;
    function CreateStdSel(nSelID: ULONG_T): IPXV_DocSelection; dispid 1610743825;
    property ActiveTool: IPXV_Tool dispid 1610743826;
    property LastActiveTool: IPXV_Tool readonly dispid 1610743828;
    property LastActiveToolID: Integer readonly dispid 1610743829;
    procedure ActivateTool(nToolID: Integer); dispid 1610743830;
    procedure EnumViews(nViewTypeID: Integer; const pEnumCb: IPXV_EnumViewsCallback); dispid 1610743831;
    function CreateInvPagesInfo: IPXV_InvalidatePagesInfo; dispid 1610743832;
    procedure InvalidatePages(const pInvPagesInfo: IPXV_InvalidatePagesInfo; 
                              bInvalidateOCContexts: WordBool); dispid 1610743833;
    procedure InvalidatePage(nPageIndex: ULONG_T; nFlags: ULONG_T; 
                             const pCumulInvInfo: IPXV_InvalidatePagesInfo); dispid 1610743834;
    procedure InvalidatePageRects(nPageIndex: ULONG_T; 
                                  var stRects: {NOT_OLEAUTO(PXC_RectF)}OleVariant; 
                                  nRectsCount: ULONG_T; nFlags: ULONG_T; 
                                  const pCumulInvInfo: IPXV_InvalidatePagesInfo); dispid 1610743835;
    procedure InvalidateAnnot(const pAnnot: IPXC_Annotation; nFlags: ULONG_T; 
                              const pCumulInvInfo: IPXV_InvalidatePagesInfo); dispid 1610743836;
    procedure InvalidateAnnots(const pAnnotsList: IPXV_AnnotsList; nFlags: ULONG_T; 
                               const pCumulInvInfo: IPXV_InvalidatePagesInfo); dispid 1610743837;
    procedure FireAnnotsChangedEvent(const pAnnots: IPXV_AnnotsList); dispid 1610743838;
    procedure FireAnnotChangedEvent(const pAnnot: IPXC_Annotation); dispid 1610743839;
    procedure FireAnnotsInsertedEvent(const pAnnots: IPXV_AnnotsList); dispid 1610743840;
    procedure FireAnnotInsertedEvent(const pAnnot: IPXC_Annotation); dispid 1610743841;
    procedure FireAnnotsDeletedEvent(const pAnnots: IPXV_AnnotsList); dispid 1610743842;
    procedure FireAnnotDeletedEvent(const pAnnot: IPXC_Annotation); dispid 1610743843;
    procedure FireBookmarksChangedEvent(const pBookmarks: IPXV_BookmList); dispid 1610743844;
    procedure FireBookmarkChangedEvent(const pBookmark: IPXC_Bookmark); dispid 1610743845;
    procedure FireBookmarksInsertedEvent(const pBookmarks: IPXV_BookmList); dispid 1610743846;
    procedure FireBookmarkInsertedEvent(const pBookmark: IPXC_Bookmark); dispid 1610743847;
    procedure FireBookmarksDeletedEvent(const pBookmarks: IPXV_BookmList); dispid 1610743848;
    procedure FireBookmarkDeletedEvent(const pBookmark: IPXC_Bookmark); dispid 1610743849;
    function CreateContentsChangesInfo: IPXV_DocContentsChangesInfo; dispid 1610743850;
    procedure FireContentsChangedEvent(const pChangesInfo: IPXV_DocContentsChangesInfo); dispid 1610743851;
    function GetPlainText(nPageIndex: ULONG_T; nFirstCharIndex: ULONG_T; nCharsCount: ULONG_T): WideString; dispid 1610743852;
    property Modified: WordBool dispid 1610743853;
    procedure SetModified(bModified: WordBool; nLevel: ULONG_T); dispid 1610743855;
    property ModificationLevel: Integer readonly dispid 1610743856;
    property PagesViewRotation: Integer dispid 1610743857;
    property ActiveView: IPXV_DocumentView readonly dispid 1610743859;
    property PrivateMode: WordBool dispid 1610743860;
    procedure InvalidateBookmarks(const pBookmarks: IPXV_BookmList; bUpdate: WordBool); dispid 1610743862;
    procedure InvalidateBookmark(const pBookmark: IPXC_Bookmark; bUpdate: WordBool); dispid 1610743863;
    function AddNewHighlighter(nType: PXV_DocHighlightType): IPXV_DocHighlighter; dispid 1610743864;
    procedure RemoveHighlighter(const pHighlighter: IPXV_DocHighlighter); dispid 1610743865;
    procedure Save(const pDest: IUnknown; nFlags: Integer; const pProgress: IProgressMon; 
                   const pDestConv: IPXV_ExportConverter; const pDestConvParams: ICab; 
                   const pDestFS: IAFS_FileSys; const pAdvancedParams: ICab; hWndParent: HANDLE_T); dispid 1610743866;
    procedure ShowFullScreen(bShow: WordBool); dispid 1610743867;
    property InFullScreen: WordBool readonly dispid 1610743868;
    procedure LoadPrintParamsFromDocProps(const pPrintOperation: IOperation); dispid 1610743869;
    procedure RegisterPagesViewDrawCallback(nStage: PXV_PagesViewDrawStage; 
                                            const pCallback: IPXV_PagesViewDrawCallback; 
                                            nFlags: LongWord); dispid 1610743870;
    procedure UnregisterPagesViewDrawCallback(nStage: PXV_PagesViewDrawStage; 
                                              const pCallback: IPXV_PagesViewDrawCallback); dispid 1610743871;
    procedure UnregisterPagesViewDrawCallback2(const pCallback: IPXV_PagesViewDrawCallback); dispid 1610743872;
    procedure FireFieldsChangedEvent(const pFields: IPXV_FormFieldsList); dispid 1610743873;
    procedure FireFieldChangedEvent(const pField: IPXC_FormField); dispid 1610743874;
    procedure FireFieldsInsertedEvent(const pFields: IPXV_FormFieldsList); dispid 1610743875;
    procedure FireFieldInsertedEvent(const pField: IPXC_FormField); dispid 1610743876;
    procedure FireFieldsDeletedEvent(const pFields: IPXV_FormFieldsList); dispid 1610743877;
    procedure FireFieldDeletedEvent(const pField: IPXC_FormField); dispid 1610743878;
    property InfoBar: IPXV_DocInfoBar readonly dispid 1610743879;
    property Parent: IPXV_Document readonly dispid 1610743880;
    procedure DiscardPDFACompilance; dispid 1610743881;
    function GetDestFolderForSaveAs: IAFS_Name; dispid 1610743882;
    procedure StartEditAnnotText(const pAnnot: IPXC_Annotation); dispid 1610743883;
    procedure StartEditPageText(nPageIndex: ULONG_T; nTextBlockIndex: ULONG_T); dispid 1610743884;
    property ActiveTextEditor: IPXV_TextEditor readonly dispid 1610743885;
    function CreateAdvancedSaveParams: ICab; dispid 1610743886;
  end;

// *********************************************************************//
// Interface: IPXV_DocSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3405AD2D-C01C-4EE7-B551-5613AABFEFF2}
// *********************************************************************//
  IPXV_DocSelection = interface(IDispatch)
    ['{3405AD2D-C01C-4EE7-B551-5613AABFEFF2}']
    function Get_ID: Integer; safecall;
    function Get_ClusterID: Integer; safecall;
    function Get_Flags: ULONG_T; safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_IsVisible: WordBool; safecall;
    procedure Clear; safecall;
    function Get_CanCopy: WordBool; safecall;
    function Get_CanPaste: WordBool; safecall;
    function Get_CanCut: WordBool; safecall;
    function Get_CanDelete: WordBool; safecall;
    procedure Copy; safecall;
    procedure Paste; safecall;
    procedure Cut; safecall;
    procedure Delete; safecall;
    procedure Show(bShow: WordBool; bAnimated: WordBool); safecall;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); safecall;
    procedure Highlight; safecall;
    procedure StopHighlighting; safecall;
    procedure Redraw; safecall;
    procedure OnActivate; safecall;
    procedure OnDeactivate; safecall;
    procedure OnAdd(const pNewOwner: IPXV_Document); safecall;
    procedure OnRemove(const pOldOwner: IPXV_Document); safecall;
    property ID: Integer read Get_ID;
    property ClusterID: Integer read Get_ClusterID;
    property Flags: ULONG_T read Get_Flags;
    property IsEmpty: WordBool read Get_IsEmpty;
    property IsVisible: WordBool read Get_IsVisible;
    property CanCopy: WordBool read Get_CanCopy;
    property CanPaste: WordBool read Get_CanPaste;
    property CanCut: WordBool read Get_CanCut;
    property CanDelete: WordBool read Get_CanDelete;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3405AD2D-C01C-4EE7-B551-5613AABFEFF2}
// *********************************************************************//
  IPXV_DocSelectionDisp = dispinterface
    ['{3405AD2D-C01C-4EE7-B551-5613AABFEFF2}']
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_DocSelectionHandler
// Flags:     (128) NonExtensible
// GUID:      {D8CB3982-DD8C-4738-936D-7F5F9472EAC7}
// *********************************************************************//
  IPXV_DocSelectionHandler = interface(IUnknown)
    ['{D8CB3982-DD8C-4738-936D-7F5F9472EAC7}']
    function IsSelHandler(const pDoc: IPXV_Document; const pDocSel: IPXV_DocSelection; 
                          out bIsHandler: WordBool): HResult; stdcall;
    function OnStartSelHandling(const pDoc: IPXV_Document; const pNewDocSel: IPXV_DocSelection): HResult; stdcall;
    function OnStopSelHandling(const pDoc: IPXV_Document; const pOldDocSel: IPXV_DocSelection): HResult; stdcall;
    function CanShowSelProps(const pDoc: IPXV_Document; const pDocSel: IPXV_DocSelection; 
                             bDlg: WordBool; out bCanShow: WordBool): HResult; stdcall;
    function ShowSelPropsDlg(const pDoc: IPXV_Document; const pDocSel: IPXV_DocSelection; 
                             hWndParent: HANDLE_T; nFlags: ULONG_T): HResult; stdcall;
    function CanRenameSel(const pDoc: IPXV_Document; const pDocSel: IPXV_DocSelection; 
                          out bVal: WordBool): HResult; stdcall;
    function ShowRenameSelDlg(const pDoc: IPXV_Document; const pDocSel: IPXV_DocSelection; 
                              hWndParent: HANDLE_T; nFlags: ULONG_T): HResult; stdcall;
    function OnSelChanged(const pDoc: IPXV_Document; const pDocSel: IPXV_DocSelection): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_Tool
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {211AAF91-E97A-454C-9669-EDAEC904E16D}
// *********************************************************************//
  IPXV_Tool = interface(IDispatch)
    ['{211AAF91-E97A-454C-9669-EDAEC904E16D}']
    function Get_ID: Integer; safecall;
    function Get_Name: WideString; safecall;
    function Get_Description: WideString; safecall;
    function Get_Features: ULONG_T; safecall;
    function Get_IsEnabled(const pView: IPXV_PagesView): WordBool; safecall;
    function Get_IsExclusive(const pDoc: IPXV_Document): WordBool; safecall;
    procedure OnActivated(const pDoc: IPXV_Document; nFlags: ULONG_T); safecall;
    procedure OnDeactivated(const pDoc: IPXV_Document; nFlags: ULONG_T); safecall;
    procedure OnFinalize; safecall;
    procedure OnProcessViewEvent(const pView: IPXV_PagesView; const pEvent: IUIX_Event); safecall;
    function CanActivateForDocument(const pDoc: IPXV_Document): WordBool; safecall;
    property ID: Integer read Get_ID;
    property Name: WideString read Get_Name;
    property Description: WideString read Get_Description;
    property Features: ULONG_T read Get_Features;
    property IsEnabled[const pView: IPXV_PagesView]: WordBool read Get_IsEnabled;
    property IsExclusive[const pDoc: IPXV_Document]: WordBool read Get_IsExclusive;
  end;

// *********************************************************************//
// DispIntf:  IPXV_ToolDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {211AAF91-E97A-454C-9669-EDAEC904E16D}
// *********************************************************************//
  IPXV_ToolDisp = dispinterface
    ['{211AAF91-E97A-454C-9669-EDAEC904E16D}']
    property ID: Integer readonly dispid 1610743808;
    property Name: WideString readonly dispid 1610743809;
    property Description: WideString readonly dispid 1610743810;
    property Features: ULONG_T readonly dispid 1610743811;
    property IsEnabled[const pView: IPXV_PagesView]: WordBool readonly dispid 1610743812;
    property IsExclusive[const pDoc: IPXV_Document]: WordBool readonly dispid 1610743813;
    procedure OnActivated(const pDoc: IPXV_Document; nFlags: ULONG_T); dispid 1610743814;
    procedure OnDeactivated(const pDoc: IPXV_Document; nFlags: ULONG_T); dispid 1610743815;
    procedure OnFinalize; dispid 1610743816;
    procedure OnProcessViewEvent(const pView: IPXV_PagesView; const pEvent: IUIX_Event); dispid 1610743817;
    function CanActivateForDocument(const pDoc: IPXV_Document): WordBool; dispid 1610743818;
  end;

// *********************************************************************//
// Interface: IPXV_PagesView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {209EE7F1-1F4F-49EE-9F26-01D7118E48D1}
// *********************************************************************//
  IPXV_PagesView = interface(IPXV_View)
    ['{209EE7F1-1F4F-49EE-9F26-01D7118E48D1}']
    function Get_DocView: IPXV_DocumentView; safecall;
    function Get_Layout: IPXV_PagesLayoutManager; safecall;
    procedure Set_Layout(const pLayoutMan: IPXV_PagesLayoutManager); safecall;
    procedure RedrawRect(var stRect: tagRECT); safecall;
    procedure Redraw; safecall;
    procedure RegisterDrawCallback(nStage: PXV_PagesViewDrawStage; 
                                   const pCallback: IPXV_PagesViewDrawCallback; nFlags: ULONG_T); safecall;
    procedure UnregisterDrawCallback(nStage: PXV_PagesViewDrawStage; 
                                     const pCallback: IPXV_PagesViewDrawCallback); safecall;
    procedure UnregisterDrawCallback2(const pCallback: IPXV_PagesViewDrawCallback); safecall;
    procedure ZoomInOut(bZoomIn: WordBool; bAllowSmooth: WordBool); safecall;
    procedure SetZoom(nZoomMode: PXV_ZoomMode; nZoomLevel: Double; bAllowSmooth: WordBool); safecall;
    procedure ZoomToRect(var stRect: tagRECT; bZoomIn: WordBool; bAllowSmooth: WordBool); safecall;
    procedure ZoomToPoint(nZoomLevel: Double; var stInPoint: tagPOINT; var stDestPoint: tagPOINT; 
                          bAllowSmooth: WordBool); safecall;
    function Get_Cursor: Integer; safecall;
    procedure Set_Cursor(nCursorID: Integer); safecall;
    function Get_IsCursorLocked: WordBool; safecall;
    procedure LockCursor; safecall;
    procedure UnlockCursor; safecall;
    procedure GetAnnotRectOnPage(const pAnnot: IPXC_Annotation; out stRect: PXC_Rect); safecall;
    procedure GetAnnotRectOnDevice(const pAnnot: IPXC_Annotation; out stRect: tagRECT); safecall;
    function GetAnnotFromPt(var stPoint: tagPOINT; out nHitTestCode: Integer): IPXC_Annotation; safecall;
    function GetLinkFromPt(var stPoint: tagPOINT; out nHitTestCode: Integer): IPXC_Annotation; safecall;
    function GetLastHitTestRes(out nHitTestCode: Integer): IPXC_Annotation; safecall;
    function GetLastHitTestPt: tagPOINT; safecall;
    function IsAnnotVisible(const pAnnot: IPXC_Annotation): WordBool; safecall;
    function Get_MouseCapture: IPXV_Tool; safecall;
    procedure Set_MouseCapture(const pMouseCapture: IPXV_Tool); safecall;
    procedure StartAutoScroll(nDX: Integer; nDY: Integer; bIncrementalSpeed: WordBool); safecall;
    procedure StopAutoScroll; safecall;
    function Get_AutoScrollStarted: WordBool; safecall;
    function Get_OCContext: IPXC_OCContext; safecall;
    procedure InvalidatePages(const pInvPagesInfo: IPXV_InvalidatePagesInfo); safecall;
    procedure InvalidatePage(nPageIndex: ULONG_T; nFlags: ULONG_T); safecall;
    procedure InvalidatePageRects(nPageIndex: ULONG_T; var stRects: PXC_RectF; 
                                  nRectsCount: ULONG_T; nFlags: ULONG_T); safecall;
    procedure InvalidateAnnot(const pAnnot: IPXC_Annotation; nFlags: ULONG_T); safecall;
    procedure EnsureVisibleAnnot(const pAnnot: IPXC_Annotation; bAllowPartial: WordBool); safecall;
    function Get_SnapParams: PXV_SnapParams; safecall;
    function Get_GridParams: PXV_GridParams; safecall;
    function SnapPoint(nPageIdx: ULONG_T; var ptIn: PXC_Point; out ptOut: PXC_Point; 
                       nAddFlags: ULONG_T; nRemoveFlags: ULONG_T; var pSnapParams: PXV_SnapParams; 
                       var pGridParams: PXV_GridParams): ULONG_T; safecall;
    procedure ShowSnapMark(var stInfo: PXV_SnapInfo; bForceUpdate: WordBool); safecall;
    procedure HideSnapMark; safecall;
    function Get_IsFullScreen: WordBool; safecall;
    function Get_IsFullScreenPresentation: WordBool; safecall;
    procedure ShowInfoTip(const sText: WideString; const pIcon: IUIX_Icon; nFillColor: ULONG_T; 
                          nBorderColor: ULONG_T; nTextColor: ULONG_T; nFlags: ULONG_T); safecall;
    procedure HideInfoTip(bAnimated: WordBool); safecall;
    property DocView: IPXV_DocumentView read Get_DocView;
    property Layout: IPXV_PagesLayoutManager read Get_Layout write Set_Layout;
    property Cursor: Integer read Get_Cursor write Set_Cursor;
    property IsCursorLocked: WordBool read Get_IsCursorLocked;
    property MouseCapture: IPXV_Tool read Get_MouseCapture write Set_MouseCapture;
    property AutoScrollStarted: WordBool read Get_AutoScrollStarted;
    property OCContext: IPXC_OCContext read Get_OCContext;
    property SnapParams: PXV_SnapParams read Get_SnapParams;
    property GridParams: PXV_GridParams read Get_GridParams;
    property IsFullScreen: WordBool read Get_IsFullScreen;
    property IsFullScreenPresentation: WordBool read Get_IsFullScreenPresentation;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PagesViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {209EE7F1-1F4F-49EE-9F26-01D7118E48D1}
// *********************************************************************//
  IPXV_PagesViewDisp = dispinterface
    ['{209EE7F1-1F4F-49EE-9F26-01D7118E48D1}']
    property DocView: IPXV_DocumentView readonly dispid 1610874880;
    property Layout: IPXV_PagesLayoutManager dispid 1610874881;
    procedure RedrawRect(var stRect: {NOT_OLEAUTO(tagRECT)}OleVariant); dispid 1610874883;
    procedure Redraw; dispid 1610874884;
    procedure RegisterDrawCallback(nStage: PXV_PagesViewDrawStage; 
                                   const pCallback: IPXV_PagesViewDrawCallback; nFlags: ULONG_T); dispid 1610874885;
    procedure UnregisterDrawCallback(nStage: PXV_PagesViewDrawStage; 
                                     const pCallback: IPXV_PagesViewDrawCallback); dispid 1610874886;
    procedure UnregisterDrawCallback2(const pCallback: IPXV_PagesViewDrawCallback); dispid 1610874887;
    procedure ZoomInOut(bZoomIn: WordBool; bAllowSmooth: WordBool); dispid 1610874888;
    procedure SetZoom(nZoomMode: PXV_ZoomMode; nZoomLevel: Double; bAllowSmooth: WordBool); dispid 1610874889;
    procedure ZoomToRect(var stRect: {NOT_OLEAUTO(tagRECT)}OleVariant; bZoomIn: WordBool; 
                         bAllowSmooth: WordBool); dispid 1610874890;
    procedure ZoomToPoint(nZoomLevel: Double; var stInPoint: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                          var stDestPoint: {NOT_OLEAUTO(tagPOINT)}OleVariant; bAllowSmooth: WordBool); dispid 1610874891;
    property Cursor: Integer dispid 1610874892;
    property IsCursorLocked: WordBool readonly dispid 1610874894;
    procedure LockCursor; dispid 1610874895;
    procedure UnlockCursor; dispid 1610874896;
    procedure GetAnnotRectOnPage(const pAnnot: IPXC_Annotation; 
                                 out stRect: {NOT_OLEAUTO(PXC_Rect)}OleVariant); dispid 1610874897;
    procedure GetAnnotRectOnDevice(const pAnnot: IPXC_Annotation; 
                                   out stRect: {NOT_OLEAUTO(tagRECT)}OleVariant); dispid 1610874898;
    function GetAnnotFromPt(var stPoint: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                            out nHitTestCode: Integer): IPXC_Annotation; dispid 1610874899;
    function GetLinkFromPt(var stPoint: {NOT_OLEAUTO(tagPOINT)}OleVariant; out nHitTestCode: Integer): IPXC_Annotation; dispid 1610874900;
    function GetLastHitTestRes(out nHitTestCode: Integer): IPXC_Annotation; dispid 1610874901;
    function GetLastHitTestPt: {NOT_OLEAUTO(tagPOINT)}OleVariant; dispid 1610874902;
    function IsAnnotVisible(const pAnnot: IPXC_Annotation): WordBool; dispid 1610874903;
    property MouseCapture: IPXV_Tool dispid 1610874904;
    procedure StartAutoScroll(nDX: Integer; nDY: Integer; bIncrementalSpeed: WordBool); dispid 1610874906;
    procedure StopAutoScroll; dispid 1610874907;
    property AutoScrollStarted: WordBool readonly dispid 1610874908;
    property OCContext: IPXC_OCContext readonly dispid 1610874909;
    procedure InvalidatePages(const pInvPagesInfo: IPXV_InvalidatePagesInfo); dispid 1610874910;
    procedure InvalidatePage(nPageIndex: ULONG_T; nFlags: ULONG_T); dispid 1610874911;
    procedure InvalidatePageRects(nPageIndex: ULONG_T; 
                                  var stRects: {NOT_OLEAUTO(PXC_RectF)}OleVariant; 
                                  nRectsCount: ULONG_T; nFlags: ULONG_T); dispid 1610874912;
    procedure InvalidateAnnot(const pAnnot: IPXC_Annotation; nFlags: ULONG_T); dispid 1610874913;
    procedure EnsureVisibleAnnot(const pAnnot: IPXC_Annotation; bAllowPartial: WordBool); dispid 1610874914;
    property SnapParams: {NOT_OLEAUTO(PXV_SnapParams)}OleVariant readonly dispid 1610874915;
    property GridParams: {NOT_OLEAUTO(PXV_GridParams)}OleVariant readonly dispid 1610874916;
    function SnapPoint(nPageIdx: ULONG_T; var ptIn: {NOT_OLEAUTO(PXC_Point)}OleVariant; 
                       out ptOut: {NOT_OLEAUTO(PXC_Point)}OleVariant; nAddFlags: ULONG_T; 
                       nRemoveFlags: ULONG_T; 
                       var pSnapParams: {NOT_OLEAUTO(PXV_SnapParams)}OleVariant; 
                       var pGridParams: {NOT_OLEAUTO(PXV_GridParams)}OleVariant): ULONG_T; dispid 1610874917;
    procedure ShowSnapMark(var stInfo: {NOT_OLEAUTO(PXV_SnapInfo)}OleVariant; bForceUpdate: WordBool); dispid 1610874918;
    procedure HideSnapMark; dispid 1610874919;
    property IsFullScreen: WordBool readonly dispid 1610874920;
    property IsFullScreenPresentation: WordBool readonly dispid 1610874921;
    procedure ShowInfoTip(const sText: WideString; const pIcon: IUIX_Icon; nFillColor: ULONG_T; 
                          nBorderColor: ULONG_T; nTextColor: ULONG_T; nFlags: ULONG_T); dispid 1610874922;
    procedure HideInfoTip(bAnimated: WordBool); dispid 1610874923;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_PagesLayoutManager
// Flags:     (0)
// GUID:      {7BC78153-C932-4893-9095-26451DE68267}
// *********************************************************************//
  IPXV_PagesLayoutManager = interface(IUnknown)
    ['{7BC78153-C932-4893-9095-26451DE68267}']
    function Get_ID(out nID: Integer): HResult; stdcall;
    function Get_Resolution(out nDpi: ULONG_T): HResult; stdcall;
    function Set_Resolution(nDpi: ULONG_T): HResult; stdcall;
    function Get_FeatureFlags(out nFlags: ULONG_T): HResult; stdcall;
    function Set_AppearanceFlags(nFlags: ULONG_T): HResult; stdcall;
    function Get_AppearanceFlags(out nFlags: ULONG_T): HResult; stdcall;
    function Get_LayoutMode(out nModeName: PXC_PagesLayout): HResult; stdcall;
    function Set_LayoutMode(nModeName: PXC_PagesLayout): HResult; stdcall;
    function Get_ZoomMode(out nZoomMode: PXV_ZoomMode): HResult; stdcall;
    function Get_ZoomLevel(out nZoomLevel: Double): HResult; stdcall;
    function Get_CurrentPage(out nPageNum: ULONG_T): HResult; stdcall;
    function Set_CurrentPage(nPageNum: ULONG_T): HResult; stdcall;
    function Get_ViewRotation(out nViewRotation: Integer): HResult; stdcall;
    function Set_ViewRotation(nViewRotation: Integer): HResult; stdcall;
    function GetScrollInfo(out stViewPos: tagPOINT; out nAllSize: tagSIZE): HResult; stdcall;
    function ProcessViewEvent(const pViewObj: IUIX_Obj; const pEvent: IUIX_Event): HResult; stdcall;
    function GetPageShadows(out stShadows: tagRECT): HResult; stdcall;
    function SetPageShadows(var stShadows: tagRECT): HResult; stdcall;
    function Get_LayoutRegions(out pRegions: IPXV_PagesLayoutRegions): HResult; stdcall;
    function GetNextZoom(out nZM: PXV_ZoomMode; out nZL: Double): HResult; stdcall;
    function GetPrevZoom(out nZM: PXV_ZoomMode; out nZL: Double): HResult; stdcall;
    function SetZoom(nMode: PXV_ZoomMode; nLevel: Double): HResult; stdcall;
    function GetCurPos(var stCurPos: PXV_VirtualPoint): HResult; stdcall;
    function SetCurPos(var stNewPos: PXV_VirtualPoint): HResult; stdcall;
    function Get_ScrollSize(out nScrollSize: tagSIZE): HResult; stdcall;
    function Get_ScrollPos(out stScrollPos: tagPOINT): HResult; stdcall;
    function Set_ScrollPos(stScrollPos: PUserType22): HResult; stdcall;
    function Init(const pDoc: IPXC_Document): HResult; stdcall;
    function LockUpdates: HResult; stdcall;
    function UnLockUpdates: HResult; stdcall;
    function FullRefresh: HResult; stdcall;
    function SetSize(nLayoutWidth: ULONG_T; nLayoutHeight: ULONG_T; nVertScrollBarWidth: ULONG_T; 
                     nHorzScrollBarHeight: ULONG_T): HResult; stdcall;
    function RegisterNotifyHandler(const pHandler: IPXV_PagesLayoutManagerNotifyHandler): HResult; stdcall;
    function UnregisterNotifyHandler(const pHandler: IPXV_PagesLayoutManagerNotifyHandler): HResult; stdcall;
    function GoToDestination(var stDest: PXC_Destination; nGoDestFlags: ULONG_T): HResult; stdcall;
    function DevicePointToPagePoint(nPageNum: ULONG_T; var stDevPoint: tagPOINT; 
                                    bToDefaultUserSpace: WordBool; out stPagePoint: PXC_Point): HResult; stdcall;
    function PagePointToDevicePoint(nPageNum: ULONG_T; var stPagePoint: PXC_Point; 
                                    bFromDefaultUserSpace: WordBool; out stDevPoint: tagPOINT): HResult; stdcall;
    function DeviceRectToPageRect(nPageNum: ULONG_T; var stDevRect: tagRECT; 
                                  bToDefaultUserSpace: WordBool; out stPageRect: PXC_Rect): HResult; stdcall;
    function PageRectToDeviceRect(nPageNum: ULONG_T; var stPageRect: PXC_Rect; 
                                  bFromDefaultUserSpace: WordBool; out stDevRect: tagRECT): HResult; stdcall;
    function GetDeviceToPageMatrix(nPageNum: ULONG_T; bToDefaultUserSpace: WordBool; 
                                   out stMatrix: PXC_Matrix): HResult; stdcall;
    function GetPageToDeviceMatrix(nPageNum: ULONG_T; bFromDefaultUserSpace: WordBool; 
                                   out stMatrix: PXC_Matrix): HResult; stdcall;
    function ZoomToRect(bZoomIn: WordBool; var stRect: tagRECT): HResult; stdcall;
    function ZoomToPt(nLevel: Double; var stPoint: tagPOINT; var stDestPoint: tagPOINT): HResult; stdcall;
    function IsPageRectVisible(nPage: ULONG_T; var stRect: PXC_Rect; 
                               out nVisType: PXV_VisibilityType): HResult; stdcall;
    function EnsureVisible(nPage: ULONG_T; var stRect: PXC_Rect; bAllowPartial: WordBool): HResult; stdcall;
    function IsPageVisible(nPage: ULONG_T; out bVisible: WordBool): HResult; stdcall;
    function HitTest(var stDevPoint: tagPOINT; out stPagePoint: PXC_Point; out nPage: Integer): HResult; stdcall;
    function GetNearestPage(var stDevPoint: tagPOINT; bAllowInvisible: WordBool; out nPage: Integer): HResult; stdcall;
    function GetPageRect(nPage: ULONG_T; out stPageRect: tagRECT): HResult; stdcall;
    function GetPageSize(nPage: ULONG_T; out nWidth: Double; out nHeight: Double): HResult; stdcall;
    function MovePagePointToDevicePoint(nPage: ULONG_T; var stPagePoint: PXC_Point; 
                                        bInDefaultUserSpace: WordBool; var stDevPoint: tagPOINT): HResult; stdcall;
    function GetPageBorders(out stShadows: tagRECT): HResult; stdcall;
    function SetPageBorders(var stShadows: tagRECT): HResult; stdcall;
    function Navigate(nMode: PXV_PagesLayoutNavigateMode; nFlags: LongWord): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PagesLayoutRegions
// Flags:     (0)
// GUID:      {6AAB6ED7-39C3-41FF-B009-A0E9ABA01A92}
// *********************************************************************//
  IPXV_PagesLayoutRegions = interface(IUnknown)
    ['{6AAB6ED7-39C3-41FF-B009-A0E9ABA01A92}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out stRegion: PXV_PagesLayoutRegion): HResult; stdcall;
    function Clone(out pClone: IPXV_PagesLayoutRegions): HResult; stdcall;
    function Find(nPageIndex: ULONG_T; out stRegion: PXV_PagesLayoutRegion): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PagesLayoutManagerNotifyHandler
// Flags:     (0)
// GUID:      {25462D4C-AA1B-4C0C-BDA7-99125BA8B8CE}
// *********************************************************************//
  IPXV_PagesLayoutManagerNotifyHandler = interface(IUnknown)
    ['{25462D4C-AA1B-4C0C-BDA7-99125BA8B8CE}']
    function OnPagesLayoutChanged(const pLayout: IPXV_PagesLayoutManager; nChangesFlags: ULONG_T; 
                                  var pScrollDelta: tagPOINT; 
                                  const pOldRegions: IPXV_PagesLayoutRegions): HResult; stdcall;
    function OnPagesLayoutChanging(const pLayout: IPXV_PagesLayoutManager; nChangesFlags: ULONG_T; 
                                   var pScrollDelta: tagPOINT; 
                                   const pNewRegions: IPXV_PagesLayoutRegions): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PagesViewDrawCallback
// Flags:     (128) NonExtensible
// GUID:      {FEEC0658-F359-4199-91D8-52DA801E5049}
// *********************************************************************//
  IPXV_PagesViewDrawCallback = interface(IUnknown)
    ['{FEEC0658-F359-4199-91D8-52DA801E5049}']
    function OnDrawPagesView(const pView: IPXV_PagesView; nStage: PXV_PagesViewDrawStage; 
                             const pRC: IUIX_RenderContext; 
                             const pPageRegions: IPXV_PagesLayoutRegions): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_InvalidatePagesInfo
// Flags:     (128) NonExtensible
// GUID:      {56A0DC76-234B-4AA2-8E89-712A14031C46}
// *********************************************************************//
  IPXV_InvalidatePagesInfo = interface(IUnknown)
    ['{56A0DC76-234B-4AA2-8E89-712A14031C46}']
    function Get_IsEmpty(out bIsEmpty: WordBool): HResult; stdcall;
    function Get_HasInvalidAnnots(out bHasInvAnnots: WordBool): HResult; stdcall;
    function Get_GroupsCount(out nCount: ULONG_T): HResult; stdcall;
    function FindGroup(nPageIndex: ULONG_T; out nGroupIndex: ULONG_T): HResult; stdcall;
    function GetGroupSize(nGroupIndex: ULONG_T; out nGroupSize: ULONG_T): HResult; stdcall;
    function GetPageIndex(nGroupIndex: ULONG_T; out nPageIndex: ULONG_T): HResult; stdcall;
    function GetGroupItem(nGroupIndex: ULONG_T; nItemIndex: ULONG_T; out stPageRect: PXC_RectF; 
                          out nFlags: ULONG_T; out nAnnotFlags: ULONG_T; out pAnnot: IPXC_Annotation): HResult; stdcall;
    function InvalidateRect(nPageIndex: ULONG_T; var stRect: PXC_RectF; nFlags: ULONG_T): HResult; stdcall;
    function InvalidateAnnot(const pAnnot: IPXC_Annotation; nFlags: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_EnumViewsCallback
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3C341E89-9DC0-4DDA-94D1-BE06A410FC14}
// *********************************************************************//
  IPXV_EnumViewsCallback = interface(IDispatch)
    ['{3C341E89-9DC0-4DDA-94D1-BE06A410FC14}']
    procedure OnEnumView(nViewTypeID: Integer; const pView: IPXV_View); safecall;
  end;

// *********************************************************************//
// DispIntf:  IPXV_EnumViewsCallbackDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3C341E89-9DC0-4DDA-94D1-BE06A410FC14}
// *********************************************************************//
  IPXV_EnumViewsCallbackDisp = dispinterface
    ['{3C341E89-9DC0-4DDA-94D1-BE06A410FC14}']
    procedure OnEnumView(nViewTypeID: Integer; const pView: IPXV_View); dispid 1610743808;
  end;

// *********************************************************************//
// Interface: IPXV_AnnotsList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A6946FB1-A6AF-4F23-86F3-D86042125A33}
// *********************************************************************//
  IPXV_AnnotsList = interface(IDispatch)
    ['{A6946FB1-A6AF-4F23-86F3-D86042125A33}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXC_Annotation; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Remove2(const pItem: IPXC_Annotation); safecall;
    procedure Insert(const pItem: IPXC_Annotation; nIndex: ULONG_T); safecall;
    function Find(const pItem: IPXC_Annotation): Integer; safecall;
    procedure InsertFrom(const pSrc: IPXV_AnnotsList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXV_AnnotsList); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXC_Annotation read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_AnnotsListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A6946FB1-A6AF-4F23-86F3-D86042125A33}
// *********************************************************************//
  IPXV_AnnotsListDisp = dispinterface
    ['{A6946FB1-A6AF-4F23-86F3-D86042125A33}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXC_Annotation readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Remove2(const pItem: IPXC_Annotation); dispid 1610743813;
    procedure Insert(const pItem: IPXC_Annotation; nIndex: ULONG_T); dispid 1610743814;
    function Find(const pItem: IPXC_Annotation): Integer; dispid 1610743815;
    procedure InsertFrom(const pSrc: IPXV_AnnotsList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743816;
    procedure CopyFrom(const pSrc: IPXV_AnnotsList); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IPXV_BookmList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {800CE6D3-E641-43D6-AB1B-D011D75D476C}
// *********************************************************************//
  IPXV_BookmList = interface(IDispatch)
    ['{800CE6D3-E641-43D6-AB1B-D011D75D476C}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXC_Bookmark; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_Normalized: WordBool; safecall;
    procedure Set_Normalized(bValue: WordBool); safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Remove2(const pItem: IPXC_Bookmark); safecall;
    procedure Insert(const pItem: IPXC_Bookmark; nIndex: ULONG_T); safecall;
    function Find(const pItem: IPXC_Bookmark): Integer; safecall;
    procedure InsertFrom(const pSrc: IPXV_BookmList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXV_BookmList); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXC_Bookmark read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property Normalized: WordBool read Get_Normalized write Set_Normalized;
  end;

// *********************************************************************//
// DispIntf:  IPXV_BookmListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {800CE6D3-E641-43D6-AB1B-D011D75D476C}
// *********************************************************************//
  IPXV_BookmListDisp = dispinterface
    ['{800CE6D3-E641-43D6-AB1B-D011D75D476C}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXC_Bookmark readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    property Normalized: WordBool dispid 1610743811;
    procedure Clear; dispid 1610743813;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743814;
    procedure Remove2(const pItem: IPXC_Bookmark); dispid 1610743815;
    procedure Insert(const pItem: IPXC_Bookmark; nIndex: ULONG_T); dispid 1610743816;
    function Find(const pItem: IPXC_Bookmark): Integer; dispid 1610743817;
    procedure InsertFrom(const pSrc: IPXV_BookmList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743818;
    procedure CopyFrom(const pSrc: IPXV_BookmList); dispid 1610743819;
  end;

// *********************************************************************//
// Interface: IPXV_DocContentsChangesInfo
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7B27E7FF-6279-49DA-AE6B-8E13AD665B1F}
// *********************************************************************//
  IPXV_DocContentsChangesInfo = interface(IDispatch)
    ['{7B27E7FF-6279-49DA-AE6B-8E13AD665B1F}']
    procedure Clear; safecall;
    function Get_Flags: ULONG_T; safecall;
    procedure AddPage(nPageIndex: ULONG_T; nFlags: ULONG_T); safecall;
    function Get_PagesCount: ULONG_T; safecall;
    function GetPage(nIndex: ULONG_T; out nFlags: ULONG_T): ULONG_T; safecall;
    property Flags: ULONG_T read Get_Flags;
    property PagesCount: ULONG_T read Get_PagesCount;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocContentsChangesInfoDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7B27E7FF-6279-49DA-AE6B-8E13AD665B1F}
// *********************************************************************//
  IPXV_DocContentsChangesInfoDisp = dispinterface
    ['{7B27E7FF-6279-49DA-AE6B-8E13AD665B1F}']
    procedure Clear; dispid 1610743808;
    property Flags: ULONG_T readonly dispid 1610743809;
    procedure AddPage(nPageIndex: ULONG_T; nFlags: ULONG_T); dispid 1610743810;
    property PagesCount: ULONG_T readonly dispid 1610743811;
    function GetPage(nIndex: ULONG_T; out nFlags: ULONG_T): ULONG_T; dispid 1610743812;
  end;

// *********************************************************************//
// Interface: IPXV_DocHighlighter
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8CD00BD8-331B-42A2-AEFB-B5F031FD69A1}
// *********************************************************************//
  IPXV_DocHighlighter = interface(IDispatch)
    ['{8CD00BD8-331B-42A2-AEFB-B5F031FD69A1}']
    function Get_type_: PXV_DocHighlightType; safecall;
    function Get_IsEmpty: WordBool; safecall;
    procedure Clear; safecall;
    function Get_Items(const pObj: IUnknown): IPXV_DocHighlightItems; safecall;
    function Add(const pObj: IUnknown; const pRegions: IUnknown; const pBrush: IUIX_Brush; 
                 const pPen: IUIX_Pen; var pAdvanced: PXV_DocHighlightAdvanced; nFlags: ULONG_T): IPXV_DocHighlightItem; safecall;
    property type_: PXV_DocHighlightType read Get_type_;
    property IsEmpty: WordBool read Get_IsEmpty;
    property Items[const pObj: IUnknown]: IPXV_DocHighlightItems read Get_Items;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocHighlighterDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {8CD00BD8-331B-42A2-AEFB-B5F031FD69A1}
// *********************************************************************//
  IPXV_DocHighlighterDisp = dispinterface
    ['{8CD00BD8-331B-42A2-AEFB-B5F031FD69A1}']
    property type_: PXV_DocHighlightType readonly dispid 1610743808;
    property IsEmpty: WordBool readonly dispid 1610743809;
    procedure Clear; dispid 1610743810;
    property Items[const pObj: IUnknown]: IPXV_DocHighlightItems readonly dispid 1610743811;
    function Add(const pObj: IUnknown; const pRegions: IUnknown; const pBrush: IUIX_Brush; 
                 const pPen: IUIX_Pen; 
                 var pAdvanced: {NOT_OLEAUTO(PXV_DocHighlightAdvanced)}OleVariant; nFlags: ULONG_T): IPXV_DocHighlightItem; dispid 1610743812;
  end;

// *********************************************************************//
// Interface: IPXV_DocHighlightItems
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {206530FD-ED79-48C5-A590-4FC73CF3BD58}
// *********************************************************************//
  IPXV_DocHighlightItems = interface(IDispatch)
    ['{206530FD-ED79-48C5-A590-4FC73CF3BD58}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXV_DocHighlightItem; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXV_DocHighlightItem read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocHighlightItemsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {206530FD-ED79-48C5-A590-4FC73CF3BD58}
// *********************************************************************//
  IPXV_DocHighlightItemsDisp = dispinterface
    ['{206530FD-ED79-48C5-A590-4FC73CF3BD58}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXV_DocHighlightItem readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
  end;

// *********************************************************************//
// Interface: IPXV_DocHighlightItem
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3E2CB9CC-C8AB-4B22-A9E2-362861350CA7}
// *********************************************************************//
  IPXV_DocHighlightItem = interface(IDispatch)
    ['{3E2CB9CC-C8AB-4B22-A9E2-362861350CA7}']
    function Get_Brush: IUIX_Brush; safecall;
    procedure Set_Brush(const pVal: IUIX_Brush); safecall;
    function Get_Pen: IUIX_Pen; safecall;
    procedure Set_Pen(const pVal: IUIX_Pen); safecall;
    function Get_RoundRadius: Integer; safecall;
    procedure Set_RoundRadius(nVal: Integer); safecall;
    procedure Remove; safecall;
    property Brush: IUIX_Brush read Get_Brush write Set_Brush;
    property Pen: IUIX_Pen read Get_Pen write Set_Pen;
    property RoundRadius: Integer read Get_RoundRadius write Set_RoundRadius;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocHighlightItemDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3E2CB9CC-C8AB-4B22-A9E2-362861350CA7}
// *********************************************************************//
  IPXV_DocHighlightItemDisp = dispinterface
    ['{3E2CB9CC-C8AB-4B22-A9E2-362861350CA7}']
    property Brush: IUIX_Brush dispid 1610743808;
    property Pen: IUIX_Pen dispid 1610743810;
    property RoundRadius: Integer dispid 1610743812;
    procedure Remove; dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_FormatConverter
// Flags:     (128) NonExtensible
// GUID:      {BFE82037-0239-4A0D-80EF-83F8073E8DBA}
// *********************************************************************//
  IPXV_FormatConverter = interface(IUnknown)
    ['{BFE82037-0239-4A0D-80EF-83F8073E8DBA}']
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Get_ID(out sID: WideString): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Get_FilterName(out sFilterName: WideString): HResult; stdcall;
    function Get_Extensions(out sExtensions: WideString): HResult; stdcall;
    function Get_Description(out sDesc: WideString): HResult; stdcall;
    function Get_MIME(out sMIME: WideString): HResult; stdcall;
    function Get_Icon(out pIcon: IUIX_Icon): HResult; stdcall;
    function CreateParams(const pInst: IPXV_Inst; out pParams: ICab): HResult; stdcall;
    function ShowPrefsDlg(const pInst: IPXV_Inst; const pParams: ICab; hWndParent: HANDLE_T; 
                          const pSrc: IUnknown; nFlags: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_ExportConverter
// Flags:     (128) NonExtensible
// GUID:      {05BAF564-4ED5-4486-8A92-CD55DFD38427}
// *********************************************************************//
  IPXV_ExportConverter = interface(IPXV_FormatConverter)
    ['{05BAF564-4ED5-4486-8A92-CD55DFD38427}']
    function Convert(const pInst: IPXV_Inst; const pSrc: IPXC_Document; const pDest: IUnknown; 
                     nFlags: ULONG_T; const pParams: ICab; const pProgress: IProgressMon; 
                     hWndParent: HANDLE_T; const pSelPages: IPXV_PagesRegions; 
                     const pReserved: IUnknown): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PagesRegions
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {701DB470-B5AE-441C-B0DD-30EB08295310}
// *********************************************************************//
  IPXV_PagesRegions = interface(IDispatch)
    ['{701DB470-B5AE-441C-B0DD-30EB08295310}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXV_PageRegion; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    function Add(nPageIndex: ULONG_T; nFlags: ULONG_T): IPXV_PageRegion; safecall;
    function Add2(nPageIndex: ULONG_T; var stRectOnPage: PXC_Rect; var stMatrix: PXC_Matrix; 
                  nFlags: ULONG_T): IPXV_PageRegion; safecall;
    procedure Remove(nItemIndex: ULONG_T); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXV_PageRegion read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PagesRegionsDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {701DB470-B5AE-441C-B0DD-30EB08295310}
// *********************************************************************//
  IPXV_PagesRegionsDisp = dispinterface
    ['{701DB470-B5AE-441C-B0DD-30EB08295310}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXV_PageRegion readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    function Add(nPageIndex: ULONG_T; nFlags: ULONG_T): IPXV_PageRegion; dispid 1610743812;
    function Add2(nPageIndex: ULONG_T; var stRectOnPage: {NOT_OLEAUTO(PXC_Rect)}OleVariant; 
                  var stMatrix: {NOT_OLEAUTO(PXC_Matrix)}OleVariant; nFlags: ULONG_T): IPXV_PageRegion; dispid 1610743813;
    procedure Remove(nItemIndex: ULONG_T); dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_PageRegion
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {49237A9D-448A-484D-9036-73E1E6C36628}
// *********************************************************************//
  IPXV_PageRegion = interface(IDispatch)
    ['{49237A9D-448A-484D-9036-73E1E6C36628}']
    function Get_PageIndex: ULONG_T; safecall;
    procedure Set_PageIndex(nPageIndex: ULONG_T); safecall;
    function Get_RectOnPage: PXC_Rect; safecall;
    procedure Set_RectOnPage(stRect: PUserType1); safecall;
    function Get_Matrix: PXC_Matrix; safecall;
    procedure Set_Matrix(stMatrix: PUserType2); safecall;
    function Get_Flags: ULONG_T; safecall;
    procedure Set_Flags(nFlags: ULONG_T); safecall;
    property PageIndex: ULONG_T read Get_PageIndex write Set_PageIndex;
    // Skipped Property "RectOnPage"
    // Skipped Property "Matrix"
    property Flags: ULONG_T read Get_Flags write Set_Flags;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PageRegionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {49237A9D-448A-484D-9036-73E1E6C36628}
// *********************************************************************//
  IPXV_PageRegionDisp = dispinterface
    ['{49237A9D-448A-484D-9036-73E1E6C36628}']
    property PageIndex: ULONG_T dispid 1610743808;
    function RectOnPage: {NOT_OLEAUTO(PXC_Rect)}OleVariant; dispid 1610743810;
    function Matrix: {NOT_OLEAUTO(PXC_Matrix)}OleVariant; dispid 1610743812;
    property Flags: ULONG_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_FormFieldsList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D14D8C84-A4A9-4CC4-AD61-441F949A360A}
// *********************************************************************//
  IPXV_FormFieldsList = interface(IDispatch)
    ['{D14D8C84-A4A9-4CC4-AD61-441F949A360A}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXC_FormField; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Remove2(const pItem: IPXC_FormField); safecall;
    procedure Insert(const pItem: IPXC_FormField; nIndex: ULONG_T); safecall;
    function Find(const pItem: IPXC_FormField): Integer; safecall;
    procedure InsertFrom(const pSrc: IPXV_FormFieldsList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXV_FormFieldsList); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXC_FormField read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_FormFieldsListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D14D8C84-A4A9-4CC4-AD61-441F949A360A}
// *********************************************************************//
  IPXV_FormFieldsListDisp = dispinterface
    ['{D14D8C84-A4A9-4CC4-AD61-441F949A360A}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXC_FormField readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Remove2(const pItem: IPXC_FormField); dispid 1610743813;
    procedure Insert(const pItem: IPXC_FormField; nIndex: ULONG_T); dispid 1610743814;
    function Find(const pItem: IPXC_FormField): Integer; dispid 1610743815;
    procedure InsertFrom(const pSrc: IPXV_FormFieldsList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743816;
    procedure CopyFrom(const pSrc: IPXV_FormFieldsList); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IPXV_DocInfoBar
// Flags:     (128) NonExtensible
// GUID:      {69534F03-007C-47C1-80F2-A5856E982AB2}
// *********************************************************************//
  IPXV_DocInfoBar = interface(IUnknown)
    ['{69534F03-007C-47C1-80F2-A5856E982AB2}']
    function LockUpdates: HResult; stdcall;
    function UnLockUpdates: HResult; stdcall;
    function AddSpan(nSpanID: Integer; nWeight: Integer; nColor: LongWord; nFlags: Integer): HResult; stdcall;
    function SetIcon(nSpanID: Integer; const pIcon: IUIX_Icon): HResult; stdcall;
    function SetText(nSpanID: Integer; const sText: WideString): HResult; stdcall;
    function SetColor(nSpanID: Integer; nColor: LongWord): HResult; stdcall;
    function AddButton(nSpanID: Integer; nBtnID: Integer; pText: PWideChar; pTooltip: PWideChar; 
                       const pIcon: IUIX_Icon; nInsertPos: Integer; const pSubMenu: IUIX_CmdMenu; 
                       nFlags: Integer): HResult; stdcall;
    function AddCommand(nSpanID: Integer; nCmdID: Integer; nInsertPos: Integer; 
                        const pSubMenu: IUIX_CmdMenu; const pCustomText: WideString): HResult; stdcall;
    function RemoveButton(nSpanID: Integer; nBtnID: Integer): HResult; stdcall;
    function EnableButton(nSpanID: Integer; nBtnID: Integer; bEnable: WordBool): HResult; stdcall;
    function SetButtonPressed(nSpanID: Integer; nBtnID: Integer; bPressed: WordBool): HResult; stdcall;
    function FindButton(nSpanID: Integer; nBtnID: Integer; out nIndex: Integer): HResult; stdcall;
    function SetButtonIcon(nSpanID: Integer; nBtnID: Integer; const pIcon: IUIX_Icon): HResult; stdcall;
    function SetButtonSubMenu(nSpanID: Integer; nBtnID: Integer; const pSubMenu: IUIX_CmdMenu): HResult; stdcall;
    function SetButtonText(nSpanID: Integer; nBtnID: Integer; pText: PWideChar): HResult; stdcall;
    function SetButtonTooltip(nSpanID: Integer; nBtnID: Integer; pTooltip: PWideChar): HResult; stdcall;
    function RemoveSpan(nSpanID: Integer): HResult; stdcall;
    function ExpandSpan(nSpanID: Integer): HResult; stdcall;
    function HighlightSpan(nSpanID: Integer; nAutoRepeatAfterInterval: LongWord; nFlags: Integer): HResult; stdcall;
    function StopSpanHighlighting(nSpanID: Integer): HResult; stdcall;
    function GetExpandedSpan(out nSpanID: Integer): HResult; stdcall;
    function HasSpan(nSpanID: Integer; out bRes: WordBool): HResult; stdcall;
    function Get_IsEmpty(out bVal: WordBool): HResult; stdcall;
    function Get_Minimized(out bVal: WordBool): HResult; stdcall;
    function Set_Minimized(bVal: WordBool): HResult; stdcall;
    function Get_Hidden(out bVal: WordBool): HResult; stdcall;
    function Set_Hidden(bVal: WordBool): HResult; stdcall;
    function Get_Callbacks(out pVal: IPXV_DocInfoBarCallbacks): HResult; stdcall;
    function Set_Callbacks(const pVal: IPXV_DocInfoBarCallbacks): HResult; stdcall;
    function AddSpan2(nSpanID: Integer; nFlags: Integer): HResult; stdcall;
    function RemoveAllButtons(nSpanID: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_DocInfoBarCallbacks
// Flags:     (128) NonExtensible
// GUID:      {2762E5E6-2E16-4032-AF9D-3A7B5ABAAB55}
// *********************************************************************//
  IPXV_DocInfoBarCallbacks = interface(IUnknown)
    ['{2762E5E6-2E16-4032-AF9D-3A7B5ABAAB55}']
    function OnTextLinkClicked(const pView: IPXV_DocumentView; nSpanID: Integer; nLinkID: Integer): HResult; stdcall;
    function OnButtonClicked(const pView: IPXV_DocumentView; nSpanID: Integer; nBtnID: Integer): HResult; stdcall;
    function OnMenuItemClicked(const pView: IPXV_DocumentView; nSpanID: Integer; nBtnID: Integer; 
                               nItemID: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_TextEditor
// Flags:     (0)
// GUID:      {191E504F-B880-41BE-8F4E-C6B9A3C8B1A3}
// *********************************************************************//
  IPXV_TextEditor = interface(IUnknown)
    ['{191E504F-B880-41BE-8F4E-C6B9A3C8B1A3}']
    function Get_View(out pView: IPXV_PagesView): HResult; stdcall;
    function Get_PageIndex(out nIndex: Integer): HResult; stdcall;
    function Get_TextBlockIndex(out nIndex: Integer): HResult; stdcall;
    function Get_TextBlockGroupID(out nID: Integer): HResult; stdcall;
    function Get_Annot(out pAnnot: IPXC_Annotation): HResult; stdcall;
    function Get_NewAnnot(out bNew: WordBool): HResult; stdcall;
    function Get_Modified(out bModified: WordBool): HResult; stdcall;
    function Get_EditCtl(out pEdit: IUIX_Edit): HResult; stdcall;
    function EnsureVisible(bSel: WordBool): HResult; stdcall;
    function Stop(bCancel: WordBool): HResult; stdcall;
    function Refresh(bKeepSel: WordBool): HResult; stdcall;
    function ShowDDList(bShow: WordBool): HResult; stdcall;
    function Get_IsDDListVisible(out bVis: WordBool): HResult; stdcall;
    function EnableAutoFitByTextSize(bFitByTxWidth: WordBool; bFitByTxHeight: WordBool): HResult; stdcall;
    function FitByTextSize(bFitByTxWidth: WordBool; bFitByTxHeight: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_BookmarksView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {98D7F239-5146-4B3D-884D-9008721C75B7}
// *********************************************************************//
  IPXV_BookmarksView = interface(IPXV_View)
    ['{98D7F239-5146-4B3D-884D-9008721C75B7}']
    function Get_DocView: IPXV_DocumentView; safecall;
    procedure ShowBookmark(const pBookm: IPXC_Bookmark; bAllowPartialVisible: WordBool; 
                           bAllowSmoothScroll: WordBool); safecall;
    procedure StartRenameBookmark(const pBookm: IPXC_Bookmark); safecall;
    property DocView: IPXV_DocumentView read Get_DocView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_BookmarksViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {98D7F239-5146-4B3D-884D-9008721C75B7}
// *********************************************************************//
  IPXV_BookmarksViewDisp = dispinterface
    ['{98D7F239-5146-4B3D-884D-9008721C75B7}']
    property DocView: IPXV_DocumentView readonly dispid 1610874880;
    procedure ShowBookmark(const pBookm: IPXC_Bookmark; bAllowPartialVisible: WordBool; 
                           bAllowSmoothScroll: WordBool); dispid 1610874881;
    procedure StartRenameBookmark(const pBookm: IPXC_Bookmark); dispid 1610874882;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_PageThumbnailsView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9BC27C16-F681-4800-9135-6572B6DCDA7A}
// *********************************************************************//
  IPXV_PageThumbnailsView = interface(IPXV_View)
    ['{9BC27C16-F681-4800-9135-6572B6DCDA7A}']
    function Get_DocView: IPXV_DocumentView; safecall;
    property DocView: IPXV_DocumentView read Get_DocView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PageThumbnailsViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9BC27C16-F681-4800-9135-6572B6DCDA7A}
// *********************************************************************//
  IPXV_PageThumbnailsViewDisp = dispinterface
    ['{9BC27C16-F681-4800-9135-6572B6DCDA7A}']
    property DocView: IPXV_DocumentView readonly dispid 1610874880;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_AttachmentsView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {31BA7C6D-BDC2-46A3-AFDB-B49835E96E00}
// *********************************************************************//
  IPXV_AttachmentsView = interface(IPXV_View)
    ['{31BA7C6D-BDC2-46A3-AFDB-B49835E96E00}']
    function Get_DocView: IPXV_DocumentView; safecall;
    procedure ShowAttachment(const pFileAttachment: IPXC_FileSpec); safecall;
    procedure StartRenameAttachment(const pFileAttachment: IPXC_FileSpec); safecall;
    property DocView: IPXV_DocumentView read Get_DocView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_AttachmentsViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {31BA7C6D-BDC2-46A3-AFDB-B49835E96E00}
// *********************************************************************//
  IPXV_AttachmentsViewDisp = dispinterface
    ['{31BA7C6D-BDC2-46A3-AFDB-B49835E96E00}']
    property DocView: IPXV_DocumentView readonly dispid 1610874880;
    procedure ShowAttachment(const pFileAttachment: IPXC_FileSpec); dispid 1610874881;
    procedure StartRenameAttachment(const pFileAttachment: IPXC_FileSpec); dispid 1610874882;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_SignaturesView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55767E02-2E2D-47FB-A666-BB6B3498521D}
// *********************************************************************//
  IPXV_SignaturesView = interface(IPXV_View)
    ['{55767E02-2E2D-47FB-A666-BB6B3498521D}']
    function Get_DocView: IPXV_DocumentView; safecall;
    property DocView: IPXV_DocumentView read Get_DocView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_SignaturesViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {55767E02-2E2D-47FB-A666-BB6B3498521D}
// *********************************************************************//
  IPXV_SignaturesViewDisp = dispinterface
    ['{55767E02-2E2D-47FB-A666-BB6B3498521D}']
    property DocView: IPXV_DocumentView readonly dispid 1610874880;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_CommentsView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2A36038D-FA98-43A7-8DF0-5A9916167753}
// *********************************************************************//
  IPXV_CommentsView = interface(IPXV_View)
    ['{2A36038D-FA98-43A7-8DF0-5A9916167753}']
    function Get_DocView: IPXV_DocumentView; safecall;
    property DocView: IPXV_DocumentView read Get_DocView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_CommentsViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2A36038D-FA98-43A7-8DF0-5A9916167753}
// *********************************************************************//
  IPXV_CommentsViewDisp = dispinterface
    ['{2A36038D-FA98-43A7-8DF0-5A9916167753}']
    property DocView: IPXV_DocumentView readonly dispid 1610874880;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_LayersView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E2E97905-34F9-45A0-B8AD-1431BC1CA79D}
// *********************************************************************//
  IPXV_LayersView = interface(IPXV_View)
    ['{E2E97905-34F9-45A0-B8AD-1431BC1CA79D}']
    function Get_DocView: IPXV_DocumentView; safecall;
    property DocView: IPXV_DocumentView read Get_DocView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_LayersViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E2E97905-34F9-45A0-B8AD-1431BC1CA79D}
// *********************************************************************//
  IPXV_LayersViewDisp = dispinterface
    ['{E2E97905-34F9-45A0-B8AD-1431BC1CA79D}']
    property DocView: IPXV_DocumentView readonly dispid 1610874880;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_PDFNamedDestsView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1DA36BE4-B5F2-4B33-9D8C-72593FEBDF99}
// *********************************************************************//
  IPXV_PDFNamedDestsView = interface(IPXV_View)
    ['{1DA36BE4-B5F2-4B33-9D8C-72593FEBDF99}']
    function Get_DocView: IPXV_DocumentView; safecall;
    procedure ShowDest(const sName: WideString); safecall;
    procedure StartRenameDest(const sName: WideString); safecall;
    property DocView: IPXV_DocumentView read Get_DocView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PDFNamedDestsViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {1DA36BE4-B5F2-4B33-9D8C-72593FEBDF99}
// *********************************************************************//
  IPXV_PDFNamedDestsViewDisp = dispinterface
    ['{1DA36BE4-B5F2-4B33-9D8C-72593FEBDF99}']
    property DocView: IPXV_DocumentView readonly dispid 1610874880;
    procedure ShowDest(const sName: WideString); dispid 1610874881;
    procedure StartRenameDest(const sName: WideString); dispid 1610874882;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_ContentsView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6A48F242-109E-4BB0-BE84-A4B5A461CCDF}
// *********************************************************************//
  IPXV_ContentsView = interface(IPXV_View)
    ['{6A48F242-109E-4BB0-BE84-A4B5A461CCDF}']
    function Get_DocView: IPXV_DocumentView; safecall;
    property DocView: IPXV_DocumentView read Get_DocView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_ContentsViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6A48F242-109E-4BB0-BE84-A4B5A461CCDF}
// *********************************************************************//
  IPXV_ContentsViewDisp = dispinterface
    ['{6A48F242-109E-4BB0-BE84-A4B5A461CCDF}']
    property DocView: IPXV_DocumentView readonly dispid 1610874880;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_DocViewsList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2F114962-0BD3-46E4-9128-B8AE21D8BA5D}
// *********************************************************************//
  IPXV_DocViewsList = interface(IDispatch)
    ['{2F114962-0BD3-46E4-9128-B8AE21D8BA5D}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXV_DocumentView; safecall;
    function Get_Count: ULONG_T; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXV_DocumentView read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocViewsListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {2F114962-0BD3-46E4-9128-B8AE21D8BA5D}
// *********************************************************************//
  IPXV_DocViewsListDisp = dispinterface
    ['{2F114962-0BD3-46E4-9128-B8AE21D8BA5D}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXV_DocumentView readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
  end;

// *********************************************************************//
// Interface: IPXV_DocList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {21CEE151-F458-4B54-B6DB-45285E04AEC1}
// *********************************************************************//
  IPXV_DocList = interface(IDispatch)
    ['{21CEE151-F458-4B54-B6DB-45285E04AEC1}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXV_Document; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Remove2(const pItem: IPXV_Document); safecall;
    procedure Insert(const pItem: IPXV_Document; nIndex: ULONG_T); safecall;
    function Find(const pItem: IPXV_Document): Integer; safecall;
    procedure InsertFrom(const pSrc: IPXV_DocList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXV_DocList); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXV_Document read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {21CEE151-F458-4B54-B6DB-45285E04AEC1}
// *********************************************************************//
  IPXV_DocListDisp = dispinterface
    ['{21CEE151-F458-4B54-B6DB-45285E04AEC1}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXV_Document readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Remove2(const pItem: IPXV_Document); dispid 1610743813;
    procedure Insert(const pItem: IPXV_Document; nIndex: ULONG_T); dispid 1610743814;
    function Find(const pItem: IPXV_Document): Integer; dispid 1610743815;
    procedure InsertFrom(const pSrc: IPXV_DocList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743816;
    procedure CopyFrom(const pSrc: IPXV_DocList); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IPXV_Plugin
// Flags:     (0)
// GUID:      {3077CBDA-34BB-4DBE-BE4D-4DA035CB49BA}
// *********************************************************************//
  IPXV_Plugin = interface(IUnknown)
    ['{3077CBDA-34BB-4DBE-BE4D-4DA035CB49BA}']
    function Get__GUID(out stGuid: TGUID): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Get_CopyrightInfo(out sCopyrightInfo: WideString): HResult; stdcall;
    function Get_version(out nVersion: ULONG_T): HResult; stdcall;
    function Get_VendorID(out nVendorID: ULONG_T): HResult; stdcall;
    function Get_Description(out sDescription: WideString): HResult; stdcall;
    function Get_LegalInfo(out sLegalInfo: WideString): HResult; stdcall;
    function Get_Publisher(out sPublisherName: WideString): HResult; stdcall;
    function Get_Features(out nFeatures: ULONG_T): HResult; stdcall;
    function Setup(const pInstance: IPXV_Inst): HResult; stdcall;
    function RegisterExts: HResult; stdcall;
    function FinalizeRegistering: HResult; stdcall;
    function Init: HResult; stdcall;
    function Unload: HResult; stdcall;
    function ShowPrefsDlg(hWndParent: HANDLE_T): HResult; stdcall;
    function ImportAdditionalData(const pPathToAppData: IAFS_Name; const pPathToUserData: IAFS_Name): HResult; stdcall;
    function ExportAdditionalData(const pPathToAppData: IAFS_Name; const pPathToUserData: IAFS_Name): HResult; stdcall;
    function ResetSettings(nFlags: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_ActionHandler
// Flags:     (0)
// GUID:      {B743E77C-BFB8-4085-B85B-6AC6FE3655AC}
// *********************************************************************//
  IPXV_ActionHandler = interface(IUnknown)
    ['{B743E77C-BFB8-4085-B85B-6AC6FE3655AC}']
    function Get_type_(out nActionType: ULONG_T): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Get_Title(out sName: WideString): HResult; stdcall;
    function Get_Icon(out pIcon: IUIX_Icon): HResult; stdcall;
    function Perform(const pDoc: IPXV_Document; const pAction: IPXC_Action; 
                     const pSource: IUnknown; nClass: PXV_ActionTriggerClass; 
                     nSubclass: PXV_ActionTriggerSubclass): HResult; stdcall;
    function ShowProperties(const pDoc: IPXV_Document; const pAction: IPXC_Action; 
                            hWndParent: HANDLE_T; nFlags: ULONG_T): HResult; stdcall;
    function FillDictionary(const pDoc: IPXV_Document; const pDict: IPXS_PDFVariant): HResult; stdcall;
    function GetDescription(const pDoc: IPXV_Document; const pAction: IPXC_Action; 
                            out sDesc: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_ViewCreator
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F16D4312-0B2D-4C64-9FC7-DBC648B9B3AA}
// *********************************************************************//
  IPXV_ViewCreator = interface(IDispatch)
    ['{F16D4312-0B2D-4C64-9FC7-DBC648B9B3AA}']
    procedure CreateNewView(const pParentView: IPXV_View; const pParentObj: IUIX_Obj; 
                            nViewID: Integer; const sCustomTag: WideString; var stPos: tagRECT; 
                            out pNewView: IPXV_View); safecall;
  end;

// *********************************************************************//
// DispIntf:  IPXV_ViewCreatorDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F16D4312-0B2D-4C64-9FC7-DBC648B9B3AA}
// *********************************************************************//
  IPXV_ViewCreatorDisp = dispinterface
    ['{F16D4312-0B2D-4C64-9FC7-DBC648B9B3AA}']
    procedure CreateNewView(const pParentView: IPXV_View; const pParentObj: IUIX_Obj; 
                            nViewID: Integer; const sCustomTag: WideString; 
                            var stPos: {NOT_OLEAUTO(tagRECT)}OleVariant; out pNewView: IPXV_View); dispid 1610743808;
  end;

// *********************************************************************//
// Interface: IPXV_OpenFilesDlgRes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {74CB8E24-D85D-4A6D-BE72-AF57F21A1034}
// *********************************************************************//
  IPXV_OpenFilesDlgRes = interface(IDispatch)
    ['{74CB8E24-D85D-4A6D-BE72-AF57F21A1034}']
    function Get_Names: IAFS_NamesCollection; safecall;
    function Get_FilterIndex: Integer; safecall;
    property Names: IAFS_NamesCollection read Get_Names;
    property FilterIndex: Integer read Get_FilterIndex;
  end;

// *********************************************************************//
// DispIntf:  IPXV_OpenFilesDlgResDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {74CB8E24-D85D-4A6D-BE72-AF57F21A1034}
// *********************************************************************//
  IPXV_OpenFilesDlgResDisp = dispinterface
    ['{74CB8E24-D85D-4A6D-BE72-AF57F21A1034}']
    property Names: IAFS_NamesCollection readonly dispid 1610743808;
    property FilterIndex: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// Interface: IPXV_SaveFileDlgRes
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FBF7619D-DEB5-4F9E-9E15-3F26E28028AE}
// *********************************************************************//
  IPXV_SaveFileDlgRes = interface(IDispatch)
    ['{FBF7619D-DEB5-4F9E-9E15-3F26E28028AE}']
    function Get_Name: IAFS_Name; safecall;
    function Get_FilterIndex: Integer; safecall;
    property Name: IAFS_Name read Get_Name;
    property FilterIndex: Integer read Get_FilterIndex;
  end;

// *********************************************************************//
// DispIntf:  IPXV_SaveFileDlgResDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {FBF7619D-DEB5-4F9E-9E15-3F26E28028AE}
// *********************************************************************//
  IPXV_SaveFileDlgResDisp = dispinterface
    ['{FBF7619D-DEB5-4F9E-9E15-3F26E28028AE}']
    property Name: IAFS_Name readonly dispid 1610743808;
    property FilterIndex: Integer readonly dispid 1610743809;
  end;

// *********************************************************************//
// Interface: IPXV_TimerHandler
// Flags:     (128) NonExtensible
// GUID:      {2B2F02BD-1509-445B-A8E6-5EBD3579E06E}
// *********************************************************************//
  IPXV_TimerHandler = interface(IUnknown)
    ['{2B2F02BD-1509-445B-A8E6-5EBD3579E06E}']
    function OnTimer(const pInst: IPXV_Inst; nTimerID: LONG_PTR): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_AnnotHandler
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6E6FE3DF-9FA7-43BB-B325-0E38C9D989BD}
// *********************************************************************//
  IPXV_AnnotHandler = interface(IPXV_Tool)
    ['{6E6FE3DF-9FA7-43BB-B325-0E38C9D989BD}']
    function Get_AnnotType: ULONG_T; safecall;
    function Get_NewAnnotIntent: WideString; safecall;
    function IsAnnotHandler(const pAnnot: IPXC_Annotation): WordBool; safecall;
    function InAnnotHandlerByData(const pData: IPXC_AnnotData): WordBool; safecall;
    function InAnnotHandlerByType(nAnnotType: ULONG_T; nAnnotIntent: ULONG_T): WordBool; safecall;
    function HitTest(const pView: IPXV_PagesView; const pAnnot: IPXC_Annotation; 
                     var stScreenPos: tagPOINT; var stPagePos: PXC_Point): Integer; safecall;
    procedure OnAnnotEnter(const pView: IPXV_PagesView; const pAnnot: IPXC_Annotation; 
                           var stScreenPos: tagPOINT); safecall;
    procedure OnAnnotExit(const pView: IPXV_PagesView; const pAnnot: IPXC_Annotation); safecall;
    property AnnotType: ULONG_T read Get_AnnotType;
    property NewAnnotIntent: WideString read Get_NewAnnotIntent;
  end;

// *********************************************************************//
// DispIntf:  IPXV_AnnotHandlerDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6E6FE3DF-9FA7-43BB-B325-0E38C9D989BD}
// *********************************************************************//
  IPXV_AnnotHandlerDisp = dispinterface
    ['{6E6FE3DF-9FA7-43BB-B325-0E38C9D989BD}']
    property AnnotType: ULONG_T readonly dispid 1610809344;
    property NewAnnotIntent: WideString readonly dispid 1610809345;
    function IsAnnotHandler(const pAnnot: IPXC_Annotation): WordBool; dispid 1610809346;
    function InAnnotHandlerByData(const pData: IPXC_AnnotData): WordBool; dispid 1610809347;
    function InAnnotHandlerByType(nAnnotType: ULONG_T; nAnnotIntent: ULONG_T): WordBool; dispid 1610809348;
    function HitTest(const pView: IPXV_PagesView; const pAnnot: IPXC_Annotation; 
                     var stScreenPos: {NOT_OLEAUTO(tagPOINT)}OleVariant; 
                     var stPagePos: {NOT_OLEAUTO(PXC_Point)}OleVariant): Integer; dispid 1610809349;
    procedure OnAnnotEnter(const pView: IPXV_PagesView; const pAnnot: IPXC_Annotation; 
                           var stScreenPos: {NOT_OLEAUTO(tagPOINT)}OleVariant); dispid 1610809350;
    procedure OnAnnotExit(const pView: IPXV_PagesView; const pAnnot: IPXC_Annotation); dispid 1610809351;
    property ID: Integer readonly dispid 1610743808;
    property Name: WideString readonly dispid 1610743809;
    property Description: WideString readonly dispid 1610743810;
    property Features: ULONG_T readonly dispid 1610743811;
    property IsEnabled[const pView: IPXV_PagesView]: WordBool readonly dispid 1610743812;
    property IsExclusive[const pDoc: IPXV_Document]: WordBool readonly dispid 1610743813;
    procedure OnActivated(const pDoc: IPXV_Document; nFlags: ULONG_T); dispid 1610743814;
    procedure OnDeactivated(const pDoc: IPXV_Document; nFlags: ULONG_T); dispid 1610743815;
    procedure OnFinalize; dispid 1610743816;
    procedure OnProcessViewEvent(const pView: IPXV_PagesView; const pEvent: IUIX_Event); dispid 1610743817;
    function CanActivateForDocument(const pDoc: IPXV_Document): WordBool; dispid 1610743818;
  end;

// *********************************************************************//
// Interface: IPXV_ImportConverter
// Flags:     (128) NonExtensible
// GUID:      {752AF886-51BB-45B7-9A8F-2B3D71431E90}
// *********************************************************************//
  IPXV_ImportConverter = interface(IPXV_FormatConverter)
    ['{752AF886-51BB-45B7-9A8F-2B3D71431E90}']
    function CheckFormat(const pInst: IPXV_Inst; const pSrc: IUnknown; nFlags: ULONG_T; 
                         out pCheckResVal: PXV_FmtCheckResult): HResult; stdcall;
    function CheckFormat2(const pInst: IPXV_Inst; const pSrc: IUnknown; nFlags: ULONG_T; 
                          out pFmtDetails: ICab; out pCheckRes: IUnknown; 
                          out pCheckResVal: PXV_FmtCheckResult): HResult; stdcall;
    function Convert(const pInst: IPXV_Inst; const pSrc: IUnknown; nFlags: ULONG_T; 
                     const pParams: ICab; const pProgress: IProgressMon; hWndParent: HANDLE_T; 
                     const pCtx: IUnknown; out pDoc: IPXC_Document): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_AnnotStateModelManager
// Flags:     (128) NonExtensible
// GUID:      {293A0493-B16F-4D1D-A762-CA5D0C73DCDE}
// *********************************************************************//
  IPXV_AnnotStateModelManager = interface(IUnknown)
    ['{293A0493-B16F-4D1D-A762-CA5D0C73DCDE}']
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function Get_Item(nItemIndex: ULONG_T; out pItem: IPXV_AnnotStateModel): HResult; stdcall;
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function AddStateModel(const sModelID: WideString; out pNewModel: IPXV_AnnotStateModel): HResult; stdcall;
    function RemoveModel(nIndex: Integer): HResult; stdcall;
    function Find(const sID: WideString; out nIndex: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_AnnotStateModel
// Flags:     (128) NonExtensible
// GUID:      {A064D69C-33D7-4219-AFFE-0A79C7600605}
// *********************************************************************//
  IPXV_AnnotStateModel = interface(IUnknown)
    ['{A064D69C-33D7-4219-AFFE-0A79C7600605}']
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function Get_Item(nItemIndex: ULONG_T; out pItem: IPXV_AnnotStateItem): HResult; stdcall;
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_DefaultItem(out nDefIndex: Integer): HResult; stdcall;
    function Set_DefaultItem(nDefIndex: Integer): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Set_Flags(nFlags: ULONG_T): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Set_Name(const sName: WideString): HResult; stdcall;
    function Get_ID(out sID: WideString): HResult; stdcall;
    function AddItem(const sID: WideString; const sName: WideString; const pIcon: IUIX_Icon): HResult; stdcall;
    function RemoveItem(nIndex: Integer): HResult; stdcall;
    function Find(const sID: WideString; out nIndex: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_AnnotStateItem
// Flags:     (128) NonExtensible
// GUID:      {87EA6AAB-ED6E-4141-8C41-521E704DFA42}
// *********************************************************************//
  IPXV_AnnotStateItem = interface(IUnknown)
    ['{87EA6AAB-ED6E-4141-8C41-521E704DFA42}']
    function Get_ID(out sID: WideString): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Get_Icon(out pIcon: IUIX_Icon): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_ThreadSafeCallback
// Flags:     (128) NonExtensible
// GUID:      {A596F9E0-844F-41F9-88C6-66B506963A60}
// *********************************************************************//
  IPXV_ThreadSafeCallback = interface(IUnknown)
    ['{A596F9E0-844F-41F9-88C6-66B506963A60}']
    function OnThreadSafeCall: HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_OperationsCreator
// Flags:     (128) NonExtensible
// GUID:      {317180B9-97BE-4A18-B989-52CC150926DD}
// *********************************************************************//
  IPXV_OperationsCreator = interface(IUnknown)
    ['{317180B9-97BE-4A18-B989-52CC150926DD}']
    function CreateNewOp(const pInst: IPXV_Inst; nOpID: Integer; out pNewOp: IOperation): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_CommentStylesManager
// Flags:     (128) NonExtensible
// GUID:      {D1921AE6-B919-4E2D-B019-96426759E268}
// *********************************************************************//
  IPXV_CommentStylesManager = interface(IUnknown)
    ['{D1921AE6-B919-4E2D-B019-96426759E268}']
    function Get_ToolsCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_ToolID(nIndex: ULONG_T; out nToolID: Integer): HResult; stdcall;
    function GetCurrentStyle(nToolID: Integer; out pStyleParams: ICabNode): HResult; stdcall;
    function GetCustomStylesCount(nToolID: Integer; out nCount: ULONG_T): HResult; stdcall;
    function EnumCustomStyles(nToolID: Integer; const pEnum: IPXV_CommentStylesEnumCallback): HResult; stdcall;
    function GetSelectedStyle(nToolID: Integer; out sStyleID: WideString): HResult; stdcall;
    function GetSelectedStyle2(nToolID: Integer; out nStyleID: Integer): HResult; stdcall;
    function SelectStyle(nToolID: Integer; const sNewStyleID: WideString): HResult; stdcall;
    function SelectStyle2(nToolID: Integer; nNewStyleID: Integer): HResult; stdcall;
    function OnChangedCurrentStyle(nToolID: Integer): HResult; stdcall;
    function OnChangedCustomStyle(nToolID: Integer; const sStyleID: WideString): HResult; stdcall;
    function GetDefaultStyleIcon(nToolID: Integer; nIconSizes: Integer; var pIcon: IUIX_Icon): HResult; stdcall;
    function GetCurrentStyleIcon(nToolID: Integer; nIconSizes: Integer; out pIcon: IUIX_Icon): HResult; stdcall;
    function GetCustomStyleIcon(nToolID: Integer; const sStyleID: WideString; nIconSizes: Integer; 
                                out pIcon: IUIX_Icon): HResult; stdcall;
    function GetCustomStyleName(nToolID: Integer; const sStyleID: WideString; out sName: WideString): HResult; stdcall;
    function GetCustomStyleDesc(nToolID: Integer; const sStyleID: WideString; out sDesc: WideString): HResult; stdcall;
    function GetCustomStyle(nToolID: Integer; const sStyleID: WideString; out pStyleParams: ICabNode): HResult; stdcall;
    function DeleteCustomStyle(nToolID: Integer; const sStyleID: WideString): HResult; stdcall;
    function DeleteAllCustomStyles(nToolID: Integer): HResult; stdcall;
    function ResetCurrentStyle(nToolID: Integer): HResult; stdcall;
    function ResetCustomStyle(nToolID: Integer; const sStyleID: WideString): HResult; stdcall;
    function GetNewCustomStyleUniqueName(nToolID: Integer; const sSrcStyleID: WideString; 
                                         var sNewUniqName: WideString): HResult; stdcall;
    function AddNewCustomStyle(nToolID: Integer; const sName: WideString; const sDesc: WideString; 
                               out sNewStyleID: WideString): HResult; stdcall;
    function CloneStyle(nToolID: Integer; const sSrcStyleID: WideString; out sNewStyleID: WideString): HResult; stdcall;
    function CloneStyle2(nToolID: Integer; const sSrcStyleID: WideString; 
                         const sNewCloneName: WideString; const sNewCloneDesc: WideString; 
                         out sNewStyleID: WideString): HResult; stdcall;
    function CustomStyleRename(nToolID: Integer; const sStyleID: WideString; 
                               const sNewName: WideString): HResult; stdcall;
    function CustomStyleSetDesc(nToolID: Integer; const sStyleID: WideString; 
                                const sNewDesc: WideString): HResult; stdcall;
    function LockAllEvents: HResult; stdcall;
    function UnlockAllEvents: HResult; stdcall;
    function FireStylesChangedEvent(nToolID: Integer; nFlags: Integer): HResult; stdcall;
    function RevokeAllCachedIcons(nToolID: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_CommentStylesEnumCallback
// Flags:     (128) NonExtensible
// GUID:      {BB118C7A-60AF-4BD5-9EED-ED8A2D312AD5}
// *********************************************************************//
  IPXV_CommentStylesEnumCallback = interface(IUnknown)
    ['{BB118C7A-60AF-4BD5-9EED-ED8A2D312AD5}']
    function OnCommentStyle(nIndex: ULONG_T; sID: PWideChar; sName: PWideChar; 
                            const sDesc: WideString; nFlags: Integer; const pStyleParams: ICabNode; 
                            const pGetIcon: IPXV_CommentStyleGetIcon): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_CommentStyleGetIcon
// Flags:     (128) NonExtensible
// GUID:      {F1DD13A5-171A-4E72-BA67-E8CC3C5654A4}
// *********************************************************************//
  IPXV_CommentStyleGetIcon = interface(IUnknown)
    ['{F1DD13A5-171A-4E72-BA67-E8CC3C5654A4}']
    function GetCommentStyleIcon(nIconSizes: Integer; out pIcon: IUIX_Icon): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_AsyncDoCallback
// Flags:     (128) NonExtensible
// GUID:      {BC48FE46-8885-4F5A-B1E3-265E0814FF58}
// *********************************************************************//
  IPXV_AsyncDoCallback = interface(IUnknown)
    ['{BC48FE46-8885-4F5A-B1E3-265E0814FF58}']
    function OnStartOp(const pOp: IOperation; nOpExecFlags: ULONG_T): HResult; stdcall;
    function OnFinishOp(const pOp: IOperation; nOpExecFlags: ULONG_T; nHres: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PresetsIoCallbacks
// Flags:     (128) NonExtensible
// GUID:      {3B70F3CA-317D-4240-B67D-0AE8667C0849}
// *********************************************************************//
  IPXV_PresetsIoCallbacks = interface(IUnknown)
    ['{3B70F3CA-317D-4240-B67D-0AE8667C0849}']
    function OnSaveCurrentSettings(const pDestData: ICabNode; const sID: WideString): HResult; stdcall;
    function OnLoadSettings(const pSrcData: ICabNode; const sID: WideString): HResult; stdcall;
    function OnAddNewPresetItem(const pSrcData: ICabNode; const sID: WideString; 
                                var sName: WideString; var sDesc: WideString): HResult; stdcall;
    function OnEditPresetItem(const pSrcData: ICabNode; const sID: WideString; 
                              var sName: WideString; var sDesc: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PresetsListCallbacks
// Flags:     (128) NonExtensible
// GUID:      {A7B61AF9-F50F-4C86-BF2A-E4558D2E1F15}
// *********************************************************************//
  IPXV_PresetsListCallbacks = interface(IPXV_PresetsIoCallbacks)
    ['{A7B61AF9-F50F-4C86-BF2A-E4558D2E1F15}']
    function Get_ListStyle(out nStyle: ULONG_T): HResult; stdcall;
    function Get_DefaultIcon(out pIcon: IUIX_Icon): HResult; stdcall;
    function Get_NewItemNameBase(out sNewItemNameBase: WideString): HResult; stdcall;
    function LockItems(out nCount: ULONG_T): HResult; stdcall;
    function UnlockItems: HResult; stdcall;
    function IDToIndex(const sID: WideString; out nIndex: Integer): HResult; stdcall;
    function NameToIndex(const sName: WideString; out nIndex: Integer): HResult; stdcall;
    function NameToIndexEx(const sName: WideString; bDispName: WordBool; out nIndex: Integer): HResult; stdcall;
    function GetItemID(nIndex: ULONG_T; out sID: WideString): HResult; stdcall;
    function GetItemName(nIndex: ULONG_T; out sName: WideString): HResult; stdcall;
    function GetItemDesc(nIndex: ULONG_T; out sDesc: WideString): HResult; stdcall;
    function GetItemIcon(nIndex: ULONG_T; out pIcon: IUIX_Icon): HResult; stdcall;
    function GetItemThumb(nIndex: ULONG_T; out pThumb: IUIX_ImageData): HResult; stdcall;
    function GetItemStyle(nIndex: ULONG_T; out nStyle: ULONG_T): HResult; stdcall;
    function CloneItem(nIndex: ULONG_T; out nNewItemIndex: Integer): HResult; stdcall;
    function CloneItem2(nIndex: ULONG_T; const sNewName: WideString; const sNewDesc: WideString; 
                        out nNewItemIndex: Integer): HResult; stdcall;
    function SetItemText(nIndex: ULONG_T; const sNewName: WideString; const sNewDesc: WideString): HResult; stdcall;
    function MoveItem(nIndex: ULONG_T; nNewIndex: ULONG_T; out pNewIndex: ULONG_T): HResult; stdcall;
    function DeleteItem(nIndex: ULONG_T): HResult; stdcall;
    function DeleteAllItems: HResult; stdcall;
    function CreateNewItem(const sName: WideString; const sDesc: WideString; 
                           out nNewItemIndex: Integer): HResult; stdcall;
    function SelectItemByID(const sID: WideString): HResult; stdcall;
    function SelectItemByName(const sName: WideString): HResult; stdcall;
    function GetItemData(nIndex: ULONG_T; out pItemData: ICabNode): HResult; stdcall;
    function GetPresetsTypeName(out sTypeName: WideString): HResult; stdcall;
    function AddItem(const pItemSrc: ICabNode; nFlags: Integer; out pNewItemIndex: Integer): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PresetsButton
// Flags:     (4224) NonExtensible Dispatchable
// GUID:      {DC514689-5F9F-464A-92B1-16B5A2FC5646}
// *********************************************************************//
  IPXV_PresetsButton = interface(IUIX_ObjImpl)
    ['{DC514689-5F9F-464A-92B1-16B5A2FC5646}']
    function Get_Selected(out sID: WideString): HResult; stdcall;
    function Set_Selected(const sID: WideString): HResult; stdcall;
    function Get_CustomLabel(out sCustLabel: WideString): HResult; stdcall;
    function Set_CustomLabel(const sCustLabel: WideString): HResult; stdcall;
    function Select(const sID: WideString; bAllowNotify: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PageSizeCtl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F1B4807E-65DB-4FE7-88FE-DB703CF57807}
// *********************************************************************//
  IPXV_PageSizeCtl = interface(IDispatch)
    ['{F1B4807E-65DB-4FE7-88FE-DB703CF57807}']
    procedure Init(const pDlg: IUIX_Dialog; nUnit: MeasureUnit; nFlags: ULONG_T; 
                   nDocPageWidth: Double; nDocPageHeight: Double); safecall;
    function Get_MeasureUnit: MeasureUnit; safecall;
    procedure Set_MeasureUnit(nUnit: MeasureUnit); safecall;
    function Get_PaperType: PXV_PaperType; safecall;
    procedure Set_PaperType(nPaperType: PXV_PaperType); safecall;
    function Get_StdPaperID: StdPaperID; safecall;
    procedure Set_StdPaperID(nPaperID: StdPaperID); safecall;
    function Get_Width: Double; safecall;
    procedure Set_Width(nWidth: Double); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(nHeight: Double); safecall;
    function Get_Landscape: WordBool; safecall;
    procedure Set_Landscape(bIsLandscape: WordBool); safecall;
    property MeasureUnit: MeasureUnit read Get_MeasureUnit write Set_MeasureUnit;
    property PaperType: PXV_PaperType read Get_PaperType write Set_PaperType;
    property StdPaperID: StdPaperID read Get_StdPaperID write Set_StdPaperID;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property Landscape: WordBool read Get_Landscape write Set_Landscape;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PageSizeCtlDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F1B4807E-65DB-4FE7-88FE-DB703CF57807}
// *********************************************************************//
  IPXV_PageSizeCtlDisp = dispinterface
    ['{F1B4807E-65DB-4FE7-88FE-DB703CF57807}']
    procedure Init(const pDlg: IUIX_Dialog; nUnit: MeasureUnit; nFlags: ULONG_T; 
                   nDocPageWidth: Double; nDocPageHeight: Double); dispid 1610743808;
    property MeasureUnit: MeasureUnit dispid 1610743809;
    property PaperType: PXV_PaperType dispid 1610743811;
    property StdPaperID: StdPaperID dispid 1610743813;
    property Width: Double dispid 1610743815;
    property Height: Double dispid 1610743817;
    property Landscape: WordBool dispid 1610743819;
  end;

// *********************************************************************//
// Interface: IPXV_RangeCtl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {79586BD0-9628-4216-BEA9-41186DFD9C78}
// *********************************************************************//
  IPXV_RangeCtl = interface(IUIX_ObjImpl)
    ['{79586BD0-9628-4216-BEA9-41186DFD9C78}']
    procedure Init(const pDlgObj: IUIX_Obj; const pSrcRange: IRangeHelper); safecall;
    function Get_Range: IRangeHelper; safecall;
    procedure UpdateRange; safecall;
    procedure Update; safecall;
    function Get_IsEmpty: WordBool; safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(bEnabled: WordBool); safecall;
    property Range: IRangeHelper read Get_Range;
    property IsEmpty: WordBool read Get_IsEmpty;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
  end;

// *********************************************************************//
// DispIntf:  IPXV_RangeCtlDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {79586BD0-9628-4216-BEA9-41186DFD9C78}
// *********************************************************************//
  IPXV_RangeCtlDisp = dispinterface
    ['{79586BD0-9628-4216-BEA9-41186DFD9C78}']
    procedure Init(const pDlgObj: IUIX_Obj; const pSrcRange: IRangeHelper); dispid 1610809344;
    property Range: IRangeHelper readonly dispid 1610809345;
    procedure UpdateRange; dispid 1610809346;
    procedure Update; dispid 1610809347;
    property IsEmpty: WordBool readonly dispid 1610809348;
    property Enabled: WordBool dispid 1610809349;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_UILanguages
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E80DDA0B-E21C-4579-A7C3-E47F1980DC64}
// *********************************************************************//
  IPXV_UILanguages = interface(IDispatch)
    ['{E80DDA0B-E21C-4579-A7C3-E47F1980DC64}']
    function Get_Count: ULONG_T; safecall;
    procedure GetItem(nIndex: ULONG_T; out sCode: WideString; out sEName: WideString; 
                      out sLName: WideString); safecall;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_UILanguagesDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {E80DDA0B-E21C-4579-A7C3-E47F1980DC64}
// *********************************************************************//
  IPXV_UILanguagesDisp = dispinterface
    ['{E80DDA0B-E21C-4579-A7C3-E47F1980DC64}']
    property Count: ULONG_T readonly dispid 1610743808;
    procedure GetItem(nIndex: ULONG_T; out sCode: WideString; out sEName: WideString; 
                      out sLName: WideString); dispid 1610743809;
  end;

// *********************************************************************//
// Interface: IPXV_SignatureProvider
// Flags:     (128) NonExtensible
// GUID:      {3EFC0206-21BB-442A-AA81-9DD63C2938FE}
// *********************************************************************//
  IPXV_SignatureProvider = interface(IUnknown)
    ['{3EFC0206-21BB-442A-AA81-9DD63C2938FE}']
    function Get_ID(out nID: ULONG_T): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Get_Flags(out nFlags: ULONG_T): HResult; stdcall;
    function Get_Description(out sDescription: WideString): HResult; stdcall;
    function Get_Icon(out pIcon: IUIX_Icon): HResult; stdcall;
    function CreateParams(out pParams: ICab): HResult; stdcall;
    function CreateNew(nWndParent: HANDLE_T; const pParams: ICab; const pStorage: IPXC_Document; 
                       out nXFormHandle: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PagesPreviewCtl
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7A9134A9-20F7-4D8D-806D-8DEFDF70029F}
// *********************************************************************//
  IPXV_PagesPreviewCtl = interface(IUIX_ObjImpl)
    ['{7A9134A9-20F7-4D8D-806D-8DEFDF70029F}']
    function Get_Doc: IPXC_Document; safecall;
    procedure Set_Doc(const pDoc: IPXC_Document); safecall;
    function Get_Layout: IPXV_PagesLayoutManager; safecall;
    function Get_OCContext: IPXC_OCContext; safecall;
    procedure Set_OCContext(const pOCCtx: IPXC_OCContext); safecall;
    function Get_NoPageSelTip: WideString; safecall;
    procedure Set_NoPageSelTip(const sTip: WideString); safecall;
    function Get_NoDocTip: WideString; safecall;
    procedure Set_NoDocTip(const sTip: WideString); safecall;
    function Get_NoDocTipIcon: IUnknown; safecall;
    procedure Set_NoDocTipIcon(const pIconOrImage: IUnknown); safecall;
    function Get_DrawCallback: IPXV_PagesPreviewDrawCallback; safecall;
    procedure Set_DrawCallback(const pDrawCb: IPXV_PagesPreviewDrawCallback); safecall;
    procedure InvalidatePage(nPageIndex: ULONG_T; nFlags: ULONG_T); safecall;
    procedure InvalidatePageRect(nPageIndex: ULONG_T; var stRects: PXC_RectF; nFlags: ULONG_T); safecall;
    property Doc: IPXC_Document read Get_Doc write Set_Doc;
    property Layout: IPXV_PagesLayoutManager read Get_Layout;
    property OCContext: IPXC_OCContext read Get_OCContext write Set_OCContext;
    property NoPageSelTip: WideString read Get_NoPageSelTip write Set_NoPageSelTip;
    property NoDocTip: WideString read Get_NoDocTip write Set_NoDocTip;
    property NoDocTipIcon: IUnknown read Get_NoDocTipIcon write Set_NoDocTipIcon;
    property DrawCallback: IPXV_PagesPreviewDrawCallback read Get_DrawCallback write Set_DrawCallback;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PagesPreviewCtlDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7A9134A9-20F7-4D8D-806D-8DEFDF70029F}
// *********************************************************************//
  IPXV_PagesPreviewCtlDisp = dispinterface
    ['{7A9134A9-20F7-4D8D-806D-8DEFDF70029F}']
    property Doc: IPXC_Document dispid 1610809344;
    property Layout: IPXV_PagesLayoutManager readonly dispid 1610809346;
    property OCContext: IPXC_OCContext dispid 1610809347;
    property NoPageSelTip: WideString dispid 1610809349;
    property NoDocTip: WideString dispid 1610809351;
    property NoDocTipIcon: IUnknown dispid 1610809353;
    property DrawCallback: IPXV_PagesPreviewDrawCallback dispid 1610809355;
    procedure InvalidatePage(nPageIndex: ULONG_T; nFlags: ULONG_T); dispid 1610809357;
    procedure InvalidatePageRect(nPageIndex: ULONG_T; 
                                 var stRects: {NOT_OLEAUTO(PXC_RectF)}OleVariant; nFlags: ULONG_T); dispid 1610809358;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_PagesPreviewDrawCallback
// Flags:     (128) NonExtensible
// GUID:      {2E8AC7EF-B583-4C9D-B20A-C2B0CC95B43A}
// *********************************************************************//
  IPXV_PagesPreviewDrawCallback = interface(IUnknown)
    ['{2E8AC7EF-B583-4C9D-B20A-C2B0CC95B43A}']
    function OnDrawPagesPreview(const pPreview: IPXV_PagesPreviewCtl; 
                                nStage: PXV_PagesViewDrawStage; const pRC: IUIX_RenderContext; 
                                const pPageRegions: IPXV_PagesLayoutRegions): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_FileNamesProvider
// Flags:     (128) NonExtensible
// GUID:      {8738A4A4-5704-4164-8898-14ED17876751}
// *********************************************************************//
  IPXV_FileNamesProvider = interface(IUnknown)
    ['{8738A4A4-5704-4164-8898-14ED17876751}']
    function Get_InputFolderName(out sValue: WideString): HResult; stdcall;
    function Set_InputFolderName(const sValue: WideString): HResult; stdcall;
    function Get_InputFileName(out sValue: WideString): HResult; stdcall;
    function Set_InputFileName(const sValue: WideString): HResult; stdcall;
    function Get_SrcFileName(out pValue: IAFS_Name): HResult; stdcall;
    function Set_SrcFileName(const pValue: IAFS_Name): HResult; stdcall;
    function Get_DestHostName(out pValue: IAFS_Name): HResult; stdcall;
    function Set_DestHostName(const pValue: IAFS_Name): HResult; stdcall;
    function Get_SrcDoc(out pDoc: IPXC_Document): HResult; stdcall;
    function Set_SrcDoc(const pDoc: IPXC_Document): HResult; stdcall;
    function Get_DocTitle(out sValue: WideString): HResult; stdcall;
    function Set_DocTitle(const sValue: WideString): HResult; stdcall;
    function Get_DocIndex(out nValue: ULONG_T): HResult; stdcall;
    function Set_DocIndex(nValue: ULONG_T): HResult; stdcall;
    function Get_AutoNumStart(out nValue: ULONG_T): HResult; stdcall;
    function Set_AutoNumStart(nValue: ULONG_T): HResult; stdcall;
    function Get_AutoNumMax(out nValue: ULONG_T): HResult; stdcall;
    function Set_AutoNumMax(nValue: ULONG_T): HResult; stdcall;
    function Get_TimeStamp(out nValue: TDateTime): HResult; stdcall;
    function Set_TimeStamp(nValue: TDateTime): HResult; stdcall;
    function Get_PageIndex(out nValue: ULONG_T): HResult; stdcall;
    function Set_PageIndex(nValue: ULONG_T): HResult; stdcall;
    function Get_PagesCount(out nValue: ULONG_T): HResult; stdcall;
    function Set_PagesCount(nValue: ULONG_T): HResult; stdcall;
    function Get_RequiredExt(out sValue: WideString): HResult; stdcall;
    function Set_RequiredExt(const sValue: WideString): HResult; stdcall;
    function Get_LastError(out nValue: Integer): HResult; stdcall;
    function Get_Flags(out nValue: ULONG_T): HResult; stdcall;
    function Set_Flags(nValue: ULONG_T): HResult; stdcall;
    function ModifyFlags(nFlags: ULONG_T; nFlagsMask: ULONG_T): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Evaluate(const pProgressMon: IProgressMon; hWndParent: HANDLE_T; bTestOnly: WordBool; 
                      out pFileName: IAFS_Name): HResult; stdcall;
    function Get_State(out nValue: PXV_FileNamesProviderState): HResult; stdcall;
    function Get_ImageIndex(out nValue: ULONG_T): HResult; stdcall;
    function Set_ImageIndex(nValue: ULONG_T): HResult; stdcall;
    function Get_OptLabel(out sValue: WideString): HResult; stdcall;
    function Set_OptLabel(const sValue: WideString): HResult; stdcall;
    function Get_SrcPagesCount(out nValue: ULONG_T): HResult; stdcall;
    function Set_SrcPagesCount(nValue: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_AttachList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3E6A9E70-4B40-48C5-A77E-1E6489C96521}
// *********************************************************************//
  IPXV_AttachList = interface(IDispatch)
    ['{3E6A9E70-4B40-48C5-A77E-1E6489C96521}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXC_FileSpec; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Remove2(const pItem: IPXC_FileSpec); safecall;
    procedure Insert(const pItem: IPXC_FileSpec; nIndex: ULONG_T); safecall;
    function Find(const pItem: IPXC_FileSpec): Integer; safecall;
    procedure InsertFrom(const pSrc: IPXV_AttachList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXV_AttachList); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXC_FileSpec read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_AttachListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3E6A9E70-4B40-48C5-A77E-1E6489C96521}
// *********************************************************************//
  IPXV_AttachListDisp = dispinterface
    ['{3E6A9E70-4B40-48C5-A77E-1E6489C96521}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXC_FileSpec readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Remove2(const pItem: IPXC_FileSpec); dispid 1610743813;
    procedure Insert(const pItem: IPXC_FileSpec; nIndex: ULONG_T); dispid 1610743814;
    function Find(const pItem: IPXC_FileSpec): Integer; dispid 1610743815;
    procedure InsertFrom(const pSrc: IPXV_AttachList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743816;
    procedure CopyFrom(const pSrc: IPXV_AttachList); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IPXV_MacroHelper
// Flags:     (128) NonExtensible
// GUID:      {B9C95130-BAB2-411C-947C-F5E35A0CD384}
// *********************************************************************//
  IPXV_MacroHelper = interface(IUnknown)
    ['{B9C95130-BAB2-411C-947C-F5E35A0CD384}']
    function Get_Text(out sValue: WideString): HResult; stdcall;
    function Set_Text(const sValue: WideString): HResult; stdcall;
    function Evaluate(out sResult: WideString): HResult; stdcall;
    function Get_Prop(sPropName: PWideChar; out Value: OleVariant): HResult; stdcall;
    function Set_Prop(sPropName: PWideChar; Value: OleVariant): HResult; stdcall;
    function Get_TimeStamp(out nValue: TDateTime): HResult; stdcall;
    function Set_TimeStamp(nValue: TDateTime): HResult; stdcall;
    function Get_PageIndex(out nValue: ULONG_T): HResult; stdcall;
    function Set_PageIndex(nValue: ULONG_T): HResult; stdcall;
    function Get_PagesCount(out nValue: ULONG_T): HResult; stdcall;
    function Set_PagesCount(nValue: ULONG_T): HResult; stdcall;
    function Get_DocTitle(out sValue: WideString): HResult; stdcall;
    function Set_DocTitle(const sValue: WideString): HResult; stdcall;
    function Get_DocIndex(out nValue: ULONG_T): HResult; stdcall;
    function Set_DocIndex(nValue: ULONG_T): HResult; stdcall;
    function Get_AutoNumValue(out nValue: ULONG_T): HResult; stdcall;
    function Set_AutoNumValue(nValue: ULONG_T): HResult; stdcall;
    function Get_AutoNumDigits(out nValue: ULONG_T): HResult; stdcall;
    function Set_AutoNumDigits(nValue: ULONG_T): HResult; stdcall;
    function Get_FileName(out sValue: WideString): HResult; stdcall;
    function Set_FileName(const sValue: WideString): HResult; stdcall;
    function Get_FolderName(out sValue: WideString): HResult; stdcall;
    function Set_FolderName(const sValue: WideString): HResult; stdcall;
    function Get_ImageIndex(out nValue: ULONG_T): HResult; stdcall;
    function Set_ImageIndex(nValue: ULONG_T): HResult; stdcall;
    function Get_Doc(out pDoc: IPXC_Document): HResult; stdcall;
    function Set_Doc(const pDoc: IPXC_Document): HResult; stdcall;
    function EnableMacroCls(const sMacroCls: WideString; bEnable: WordBool): HResult; stdcall;
    function EnableMacro(const sMacro: WideString; bEnable: WordBool): HResult; stdcall;
    function EnableAllMacros(bEnable: WordBool): HResult; stdcall;
    function IsMacroEnabled(const sMacro: WideString; var bRes: WordBool): HResult; stdcall;
    function IsMacroClsUsed(const sMacroCls: WideString; var bRes: WordBool): HResult; stdcall;
    function IsMacroUsed(const sMacro: WideString; var bRes: WordBool): HResult; stdcall;
    function ShowPopupMenu(const pParent: IUIX_Obj; const pTargetEdit: IUIX_Obj; 
                           out sSelMacro: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_JSValue
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {555C4721-774B-4E81-9BA5-62D7ED4E5B87}
// *********************************************************************//
  IPXV_JSValue = interface(IDispatch)
    ['{555C4721-774B-4E81-9BA5-62D7ED4E5B87}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXV_JSValue; safecall;
    function Get_Count: ULONG_T; safecall;
    function Get_type_: PXV_JSValueType; safecall;
    function Get_Bool: WordBool; safecall;
    function Get_Number: Double; safecall;
    function Get_String_: WideString; safecall;
    function Get_Date: TDateTime; safecall;
    function Get_Object_: IUnknown; safecall;
    function Get_v: OleVariant; safecall;
    function GetBool(bDefVal: WordBool): WordBool; safecall;
    function GetNumber(nDefVal: Double): Double; safecall;
    function GetDate(nDefVal: TDateTime): TDateTime; safecall;
    function GetString(sDefVal: PWideChar): WideString; safecall;
    procedure Clear; safecall;
    function ToString: WideString; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXV_JSValue read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property type_: PXV_JSValueType read Get_type_;
    property Bool: WordBool read Get_Bool;
    property Number: Double read Get_Number;
    property String_: WideString read Get_String_;
    property Date: TDateTime read Get_Date;
    property Object_: IUnknown read Get_Object_;
    property v: OleVariant read Get_v;
  end;

// *********************************************************************//
// DispIntf:  IPXV_JSValueDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {555C4721-774B-4E81-9BA5-62D7ED4E5B87}
// *********************************************************************//
  IPXV_JSValueDisp = dispinterface
    ['{555C4721-774B-4E81-9BA5-62D7ED4E5B87}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXV_JSValue readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    property type_: PXV_JSValueType readonly dispid 1610743811;
    property Bool: WordBool readonly dispid 1610743812;
    property Number: Double readonly dispid 1610743813;
    property String_: WideString readonly dispid 1610743814;
    property Date: TDateTime readonly dispid 1610743815;
    property Object_: IUnknown readonly dispid 1610743816;
    property v: OleVariant readonly dispid 1610743817;
    function GetBool(bDefVal: WordBool): WordBool; dispid 1610743818;
    function GetNumber(nDefVal: Double): Double; dispid 1610743819;
    function GetDate(nDefVal: TDateTime): TDateTime; dispid 1610743820;
    function GetString(sDefVal: {NOT_OLEAUTO(PWideChar)}OleVariant): WideString; dispid 1610743821;
    procedure Clear; dispid 1610743822;
    function ToString: WideString; dispid 1610743823;
  end;

// *********************************************************************//
// Interface: IPXV_JSCodeSnippetsStorage
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C25C73EF-6444-4403-B699-8F95CE14CE85}
// *********************************************************************//
  IPXV_JSCodeSnippetsStorage = interface(IDispatch)
    ['{C25C73EF-6444-4403-B699-8F95CE14CE85}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXV_JSCodeSnippet; safecall;
    function Get_Count: ULONG_T; safecall;
    function ShowEditDlg(hWndParent: HANDLE_T; sSnippetToEdit: PWideChar): WideString; safecall;
    function AddNew(sName: PWideChar; sDesc: PWideChar; sBody: PWideChar): IPXV_JSCodeSnippet; safecall;
    function Find(sSnippetID: PWideChar): IPXV_JSCodeSnippet; safecall;
    procedure Remove(sSnippetID: PWideChar); safecall;
    function Get_CtgCount: ULONG_T; safecall;
    procedure GetCtg(nIndex: ULONG_T; out sID: WideString; out sName: WideString); safecall;
    procedure Refresh; safecall;
    procedure Reset; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXV_JSCodeSnippet read Get_Item; default;
    property Count: ULONG_T read Get_Count;
    property CtgCount: ULONG_T read Get_CtgCount;
  end;

// *********************************************************************//
// DispIntf:  IPXV_JSCodeSnippetsStorageDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C25C73EF-6444-4403-B699-8F95CE14CE85}
// *********************************************************************//
  IPXV_JSCodeSnippetsStorageDisp = dispinterface
    ['{C25C73EF-6444-4403-B699-8F95CE14CE85}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXV_JSCodeSnippet readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    function ShowEditDlg(hWndParent: HANDLE_T; sSnippetToEdit: {NOT_OLEAUTO(PWideChar)}OleVariant): WideString; dispid 1610743811;
    function AddNew(sName: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                    sDesc: {NOT_OLEAUTO(PWideChar)}OleVariant; 
                    sBody: {NOT_OLEAUTO(PWideChar)}OleVariant): IPXV_JSCodeSnippet; dispid 1610743812;
    function Find(sSnippetID: {NOT_OLEAUTO(PWideChar)}OleVariant): IPXV_JSCodeSnippet; dispid 1610743813;
    procedure Remove(sSnippetID: {NOT_OLEAUTO(PWideChar)}OleVariant); dispid 1610743814;
    property CtgCount: ULONG_T readonly dispid 1610743815;
    procedure GetCtg(nIndex: ULONG_T; out sID: WideString; out sName: WideString); dispid 1610743816;
    procedure Refresh; dispid 1610743817;
    procedure Reset; dispid 1610743818;
  end;

// *********************************************************************//
// Interface: IPXV_JSCodeSnippet
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {35A751A3-6421-43CE-A2C3-AF90882A8875}
// *********************************************************************//
  IPXV_JSCodeSnippet = interface(IDispatch)
    ['{35A751A3-6421-43CE-A2C3-AF90882A8875}']
    function Get_ID: WideString; safecall;
    function Get_Flags: ULONG_T; safecall;
    function Get_CtgID: WideString; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const sVal: WideString); safecall;
    function Get_Desc: WideString; safecall;
    procedure Set_Desc(const sVal: WideString); safecall;
    function Get_Body: WideString; safecall;
    procedure Set_Body(const sVal: WideString); safecall;
    property ID: WideString read Get_ID;
    property Flags: ULONG_T read Get_Flags;
    property CtgID: WideString read Get_CtgID;
    property Name: WideString read Get_Name write Set_Name;
    property Desc: WideString read Get_Desc write Set_Desc;
    property Body: WideString read Get_Body write Set_Body;
  end;

// *********************************************************************//
// DispIntf:  IPXV_JSCodeSnippetDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {35A751A3-6421-43CE-A2C3-AF90882A8875}
// *********************************************************************//
  IPXV_JSCodeSnippetDisp = dispinterface
    ['{35A751A3-6421-43CE-A2C3-AF90882A8875}']
    property ID: WideString readonly dispid 1610743808;
    property Flags: ULONG_T readonly dispid 1610743809;
    property CtgID: WideString readonly dispid 1610743810;
    property Name: WideString dispid 1610743811;
    property Desc: WideString dispid 1610743813;
    property Body: WideString dispid 1610743815;
  end;

// *********************************************************************//
// Interface: IPXV_SpellChecker
// Flags:     (0)
// GUID:      {E8E82DD1-B650-4AE7-A008-73151EACB44C}
// *********************************************************************//
  IPXV_SpellChecker = interface(ISpellCheckCallbacks)
    ['{E8E82DD1-B650-4AE7-A008-73151EACB44C}']
    function ShowPrefs(hWndParent: HANDLE_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_OCRExtension
// Flags:     (0)
// GUID:      {A1ADACB7-046D-4A85-99EB-FE931BB18F3A}
// *********************************************************************//
  IPXV_OCRExtension = interface(IUnknown)
    ['{A1ADACB7-046D-4A85-99EB-FE931BB18F3A}']
    function Get_Features(out nRes: ULONG_T): HResult; stdcall;
    function CreateNewTaskParams(out pParams: ICab): HResult; stdcall;
    function SetupTaskParams(const pParams: ICabNode; hWndParent: HANDLE_T): HResult; stdcall;
    function CreateNewTask(const pParams: ICabNode; out pNewTask: IPXV_OCRTask): HResult; stdcall;
    function GetLanguages(out pLangsEnum: IPXV_OCRExtLanguages): HResult; stdcall;
    function GetAccuracyLevels(out pAccuracyEnum: IPXV_OCRExtAccuracyLevels): HResult; stdcall;
    function CreateOCRRegions(out pRegions: IPXV_OCRRegions): HResult; stdcall;
    function GetLanguagesStoreUrl(out sURL: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_OCRTask
// Flags:     (0)
// GUID:      {4371CA1E-0525-4374-A701-3246127B0C35}
// *********************************************************************//
  IPXV_OCRTask = interface(IUnknown)
    ['{4371CA1E-0525-4374-A701-3246127B0C35}']
    function Get_Params(out pParams: ICab): HResult; stdcall;
    function AnalyzePage(const pPage: IPXC_Page; var stRectOnPage: PXC_Rect; nFlags: ULONG_T; 
                         const pProgress: IProgressMon; out pLayoutRegions: IPXV_OCRRegions): HResult; stdcall;
    function ProceedPage(const pPage: IPXC_Page; const pRegions: IPXV_OCRRegions; nFlags: ULONG_T; 
                         const pProgress: IProgressMon; out pResult: IPXV_OCRResult): HResult; stdcall;
    function AnalyzeImage(const pPage: IIXC_Page; var stRectOnPage: tagRECT; nFlags: ULONG_T; 
                          const pProgress: IProgressMon; out pLayoutRegions: IPXV_OCRRegions): HResult; stdcall;
    function ProceedImage(const pPage: IIXC_Page; const pRegions: IPXV_OCRRegions; nFlags: ULONG_T; 
                          const pProgress: IProgressMon; out pResult: IPXV_OCRResult): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_OCRRegions
// Flags:     (0)
// GUID:      {7BC3C910-8539-4424-98A3-560DF51822EE}
// *********************************************************************//
  IPXV_OCRRegions = interface(IUnknown)
    ['{7BC3C910-8539-4424-98A3-560DF51822EE}']
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pItem: IPXV_OCRRegion): HResult; stdcall;
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Clear: HResult; stdcall;
    function InsertNew(nType: PXV_OCRBlockType; var stRectOnPage: PXC_Rect; nInsertBefore: Integer; 
                       out pNewItem: IPXV_OCRRegion): HResult; stdcall;
    function Remove(nItemIndex: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_OCRRegion
// Flags:     (0)
// GUID:      {57513BC7-DF60-499A-AF33-4829B8C5C2A5}
// *********************************************************************//
  IPXV_OCRRegion = interface(IUnknown)
    ['{57513BC7-DF60-499A-AF33-4829B8C5C2A5}']
    function Set_Rect(stRect: PXC_Rect): HResult; stdcall;
    function Get_Rect(out stRect: PXC_Rect): HResult; stdcall;
    function Get_type_(out nType: PXV_OCRBlockType): HResult; stdcall;
    function Set_type_(nType: PXV_OCRBlockType): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_OCRResult
// Flags:     (0)
// GUID:      {EBAC8939-DB1A-45FB-B6AA-7BF47E81D2A9}
// *********************************************************************//
  IPXV_OCRResult = interface(IUnknown)
    ['{EBAC8939-DB1A-45FB-B6AA-7BF47E81D2A9}']
    function Get_SymbolsCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_SymbolCode(nSymbolIndex: ULONG_T; out nCode: Word): HResult; stdcall;
    function Get_SymbolInfo(nSymbolIndex: ULONG_T; out stInfo: PXV_OCRSymbolInfo): HResult; stdcall;
    function GetSymbol(nSymbolIndex: ULONG_T; out nCode: Word; out stInfo: PXV_OCRSymbolInfo): HResult; stdcall;
    function Get_WordsCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_WordInfo(nWordIndex: ULONG_T; out stInfo: PXV_OCRWordInfo): HResult; stdcall;
    function Get_LinesCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_LineInfo(nLineIndex: ULONG_T; out stInfo: PXV_OCRLineInfo): HResult; stdcall;
    function Get_ParasCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_ParaInfo(nParaIndex: ULONG_T; out stInfo: PXV_OCRParaInfo): HResult; stdcall;
    function Get_BlocksCount(out nCount: ULONG_T): HResult; stdcall;
    function Get_BlockInfo(nBlockIndex: ULONG_T; out stInfo: PXV_OCRBlockInfo): HResult; stdcall;
    function Get_DeskewAngle(out nDeskewAngle: Double): HResult; stdcall;
    function GetText(nFirstSymbol: ULONG_T; nSymbolsCount: ULONG_T; 
                     const sLineSeparator: WideString; const sParaSeparator: WideString; 
                     nFlags: ULONG_T; out sText: WideString): HResult; stdcall;
    function GetFontName(nFontID: ULONG_T; out sFontName: WideString): HResult; stdcall;
    function GetLangName(nLangID: ULONG_T; out sLangName: WideString): HResult; stdcall;
    function GetSymbolStyle(nStyleID: ULONG_T; out stStyle: PXV_OCRSymbolStyle): HResult; stdcall;
    function Get_DPI(out nDpi: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_OCRExtLanguages
// Flags:     (0)
// GUID:      {7AD11BA4-3DEE-4354-AF77-4387D9F1DE2B}
// *********************************************************************//
  IPXV_OCRExtLanguages = interface(IUnknown)
    ['{7AD11BA4-3DEE-4354-AF77-4387D9F1DE2B}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function GetItem(nIndex: ULONG_T; out sValue: WideString; out sName: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_OCRExtAccuracyLevels
// Flags:     (0)
// GUID:      {13AF8256-F779-4337-9C0B-9B675A6E09EB}
// *********************************************************************//
  IPXV_OCRExtAccuracyLevels = interface(IUnknown)
    ['{13AF8256-F779-4337-9C0B-9B675A6E09EB}']
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function GetItem(nIndex: ULONG_T; out nValue: Integer; out sName: WideString): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_BeforeShowContextMenuEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C8238AD-4C2C-480B-8945-747DACCD06EE}
// *********************************************************************//
  IPXV_BeforeShowContextMenuEvent = interface(IEvent)
    ['{4C8238AD-4C2C-480B-8945-747DACCD06EE}']
    function Get_MenuID: Integer; safecall;
    function Get_Menu: IUIX_CmdMenu; safecall;
    function Get_Owner: IUIX_Obj; safecall;
    function Get_Target: IUnknown; safecall;
    function Get_ExclRect: tagRECT; safecall;
    procedure Set_ExclRect(stExclRect: PUserType9); safecall;
    function Get_ShowFlags: Integer; safecall;
    procedure Set_ShowFlags(nShowFlags: Integer); safecall;
    property MenuID: Integer read Get_MenuID;
    property Menu: IUIX_CmdMenu read Get_Menu;
    property Owner: IUIX_Obj read Get_Owner;
    property Target: IUnknown read Get_Target;
    // Skipped Property "ExclRect"
    property ShowFlags: Integer read Get_ShowFlags write Set_ShowFlags;
  end;

// *********************************************************************//
// DispIntf:  IPXV_BeforeShowContextMenuEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {4C8238AD-4C2C-480B-8945-747DACCD06EE}
// *********************************************************************//
  IPXV_BeforeShowContextMenuEventDisp = dispinterface
    ['{4C8238AD-4C2C-480B-8945-747DACCD06EE}']
    property MenuID: Integer readonly dispid 1610809344;
    property Menu: IUIX_CmdMenu readonly dispid 1610809345;
    property Owner: IUIX_Obj readonly dispid 1610809346;
    property Target: IUnknown readonly dispid 1610809347;
    function ExclRect: {NOT_OLEAUTO(tagRECT)}OleVariant; dispid 1610809348;
    property ShowFlags: Integer dispid 1610809350;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_TextSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D934750D-E5CF-49BD-B949-525E56FA1A69}
// *********************************************************************//
  IPXV_TextSelection = interface(IPXV_DocSelection)
    ['{D934750D-E5CF-49BD-B949-525E56FA1A69}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXV_PageTextSelection; safecall;
    function Get_Count: ULONG_T; safecall;
    function GetSel(nPageIndex: ULONG_T; bAddIfNotExists: WordBool): IPXV_PageTextSelection; safecall;
    procedure RemoveSel(nPageIndex: ULONG_T); safecall;
    procedure CopyAsRich; safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXV_PageTextSelection read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_TextSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D934750D-E5CF-49BD-B949-525E56FA1A69}
// *********************************************************************//
  IPXV_TextSelectionDisp = dispinterface
    ['{D934750D-E5CF-49BD-B949-525E56FA1A69}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXV_PageTextSelection readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610809346;
    function GetSel(nPageIndex: ULONG_T; bAddIfNotExists: WordBool): IPXV_PageTextSelection; dispid 1610809347;
    procedure RemoveSel(nPageIndex: ULONG_T); dispid 1610809348;
    procedure CopyAsRich; dispid 1610809349;
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_PageTextSelection
// Flags:     (128) NonExtensible
// GUID:      {70D206C9-FCB2-465A-BD9D-D857FDD01AC6}
// *********************************************************************//
  IPXV_PageTextSelection = interface(IUnknown)
    ['{70D206C9-FCB2-465A-BD9D-D857FDD01AC6}']
    function Get_IsEmpty(out bIsEmpty: WordBool): HResult; stdcall;
    function Get_RangesCount(out nCount: ULONG_T): HResult; stdcall;
    function GetRange(nRangeIndex: ULONG_T; out nFirstCharIndex: ULONG_T; out nCharsCount: ULONG_T): HResult; stdcall;
    function RemoveRange(nRangeIndex: ULONG_T; bUpdate: WordBool): HResult; stdcall;
    function SelectChars(nFirstCharIndex: ULONG_T; nCharsCount: ULONG_T; bUpdate: WordBool; 
                         bExclusive: WordBool): HResult; stdcall;
    function UnselectChars(nFirstCharIndex: ULONG_T; nCharsCount: ULONG_T; bUpdate: WordBool): HResult; stdcall;
    function IsCharSelected(nCharIndex: ULONG_T; out bSelected: WordBool): HResult; stdcall;
    function Clear(bUpdate: WordBool): HResult; stdcall;
    function Update: HResult; stdcall;
    function Redraw: HResult; stdcall;
    function GetPlainText(out sText: WideString): HResult; stdcall;
    function Get_PageIndex(out nPageIndex: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PagesSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8C67FBD-6B9B-4FC3-A92A-99661D085A0A}
// *********************************************************************//
  IPXV_PagesSelection = interface(IPXV_DocSelection)
    ['{C8C67FBD-6B9B-4FC3-A92A-99661D085A0A}']
    function Get_Items: IPXV_PageIndexesList; safecall;
    property Items: IPXV_PageIndexesList read Get_Items;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PagesSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C8C67FBD-6B9B-4FC3-A92A-99661D085A0A}
// *********************************************************************//
  IPXV_PagesSelectionDisp = dispinterface
    ['{C8C67FBD-6B9B-4FC3-A92A-99661D085A0A}']
    property Items: IPXV_PageIndexesList readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_PageIndexesList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D120B16B-2707-43F5-B176-009DF6500069}
// *********************************************************************//
  IPXV_PageIndexesList = interface(IDispatch)
    ['{D120B16B-2707-43F5-B176-009DF6500069}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nItemIndex: ULONG_T): ULONG_T; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nPageIndex: ULONG_T); safecall;
    procedure Add(nPageIndex: ULONG_T); safecall;
    function Find(nPageIndex: ULONG_T): Integer; safecall;
    procedure AddFrom(const pSrc: IPXV_PageIndexesList); safecall;
    procedure CopyFrom(const pSrc: IPXV_PageIndexesList); safecall;
    procedure AddMult(nFirstPageIndex: ULONG_T; nPagesCount: ULONG_T; nFilter: ULONG_T); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nItemIndex: ULONG_T]: ULONG_T read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PageIndexesListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D120B16B-2707-43F5-B176-009DF6500069}
// *********************************************************************//
  IPXV_PageIndexesListDisp = dispinterface
    ['{D120B16B-2707-43F5-B176-009DF6500069}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nItemIndex: ULONG_T]: ULONG_T readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nPageIndex: ULONG_T); dispid 1610743812;
    procedure Add(nPageIndex: ULONG_T); dispid 1610743813;
    function Find(nPageIndex: ULONG_T): Integer; dispid 1610743814;
    procedure AddFrom(const pSrc: IPXV_PageIndexesList); dispid 1610743815;
    procedure CopyFrom(const pSrc: IPXV_PageIndexesList); dispid 1610743816;
    procedure AddMult(nFirstPageIndex: ULONG_T; nPagesCount: ULONG_T; nFilter: ULONG_T); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IPXV_DocContentsChangedEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {553CF597-98AA-41A3-B2F0-9C6101A6DFA6}
// *********************************************************************//
  IPXV_DocContentsChangedEvent = interface(IEvent)
    ['{553CF597-98AA-41A3-B2F0-9C6101A6DFA6}']
    function Get_Info: IPXV_DocContentsChangesInfo; safecall;
    property Info: IPXV_DocContentsChangesInfo read Get_Info;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocContentsChangedEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {553CF597-98AA-41A3-B2F0-9C6101A6DFA6}
// *********************************************************************//
  IPXV_DocContentsChangedEventDisp = dispinterface
    ['{553CF597-98AA-41A3-B2F0-9C6101A6DFA6}']
    property Info: IPXV_DocContentsChangesInfo readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_BeforePrintEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {79A9AD9C-3D6B-496B-B8E4-C09E54E21156}
// *********************************************************************//
  IPXV_BeforePrintEvent = interface(IEvent)
    ['{79A9AD9C-3D6B-496B-B8E4-C09E54E21156}']
    function Get_Target: IPrintTarget; safecall;
    function Get_Pages: INumArray; safecall;
    function Get_Options: ICab; safecall;
    function Get_ErrorMsgText: WideString; safecall;
    procedure Set_ErrorMsgText(const sText: WideString); safecall;
    function Get_ErrorMsgTitle: WideString; safecall;
    procedure Set_ErrorMsgTitle(const sTitle: WideString); safecall;
    property Target: IPrintTarget read Get_Target;
    property Pages: INumArray read Get_Pages;
    property Options: ICab read Get_Options;
    property ErrorMsgText: WideString read Get_ErrorMsgText write Set_ErrorMsgText;
    property ErrorMsgTitle: WideString read Get_ErrorMsgTitle write Set_ErrorMsgTitle;
  end;

// *********************************************************************//
// DispIntf:  IPXV_BeforePrintEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {79A9AD9C-3D6B-496B-B8E4-C09E54E21156}
// *********************************************************************//
  IPXV_BeforePrintEventDisp = dispinterface
    ['{79A9AD9C-3D6B-496B-B8E4-C09E54E21156}']
    property Target: IPrintTarget readonly dispid 1610809344;
    property Pages: INumArray readonly dispid 1610809345;
    property Options: ICab readonly dispid 1610809346;
    property ErrorMsgText: WideString dispid 1610809347;
    property ErrorMsgTitle: WideString dispid 1610809349;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPrintTarget
// Flags:     (0)
// GUID:      {6D671A1D-8B34-443A-9DCA-56B80C93439B}
// *********************************************************************//
  IPrintTarget = interface(IUnknown)
    ['{6D671A1D-8B34-443A-9DCA-56B80C93439B}']
    function Get_DCHandle(out nDC: HANDLE_T): HResult; stdcall;
    function Get_PrinterHandle(out nPrinter: HANDLE_T): HResult; stdcall;
    function Get_DevMode(out pDevMode: IDevMode): HResult; stdcall;
    function Get_DPI(out nDpi: tagSIZE): HResult; stdcall;
    function Get_PreviewMode(out bRes: WordBool): HResult; stdcall;
    function UpdateDC(const pNewDevMode: IDevMode): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDevMode
// Flags:     (0)
// GUID:      {C9C943A8-4361-4DC7-8DDE-2909FCF3C118}
// *********************************************************************//
  IDevMode = interface(IUnknown)
    ['{C9C943A8-4361-4DC7-8DDE-2909FCF3C118}']
    function Get_DeviceName(out sVal: WideString): HResult; stdcall;
    function Get_SpecVersion(out nVal: ULONG_T): HResult; stdcall;
    function Get_DriverVersion(out nVal: ULONG_T): HResult; stdcall;
    function Get_Fields(out nVal: ULONG_T): HResult; stdcall;
    function Set_Fields(nVal: ULONG_T): HResult; stdcall;
    function Get_Orientation(out nVal: Smallint): HResult; stdcall;
    function Set_Orientation(nVal: Smallint): HResult; stdcall;
    function Get_PaperSize(out nVal: Smallint): HResult; stdcall;
    function Set_PaperSize(nVal: Smallint): HResult; stdcall;
    function Get_PaperLength(out nVal: Smallint): HResult; stdcall;
    function Set_PaperLength(nVal: Smallint): HResult; stdcall;
    function Get_PaperWidth(out nVal: Smallint): HResult; stdcall;
    function Set_PaperWidth(nVal: Smallint): HResult; stdcall;
    function Get_Scale(out nVal: Smallint): HResult; stdcall;
    function Set_Scale(nVal: Smallint): HResult; stdcall;
    function Get_Copies(out nVal: Smallint): HResult; stdcall;
    function Set_Copies(nVal: Smallint): HResult; stdcall;
    function Get_DefaultSource(out nVal: Smallint): HResult; stdcall;
    function Set_DefaultSource(nVal: Smallint): HResult; stdcall;
    function Get_PrintQuality(out nVal: Smallint): HResult; stdcall;
    function Set_PrintQuality(nVal: Smallint): HResult; stdcall;
    function Get_Color(out nVal: Smallint): HResult; stdcall;
    function Set_Color(nVal: Smallint): HResult; stdcall;
    function Get_Duplex(out nVal: Smallint): HResult; stdcall;
    function Set_Duplex(nVal: Smallint): HResult; stdcall;
    function Get_YResolution(out nVal: Smallint): HResult; stdcall;
    function Set_YResolution(nVal: Smallint): HResult; stdcall;
    function Get_TTOption(out nVal: Smallint): HResult; stdcall;
    function Set_TTOption(nVal: Smallint): HResult; stdcall;
    function Get_Collate(out nVal: Smallint): HResult; stdcall;
    function Set_Collate(nVal: Smallint): HResult; stdcall;
    function Get_FormName(out sVal: WideString): HResult; stdcall;
    function Set_FormName(const sVal: WideString): HResult; stdcall;
    function Get_LogPixels(out nVal: ULONG_T): HResult; stdcall;
    function Set_LogPixels(nVal: ULONG_T): HResult; stdcall;
    function Get_Nup(out nVal: ULONG_T): HResult; stdcall;
    function Set_Nup(nVal: ULONG_T): HResult; stdcall;
    function Get_ICMMethod(out nVal: ULONG_T): HResult; stdcall;
    function Set_ICMMethod(nVal: ULONG_T): HResult; stdcall;
    function Get_ICMIntent(out nVal: ULONG_T): HResult; stdcall;
    function Set_ICMIntent(nVal: ULONG_T): HResult; stdcall;
    function Get_MediaType(out nVal: ULONG_T): HResult; stdcall;
    function Set_MediaType(nVal: ULONG_T): HResult; stdcall;
    function Get_DitherType(out nVal: ULONG_T): HResult; stdcall;
    function Set_DitherType(nVal: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_AnnotSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F2AAC138-7C1A-4152-BA03-A323B908D72F}
// *********************************************************************//
  IPXV_AnnotSelection = interface(IPXV_DocSelection)
    ['{F2AAC138-7C1A-4152-BA03-A323B908D72F}']
    function Get_Items: IPXV_AnnotsList; safecall;
    property Items: IPXV_AnnotsList read Get_Items;
  end;

// *********************************************************************//
// DispIntf:  IPXV_AnnotSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {F2AAC138-7C1A-4152-BA03-A323B908D72F}
// *********************************************************************//
  IPXV_AnnotSelectionDisp = dispinterface
    ['{F2AAC138-7C1A-4152-BA03-A323B908D72F}']
    property Items: IPXV_AnnotsList readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_BookmSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7F6F8356-1AB8-40AD-81E4-E1E3E71B4BCD}
// *********************************************************************//
  IPXV_BookmSelection = interface(IPXV_DocSelection)
    ['{7F6F8356-1AB8-40AD-81E4-E1E3E71B4BCD}']
    function Get_Items: IPXV_BookmList; safecall;
    property Items: IPXV_BookmList read Get_Items;
  end;

// *********************************************************************//
// DispIntf:  IPXV_BookmSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7F6F8356-1AB8-40AD-81E4-E1E3E71B4BCD}
// *********************************************************************//
  IPXV_BookmSelectionDisp = dispinterface
    ['{7F6F8356-1AB8-40AD-81E4-E1E3E71B4BCD}']
    property Items: IPXV_BookmList readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_ContentItemsSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D649A087-D8E2-4D6A-917A-625726293308}
// *********************************************************************//
  IPXV_ContentItemsSelection = interface(IPXV_DocSelection)
    ['{D649A087-D8E2-4D6A-917A-625726293308}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXV_ContentItemEntry; safecall;
    function Get_Count: ULONG_T; safecall;
    function GetSel(nPageIndex: ULONG_T; bAddIfNotExists: WordBool): IPXV_ContentItemEntry; safecall;
    procedure UpdateSel(nPageIndex: ULONG_T; bNotifyChanged: WordBool); safecall;
    procedure RemoveSel(nPageIndex: ULONG_T); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXV_ContentItemEntry read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_ContentItemsSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D649A087-D8E2-4D6A-917A-625726293308}
// *********************************************************************//
  IPXV_ContentItemsSelectionDisp = dispinterface
    ['{D649A087-D8E2-4D6A-917A-625726293308}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXV_ContentItemEntry readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610809346;
    function GetSel(nPageIndex: ULONG_T; bAddIfNotExists: WordBool): IPXV_ContentItemEntry; dispid 1610809347;
    procedure UpdateSel(nPageIndex: ULONG_T; bNotifyChanged: WordBool); dispid 1610809348;
    procedure RemoveSel(nPageIndex: ULONG_T); dispid 1610809349;
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_ContentItemEntry
// Flags:     (128) NonExtensible
// GUID:      {4B8B7763-B570-4725-BC4B-7537A752C57D}
// *********************************************************************//
  IPXV_ContentItemEntry = interface(IUnknown)
    ['{4B8B7763-B570-4725-BC4B-7537A752C57D}']
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pItem: IPXV_ContentItemEntry): HResult; stdcall;
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_ID(out nID: ULONG_T): HResult; stdcall;
    function Remove(nIndex: ULONG_T; nCount: ULONG_T): HResult; stdcall;
    function GetIndex(nID: ULONG_T; out nIndex: Integer): HResult; stdcall;
    function Insert(nID: ULONG_T; out pItem: IPXV_ContentItemEntry): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PDFNamedDestsSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7ED881CB-9DA1-4D56-94E6-5DDE88D5E844}
// *********************************************************************//
  IPXV_PDFNamedDestsSelection = interface(IPXV_DocSelection)
    ['{7ED881CB-9DA1-4D56-94E6-5DDE88D5E844}']
    function Get_Items: IUniqueStrings; safecall;
    property Items: IUniqueStrings read Get_Items;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PDFNamedDestsSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7ED881CB-9DA1-4D56-94E6-5DDE88D5E844}
// *********************************************************************//
  IPXV_PDFNamedDestsSelectionDisp = dispinterface
    ['{7ED881CB-9DA1-4D56-94E6-5DDE88D5E844}']
    property Items: IUniqueStrings readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_AttachSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7B430FB9-7FBB-4645-94BC-76E917FFCE42}
// *********************************************************************//
  IPXV_AttachSelection = interface(IPXV_DocSelection)
    ['{7B430FB9-7FBB-4645-94BC-76E917FFCE42}']
    function Get_Items: IPXV_AttachList; safecall;
    property Items: IPXV_AttachList read Get_Items;
  end;

// *********************************************************************//
// DispIntf:  IPXV_AttachSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7B430FB9-7FBB-4645-94BC-76E917FFCE42}
// *********************************************************************//
  IPXV_AttachSelectionDisp = dispinterface
    ['{7B430FB9-7FBB-4645-94BC-76E917FFCE42}']
    property Items: IPXV_AttachList readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_PageRectSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9CCBEF77-C177-4CC5-AC3E-18B08E29D628}
// *********************************************************************//
  IPXV_PageRectSelection = interface(IPXV_DocSelection)
    ['{9CCBEF77-C177-4CC5-AC3E-18B08E29D628}']
    function Get_PageIndex: ULONG_T; safecall;
    function Get_PageRect: PXC_Rect; safecall;
    procedure Update(nPageIndex: ULONG_T; var stRectOnPage: PXC_Rect); safecall;
    function Get_DPI: ULONG_T; safecall;
    procedure Set_DPI(nDpi: ULONG_T); safecall;
    function Get_Grayscale: WordBool; safecall;
    procedure Set_Grayscale(bGrayscale: WordBool); safecall;
    procedure Set_ZoomLevel(nZoomLevel: Double); safecall;
    function Get_ZoomLevel: Double; safecall;
    procedure Set_ViewRotation(nViewRotation: Integer); safecall;
    function Get_ViewRotation: Integer; safecall;
    property PageIndex: ULONG_T read Get_PageIndex;
    property PageRect: PXC_Rect read Get_PageRect;
    property DPI: ULONG_T read Get_DPI write Set_DPI;
    property Grayscale: WordBool read Get_Grayscale write Set_Grayscale;
    property ZoomLevel: Double read Get_ZoomLevel write Set_ZoomLevel;
    property ViewRotation: Integer read Get_ViewRotation write Set_ViewRotation;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PageRectSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9CCBEF77-C177-4CC5-AC3E-18B08E29D628}
// *********************************************************************//
  IPXV_PageRectSelectionDisp = dispinterface
    ['{9CCBEF77-C177-4CC5-AC3E-18B08E29D628}']
    property PageIndex: ULONG_T readonly dispid 1610809344;
    property PageRect: {NOT_OLEAUTO(PXC_Rect)}OleVariant readonly dispid 1610809345;
    procedure Update(nPageIndex: ULONG_T; var stRectOnPage: {NOT_OLEAUTO(PXC_Rect)}OleVariant); dispid 1610809346;
    property DPI: ULONG_T dispid 1610809347;
    property Grayscale: WordBool dispid 1610809349;
    property ZoomLevel: Double dispid 1610809351;
    property ViewRotation: Integer dispid 1610809353;
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_GuideSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {03BC249B-B8BF-49DA-861E-654CEA4B5D2B}
// *********************************************************************//
  IPXV_GuideSelection = interface(IPXV_DocSelection)
    ['{03BC249B-B8BF-49DA-861E-654CEA4B5D2B}']
    function Get_PageIndex: ULONG_T; safecall;
    function Get_Pos: Double; safecall;
    function Get_Vert: WordBool; safecall;
    property PageIndex: ULONG_T read Get_PageIndex;
    property Pos: Double read Get_Pos;
    property Vert: WordBool read Get_Vert;
  end;

// *********************************************************************//
// DispIntf:  IPXV_GuideSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {03BC249B-B8BF-49DA-861E-654CEA4B5D2B}
// *********************************************************************//
  IPXV_GuideSelectionDisp = dispinterface
    ['{03BC249B-B8BF-49DA-861E-654CEA4B5D2B}']
    property PageIndex: ULONG_T readonly dispid 1610809344;
    property Pos: Double readonly dispid 1610809345;
    property Vert: WordBool readonly dispid 1610809346;
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_OCSelection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B2D544A1-449E-46A1-83EB-DD4A261BA283}
// *********************************************************************//
  IPXV_OCSelection = interface(IPXV_DocSelection)
    ['{B2D544A1-449E-46A1-83EB-DD4A261BA283}']
    function Get_Items: IPXV_OCOrderElementsList; safecall;
    property Items: IPXV_OCOrderElementsList read Get_Items;
  end;

// *********************************************************************//
// DispIntf:  IPXV_OCSelectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B2D544A1-449E-46A1-83EB-DD4A261BA283}
// *********************************************************************//
  IPXV_OCSelectionDisp = dispinterface
    ['{B2D544A1-449E-46A1-83EB-DD4A261BA283}']
    property Items: IPXV_OCOrderElementsList readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property ClusterID: Integer readonly dispid 1610743809;
    property Flags: ULONG_T readonly dispid 1610743810;
    property IsEmpty: WordBool readonly dispid 1610743811;
    property IsVisible: WordBool readonly dispid 1610743812;
    procedure Clear; dispid 1610743813;
    property CanCopy: WordBool readonly dispid 1610743814;
    property CanPaste: WordBool readonly dispid 1610743815;
    property CanCut: WordBool readonly dispid 1610743816;
    property CanDelete: WordBool readonly dispid 1610743817;
    procedure Copy; dispid 1610743818;
    procedure Paste; dispid 1610743819;
    procedure Cut; dispid 1610743820;
    procedure Delete; dispid 1610743821;
    procedure Show(bShow: WordBool; bAnimated: WordBool); dispid 1610743822;
    procedure EnsureVisible(bAllowSmoothScroll: WordBool); dispid 1610743823;
    procedure Highlight; dispid 1610743824;
    procedure StopHighlighting; dispid 1610743825;
    procedure Redraw; dispid 1610743826;
    procedure OnActivate; dispid 1610743827;
    procedure OnDeactivate; dispid 1610743828;
    procedure OnAdd(const pNewOwner: IPXV_Document); dispid 1610743829;
    procedure OnRemove(const pOldOwner: IPXV_Document); dispid 1610743830;
  end;

// *********************************************************************//
// Interface: IPXV_OCOrderElementsList
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5E71F605-B8D3-4478-BDBA-7021069C464F}
// *********************************************************************//
  IPXV_OCOrderElementsList = interface(IDispatch)
    ['{5E71F605-B8D3-4478-BDBA-7021069C464F}']
    function Get__NewEnum: IUnknown; safecall;
    function Get_Item(nIndex: ULONG_T): IPXC_OCOrderElement; safecall;
    function Get_Count: ULONG_T; safecall;
    procedure Clear; safecall;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); safecall;
    procedure Remove2(const pItem: IPXC_OCOrderElement); safecall;
    procedure Insert(const pItem: IPXC_OCOrderElement; nIndex: ULONG_T); safecall;
    function Find(const pItem: IPXC_OCOrderElement): Integer; safecall;
    procedure InsertFrom(const pSrc: IPXV_OCOrderElementsList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); safecall;
    procedure CopyFrom(const pSrc: IPXV_OCOrderElementsList); safecall;
    property _NewEnum: IUnknown read Get__NewEnum;
    property Item[nIndex: ULONG_T]: IPXC_OCOrderElement read Get_Item; default;
    property Count: ULONG_T read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  IPXV_OCOrderElementsListDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5E71F605-B8D3-4478-BDBA-7021069C464F}
// *********************************************************************//
  IPXV_OCOrderElementsListDisp = dispinterface
    ['{5E71F605-B8D3-4478-BDBA-7021069C464F}']
    property _NewEnum: IUnknown readonly dispid -4;
    property Item[nIndex: ULONG_T]: IPXC_OCOrderElement readonly dispid 0; default;
    property Count: ULONG_T readonly dispid 1610743810;
    procedure Clear; dispid 1610743811;
    procedure Remove(nIndex: ULONG_T; nCount: ULONG_T); dispid 1610743812;
    procedure Remove2(const pItem: IPXC_OCOrderElement); dispid 1610743813;
    procedure Insert(const pItem: IPXC_OCOrderElement; nIndex: ULONG_T); dispid 1610743814;
    function Find(const pItem: IPXC_OCOrderElement): Integer; dispid 1610743815;
    procedure InsertFrom(const pSrc: IPXV_OCOrderElementsList; nStartSrcIndex: ULONG_T; 
                         nSrcItemsCount: ULONG_T; nDstIndex: ULONG_T); dispid 1610743816;
    procedure CopyFrom(const pSrc: IPXV_OCOrderElementsList); dispid 1610743817;
  end;

// *********************************************************************//
// Interface: IPXV_InvalidatePagesEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D98CFAA7-4EA7-4046-AA77-6A553D4A52C4}
// *********************************************************************//
  IPXV_InvalidatePagesEvent = interface(IEvent)
    ['{D98CFAA7-4EA7-4046-AA77-6A553D4A52C4}']
    function Get_Info: IPXV_InvalidatePagesInfo; safecall;
    property Info: IPXV_InvalidatePagesInfo read Get_Info;
  end;

// *********************************************************************//
// DispIntf:  IPXV_InvalidatePagesEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {D98CFAA7-4EA7-4046-AA77-6A553D4A52C4}
// *********************************************************************//
  IPXV_InvalidatePagesEventDisp = dispinterface
    ['{D98CFAA7-4EA7-4046-AA77-6A553D4A52C4}']
    property Info: IPXV_InvalidatePagesInfo readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_PagesLayoutChangedEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {61C9E343-F9E1-40AE-9A0F-627E07B0145C}
// *********************************************************************//
  IPXV_PagesLayoutChangedEvent = interface(IEvent)
    ['{61C9E343-F9E1-40AE-9A0F-627E07B0145C}']
    function Get_ChangesFlags: ULONG_T; safecall;
    function Get_ScrollDelta: tagPOINT; safecall;
    function Get_OldRegions: IPXV_PagesLayoutRegions; safecall;
    property ChangesFlags: ULONG_T read Get_ChangesFlags;
    property ScrollDelta: tagPOINT read Get_ScrollDelta;
    property OldRegions: IPXV_PagesLayoutRegions read Get_OldRegions;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PagesLayoutChangedEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {61C9E343-F9E1-40AE-9A0F-627E07B0145C}
// *********************************************************************//
  IPXV_PagesLayoutChangedEventDisp = dispinterface
    ['{61C9E343-F9E1-40AE-9A0F-627E07B0145C}']
    property ChangesFlags: ULONG_T readonly dispid 1610809344;
    property ScrollDelta: {NOT_OLEAUTO(tagPOINT)}OleVariant readonly dispid 1610809345;
    property OldRegions: IPXV_PagesLayoutRegions readonly dispid 1610809346;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_PagesVisibilityChangedEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7C1F0D81-0338-4F9F-BED8-C873A0A9A03E}
// *********************************************************************//
  IPXV_PagesVisibilityChangedEvent = interface(IEvent)
    ['{7C1F0D81-0338-4F9F-BED8-C873A0A9A03E}']
    function Get_PagesBecameVisible: INumArray; safecall;
    function Get_PagesBecameInvisible: INumArray; safecall;
    property PagesBecameVisible: INumArray read Get_PagesBecameVisible;
    property PagesBecameInvisible: INumArray read Get_PagesBecameInvisible;
  end;

// *********************************************************************//
// DispIntf:  IPXV_PagesVisibilityChangedEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {7C1F0D81-0338-4F9F-BED8-C873A0A9A03E}
// *********************************************************************//
  IPXV_PagesVisibilityChangedEventDisp = dispinterface
    ['{7C1F0D81-0338-4F9F-BED8-C873A0A9A03E}']
    property PagesBecameVisible: INumArray readonly dispid 1610809344;
    property PagesBecameInvisible: INumArray readonly dispid 1610809345;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_GotoActionEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BFC953AC-03BE-4DFB-9BC9-ED9A45EF3E28}
// *********************************************************************//
  IPXV_GotoActionEvent = interface(IEvent)
    ['{BFC953AC-03BE-4DFB-9BC9-ED9A45EF3E28}']
    function Get_Action: IPXC_Action; safecall;
    function Get_URI: WideString; safecall;
    function Get_Extra: WideString; safecall;
    function Get_NewWindow: Integer; safecall;
    function Get_PostData: IAFS_File; safecall;
    function Get_Header: WideString; safecall;
    property Action: IPXC_Action read Get_Action;
    property URI: WideString read Get_URI;
    property Extra: WideString read Get_Extra;
    property NewWindow: Integer read Get_NewWindow;
    property PostData: IAFS_File read Get_PostData;
    property Header: WideString read Get_Header;
  end;

// *********************************************************************//
// DispIntf:  IPXV_GotoActionEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {BFC953AC-03BE-4DFB-9BC9-ED9A45EF3E28}
// *********************************************************************//
  IPXV_GotoActionEventDisp = dispinterface
    ['{BFC953AC-03BE-4DFB-9BC9-ED9A45EF3E28}']
    property Action: IPXC_Action readonly dispid 1610809344;
    property URI: WideString readonly dispid 1610809345;
    property Extra: WideString readonly dispid 1610809346;
    property NewWindow: Integer readonly dispid 1610809347;
    property PostData: IAFS_File readonly dispid 1610809348;
    property Header: WideString readonly dispid 1610809349;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_DocSaveEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5CC12C51-E255-427D-8385-10304C887256}
// *********************************************************************//
  IPXV_DocSaveEvent = interface(IEvent)
    ['{5CC12C51-E255-427D-8385-10304C887256}']
    function Get_Flags: Integer; safecall;
    procedure Set_Flags(nFlags: Integer); safecall;
    function Get_Dest: IUnknown; safecall;
    procedure Set_Dest(const pDest: IUnknown); safecall;
    function Get_DestFS: IAFS_FileSys; safecall;
    procedure Set_DestFS(const pDestFS: IAFS_FileSys); safecall;
    function Get_DestConv: IPXV_ExportConverter; safecall;
    procedure Set_DestConv(const pDestConv: IPXV_ExportConverter); safecall;
    function Get_DestConvParams: ICab; safecall;
    procedure Set_DestConvParams(const pParams: ICab); safecall;
    function Get_ProgressMon: IProgressMon; safecall;
    procedure Set_ProgressMon(const pProgress: IProgressMon); safecall;
    function Get_AdvancedParams: ICab; safecall;
    function Get_WndParent: HANDLE_T; safecall;
    property Flags: Integer read Get_Flags write Set_Flags;
    property Dest: IUnknown read Get_Dest write Set_Dest;
    property DestFS: IAFS_FileSys read Get_DestFS write Set_DestFS;
    property DestConv: IPXV_ExportConverter read Get_DestConv write Set_DestConv;
    property DestConvParams: ICab read Get_DestConvParams write Set_DestConvParams;
    property ProgressMon: IProgressMon read Get_ProgressMon write Set_ProgressMon;
    property AdvancedParams: ICab read Get_AdvancedParams;
    property WndParent: HANDLE_T read Get_WndParent;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocSaveEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5CC12C51-E255-427D-8385-10304C887256}
// *********************************************************************//
  IPXV_DocSaveEventDisp = dispinterface
    ['{5CC12C51-E255-427D-8385-10304C887256}']
    property Flags: Integer dispid 1610809344;
    property Dest: IUnknown dispid 1610809346;
    property DestFS: IAFS_FileSys dispid 1610809348;
    property DestConv: IPXV_ExportConverter dispid 1610809350;
    property DestConvParams: ICab dispid 1610809352;
    property ProgressMon: IProgressMon dispid 1610809354;
    property AdvancedParams: ICab readonly dispid 1610809356;
    property WndParent: HANDLE_T readonly dispid 1610809357;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_CommentStylesChangedEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9642931B-D1F7-4C17-85B1-A34129EE6F7F}
// *********************************************************************//
  IPXV_CommentStylesChangedEvent = interface(IEvent)
    ['{9642931B-D1F7-4C17-85B1-A34129EE6F7F}']
    function Get_ToolID: Integer; safecall;
    function Get_ChangesFlags: Integer; safecall;
    function Get_ChangedStyleID: Integer; safecall;
    property ToolID: Integer read Get_ToolID;
    property ChangesFlags: Integer read Get_ChangesFlags;
    property ChangedStyleID: Integer read Get_ChangedStyleID;
  end;

// *********************************************************************//
// DispIntf:  IPXV_CommentStylesChangedEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {9642931B-D1F7-4C17-85B1-A34129EE6F7F}
// *********************************************************************//
  IPXV_CommentStylesChangedEventDisp = dispinterface
    ['{9642931B-D1F7-4C17-85B1-A34129EE6F7F}']
    property ToolID: Integer readonly dispid 1610809344;
    property ChangesFlags: Integer readonly dispid 1610809345;
    property ChangedStyleID: Integer readonly dispid 1610809346;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_AppSettingsEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {70026DA6-0CB8-4F47-8789-5DEF9F2BC4A1}
// *********************************************************************//
  IPXV_AppSettingsEvent = interface(IEvent)
    ['{70026DA6-0CB8-4F47-8789-5DEF9F2BC4A1}']
    function Get_Options: IBitSet; safecall;
    function Get_HasOption(nOpt: PXV_AppSettingsOptions): WordBool; safecall;
    property Options: IBitSet read Get_Options;
    property HasOption[nOpt: PXV_AppSettingsOptions]: WordBool read Get_HasOption;
  end;

// *********************************************************************//
// DispIntf:  IPXV_AppSettingsEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {70026DA6-0CB8-4F47-8789-5DEF9F2BC4A1}
// *********************************************************************//
  IPXV_AppSettingsEventDisp = dispinterface
    ['{70026DA6-0CB8-4F47-8789-5DEF9F2BC4A1}']
    property Options: IBitSet readonly dispid 1610809344;
    property HasOption[nOpt: PXV_AppSettingsOptions]: WordBool readonly dispid 1610809345;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_DocActionEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48F9A6AB-3AE5-4516-84CE-AD99FEAA234B}
// *********************************************************************//
  IPXV_DocActionEvent = interface(IEvent)
    ['{48F9A6AB-3AE5-4516-84CE-AD99FEAA234B}']
    function Get_Action: IPXC_Action; safecall;
    function Get_TriggerClass: PXV_ActionTriggerClass; safecall;
    function Get_TriggerSubclass: PXV_ActionTriggerSubclass; safecall;
    function Get_ActionData: IUnknown; safecall;
    property Action: IPXC_Action read Get_Action;
    property TriggerClass: PXV_ActionTriggerClass read Get_TriggerClass;
    property TriggerSubclass: PXV_ActionTriggerSubclass read Get_TriggerSubclass;
    property ActionData: IUnknown read Get_ActionData;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocActionEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {48F9A6AB-3AE5-4516-84CE-AD99FEAA234B}
// *********************************************************************//
  IPXV_DocActionEventDisp = dispinterface
    ['{48F9A6AB-3AE5-4516-84CE-AD99FEAA234B}']
    property Action: IPXC_Action readonly dispid 1610809344;
    property TriggerClass: PXV_ActionTriggerClass readonly dispid 1610809345;
    property TriggerSubclass: PXV_ActionTriggerSubclass readonly dispid 1610809346;
    property ActionData: IUnknown readonly dispid 1610809347;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_AnnotsEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {76F6C77B-0FFF-43F5-8DE3-0715163D80DD}
// *********************************************************************//
  IPXV_AnnotsEvent = interface(IEvent)
    ['{76F6C77B-0FFF-43F5-8DE3-0715163D80DD}']
    function Get_Items: IPXV_AnnotsList; safecall;
    property Items: IPXV_AnnotsList read Get_Items;
  end;

// *********************************************************************//
// DispIntf:  IPXV_AnnotsEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {76F6C77B-0FFF-43F5-8DE3-0715163D80DD}
// *********************************************************************//
  IPXV_AnnotsEventDisp = dispinterface
    ['{76F6C77B-0FFF-43F5-8DE3-0715163D80DD}']
    property Items: IPXV_AnnotsList readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_BookmEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5CED0F57-B96A-4CF2-83B8-130E544A2644}
// *********************************************************************//
  IPXV_BookmEvent = interface(IEvent)
    ['{5CED0F57-B96A-4CF2-83B8-130E544A2644}']
    function Get_Items: IPXV_BookmList; safecall;
    property Items: IPXV_BookmList read Get_Items;
  end;

// *********************************************************************//
// DispIntf:  IPXV_BookmEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {5CED0F57-B96A-4CF2-83B8-130E544A2644}
// *********************************************************************//
  IPXV_BookmEventDisp = dispinterface
    ['{5CED0F57-B96A-4CF2-83B8-130E544A2644}']
    property Items: IPXV_BookmList readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_FormFieldsEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {78527649-463C-49AA-8EA8-8DC10505FB31}
// *********************************************************************//
  IPXV_FormFieldsEvent = interface(IEvent)
    ['{78527649-463C-49AA-8EA8-8DC10505FB31}']
    function Get_Items: IPXV_FormFieldsList; safecall;
    property Items: IPXV_FormFieldsList read Get_Items;
  end;

// *********************************************************************//
// DispIntf:  IPXV_FormFieldsEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {78527649-463C-49AA-8EA8-8DC10505FB31}
// *********************************************************************//
  IPXV_FormFieldsEventDisp = dispinterface
    ['{78527649-463C-49AA-8EA8-8DC10505FB31}']
    property Items: IPXV_FormFieldsList readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IPXV_SearchCallback
// Flags:     (128) NonExtensible
// GUID:      {D8358299-C482-4B68-89D0-125597A8AC91}
// *********************************************************************//
  IPXV_SearchCallback = interface(IUnknown)
    ['{D8358299-C482-4B68-89D0-125597A8AC91}']
    function OnStart: HResult; stdcall;
    function OnFinish(nResCode: Integer): HResult; stdcall;
    function OnStartPtr(const pPtr: IPXV_SearchPtr): HResult; stdcall;
    function OnStopPtr(const pPtr: IPXV_SearchPtr; bIncomplete: WordBool): HResult; stdcall;
    function OnNewEntry(const pEntry: IPXV_SearchEntry): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_SearchPtr
// Flags:     (128) NonExtensible
// GUID:      {B205D3B1-A92F-4831-ABA8-224296DED408}
// *********************************************************************//
  IPXV_SearchPtr = interface(IUnknown)
    ['{B205D3B1-A92F-4831-ABA8-224296DED408}']
    function Get_Item(nIndex: ULONG_T; out stItem: PXV_SearchPtrChunk): HResult; stdcall;
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Doc(nDocID: ULONG_T; out pDoc: IPXC_Document): HResult; stdcall;
    function Get_Str(nStrID: ULONG_T; out sStr: WideString): HResult; stdcall;
    function Get_AttachPtr(nAttachID: ULONG_T; out pRes: IPXV_FileAttachmentPtr): HResult; stdcall;
    function IsEqual(const pSrc: IPXV_SearchPtr; out bRes: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_FileAttachmentPtr
// Flags:     (128) NonExtensible
// GUID:      {D7F442C9-1278-4E60-B63D-A2B89BEEDF29}
// *********************************************************************//
  IPXV_FileAttachmentPtr = interface(IUnknown)
    ['{D7F442C9-1278-4E60-B63D-A2B89BEEDF29}']
    function Get_Name(out sStr: WideString): HResult; stdcall;
    function Get_AnnotIndex(out nIndex: ULONG_T): HResult; stdcall;
    function Get_PageIndex(out nIndex: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_SearchEntry
// Flags:     (128) NonExtensible
// GUID:      {4234CE63-38FC-4DFE-9CA3-9FDCFD8801BE}
// *********************************************************************//
  IPXV_SearchEntry = interface(IUnknown)
    ['{4234CE63-38FC-4DFE-9CA3-9FDCFD8801BE}']
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pItem: IPXV_SearchEntryItem): HResult; stdcall;
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_SearchEntryItem
// Flags:     (128) NonExtensible
// GUID:      {2AE8D184-B0DE-4209-A94A-05D3CE1606BC}
// *********************************************************************//
  IPXV_SearchEntryItem = interface(IUnknown)
    ['{2AE8D184-B0DE-4209-A94A-05D3CE1606BC}']
    function Get_Ptr(out pPtr: IPXV_SearchPtr): HResult; stdcall;
    function Get_TextRangesCount(out nCount: ULONG_T): HResult; stdcall;
    function GetTextRange(nRangeIndex: ULONG_T; out nFirstCharIndex: ULONG_T; 
                          out nCharsCount: ULONG_T; out nWordIndex: ULONG_T): HResult; stdcall;
    function GetTextRangeQuads(nRangeIndex: ULONG_T; out pQuads: IPXC_QuadsF): HResult; stdcall;
    function FillTextRangeQuads(nRangeIndex: ULONG_T; const pQuads: IPXC_QuadsF): HResult; stdcall;
    function Get_DispText(out sText: WideString): HResult; stdcall;
    function Get_DispTextRangesCount(out nCount: ULONG_T): HResult; stdcall;
    function GetDispTextRange(nDispRangeIndex: ULONG_T; out nFirstCharIndex: ULONG_T; 
                              out nCharsCount: ULONG_T; out nWordIndex: ULONG_T): HResult; stdcall;
    function Get_ContextBookmark(out pBookmark: IPXC_Bookmark): HResult; stdcall;
    function Get_PropType(out nPropType: ULONG_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_UIEvent
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A018E70A-4E56-44ED-8E14-BB82ED650C38}
// *********************************************************************//
  IPXV_UIEvent = interface(IEvent)
    ['{A018E70A-4E56-44ED-8E14-BB82ED650C38}']
    function Get_UI: IUIX_Event; safecall;
    property UI: IUIX_Event read Get_UI;
  end;

// *********************************************************************//
// DispIntf:  IPXV_UIEventDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {A018E70A-4E56-44ED-8E14-BB82ED650C38}
// *********************************************************************//
  IPXV_UIEventDisp = dispinterface
    ['{A018E70A-4E56-44ED-8E14-BB82ED650C38}']
    property UI: IUIX_Event readonly dispid 1610809344;
    property ID: Integer readonly dispid 1610743808;
    property Handled: WordBool dispid 1610743809;
    property Param1: PARAM_T readonly dispid 1610743811;
    property Param2: PARAM_T readonly dispid 1610743812;
    property ExData: ICab readonly dispid 1610743813;
    property Result: PARAM_T dispid 1610743814;
  end;

// *********************************************************************//
// Interface: IXPS2PDFConverter
// Flags:     (0)
// GUID:      {E703F59E-DE71-4A00-A2DA-BE337A6FB256}
// *********************************************************************//
  IXPS2PDFConverter = interface(IUnknown)
    ['{E703F59E-DE71-4A00-A2DA-BE337A6FB256}']
    function InitWithFile(sLpszFile: PWideChar): HResult; stdcall;
    function InitWithStream(const pStream: IStream): HResult; stdcall;
    function SetOption(sOption: PWideChar; Value: OleVariant): HResult; stdcall;
    function SetDocument(const pDoc: IUnknown; const pDrvParams: IUnknown): HResult; stdcall;
    function Proceed(const pMonitor: IProgressMon): HResult; stdcall;
    function SaveToFile(sFile: PWideChar): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_SearchView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C6D17E84-23E1-461E-BF56-5E5DD195B53F}
// *********************************************************************//
  IPXV_SearchView = interface(IPXV_View)
    ['{C6D17E84-23E1-461E-BF56-5E5DD195B53F}']
    function Get_IsBusy: WordBool; safecall;
    procedure SetText(sText: PWideChar; bSetFocus: WordBool); safecall;
    function Get_HasResults: WordBool; safecall;
    procedure ClearResults; safecall;
    procedure ClearSimpleHistory; safecall;
    procedure RemoveSavedExtCriterias; safecall;
    procedure RemoveRecentFolders; safecall;
    procedure Start(const pCallback: IPXV_SearchCallback; nFlags: ULONG_T); safecall;
    procedure Stop(nFlags: ULONG_T); safecall;
    procedure SetParams(const pSearchViewParams: ICab); safecall;
    function GetParams: ICab; safecall;
    procedure SetFocus; safecall;
    procedure GoToResult(nDir: PXV_GoToSearchResultDir; nFlags: ULONG_T); safecall;
    property IsBusy: WordBool read Get_IsBusy;
    property HasResults: WordBool read Get_HasResults;
  end;

// *********************************************************************//
// DispIntf:  IPXV_SearchViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C6D17E84-23E1-461E-BF56-5E5DD195B53F}
// *********************************************************************//
  IPXV_SearchViewDisp = dispinterface
    ['{C6D17E84-23E1-461E-BF56-5E5DD195B53F}']
    property IsBusy: WordBool readonly dispid 1610874880;
    procedure SetText(sText: {NOT_OLEAUTO(PWideChar)}OleVariant; bSetFocus: WordBool); dispid 1610874881;
    property HasResults: WordBool readonly dispid 1610874882;
    procedure ClearResults; dispid 1610874883;
    procedure ClearSimpleHistory; dispid 1610874884;
    procedure RemoveSavedExtCriterias; dispid 1610874885;
    procedure RemoveRecentFolders; dispid 1610874886;
    procedure Start(const pCallback: IPXV_SearchCallback; nFlags: ULONG_T); dispid 1610874887;
    procedure Stop(nFlags: ULONG_T); dispid 1610874888;
    procedure SetParams(const pSearchViewParams: ICab); dispid 1610874889;
    function GetParams: ICab; dispid 1610874890;
    procedure SetFocus; dispid 1610874891;
    procedure GoToResult(nDir: PXV_GoToSearchResultDir; nFlags: ULONG_T); dispid 1610874892;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_LoupeView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {95ABC066-9919-4571-8387-7A7CFB5FAEEF}
// *********************************************************************//
  IPXV_LoupeView = interface(IPXV_View)
    ['{95ABC066-9919-4571-8387-7A7CFB5FAEEF}']
  end;

// *********************************************************************//
// DispIntf:  IPXV_LoupeViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {95ABC066-9919-4571-8387-7A7CFB5FAEEF}
// *********************************************************************//
  IPXV_LoupeViewDisp = dispinterface
    ['{95ABC066-9919-4571-8387-7A7CFB5FAEEF}']
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_PanZoomView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {09CAC0A6-B45E-4427-B5FD-55409587447E}
// *********************************************************************//
  IPXV_PanZoomView = interface(IPXV_View)
    ['{09CAC0A6-B45E-4427-B5FD-55409587447E}']
  end;

// *********************************************************************//
// DispIntf:  IPXV_PanZoomViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {09CAC0A6-B45E-4427-B5FD-55409587447E}
// *********************************************************************//
  IPXV_PanZoomViewDisp = dispinterface
    ['{09CAC0A6-B45E-4427-B5FD-55409587447E}']
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_XFATreeView
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3116D512-3C69-454E-9040-8EE1652886C8}
// *********************************************************************//
  IPXV_XFATreeView = interface(IPXV_View)
    ['{3116D512-3C69-454E-9040-8EE1652886C8}']
    function Get_DocView: IPXV_DocumentView; safecall;
    property DocView: IPXV_DocumentView read Get_DocView;
  end;

// *********************************************************************//
// DispIntf:  IPXV_XFATreeViewDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {3116D512-3C69-454E-9040-8EE1652886C8}
// *********************************************************************//
  IPXV_XFATreeViewDisp = dispinterface
    ['{3116D512-3C69-454E-9040-8EE1652886C8}']
    property DocView: IPXV_DocumentView readonly dispid 1610874880;
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_DocCollection
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C7A3EBDB-C571-4D46-A3C5-50CC391F8C83}
// *********************************************************************//
  IPXV_DocCollection = interface(IDispatch)
    ['{C7A3EBDB-C571-4D46-A3C5-50CC391F8C83}']
    function Get_ViewType: Integer; safecall;
    function Get_IsNavigatorAvailable: WordBool; safecall;
    property ViewType: Integer read Get_ViewType;
    property IsNavigatorAvailable: WordBool read Get_IsNavigatorAvailable;
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocCollectionDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {C7A3EBDB-C571-4D46-A3C5-50CC391F8C83}
// *********************************************************************//
  IPXV_DocCollectionDisp = dispinterface
    ['{C7A3EBDB-C571-4D46-A3C5-50CC391F8C83}']
    property ViewType: Integer readonly dispid 1610743808;
    property IsNavigatorAvailable: WordBool readonly dispid 1610743809;
  end;

// *********************************************************************//
// Interface: IPXV_DocCollectionNav
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {450B1778-11BF-4B47-96BC-BEB4B8C0B19B}
// *********************************************************************//
  IPXV_DocCollectionNav = interface(IPXV_View)
    ['{450B1778-11BF-4B47-96BC-BEB4B8C0B19B}']
  end;

// *********************************************************************//
// DispIntf:  IPXV_DocCollectionNavDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {450B1778-11BF-4B47-96BC-BEB4B8C0B19B}
// *********************************************************************//
  IPXV_DocCollectionNavDisp = dispinterface
    ['{450B1778-11BF-4B47-96BC-BEB4B8C0B19B}']
    property ID: Integer readonly dispid 1610809344;
    property Parent: IPXV_View readonly dispid 1610809345;
    property Focus: IPXV_View readonly dispid 1610809346;
    property Panes: IPXV_ViewPanesCollection readonly dispid 1610809347;
    property CmdPaneTop: IUIX_CmdPane readonly dispid 1610809348;
    property CmdPaneBottom: IUIX_CmdPane readonly dispid 1610809349;
    property CmdPaneLeft: IUIX_CmdPane readonly dispid 1610809350;
    property CmdPaneRight: IUIX_CmdPane readonly dispid 1610809351;
    property CmdPane[nSide: UIX_CmdPaneSides]: IUIX_CmdPane readonly dispid 1610809352;
    property CmdBar[const sCmdBarID: WideString]: IUIX_CmdBar readonly dispid 1610809353;
    property CmdBar2[nCmdBarID: Integer]: IUIX_CmdBar readonly dispid 1610809354;
    property IsRibbonMode: WordBool readonly dispid 1610809355;
    procedure InsertCmdItems(const pCmds: INumArray; const pInsertPos: INumArray; nFlags: Integer; 
                             const pSubMenu: IUIX_CmdMenu); dispid 1610809356;
    procedure InsertCmdItems2(var nCmdsArr: Integer; nCmdsArrLen: Integer; 
                              var nInsertPosArr: Integer; nInsertPosArrLen: Integer; 
                              nFlags: Integer; const pSubMenu: IUIX_CmdMenu); dispid 1610809357;
    property Obj: IUIX_Obj readonly dispid 1610743808;
    procedure OnPreEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743809;
    procedure OnEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743810;
    procedure OnPostEvent(const pSender: IUIX_Obj; const pEvent: IUIX_Event); dispid 1610743811;
  end;

// *********************************************************************//
// Interface: IPXV_ShowPropsCallback
// Flags:     (128) NonExtensible
// GUID:      {E697B3C4-06A0-4CFD-BA0C-66B40B7A6F5F}
// *********************************************************************//
  IPXV_ShowPropsCallback = interface(IUnknown)
    ['{E697B3C4-06A0-4CFD-BA0C-66B40B7A6F5F}']
    function OnShowProps(const pMainView: IPXV_MainView; bShow: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_SoundManager
// Flags:     (128) NonExtensible
// GUID:      {6FD43773-8B86-4D79-BCDC-FA0F32F4F26E}
// *********************************************************************//
  IPXV_SoundManager = interface(IUnknown)
    ['{6FD43773-8B86-4D79-BCDC-FA0F32F4F26E}']
    function SoundPlay(nUserID: PARAM_T; const pSound: IPXC_Sound; nVolume: Double; bMix: WordBool; 
                       bRepeat: WordBool; bSync: WordBool): HResult; stdcall;
    function StopSound(nUserID: PARAM_T; const pSound: IPXC_Sound): HResult; stdcall;
    function PauseSound(nUserID: PARAM_T; const pSound: IPXC_Sound): HResult; stdcall;
    function ResumeSound(nUserID: PARAM_T; const pSound: IPXC_Sound): HResult; stdcall;
    function StopAllSounds(nUserID: PARAM_T): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_CommentStylesPropList
// Flags:     (128) NonExtensible
// GUID:      {B1E82C97-84D1-4741-8841-8AC3C4517193}
// *********************************************************************//
  IPXV_CommentStylesPropList = interface(IUnknown)
    ['{B1E82C97-84D1-4741-8841-8AC3C4517193}']
  end;

// *********************************************************************//
// Interface: IPXV_EnumFolderCallback
// Flags:     (128) NonExtensible
// GUID:      {B9AB8580-DB4E-441B-8BF5-541460AD603D}
// *********************************************************************//
  IPXV_EnumFolderCallback = interface(IUnknown)
    ['{B9AB8580-DB4E-441B-8BF5-541460AD603D}']
    function OnEnumFolder(const pName: IAFS_Name; const pInfo: IAFS_FileInfo; 
                          const pProg: IProgressMon): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_PrivateDataStorage
// Flags:     (128) NonExtensible
// GUID:      {C6C31E1B-68BC-45D7-BE8A-6699B151C540}
// *********************************************************************//
  IPXV_PrivateDataStorage = interface(IUnknown)
    ['{C6C31E1B-68BC-45D7-BE8A-6699B151C540}']
    function Authorize(hWndParent: HANDLE_T): HResult; stdcall;
    function SetString(var stComponent: TGUID; sSection: PWideChar; sResource: PWideChar; 
                       sPassword: PWideChar; hWndParent: HANDLE_T; nFlags: Integer): HResult; stdcall;
    function GetString(var stComponent: TGUID; sSection: PWideChar; sResource: PWideChar; 
                       hWndParent: HANDLE_T; nFlags: Integer; out sPassword: WideString): HResult; stdcall;
    function SetData(var stComponent: TGUID; sSection: PWideChar; sResource: PWideChar; 
                     const pData: IMemBlock; hWndParent: HANDLE_T; nFlags: Integer): HResult; stdcall;
    function GetData(var stComponent: TGUID; sSection: PWideChar; sResource: PWideChar; 
                     hWndParent: HANDLE_T; nFlags: Integer; out pData: IMemBlock): HResult; stdcall;
    function Remove(var stComponent: TGUID; sSection: PWideChar; sResource: PWideChar; 
                    hWndParent: HANDLE_T; nFlags: Integer): HResult; stdcall;
    function Clear: HResult; stdcall;
    function Get_IsEmpty(out pVal: WordBool): HResult; stdcall;
    function Get_IsAuthorized(out pVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_Annot3DContext
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B14A9D2F-F6A5-4DDC-8886-86E002886466}
// *********************************************************************//
  IPXV_Annot3DContext = interface(IDispatch)
    ['{B14A9D2F-F6A5-4DDC-8886-86E002886466}']
    function Get_View: WideString; safecall;
    procedure Set_View(const sViewName: WideString); safecall;
    function Get_ModelTree: IPXV_3DModelTreeItem; safecall;
    property View: WideString read Get_View write Set_View;
    property ModelTree: IPXV_3DModelTreeItem read Get_ModelTree;
  end;

// *********************************************************************//
// DispIntf:  IPXV_Annot3DContextDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {B14A9D2F-F6A5-4DDC-8886-86E002886466}
// *********************************************************************//
  IPXV_Annot3DContextDisp = dispinterface
    ['{B14A9D2F-F6A5-4DDC-8886-86E002886466}']
    property View: WideString dispid 1610743808;
    property ModelTree: IPXV_3DModelTreeItem readonly dispid 1610743810;
  end;

// *********************************************************************//
// Interface: IPXV_3DModelTreeItem
// Flags:     (128) NonExtensible
// GUID:      {C22E9AF0-FE3A-409E-AE1C-F80AEE057DC2}
// *********************************************************************//
  IPXV_3DModelTreeItem = interface(IUnknown)
    ['{C22E9AF0-FE3A-409E-AE1C-F80AEE057DC2}']
    function Get__NewEnum(out pUnkOut: IUnknown): HResult; stdcall;
    function Get_Item(nIndex: ULONG_T; out pItem: IPXV_3DModelTreeItem): HResult; stdcall;
    function Get_Count(out nCount: ULONG_T): HResult; stdcall;
    function Get_Name(out sName: WideString): HResult; stdcall;
    function Get_ID(out nID: Integer): HResult; stdcall;
    function Get_Parent(out pParent: IPXV_3DModelTreeItem): HResult; stdcall;
    function Get_Metadata(out sMetadata: WideString): HResult; stdcall;
    function Get_Info(out sInfo: WideString): HResult; stdcall;
    function Get_WireframeColor(out pColor: IColor): HResult; stdcall;
    function Get_Visible(out bVal: WordBool): HResult; stdcall;
    function Set_Visible(bVal: WordBool): HResult; stdcall;
    function Get_Opacity(out nVal: Double): HResult; stdcall;
    function Set_Opacity(nVal: Double): HResult; stdcall;
    function Get_HitEnabled(out bVal: WordBool): HResult; stdcall;
    function Set_HitEnabled(bVal: WordBool): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPXV_3D
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6A7F1FD3-FC4C-40C1-AF2C-D25CBB527C8E}
// *********************************************************************//
  IPXV_3D = interface(IDispatch)
    ['{6A7F1FD3-FC4C-40C1-AF2C-D25CBB527C8E}']
    function IsActiveAnnot3D(const pDoc: IPXV_Document; const pAnnot: IPXC_Annotation): WordBool; safecall;
    procedure ActivateAnnot3D(const pDoc: IPXV_Document; const pAnnot: IPXC_Annotation); safecall;
    procedure DeactivateAnnot3D(const pDoc: IPXV_Document; const pAnnot: IPXC_Annotation); safecall;
    function GetAnnot3DContext(const pDoc: IPXV_Document; const pAnnot: IPXC_Annotation): IPXV_Annot3DContext; safecall;
  end;

// *********************************************************************//
// DispIntf:  IPXV_3DDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {6A7F1FD3-FC4C-40C1-AF2C-D25CBB527C8E}
// *********************************************************************//
  IPXV_3DDisp = dispinterface
    ['{6A7F1FD3-FC4C-40C1-AF2C-D25CBB527C8E}']
    function IsActiveAnnot3D(const pDoc: IPXV_Document; const pAnnot: IPXC_Annotation): WordBool; dispid 1610743808;
    procedure ActivateAnnot3D(const pDoc: IPXV_Document; const pAnnot: IPXC_Annotation); dispid 1610743809;
    procedure DeactivateAnnot3D(const pDoc: IPXV_Document; const pAnnot: IPXC_Annotation); dispid 1610743810;
    function GetAnnot3DContext(const pDoc: IPXV_Document; const pAnnot: IPXC_Annotation): IPXV_Annot3DContext; dispid 1610743811;
  end;

// *********************************************************************//
// DispIntf:  _IPXV_ControlEvents
// Flags:     (4096) Dispatchable
// GUID:      {CF87328C-B7C8-4FC8-8DE6-043E83F25A17}
// *********************************************************************//
  _IPXV_ControlEvents = dispinterface
    ['{CF87328C-B7C8-4FC8-8DE6-043E83F25A17}']
    function OnEvent(nEventID: Integer; const pEvent: IEvent; const pFrom: IUnknown): HResult; dispid 1;
  end;

// *********************************************************************//
// Interface: IPXV_Control
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {71300D43-687F-436A-A699-2B37448D0803}
// *********************************************************************//
  IPXV_Control = interface(IDispatch)
    ['{71300D43-687F-436A-A699-2B37448D0803}']
    function Get_Src: WideString; safecall;
    procedure Set_Src(const sSrc: WideString); safecall;
    function Get_VisibleCmdPanes: ULONG_T; safecall;
    procedure Set_VisibleCmdPanes(nVal: ULONG_T); safecall;
    function Get_VisibleScrollbars: WordBool; safecall;
    procedure Set_VisibleScrollbars(bVal: WordBool); safecall;
    function Get_AllowedShortcuts: WordBool; safecall;
    procedure Set_AllowedShortcuts(bVal: WordBool); safecall;
    function Get_LockedCmdBars: WordBool; safecall;
    procedure Set_LockedCmdBars(bVal: WordBool); safecall;
    function Get_LockedCmdPanes: WordBool; safecall;
    procedure Set_LockedCmdPanes(bVal: WordBool); safecall;
    function Get_Inst: IPXV_Inst; safecall;
    function Get_Frame: IPXV_MainFrame; safecall;
    function SetLicKey(const sKey: WideString): WordBool; safecall;
    procedure ShowPane(const sPaneID: WideString; bShow: WordBool; bHighlightOnShow: WordBool); safecall;
    procedure ShowPane2(nPaneID: Integer; bShow: WordBool; bHighlightOnShow: WordBool); safecall;
    function GetPaneVisibility(const sPaneID: WideString): Integer; safecall;
    function GetPaneVisibility2(nPaneID: Integer): Integer; safecall;
    function Get_Doc: IPXV_Document; safecall;
    function Get_HasDoc: WordBool; safecall;
    procedure OpenDocFromPath(const sSrcPath: WideString; const pOpenParams: ICab); safecall;
    procedure OpenDocFrom(const pSrc: IUnknown; const pOpenParams: ICab); safecall;
    procedure OpenDocWithDlg(const sInitialPath: WideString; bOnlyPDF: WordBool; 
                             bNoErrorUI: WordBool); safecall;
    procedure CreateNewBlankDoc(nPageWidth: Double; nPageHeight: Double; nPagesCount: Integer; 
                                nPageRotation: Integer); safecall;
    procedure CreateNewBlankDoc2(const sPaperSize: WideString; nPagesCount: Integer; 
                                 nPageRotation: Integer); safecall;
    function Get_PagesCount: ULONG_T; safecall;
    function Get_CurrentPage: ULONG_T; safecall;
    procedure Set_CurrentPage(nIndex: ULONG_T); safecall;
    procedure GoToFirstPage; safecall;
    procedure GoToLastPage; safecall;
    procedure GoToPrevPage; safecall;
    procedure GoToNextPage; safecall;
    function Get_PagesViewRotation: Integer; safecall;
    procedure Set_PagesViewRotation(nViewRotation: Integer); safecall;
    function Get_PagesLayoutMode: PXC_PagesLayout; safecall;
    procedure Set_PagesLayoutMode(nModeName: PXC_PagesLayout); safecall;
    procedure SetZoom(nMode: PXV_ZoomMode; nLevel: Double; bAllowSmooth: WordBool); safecall;
    procedure ZoomIn(bAllowSmooth: WordBool); safecall;
    procedure ZoomOut(bAllowSmooth: WordBool); safecall;
    function Get_CanZoomIn: WordBool; safecall;
    function Get_CanZoomOut: WordBool; safecall;
    function Get_ZoomLevel: Double; safecall;
    function Get_ZoomMode: PXV_ZoomMode; safecall;
    procedure GoToDestination(var stDest: PXC_Destination; nGoDestFlags: ULONG_T); safecall;
    procedure GoToNamedDestination(const sDestName: WideString; nGoDestFlags: ULONG_T); safecall;
    function Get_CanGoBack: WordBool; safecall;
    function Get_CanGoForward: WordBool; safecall;
    procedure GoBack; safecall;
    procedure GoForward; safecall;
    function Get_CanUndo: WordBool; safecall;
    function Get_CanRedo: WordBool; safecall;
    procedure Undo; safecall;
    procedure Redo; safecall;
    procedure PrintPages(nFirst: ULONG_T; nCount: ULONG_T; bUseDefOpts: WordBool); safecall;
    procedure PrintWithDlg(bUseDefOpts: WordBool; bSaveUserChanges: WordBool); safecall;
    procedure EnableEventListening(const sEventID: WideString; bEnable: WordBool); safecall;
    procedure EnableEventListening2(nEventID: Integer; bEnable: WordBool); safecall;
    function IsEventListening(const sEventID: WideString): WordBool; safecall;
    function IsEventListening2(nEventID: Integer): WordBool; safecall;
    function Get_VisibleCmdBars: ULONG_T; safecall;
    procedure Set_VisibleCmdBars(nVal: ULONG_T); safecall;
    property Src: WideString read Get_Src write Set_Src;
    property VisibleCmdPanes: ULONG_T read Get_VisibleCmdPanes write Set_VisibleCmdPanes;
    property VisibleScrollbars: WordBool read Get_VisibleScrollbars write Set_VisibleScrollbars;
    property AllowedShortcuts: WordBool read Get_AllowedShortcuts write Set_AllowedShortcuts;
    property LockedCmdBars: WordBool read Get_LockedCmdBars write Set_LockedCmdBars;
    property LockedCmdPanes: WordBool read Get_LockedCmdPanes write Set_LockedCmdPanes;
    property Inst: IPXV_Inst read Get_Inst;
    property Frame: IPXV_MainFrame read Get_Frame;
    property Doc: IPXV_Document read Get_Doc;
    property HasDoc: WordBool read Get_HasDoc;
    property PagesCount: ULONG_T read Get_PagesCount;
    property CurrentPage: ULONG_T read Get_CurrentPage write Set_CurrentPage;
    property PagesViewRotation: Integer read Get_PagesViewRotation write Set_PagesViewRotation;
    property PagesLayoutMode: PXC_PagesLayout read Get_PagesLayoutMode write Set_PagesLayoutMode;
    property CanZoomIn: WordBool read Get_CanZoomIn;
    property CanZoomOut: WordBool read Get_CanZoomOut;
    property ZoomLevel: Double read Get_ZoomLevel;
    property ZoomMode: PXV_ZoomMode read Get_ZoomMode;
    property CanGoBack: WordBool read Get_CanGoBack;
    property CanGoForward: WordBool read Get_CanGoForward;
    property CanUndo: WordBool read Get_CanUndo;
    property CanRedo: WordBool read Get_CanRedo;
    property VisibleCmdBars: ULONG_T read Get_VisibleCmdBars write Set_VisibleCmdBars;
  end;

// *********************************************************************//
// DispIntf:  IPXV_ControlDisp
// Flags:     (4544) Dual NonExtensible OleAutomation Dispatchable
// GUID:      {71300D43-687F-436A-A699-2B37448D0803}
// *********************************************************************//
  IPXV_ControlDisp = dispinterface
    ['{71300D43-687F-436A-A699-2B37448D0803}']
    property Src: WideString dispid 100;
    property VisibleCmdPanes: ULONG_T dispid 101;
    property VisibleScrollbars: WordBool dispid 102;
    property AllowedShortcuts: WordBool dispid 103;
    property LockedCmdBars: WordBool dispid 104;
    property LockedCmdPanes: WordBool dispid 105;
    property Inst: IPXV_Inst readonly dispid 106;
    property Frame: IPXV_MainFrame readonly dispid 107;
    function SetLicKey(const sKey: WideString): WordBool; dispid 1610743822;
    procedure ShowPane(const sPaneID: WideString; bShow: WordBool; bHighlightOnShow: WordBool); dispid 1610743823;
    procedure ShowPane2(nPaneID: Integer; bShow: WordBool; bHighlightOnShow: WordBool); dispid 1610743824;
    function GetPaneVisibility(const sPaneID: WideString): Integer; dispid 1610743825;
    function GetPaneVisibility2(nPaneID: Integer): Integer; dispid 1610743826;
    property Doc: IPXV_Document readonly dispid 1610743827;
    property HasDoc: WordBool readonly dispid 1610743828;
    procedure OpenDocFromPath(const sSrcPath: WideString; const pOpenParams: ICab); dispid 1610743829;
    procedure OpenDocFrom(const pSrc: IUnknown; const pOpenParams: ICab); dispid 1610743830;
    procedure OpenDocWithDlg(const sInitialPath: WideString; bOnlyPDF: WordBool; 
                             bNoErrorUI: WordBool); dispid 1610743831;
    procedure CreateNewBlankDoc(nPageWidth: Double; nPageHeight: Double; nPagesCount: Integer; 
                                nPageRotation: Integer); dispid 1610743832;
    procedure CreateNewBlankDoc2(const sPaperSize: WideString; nPagesCount: Integer; 
                                 nPageRotation: Integer); dispid 1610743833;
    property PagesCount: ULONG_T readonly dispid 1610743834;
    property CurrentPage: ULONG_T dispid 1610743835;
    procedure GoToFirstPage; dispid 1610743837;
    procedure GoToLastPage; dispid 1610743838;
    procedure GoToPrevPage; dispid 1610743839;
    procedure GoToNextPage; dispid 1610743840;
    property PagesViewRotation: Integer dispid 1610743841;
    property PagesLayoutMode: PXC_PagesLayout dispid 1610743843;
    procedure SetZoom(nMode: PXV_ZoomMode; nLevel: Double; bAllowSmooth: WordBool); dispid 1610743845;
    procedure ZoomIn(bAllowSmooth: WordBool); dispid 1610743846;
    procedure ZoomOut(bAllowSmooth: WordBool); dispid 1610743847;
    property CanZoomIn: WordBool readonly dispid 1610743848;
    property CanZoomOut: WordBool readonly dispid 1610743849;
    property ZoomLevel: Double readonly dispid 1610743850;
    property ZoomMode: PXV_ZoomMode readonly dispid 1610743851;
    procedure GoToDestination(var stDest: {NOT_OLEAUTO(PXC_Destination)}OleVariant; 
                              nGoDestFlags: ULONG_T); dispid 1610743852;
    procedure GoToNamedDestination(const sDestName: WideString; nGoDestFlags: ULONG_T); dispid 1610743853;
    property CanGoBack: WordBool readonly dispid 1610743854;
    property CanGoForward: WordBool readonly dispid 1610743855;
    procedure GoBack; dispid 1610743856;
    procedure GoForward; dispid 1610743857;
    property CanUndo: WordBool readonly dispid 1610743858;
    property CanRedo: WordBool readonly dispid 1610743859;
    procedure Undo; dispid 1610743860;
    procedure Redo; dispid 1610743861;
    procedure PrintPages(nFirst: ULONG_T; nCount: ULONG_T; bUseDefOpts: WordBool); dispid 1610743862;
    procedure PrintWithDlg(bUseDefOpts: WordBool; bSaveUserChanges: WordBool); dispid 1610743863;
    procedure EnableEventListening(const sEventID: WideString; bEnable: WordBool); dispid 1610743864;
    procedure EnableEventListening2(nEventID: Integer; bEnable: WordBool); dispid 1610743865;
    function IsEventListening(const sEventID: WideString): WordBool; dispid 1610743866;
    function IsEventListening2(nEventID: Integer): WordBool; dispid 1610743867;
    property VisibleCmdBars: ULONG_T dispid 108;
  end;

// *********************************************************************//
// The Class CoPXC_Inst provides a Create and CreateRemote method to          
// create instances of the default interface IPXC_Inst exposed by              
// the CoClass PXC_Inst. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPXC_Inst = class
    class function Create: IPXC_Inst;
    class function CreateRemote(const MachineName: string): IPXC_Inst;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPXC_Inst
// Help String      : 
// Default Interface: IPXC_Inst
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TPXC_Inst = class(TOleServer)
  private
    FIntf: IPXC_Inst;
    function GetDefaultInterface: IPXC_Inst;
  protected
    procedure InitServerData; override;
    function Get_APIVersion: ULONG_T;
    function Get_StampsManager: IPXC_StampsManager;
    function Get_ColorManager: IPXC_ColorManager;
    function Get_NumSecurityHandlers: Integer;
    function Get_NumActionHandlers: Integer;
    function Get_NumAnnotHandlers: Integer;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPXC_Inst);
    procedure Disconnect; override;
    procedure Init(sKey: PWideChar);
    procedure Finalize;
    function GetExtension(sExtID: PWideChar): IUnknown;
    function NewDocument: IPXC_Document;
    function NewDocumentEx(const pNewDocParams: ICab): IPXC_Document;
    function OpenDocumentFromFile(lpszFileName: PWideChar; 
                                  const pAuthCallback: IPXC_DocAuthCallback; 
                                  const pProgressMon: IProgressMon; nFlags: ULONG_T; 
                                  nRestrictPerms: ULONG_T): IPXC_Document;
    function OpenDocumentFrom(const pSrc: IUnknown; const pAuthCallback: IPXC_DocAuthCallback; 
                              const pProgressMon: IProgressMon; nFlags: ULONG_T; 
                              nRestrictPerms: ULONG_T): IPXC_Document;
    procedure RegisterSecurityHandler(nTypeAtom: ULONG_T; const pHandler: IPXC_SecurityHandler);
    function GetSecurityHandler(nTypeAtom: ULONG_T): IPXC_SecurityHandler;
    procedure RegisterActionHandler(nActionType: ULONG_T; const pHandler: IPXC_ActionHandler);
    function GetActionHandler(nActionType: ULONG_T): IPXC_ActionHandler;
    procedure RegisterAnnotHandler(nAnnotType: ULONG_T; const pHandler: IPXC_AnnotHandler);
    function GetAnnotHandler(nAnnotType: ULONG_T): IPXC_AnnotHandler;
    procedure RegisterFileSpecHandler(nTypeName: ULONG_T; const pBaseFS: IAFS_FileSys; 
                                      const pHandler: IPXC_FileSpecHandler);
    function CreateRenderParams: IPXC_PageRenderParams;
    function CreateWatermarkParams: IPXC_WatermarkParams;
    function CreateBackgroundParams: IPXC_BackgroundParams;
    function CreateRects: IPXC_RectsF;
    function CreateQuads: IPXC_QuadsF;
    function CreatePolygonSrc: IPXC_PolygonSrcF;
    function CreatePolyPolygonSrc: IPXC_PolyPolygonSrcF;
    function CreateGetPageTextOptions(nVersion: ULONG_T): IPXC_GetPageTextOptions;
    function CreateStdOCCtx: IPXC_OCContext;
    function CreateTextTabStops: IPXC_TextTabStops;
    function CreateTabStopFormat: IPXC_TabStopFormat;
    function CreateCharFormat: IPXC_CharFormat;
    function CreateParaFormat: IPXC_ParaFormat;
    function DateToPDFDate(stDate: TDateTime): WideString;
    function PDFDateToDate(const sPDFDate: WideString): TDateTime;
    function GetSecurityHandlerByIndex(nIndex: Integer): IPXC_SecurityHandler;
    function GetActionHandlerByIndex(nIndex: Integer): IPXC_ActionHandler;
    function GetAnnotHandlerByIndex(nIndex: Integer): IPXC_AnnotHandler;
    function CreatePagesOverlayInfo: IPXC_PagesOverlayInfo;
    function CreateRedactInfo: IPXC_RedactInfo;
    function CreateRedactOverlayParams: IPXC_RedactOverlayParams;
    function CreateHeaderAndFooterParams: IPXC_HeaderAndFooterParams;
    function ConvertRC2RTF(const pDoc: IPXC_Document; const Src: WideString; const sDS: WideString; 
                           nFlags: Integer): WideString;
    function ConvertRTF2RC(const pDoc: IPXC_Document; const sRTF: WideString; nFlags: Integer): WideString;
    function ConvertRC2Plain(const pDoc: IPXC_Document; const Src: WideString; nFlags: Integer): WideString;
    function CreateAnnotsList: IPXC_AnnotsList;
    procedure SetMemoryLimit(nLimitInMb: ULONG_T);
    function GetStdCMap(const pName: WideString): IPXC_CMap;
    property DefaultInterface: IPXC_Inst read GetDefaultInterface;
    property APIVersion: ULONG_T read Get_APIVersion;
    property StampsManager: IPXC_StampsManager read Get_StampsManager;
    property ColorManager: IPXC_ColorManager read Get_ColorManager;
    property NumSecurityHandlers: Integer read Get_NumSecurityHandlers;
    property NumActionHandlers: Integer read Get_NumActionHandlers;
    property NumAnnotHandlers: Integer read Get_NumAnnotHandlers;
  published
  end;

// *********************************************************************//
// The Class CoCoAUX_Cab provides a Create and CreateRemote method to          
// create instances of the default interface ICabNode exposed by              
// the CoClass CoAUX_Cab. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCoAUX_Cab = class
    class function Create: ICabNode;
    class function CreateRemote(const MachineName: string): ICabNode;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TCoAUX_Cab
// Help String      : Cabinet (Structured Database) Object
// Default Interface: ICabNode
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TCoAUX_Cab = class(TOleServer)
  private
    FIntf: ICabNode;
    function GetDefaultInterface: ICabNode;
  protected
    procedure InitServerData; override;
    function Get_type_: CabDataTypeID;
    procedure Set_type_(nType: CabDataTypeID);
    function Get_Valid: WordBool;
    function Get_Bool: WordBool;
    procedure Set_Bool(bVal: WordBool);
    function Get_Int: SYSINT;
    procedure Set_Int(nVal: SYSINT);
    function Get_Int64: Int64;
    procedure Set_Int64(nVal: Int64);
    function Get_Double: Double;
    procedure Set_Double(nVal: Double);
    function Get_String_: WideString;
    procedure Set_String_(const sVal: WideString);
    function Get_Stream: IStream;
    procedure Set_Stream(const pVal: IStream);
    function Get_Unknown: IUnknown;
    procedure Set_Unknown(const pVal: IUnknown);
    function Get_v: OleVariant;
    procedure Set_v(Val: OleVariant);
    function Get_Item(itemIdentity: OleVariant): ICabNode;
    function Get_Count: SYSINT;
    function Get_LastError: HResult;
    function Get_Flags: ULONG_T;
    procedure Set_Flags(nValue: ULONG_T);
    function Get_ItemKey(nIndex: Integer): WideString;
    function Get_SubNode(itemIdentity: OleVariant; nType: CabDataTypeID): ICabNode;
    function Get_StringPtr: PARAM_T;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: ICabNode);
    procedure Disconnect; override;
    function GetBool(sKey: PWideChar; bDefVal: WordBool): WordBool;
    function GetInt(sKey: PWideChar; nDefVal: SYSINT): SYSINT;
    function GetInt64(sKey: PWideChar; nDefVal: Int64): Int64;
    function GetDouble(sKey: PWideChar; nDefVal: Double): Double;
    function GetString(sKey: PWideChar; sDefVal: PWideChar): WideString;
    function GetStream(sKey: PWideChar; const pDefVal: IStream): IStream;
    function GetUnknown(sKey: PWideChar; const pDefVal: IUnknown): IUnknown;
    procedure SetBool(sKey: PWideChar; bVal: WordBool);
    procedure SetInt(sKey: PWideChar; nVal: SYSINT);
    procedure SetInt64(sKey: PWideChar; nVal: Int64);
    procedure SetDouble(sKey: PWideChar; nVal: Double);
    procedure SetString(sKey: PWideChar; sVal: PWideChar);
    procedure SetStream(sKey: PWideChar; const pVal: IStream);
    procedure SetUnknown(sKey: PWideChar; const pVal: IUnknown);
    procedure Remove(itemIdentity: OleVariant);
    procedure Clear;
    function Insert(itemIdentity: OleVariant; nType: CabDataTypeID): ICabNode;
    function Add(nType: CabDataTypeID): ICabNode;
    procedure Copy(const pSrc: ICabNode);
    procedure MoveBlock(nCurIndex: Integer; nNewIndex: Integer; nCount: Integer);
    procedure RemoveBlock(nStartIndex: Integer; nCount: Integer);
    procedure SetTemplate(const pNode: ICabNode);
    procedure SetTemplate2(pTemplateXml: Pointer; cbTemplateXml: Integer; sRootName: PWideChar);
    function AddValue(itemIdentity: OleVariant; Value: OleVariant; nType: CabDataTypeID; 
                      bForcePath: WordBool): ICabNode;
    function ItemExists(sItemIdentity: PWideChar; nType: CabDataTypeID): WordBool;
    function Equals(const pAnotherCabNode: ICabNode; nOptions: ULONG_T): WordBool;
    procedure SetTemplate3(const pTemplateXmlStream: IStream; sRootName: PWideChar);
    property DefaultInterface: ICabNode read GetDefaultInterface;
    property Valid: WordBool read Get_Valid;
    property Unknown: IUnknown read Get_Unknown write Set_Unknown;
    property v: OleVariant read Get_v write Set_v;
    property Item[itemIdentity: OleVariant]: ICabNode read Get_Item; default;
    property Count: SYSINT read Get_Count;
    property LastError: HResult read Get_LastError;
    property ItemKey[nIndex: Integer]: WideString read Get_ItemKey;
    property SubNode[itemIdentity: OleVariant; nType: CabDataTypeID]: ICabNode read Get_SubNode;
    property StringPtr: PARAM_T read Get_StringPtr;
    property type_: CabDataTypeID read Get_type_ write Set_type_;
    property Bool: WordBool read Get_Bool write Set_Bool;
    property Int: SYSINT read Get_Int write Set_Int;
    property Int64: Int64 read Get_Int64 write Set_Int64;
    property Double: Double read Get_Double write Set_Double;
    property String_: WideString read Get_String_ write Set_String_;
    property Stream: IStream read Get_Stream write Set_Stream;
    property Flags: ULONG_T read Get_Flags write Set_Flags;
  published
  end;

// *********************************************************************//
// The Class CoPXV_Inst provides a Create and CreateRemote method to          
// create instances of the default interface IPXV_Inst exposed by              
// the CoClass PXV_Inst. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPXV_Inst = class
    class function Create: IPXV_Inst;
    class function CreateRemote(const MachineName: string): IPXV_Inst;
  end;


// *********************************************************************//
// OLE Server Proxy class declaration
// Server Object    : TPXV_Inst
// Help String      : PDF-XChange Editor ActiveX Instance
// Default Interface: IPXV_Inst
// Def. Intf. DISP? : No
// Event   Interface: 
// TypeFlags        : (2) CanCreate
// *********************************************************************//
  TPXV_Inst = class(TOleServer)
  private
    FIntf: IPXV_Inst;
    function GetDefaultInterface: IPXV_Inst;
  protected
    procedure InitServerData; override;
    function Get_ThreadID: Integer;
    function Get_MainFrmCount: ULONG_T;
    function Get_MainFrm(nIndex: ULONG_T): IPXV_MainFrame;
    function Get_ActiveMainFrm: IPXV_MainFrame;
    function Get_ActiveDocView: IPXV_DocumentView;
    function Get_ActiveMainView: IPXV_MainView;
    function Get_ActiveDoc: IPXV_Document;
    procedure Set_ActiveDoc(const pActiveDoc: IPXV_Document);
    function Get_DocCount: ULONG_T;
    function Get_Doc(nIndex: ULONG_T): IPXV_Document;
    function Get_ActionHandlersCount: ULONG_T;
    function Get_ActionHandler(nIndex: ULONG_T): IPXV_ActionHandler;
    function Get_IsPortable: WordBool;
    function Get_DefaultTool: IPXV_Tool;
    procedure Set_DefaultTool(const pTool: IPXV_Tool);
    function Get_DefaultToolID: Integer;
    function Get_LastActiveTool: IPXV_Tool;
    function Get_LastActiveToolID: Integer;
    function Get_EventServer: IEventServer;
    function Get_DefaultProgressMon: IProgressMon;
    function Get_ProgressMon: IProgressMon;
    procedure Set_ProgressMon(const pProgressMon: IProgressMon);
    function Get_AnnotStateModelManager: IPXV_AnnotStateModelManager;
    function Get_State: ULONG_T;
    function Get_SelectedStamp: IPXC_StampInfo;
    procedure Set_SelectedStamp(const pStamp: IPXC_StampInfo);
    function Get_CommentStylesManager: IPXV_CommentStylesManager;
    function Get_Settings: ICabNode;
    function Get_IsHistoryLoaded: WordBool;
    function Get_DispMeasureUnit: MeasureUnit;
    function Get_EventsRegistry: IEventsRegistry;
    function Get_APIVersion: ULONG_T;
    function Get_AppType: ULONG_T;
    function Get_ImportConvertersCount: ULONG_T;
    function Get_ImportConverter(nIndex: ULONG_T): IPXV_ImportConverter;
    function Get_ExportConvertersCount: ULONG_T;
    function Get_ExportConverter(nIndex: ULONG_T): IPXV_ExportConverter;
    function Get_ActiveMainFrmWndHandle: HANDLE_T;
    function Get_JSCodeSnippets: IPXV_JSCodeSnippetsStorage;
  public
    constructor Create(AOwner: TComponent); override;
    destructor  Destroy; override;
    procedure Connect; override;
    procedure ConnectTo(svrIntf: IPXV_Inst);
    procedure Disconnect; override;
    function CreateString(const sInitial: WideString): IString;
    procedure Init(const pCtx: IUnknown; const pLicKey: WideString; 
                   const pUserSettingsSrc: IUnknown; const pHistorySrc: IUnknown; 
                   const pHistoryThumbsSrc: IUnknown; nFlags: Integer; const pReserved: IUnknown);
    procedure SaveUserSettings(const pUserSettingsDest: IUnknown; nFlags: Integer);
    procedure Shutdown(nFlags: Integer);
    procedure CreateNewMainFrm(hWndParent: HANDLE_T; var stPos: tagRECT; nCreateFlags: Integer; 
                               out pMainFrm: IPXV_MainFrame);
    function FindDocByID(nDocID: ULONG_T): IPXV_Document;
    function FindDocByCoreDoc(const pCoreDoc: IPXC_Document): IPXV_Document;
    function FindDocBySrcFile(const pSrcFile: IAFS_File): IPXV_Document;
    function FindDocBySrcFileName(const pSrcFileName: IAFS_Name): IPXV_Document;
    function FindDocBySrcFileName2(const sSrcFileName: WideString; bDIPath: WordBool): IPXV_Document;
    procedure RegisterExtension(const sName: WideString; const pExtension: IUnknown);
    function GetExtension(const sName: WideString): IUnknown;
    procedure StartLoadingPlugins;
    procedure FinishLoadingPlugins;
    procedure AddPluginFromFile(const sFileName: WideString);
    procedure AddPlugin(const pPlugin: IPXV_Plugin);
    procedure RegisterActionHandler(const pHandler: IPXV_ActionHandler);
    function GetHandlerForAction(nActionType: ULONG_T): IPXV_ActionHandler;
    procedure RegisterViewCreator(const pViewCreator: IPXV_ViewCreator);
    procedure UnregisterViewCreator(const pViewCreator: IPXV_ViewCreator);
    function GetStdFolder(nFolderID: PXV_StdFolderID; bUser: WordBool; bCreateIfNotExists: WordBool): WideString;
    procedure SetStdFolder(nFolderID: PXV_StdFolderID; const sFolderPath: WideString; 
                           bUser: WordBool);
    procedure AddDefaultTranslationData(const pDefaultTranslationXml: IStream);
    function GetLocalStr(const sStrID: WideString): WideString;
    function GetLocalStr2(nStrID: Integer): WideString;
    function Str2ID(const sStr: WideString; bAddIfNotExists: WordBool): Integer;
    function ID2Str(nID: Integer): WideString;
    function GetPluginSettings(const pPlugin: IPXV_Plugin; bCreateIfNotExists: WordBool): ICabNode;
    function ShowOpenFilesDlg(const pFileFilters: WideString; const pInitialFolderName: WideString; 
                              bAllowMult: WordBool; const pDlgTitle: WideString; 
                              hWndParent: HANDLE_T; bShowHidden: WordBool; nFilterIndex: Integer): IPXV_OpenFilesDlgRes;
    function ShowSaveFileDlg(const pFileFilters: WideString; const pInitialFolderName: WideString; 
                             const pInitialFileName: WideString; const pDefaultExt: WideString; 
                             const pDlgTitle: WideString; hWndParent: HANDLE_T; 
                             bOverwritePrompt: WordBool; bShowHidden: WordBool; 
                             nFilterIndex: Integer): IPXV_SaveFileDlgRes;
    function ShowSelectFolderDlg(const pInitialFolderName: WideString; const pDlgTitle: WideString; 
                                 hWndParent: HANDLE_T; bCanAddNew: WordBool): IAFS_Name;
    function GetTextFromHRes(hRes: HResult; bShort: WordBool): WideString;
    procedure RegisterTool(const pTool: IPXV_Tool);
    function GetTool(nTooID: Integer): IPXV_Tool;
    function StartTimer(const pTimerHandler: IPXV_TimerHandler; nElapse: ULONG_T; nFlags: ULONG_T): LONG_PTR;
    procedure RestartTimer(nTimerID: LONG_PTR; nNewElapse: ULONG_T);
    procedure StopTimer(nTimerID: LONG_PTR);
    procedure StopAllTimers(const pTimerHandler: IPXV_TimerHandler);
    procedure PerformActions(const pDoc: IPXV_Document; const pAList: IPXC_ActionsList; 
                             nClass: PXV_ActionTriggerClass; nSubclass: PXV_ActionTriggerSubclass; 
                             const pActionData: IUnknown);
    function ShowEditActionListDlg(const pDoc: IPXC_Document; const pActions: IPXC_ActionsList; 
                                   hWndParent: HANDLE_T): IPXC_ActionsList;
    procedure ExecuteJS(const pDoc: IPXV_Document; sScript: PWideChar; 
                        nClass: PXV_ActionTriggerClass; nSubclass: PXV_ActionTriggerSubclass; 
                        const pActionData: IUnknown; const pResult: IString);
    procedure ShowChooseFontDlg(const pIDoc: IPXC_Document; var pFontParams: ICabNode);
    function GetAnnotHandler(const pAnnot: IPXC_Annotation): IPXV_AnnotHandler;
    procedure RegisterImportConverter(const pConverter: IPXV_ImportConverter);
    procedure RegisterExportConverter(const pConverter: IPXV_ExportConverter);
    procedure ThreadSafeCall(const pCb: IPXV_ThreadSafeCallback; bWaitWithMsgLoop: WordBool);
    procedure RegisterDocSelectionHandler(const pSelHandler: IPXV_DocSelectionHandler);
    procedure UnregisterDocSelectionHandler(const pSelHandler: IPXV_DocSelectionHandler);
    function GetDocSelectionHandler(const pDoc: IPXV_Document; const pDocSel: IPXV_DocSelection): IPXV_DocSelectionHandler;
    procedure UpdateProps(bLazy: WordBool; bFull: WordBool);
    function GetPrinters: IUniqueStrings;
    function CreateBookmList: IPXV_BookmList;
    function CreateAnnotsList: IPXV_AnnotsList;
    function CreateOpenDocParams: ICab;
    procedure SaveHistory(const pHistoryDest: IUnknown; const pHistoryThumbsDest: IUnknown; 
                          nFlags: Integer);
    procedure AsyncDoAndWaitForFinish(const pOp: IOperation; nOpExecFlags: ULONG_T);
    function CreateOp(nOpID: Integer): IOperation;
    procedure RegisterOpCreator(const pOpCreator: IPXV_OperationsCreator);
    procedure UnregisterOpCreator(const pOpCreator: IPXV_OperationsCreator);
    procedure ExecUICmd(const sCmdID: WideString; const pOwner: IUIX_Obj);
    procedure ExecUICmd2(nCmdID: Integer; const pOwner: IUIX_Obj);
    procedure UpdateProp(nPropID: Integer; nUpdateFlags: Integer; const pPropHost: IUIX_PropHost);
    procedure FireAppPrefsChanged(nFlagIndex: PXV_AppPrefsChanges; const pCumulChangeFlags: IBitSet);
    procedure FireAppPrefsChanged2(const pChangeFlags: IBitSet);
    function GetDlgParentWindow(const pRDoc: IPXC_Document): HANDLE_T;
    procedure AsyncDo(const pOp: IOperation; nOpExecFlags: ULONG_T; 
                      const pAsyncDoCb: IPXV_AsyncDoCallback);
    procedure FireCmdCustomizationEvent(const pSource: IUIX_Obj; nFlags: Integer);
    procedure ShowCmdBar(const sBarID: WideString; bShow: WordBool);
    function IsCmdBarVisible(const sBarID: WideString): WordBool;
    procedure ShowCmdBar2(nBarID: Integer; bShow: WordBool);
    function IsCmdBarVisible2(nBarID: Integer): WordBool;
    procedure ResetCmdCustomization(nFlags: Integer);
    procedure ClearHistory(bSilent: WordBool);
    procedure ModifyCoreDoc(const pCoreDoc: IPXC_Document; nModType: PXC_DocModifyType; 
                            nModCount: Integer);
    procedure ModifyDoc(const pDoc: IPXV_Document; nModType: PXC_DocModifyType; nModCount: Integer);
    function CreateStdPresetsCallbacks(const sPathToPresetsArr: WideString; 
                                       const pCustomIoCallbacks: IPXV_PresetsIoCallbacks; 
                                       const pCustomStorage: ICab; nListStyle: Integer): IPXV_PresetsListCallbacks;
    function CreateStdPresetsButton(const pBtnObj: IUIX_Obj; 
                                    const pCallbacks: IPXV_PresetsListCallbacks): IPXV_PresetsButton;
    procedure GetMeasureUnitInfo(nUnit: MeasureUnit; out sName: WideString; 
                                 out sShortName: WideString; out nPt2UnitCoef: Double; 
                                 out nDispPrec: Integer);
    procedure SetupMeasureEditFilter(const pEditFilter: IUIX_NumEditFilter; nCurUnit: MeasureUnit; 
                                     nMin: Double; nMax: Double; nAdvDispCoef: Double; 
                                     nStep: Double; bNegative: WordBool);
    function FormatMeasureValue(nValueInPoints: Double; nDestUnit: MeasureUnit; nFmtFlags: Integer): WideString;
    function FormatNumber(nNum: Double; nDispPrec: Integer; bKeepZeroTrailers: WordBool; 
                          bAllowGrouping: WordBool): WideString;
    function Str2Number(const sStr: WideString; bSigned: WordBool; out bOK: WordBool): Double;
    function FormatFileSize(nSize: Largeuint; bShort: WordBool): WideString;
    procedure CreateMeasureUnitsConvTbl(var pConvTbl: IUIX_NumEditFilterConvTbl);
    function CreatePageSizeCtl: IPXV_PageSizeCtl;
    function CreateStdRangeCtl(const pDlgDlg: IUIX_Obj; const pSrcRange: IRangeHelper): IPXV_RangeCtl;
    procedure SyncronizeAllDocPanesLayouts(bLazy: WordBool);
    function ShowCreateFileErrDlg(const pFileName: IAFS_Name; hErr: HResult; hWndParent: HANDLE_T; 
                                  nFlags: Integer; out pNewFileName: IAFS_Name): Integer;
    function NewCoreDoc(const pNewDocParams: ICab): IPXC_Document;
    procedure SetReservedLowMemory(pMemory: Pointer; cbMemory: ULONG_PTR);
    procedure SyncronizeCmdCustomization(const pISource: IUIX_Obj; nFlags: Integer; 
                                         bFireEvent: WordBool);
    procedure LockCmdCustomizationEvent;
    procedure UnlockCmdCustomizationEvent;
    function ShowMsgBox(const sText: WideString; const sTitle: WideString; 
                        const sHeader: WideString; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR;
    function ShowMsgBoxWithOpt(const sText: WideString; const sTitle: WideString; 
                               const sHeader: WideString; const sOptionText: WideString; 
                               var nOptionState: Integer; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR;
    function ShowMsgBoxEx(var pConfig: UIX_MsgBoxConfig; out pOptionState: Integer; 
                          out pSelectedRadioID: Integer; out ppEditText: WideString): LONG_PTR;
    function PathToName(sPath: PWideChar; bDIPath: WordBool; const sFSName: WideString; 
                        bAllowAuth: WordBool; hWndParent: HANDLE_T): IAFS_Name;
    function GetUILanguages: IPXV_UILanguages;
    procedure SetCurrentUILang(sLangCode: PWideChar);
    function GetCurrentUILang: WideString;
    function GetDefaultPrinter: WideString;
    function CreateStdBindContext: IAFS_BindContext;
    function GetDocViewFromUIObj(const pObj: IUIX_Obj; bGetActiveIfNotFound: WordBool): IPXV_DocumentView;
    function GetMainViewFromUIObj(const pObj: IUIX_Obj; bGetActiveIfNotFound: WordBool): IPXV_MainView;
    procedure RegisterSignatureProvider(const pProvider: IPXV_SignatureProvider);
    function GetLocalStrID(const sStrID: WideString): WideString;
    function GetLocalStrID2(nStrID: Integer): WideString;
    function RevertDoc(const pDoc: IPXV_Document; const pNewTempData: IAFS_File): IPXV_Document;
    function ExpandOpenFileFilterAlias(pFilterAlias: PWideChar; nFlags: Integer): WideString;
    function CreatePagesPreviewCtl(const pParent: IUIX_Obj; var pRect: tagRECT; 
                                   const pID: WideString; nStyle: Int64; nScrollStyle: Int64; 
                                   bWindowed: WordBool): IPXV_PagesPreviewCtl;
    function CreateFileNamesProvider: IPXV_FileNamesProvider;
    function GetFormatConverterParams(bImport: WordBool; sConvID: PWideChar): ICab;
    procedure SetFormatConverterParams(bImport: WordBool; pConvID: PWideChar; 
                                       const pNewParams: ICabNode);
    function GetFormatConverterIndex(bImport: WordBool; pConvID: PWideChar): Integer;
    function CreateAttachList: IPXV_AttachList;
    function CreateDocList: IPXV_DocList;
    function CreateMacroHelper: IPXV_MacroHelper;
    procedure SetMainWindow(hWndMain: HANDLE_T);
    procedure LoadUserSettings(const pUserSettingsSrc: IUnknown; nFlags: Integer);
    function ExecuteJSEx(const pCoreDoc: IPXC_Document; sScript: PWideChar; 
                         nClass: PXV_ActionTriggerClass; nSubclass: PXV_ActionTriggerSubclass; 
                         const pActionData: IUnknown): IPXV_JSValue;
    function EditImageFmtParams(const pFmtParams: IIXC_ImageFmtParams; hWndParent: HANDLE_T; 
                                nFlags: Integer): WordBool;
    function EditImage(const pImage: IUnknown; hWndParent: HANDLE_T; const sDlgTitle: WideString; 
                       nFlags: Integer): IIXC_Image;
    function ShowAppPrefsDlg(hWndParent: HANDLE_T; const sActivePageID: WideString; 
                             const sActiveCtlID: WideString): WordBool;
    procedure EnableRibbonUI(bEnable: WordBool);
    procedure RegisterDocInfoBarSpan(sSpanID: PWideChar; sTitle: PWideChar; sDesc: PWideChar; 
                                     nWeight: Integer; nColor: Integer; const pIcon: IUIX_Icon);
    procedure ShowRibbonTab(const sTabID: WideString; bShow: WordBool);
    procedure ShowRibbonTab2(nTabID: Integer; bShow: WordBool);
    property DefaultInterface: IPXV_Inst read GetDefaultInterface;
    property ThreadID: Integer read Get_ThreadID;
    property MainFrmCount: ULONG_T read Get_MainFrmCount;
    property MainFrm[nIndex: ULONG_T]: IPXV_MainFrame read Get_MainFrm;
    property ActiveMainFrm: IPXV_MainFrame read Get_ActiveMainFrm;
    property ActiveDocView: IPXV_DocumentView read Get_ActiveDocView;
    property ActiveMainView: IPXV_MainView read Get_ActiveMainView;
    property DocCount: ULONG_T read Get_DocCount;
    property Doc[nIndex: ULONG_T]: IPXV_Document read Get_Doc;
    property ActionHandlersCount: ULONG_T read Get_ActionHandlersCount;
    property ActionHandler[nIndex: ULONG_T]: IPXV_ActionHandler read Get_ActionHandler;
    property IsPortable: WordBool read Get_IsPortable;
    property DefaultToolID: Integer read Get_DefaultToolID;
    property LastActiveTool: IPXV_Tool read Get_LastActiveTool;
    property LastActiveToolID: Integer read Get_LastActiveToolID;
    property EventServer: IEventServer read Get_EventServer;
    property DefaultProgressMon: IProgressMon read Get_DefaultProgressMon;
    property AnnotStateModelManager: IPXV_AnnotStateModelManager read Get_AnnotStateModelManager;
    property State: ULONG_T read Get_State;
    property CommentStylesManager: IPXV_CommentStylesManager read Get_CommentStylesManager;
    property Settings: ICabNode read Get_Settings;
    property IsHistoryLoaded: WordBool read Get_IsHistoryLoaded;
    property DispMeasureUnit: MeasureUnit read Get_DispMeasureUnit;
    property EventsRegistry: IEventsRegistry read Get_EventsRegistry;
    property APIVersion: ULONG_T read Get_APIVersion;
    property AppType: ULONG_T read Get_AppType;
    property ImportConvertersCount: ULONG_T read Get_ImportConvertersCount;
    property ImportConverter[nIndex: ULONG_T]: IPXV_ImportConverter read Get_ImportConverter;
    property ExportConvertersCount: ULONG_T read Get_ExportConvertersCount;
    property ExportConverter[nIndex: ULONG_T]: IPXV_ExportConverter read Get_ExportConverter;
    property ActiveMainFrmWndHandle: HANDLE_T read Get_ActiveMainFrmWndHandle;
    property JSCodeSnippets: IPXV_JSCodeSnippetsStorage read Get_JSCodeSnippets;
    property ActiveDoc: IPXV_Document read Get_ActiveDoc write Set_ActiveDoc;
    property DefaultTool: IPXV_Tool read Get_DefaultTool write Set_DefaultTool;
    property ProgressMon: IProgressMon read Get_ProgressMon write Set_ProgressMon;
    property SelectedStamp: IPXC_StampInfo read Get_SelectedStamp write Set_SelectedStamp;
  published
  end;


// *********************************************************************//
// OLE Control Proxy class declaration
// Control Name     : TPXV_Control
// Help String      : PDF-XChange Editor ActiveX Control
// Default Interface: IPXV_Control
// Def. Intf. DISP? : No
// Event   Interface: _IPXV_ControlEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//
  TPXV_ControlOnEvent = procedure(ASender: TObject; nEventID: Integer; const pEvent: IEvent; 
                                                    const pFrom: IUnknown) of object;

  TPXV_Control = class(TOleControl)
  private
    FOnEvent: TPXV_ControlOnEvent;
    FIntf: IPXV_Control;
    function  GetControlInterface: IPXV_Control;
  protected
    procedure CreateControl;
    procedure InitControlData; override;
    function Get_Inst: IPXV_Inst;
    function Get_Frame: IPXV_MainFrame;
    function Get_Doc: IPXV_Document;
  public
    function SetLicKey(const sKey: WideString): WordBool;
    procedure ShowPane(const sPaneID: WideString; bShow: WordBool; bHighlightOnShow: WordBool);
    procedure ShowPane2(nPaneID: Integer; bShow: WordBool; bHighlightOnShow: WordBool);
    function GetPaneVisibility(const sPaneID: WideString): Integer;
    function GetPaneVisibility2(nPaneID: Integer): Integer;
    procedure OpenDocFromPath(const sSrcPath: WideString; const pOpenParams: ICab);
    procedure OpenDocFrom(const pSrc: IUnknown; const pOpenParams: ICab);
    procedure OpenDocWithDlg(const sInitialPath: WideString; bOnlyPDF: WordBool; 
                             bNoErrorUI: WordBool);
    procedure CreateNewBlankDoc(nPageWidth: Double; nPageHeight: Double; nPagesCount: Integer; 
                                nPageRotation: Integer);
    procedure CreateNewBlankDoc2(const sPaperSize: WideString; nPagesCount: Integer; 
                                 nPageRotation: Integer);
    procedure GoToFirstPage;
    procedure GoToLastPage;
    procedure GoToPrevPage;
    procedure GoToNextPage;
    procedure SetZoom(nMode: PXV_ZoomMode; nLevel: Double; bAllowSmooth: WordBool);
    procedure ZoomIn(bAllowSmooth: WordBool);
    procedure ZoomOut(bAllowSmooth: WordBool);
    procedure GoToDestination(var stDest: PXC_Destination; nGoDestFlags: ULONG_T);
    procedure GoToNamedDestination(const sDestName: WideString; nGoDestFlags: ULONG_T);
    procedure GoBack;
    procedure GoForward;
    procedure Undo;
    procedure Redo;
    procedure PrintPages(nFirst: ULONG_T; nCount: ULONG_T; bUseDefOpts: WordBool);
    procedure PrintWithDlg(bUseDefOpts: WordBool; bSaveUserChanges: WordBool);
    procedure EnableEventListening(const sEventID: WideString; bEnable: WordBool);
    procedure EnableEventListening2(nEventID: Integer; bEnable: WordBool);
    function IsEventListening(const sEventID: WideString): WordBool;
    function IsEventListening2(nEventID: Integer): WordBool;
    property  ControlInterface: IPXV_Control read GetControlInterface;
    property  DefaultInterface: IPXV_Control read GetControlInterface;
    property Inst: IPXV_Inst read Get_Inst;
    property Frame: IPXV_MainFrame read Get_Frame;
    property Doc: IPXV_Document read Get_Doc;
    property HasDoc: WordBool index $60020014 read GetWordBoolProp;
    property PagesCount: Integer index $6002001a read GetIntegerProp;
    property CanZoomIn: WordBool index $60020028 read GetWordBoolProp;
    property CanZoomOut: WordBool index $60020029 read GetWordBoolProp;
    property ZoomLevel: Double index $6002002a read GetDoubleProp;
    property ZoomMode: TOleEnum index $6002002b read GetTOleEnumProp;
    property CanGoBack: WordBool index $6002002e read GetWordBoolProp;
    property CanGoForward: WordBool index $6002002f read GetWordBoolProp;
    property CanUndo: WordBool index $60020032 read GetWordBoolProp;
    property CanRedo: WordBool index $60020033 read GetWordBoolProp;
  published
    property Anchors;
    property  TabStop;
    property  Align;
    property  DragCursor;
    property  DragMode;
    property  ParentShowHint;
    property  PopupMenu;
    property  ShowHint;
    property  TabOrder;
    property  Visible;
    property  OnDragDrop;
    property  OnDragOver;
    property  OnEndDrag;
    property  OnEnter;
    property  OnExit;
    property  OnStartDrag;
    property Src: WideString index 100 read GetWideStringProp write SetWideStringProp stored False;
    property VisibleCmdPanes: Integer index 101 read GetIntegerProp write SetIntegerProp stored False;
    property VisibleScrollbars: WordBool index 102 read GetWordBoolProp write SetWordBoolProp stored False;
    property AllowedShortcuts: WordBool index 103 read GetWordBoolProp write SetWordBoolProp stored False;
    property LockedCmdBars: WordBool index 104 read GetWordBoolProp write SetWordBoolProp stored False;
    property LockedCmdPanes: WordBool index 105 read GetWordBoolProp write SetWordBoolProp stored False;
    property CurrentPage: Integer index $6002001b read GetIntegerProp write SetIntegerProp stored False;
    property PagesViewRotation: Integer index $60020021 read GetIntegerProp write SetIntegerProp stored False;
    property PagesLayoutMode: TOleEnum index $60020023 read GetTOleEnumProp write SetTOleEnumProp stored False;
    property VisibleCmdBars: Integer index 108 read GetIntegerProp write SetIntegerProp stored False;
    property OnEvent: TPXV_ControlOnEvent read FOnEvent write FOnEvent;
  end;

procedure Register;

resourcestring
  dtlServerPage = 'ActiveX';

  dtlOcxPage = 'ActiveX';

implementation

uses System.Win.ComObj;

class function CoPXC_Inst.Create: IPXC_Inst;
begin
  Result := CreateComObject(CLASS_PXC_Inst) as IPXC_Inst;
end;

class function CoPXC_Inst.CreateRemote(const MachineName: string): IPXC_Inst;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PXC_Inst) as IPXC_Inst;
end;

procedure TPXC_Inst.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{77E64401-E3E8-4049-A630-0434E69586AA}';
    IntfIID:   '{06052A56-664B-4437-8F8C-9D697D1720B8}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPXC_Inst.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IPXC_Inst;
  end;
end;

procedure TPXC_Inst.ConnectTo(svrIntf: IPXC_Inst);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPXC_Inst.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPXC_Inst.GetDefaultInterface: IPXC_Inst;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPXC_Inst.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPXC_Inst.Destroy;
begin
  inherited Destroy;
end;

function TPXC_Inst.Get_APIVersion: ULONG_T;
begin
  Result := DefaultInterface.APIVersion;
end;

function TPXC_Inst.Get_StampsManager: IPXC_StampsManager;
begin
  Result := DefaultInterface.StampsManager;
end;

function TPXC_Inst.Get_ColorManager: IPXC_ColorManager;
begin
  Result := DefaultInterface.ColorManager;
end;

function TPXC_Inst.Get_NumSecurityHandlers: Integer;
begin
  Result := DefaultInterface.NumSecurityHandlers;
end;

function TPXC_Inst.Get_NumActionHandlers: Integer;
begin
  Result := DefaultInterface.NumActionHandlers;
end;

function TPXC_Inst.Get_NumAnnotHandlers: Integer;
begin
  Result := DefaultInterface.NumAnnotHandlers;
end;

procedure TPXC_Inst.Init(sKey: PWideChar);
begin
  DefaultInterface.Init(sKey);
end;

procedure TPXC_Inst.Finalize;
begin
  DefaultInterface.Finalize;
end;

function TPXC_Inst.GetExtension(sExtID: PWideChar): IUnknown;
begin
  Result := DefaultInterface.GetExtension(sExtID);
end;

function TPXC_Inst.NewDocument: IPXC_Document;
begin
  Result := DefaultInterface.NewDocument;
end;

function TPXC_Inst.NewDocumentEx(const pNewDocParams: ICab): IPXC_Document;
begin
  Result := DefaultInterface.NewDocumentEx(pNewDocParams);
end;

function TPXC_Inst.OpenDocumentFromFile(lpszFileName: PWideChar; 
                                        const pAuthCallback: IPXC_DocAuthCallback; 
                                        const pProgressMon: IProgressMon; nFlags: ULONG_T; 
                                        nRestrictPerms: ULONG_T): IPXC_Document;
begin
  Result := DefaultInterface.OpenDocumentFromFile(lpszFileName, pAuthCallback, pProgressMon, 
                                                  nFlags, nRestrictPerms);
end;

function TPXC_Inst.OpenDocumentFrom(const pSrc: IUnknown; 
                                    const pAuthCallback: IPXC_DocAuthCallback; 
                                    const pProgressMon: IProgressMon; nFlags: ULONG_T; 
                                    nRestrictPerms: ULONG_T): IPXC_Document;
begin
  Result := DefaultInterface.OpenDocumentFrom(pSrc, pAuthCallback, pProgressMon, nFlags, 
                                              nRestrictPerms);
end;

procedure TPXC_Inst.RegisterSecurityHandler(nTypeAtom: ULONG_T; const pHandler: IPXC_SecurityHandler);
begin
  DefaultInterface.RegisterSecurityHandler(nTypeAtom, pHandler);
end;

function TPXC_Inst.GetSecurityHandler(nTypeAtom: ULONG_T): IPXC_SecurityHandler;
begin
  Result := DefaultInterface.GetSecurityHandler(nTypeAtom);
end;

procedure TPXC_Inst.RegisterActionHandler(nActionType: ULONG_T; const pHandler: IPXC_ActionHandler);
begin
  DefaultInterface.RegisterActionHandler(nActionType, pHandler);
end;

function TPXC_Inst.GetActionHandler(nActionType: ULONG_T): IPXC_ActionHandler;
begin
  Result := DefaultInterface.GetActionHandler(nActionType);
end;

procedure TPXC_Inst.RegisterAnnotHandler(nAnnotType: ULONG_T; const pHandler: IPXC_AnnotHandler);
begin
  DefaultInterface.RegisterAnnotHandler(nAnnotType, pHandler);
end;

function TPXC_Inst.GetAnnotHandler(nAnnotType: ULONG_T): IPXC_AnnotHandler;
begin
  Result := DefaultInterface.GetAnnotHandler(nAnnotType);
end;

procedure TPXC_Inst.RegisterFileSpecHandler(nTypeName: ULONG_T; const pBaseFS: IAFS_FileSys; 
                                            const pHandler: IPXC_FileSpecHandler);
begin
  DefaultInterface.RegisterFileSpecHandler(nTypeName, pBaseFS, pHandler);
end;

function TPXC_Inst.CreateRenderParams: IPXC_PageRenderParams;
begin
  Result := DefaultInterface.CreateRenderParams;
end;

function TPXC_Inst.CreateWatermarkParams: IPXC_WatermarkParams;
begin
  Result := DefaultInterface.CreateWatermarkParams;
end;

function TPXC_Inst.CreateBackgroundParams: IPXC_BackgroundParams;
begin
  Result := DefaultInterface.CreateBackgroundParams;
end;

function TPXC_Inst.CreateRects: IPXC_RectsF;
begin
  Result := DefaultInterface.CreateRects;
end;

function TPXC_Inst.CreateQuads: IPXC_QuadsF;
begin
  Result := DefaultInterface.CreateQuads;
end;

function TPXC_Inst.CreatePolygonSrc: IPXC_PolygonSrcF;
begin
  Result := DefaultInterface.CreatePolygonSrc;
end;

function TPXC_Inst.CreatePolyPolygonSrc: IPXC_PolyPolygonSrcF;
begin
  Result := DefaultInterface.CreatePolyPolygonSrc;
end;

function TPXC_Inst.CreateGetPageTextOptions(nVersion: ULONG_T): IPXC_GetPageTextOptions;
begin
  Result := DefaultInterface.CreateGetPageTextOptions(nVersion);
end;

function TPXC_Inst.CreateStdOCCtx: IPXC_OCContext;
begin
  Result := DefaultInterface.CreateStdOCCtx;
end;

function TPXC_Inst.CreateTextTabStops: IPXC_TextTabStops;
begin
  Result := DefaultInterface.CreateTextTabStops;
end;

function TPXC_Inst.CreateTabStopFormat: IPXC_TabStopFormat;
begin
  Result := DefaultInterface.CreateTabStopFormat;
end;

function TPXC_Inst.CreateCharFormat: IPXC_CharFormat;
begin
  Result := DefaultInterface.CreateCharFormat;
end;

function TPXC_Inst.CreateParaFormat: IPXC_ParaFormat;
begin
  Result := DefaultInterface.CreateParaFormat;
end;

function TPXC_Inst.DateToPDFDate(stDate: TDateTime): WideString;
begin
  Result := DefaultInterface.DateToPDFDate(stDate);
end;

function TPXC_Inst.PDFDateToDate(const sPDFDate: WideString): TDateTime;
begin
  Result := DefaultInterface.PDFDateToDate(sPDFDate);
end;

function TPXC_Inst.GetSecurityHandlerByIndex(nIndex: Integer): IPXC_SecurityHandler;
begin
  Result := DefaultInterface.GetSecurityHandlerByIndex(nIndex);
end;

function TPXC_Inst.GetActionHandlerByIndex(nIndex: Integer): IPXC_ActionHandler;
begin
  Result := DefaultInterface.GetActionHandlerByIndex(nIndex);
end;

function TPXC_Inst.GetAnnotHandlerByIndex(nIndex: Integer): IPXC_AnnotHandler;
begin
  Result := DefaultInterface.GetAnnotHandlerByIndex(nIndex);
end;

function TPXC_Inst.CreatePagesOverlayInfo: IPXC_PagesOverlayInfo;
begin
  Result := DefaultInterface.CreatePagesOverlayInfo;
end;

function TPXC_Inst.CreateRedactInfo: IPXC_RedactInfo;
begin
  Result := DefaultInterface.CreateRedactInfo;
end;

function TPXC_Inst.CreateRedactOverlayParams: IPXC_RedactOverlayParams;
begin
  Result := DefaultInterface.CreateRedactOverlayParams;
end;

function TPXC_Inst.CreateHeaderAndFooterParams: IPXC_HeaderAndFooterParams;
begin
  Result := DefaultInterface.CreateHeaderAndFooterParams;
end;

function TPXC_Inst.ConvertRC2RTF(const pDoc: IPXC_Document; const Src: WideString; 
                                 const sDS: WideString; nFlags: Integer): WideString;
begin
  Result := DefaultInterface.ConvertRC2RTF(pDoc, Src, sDS, nFlags);
end;

function TPXC_Inst.ConvertRTF2RC(const pDoc: IPXC_Document; const sRTF: WideString; nFlags: Integer): WideString;
begin
  Result := DefaultInterface.ConvertRTF2RC(pDoc, sRTF, nFlags);
end;

function TPXC_Inst.ConvertRC2Plain(const pDoc: IPXC_Document; const Src: WideString; nFlags: Integer): WideString;
begin
  Result := DefaultInterface.ConvertRC2Plain(pDoc, Src, nFlags);
end;

function TPXC_Inst.CreateAnnotsList: IPXC_AnnotsList;
begin
  Result := DefaultInterface.CreateAnnotsList;
end;

procedure TPXC_Inst.SetMemoryLimit(nLimitInMb: ULONG_T);
begin
  DefaultInterface.SetMemoryLimit(nLimitInMb);
end;

function TPXC_Inst.GetStdCMap(const pName: WideString): IPXC_CMap;
begin
  Result := DefaultInterface.GetStdCMap(pName);
end;

class function CoCoAUX_Cab.Create: ICabNode;
begin
  Result := CreateComObject(CLASS_CoAUX_Cab) as ICabNode;
end;

class function CoCoAUX_Cab.CreateRemote(const MachineName: string): ICabNode;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CoAUX_Cab) as ICabNode;
end;

procedure TCoAUX_Cab.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{C0CBD784-C097-4EA2-858E-5F4B223C5C4F}';
    IntfIID:   '{3EDEE1C3-AA36-4DAA-8C8E-58AAD6EEC086}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TCoAUX_Cab.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as ICabNode;
  end;
end;

procedure TCoAUX_Cab.ConnectTo(svrIntf: ICabNode);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TCoAUX_Cab.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TCoAUX_Cab.GetDefaultInterface: ICabNode;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TCoAUX_Cab.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TCoAUX_Cab.Destroy;
begin
  inherited Destroy;
end;

function TCoAUX_Cab.Get_type_: CabDataTypeID;
begin
  Result := DefaultInterface.type_;
end;

procedure TCoAUX_Cab.Set_type_(nType: CabDataTypeID);
begin
  DefaultInterface.type_ := nType;
end;

function TCoAUX_Cab.Get_Valid: WordBool;
begin
  Result := DefaultInterface.Valid;
end;

function TCoAUX_Cab.Get_Bool: WordBool;
begin
  Result := DefaultInterface.Bool;
end;

procedure TCoAUX_Cab.Set_Bool(bVal: WordBool);
begin
  DefaultInterface.Bool := bVal;
end;

function TCoAUX_Cab.Get_Int: SYSINT;
begin
  Result := DefaultInterface.Int;
end;

procedure TCoAUX_Cab.Set_Int(nVal: SYSINT);
begin
  DefaultInterface.Int := nVal;
end;

function TCoAUX_Cab.Get_Int64: Int64;
begin
  Result := DefaultInterface.Int64;
end;

procedure TCoAUX_Cab.Set_Int64(nVal: Int64);
begin
  DefaultInterface.Int64 := nVal;
end;

function TCoAUX_Cab.Get_Double: Double;
begin
  Result := DefaultInterface.Double;
end;

procedure TCoAUX_Cab.Set_Double(nVal: Double);
begin
  DefaultInterface.Double := nVal;
end;

function TCoAUX_Cab.Get_String_: WideString;
begin
  Result := DefaultInterface.String_;
end;

procedure TCoAUX_Cab.Set_String_(const sVal: WideString);
begin
  DefaultInterface.String_ := sVal;
end;

function TCoAUX_Cab.Get_Stream: IStream;
begin
  Result := DefaultInterface.Stream;
end;

procedure TCoAUX_Cab.Set_Stream(const pVal: IStream);
begin
  DefaultInterface.Stream := pVal;
end;

function TCoAUX_Cab.Get_Unknown: IUnknown;
begin
  Result := DefaultInterface.Unknown;
end;

procedure TCoAUX_Cab.Set_Unknown(const pVal: IUnknown);
begin
  DefaultInterface.Unknown := pVal;
end;

function TCoAUX_Cab.Get_v: OleVariant;
begin
  Result := DefaultInterface.v;
end;

procedure TCoAUX_Cab.Set_v(Val: OleVariant);
begin
  DefaultInterface.v := Val;
end;

function TCoAUX_Cab.Get_Item(itemIdentity: OleVariant): ICabNode;
begin
  Result := DefaultInterface.Item[itemIdentity];
end;

function TCoAUX_Cab.Get_Count: SYSINT;
begin
  Result := DefaultInterface.Count;
end;

function TCoAUX_Cab.Get_LastError: HResult;
begin
  Result := DefaultInterface.LastError;
end;

function TCoAUX_Cab.Get_Flags: ULONG_T;
begin
  Result := DefaultInterface.Flags;
end;

procedure TCoAUX_Cab.Set_Flags(nValue: ULONG_T);
begin
  DefaultInterface.Flags := nValue;
end;

function TCoAUX_Cab.Get_ItemKey(nIndex: Integer): WideString;
begin
  Result := DefaultInterface.ItemKey[nIndex];
end;

function TCoAUX_Cab.Get_SubNode(itemIdentity: OleVariant; nType: CabDataTypeID): ICabNode;
begin
  Result := DefaultInterface.SubNode[itemIdentity, nType];
end;

function TCoAUX_Cab.Get_StringPtr: PARAM_T;
begin
  Result := DefaultInterface.StringPtr;
end;

function TCoAUX_Cab.GetBool(sKey: PWideChar; bDefVal: WordBool): WordBool;
begin
  Result := DefaultInterface.GetBool(sKey, bDefVal);
end;

function TCoAUX_Cab.GetInt(sKey: PWideChar; nDefVal: SYSINT): SYSINT;
begin
  Result := DefaultInterface.GetInt(sKey, nDefVal);
end;

function TCoAUX_Cab.GetInt64(sKey: PWideChar; nDefVal: Int64): Int64;
begin
  Result := DefaultInterface.GetInt64(sKey, nDefVal);
end;

function TCoAUX_Cab.GetDouble(sKey: PWideChar; nDefVal: Double): Double;
begin
  Result := DefaultInterface.GetDouble(sKey, nDefVal);
end;

function TCoAUX_Cab.GetString(sKey: PWideChar; sDefVal: PWideChar): WideString;
begin
  Result := DefaultInterface.GetString(sKey, sDefVal);
end;

function TCoAUX_Cab.GetStream(sKey: PWideChar; const pDefVal: IStream): IStream;
begin
  Result := DefaultInterface.GetStream(sKey, pDefVal);
end;

function TCoAUX_Cab.GetUnknown(sKey: PWideChar; const pDefVal: IUnknown): IUnknown;
begin
  Result := DefaultInterface.GetUnknown(sKey, pDefVal);
end;

procedure TCoAUX_Cab.SetBool(sKey: PWideChar; bVal: WordBool);
begin
  DefaultInterface.SetBool(sKey, bVal);
end;

procedure TCoAUX_Cab.SetInt(sKey: PWideChar; nVal: SYSINT);
begin
  DefaultInterface.SetInt(sKey, nVal);
end;

procedure TCoAUX_Cab.SetInt64(sKey: PWideChar; nVal: Int64);
begin
  DefaultInterface.SetInt64(sKey, nVal);
end;

procedure TCoAUX_Cab.SetDouble(sKey: PWideChar; nVal: Double);
begin
  DefaultInterface.SetDouble(sKey, nVal);
end;

procedure TCoAUX_Cab.SetString(sKey: PWideChar; sVal: PWideChar);
begin
  DefaultInterface.SetString(sKey, sVal);
end;

procedure TCoAUX_Cab.SetStream(sKey: PWideChar; const pVal: IStream);
begin
  DefaultInterface.SetStream(sKey, pVal);
end;

procedure TCoAUX_Cab.SetUnknown(sKey: PWideChar; const pVal: IUnknown);
begin
  DefaultInterface.SetUnknown(sKey, pVal);
end;

procedure TCoAUX_Cab.Remove(itemIdentity: OleVariant);
begin
  DefaultInterface.Remove(itemIdentity);
end;

procedure TCoAUX_Cab.Clear;
begin
  DefaultInterface.Clear;
end;

function TCoAUX_Cab.Insert(itemIdentity: OleVariant; nType: CabDataTypeID): ICabNode;
begin
  Result := DefaultInterface.Insert(itemIdentity, nType);
end;

function TCoAUX_Cab.Add(nType: CabDataTypeID): ICabNode;
begin
  Result := DefaultInterface.Add(nType);
end;

procedure TCoAUX_Cab.Copy(const pSrc: ICabNode);
begin
  DefaultInterface.Copy(pSrc);
end;

procedure TCoAUX_Cab.MoveBlock(nCurIndex: Integer; nNewIndex: Integer; nCount: Integer);
begin
  DefaultInterface.MoveBlock(nCurIndex, nNewIndex, nCount);
end;

procedure TCoAUX_Cab.RemoveBlock(nStartIndex: Integer; nCount: Integer);
begin
  DefaultInterface.RemoveBlock(nStartIndex, nCount);
end;

procedure TCoAUX_Cab.SetTemplate(const pNode: ICabNode);
begin
  DefaultInterface.SetTemplate(pNode);
end;

procedure TCoAUX_Cab.SetTemplate2(pTemplateXml: Pointer; cbTemplateXml: Integer; 
                                  sRootName: PWideChar);
begin
  DefaultInterface.SetTemplate2(pTemplateXml, cbTemplateXml, sRootName);
end;

function TCoAUX_Cab.AddValue(itemIdentity: OleVariant; Value: OleVariant; nType: CabDataTypeID; 
                             bForcePath: WordBool): ICabNode;
begin
  Result := DefaultInterface.AddValue(itemIdentity, Value, nType, bForcePath);
end;

function TCoAUX_Cab.ItemExists(sItemIdentity: PWideChar; nType: CabDataTypeID): WordBool;
begin
  Result := DefaultInterface.ItemExists(sItemIdentity, nType);
end;

function TCoAUX_Cab.Equals(const pAnotherCabNode: ICabNode; nOptions: ULONG_T): WordBool;
begin
  Result := DefaultInterface.Equals(pAnotherCabNode, nOptions);
end;

procedure TCoAUX_Cab.SetTemplate3(const pTemplateXmlStream: IStream; sRootName: PWideChar);
begin
  DefaultInterface.SetTemplate3(pTemplateXmlStream, sRootName);
end;

class function CoPXV_Inst.Create: IPXV_Inst;
begin
  Result := CreateComObject(CLASS_PXV_Inst) as IPXV_Inst;
end;

class function CoPXV_Inst.CreateRemote(const MachineName: string): IPXV_Inst;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PXV_Inst) as IPXV_Inst;
end;

procedure TPXV_Inst.InitServerData;
const
  CServerData: TServerData = (
    ClassID:   '{973BF60B-4CC6-4BE0-B408-3D80E07FC2E6}';
    IntfIID:   '{D726366D-34D6-49FC-A341-7B84C54CCA3E}';
    EventIID:  '';
    LicenseKey: nil;
    Version: 500);
begin
  ServerData := @CServerData;
end;

procedure TPXV_Inst.Connect;
var
  punk: IUnknown;
begin
  if FIntf = nil then
  begin
    punk := GetServer;
    Fintf:= punk as IPXV_Inst;
  end;
end;

procedure TPXV_Inst.ConnectTo(svrIntf: IPXV_Inst);
begin
  Disconnect;
  FIntf := svrIntf;
end;

procedure TPXV_Inst.DisConnect;
begin
  if Fintf <> nil then
  begin
    FIntf := nil;
  end;
end;

function TPXV_Inst.GetDefaultInterface: IPXV_Inst;
begin
  if FIntf = nil then
    Connect;
  Assert(FIntf <> nil, 'DefaultInterface is NULL. Component is not connected to Server. You must call "Connect" or "ConnectTo" before this operation');
  Result := FIntf;
end;

constructor TPXV_Inst.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
end;

destructor TPXV_Inst.Destroy;
begin
  inherited Destroy;
end;

function TPXV_Inst.Get_ThreadID: Integer;
begin
  Result := DefaultInterface.ThreadID;
end;

function TPXV_Inst.Get_MainFrmCount: ULONG_T;
begin
  Result := DefaultInterface.MainFrmCount;
end;

function TPXV_Inst.Get_MainFrm(nIndex: ULONG_T): IPXV_MainFrame;
begin
  Result := DefaultInterface.MainFrm[nIndex];
end;

function TPXV_Inst.Get_ActiveMainFrm: IPXV_MainFrame;
begin
  Result := DefaultInterface.ActiveMainFrm;
end;

function TPXV_Inst.Get_ActiveDocView: IPXV_DocumentView;
begin
  Result := DefaultInterface.ActiveDocView;
end;

function TPXV_Inst.Get_ActiveMainView: IPXV_MainView;
begin
  Result := DefaultInterface.ActiveMainView;
end;

function TPXV_Inst.Get_ActiveDoc: IPXV_Document;
begin
  Result := DefaultInterface.ActiveDoc;
end;

procedure TPXV_Inst.Set_ActiveDoc(const pActiveDoc: IPXV_Document);
begin
  DefaultInterface.ActiveDoc := pActiveDoc;
end;

function TPXV_Inst.Get_DocCount: ULONG_T;
begin
  Result := DefaultInterface.DocCount;
end;

function TPXV_Inst.Get_Doc(nIndex: ULONG_T): IPXV_Document;
begin
  Result := DefaultInterface.Doc[nIndex];
end;

function TPXV_Inst.Get_ActionHandlersCount: ULONG_T;
begin
  Result := DefaultInterface.ActionHandlersCount;
end;

function TPXV_Inst.Get_ActionHandler(nIndex: ULONG_T): IPXV_ActionHandler;
begin
  Result := DefaultInterface.ActionHandler[nIndex];
end;

function TPXV_Inst.Get_IsPortable: WordBool;
begin
  Result := DefaultInterface.IsPortable;
end;

function TPXV_Inst.Get_DefaultTool: IPXV_Tool;
begin
  Result := DefaultInterface.DefaultTool;
end;

procedure TPXV_Inst.Set_DefaultTool(const pTool: IPXV_Tool);
begin
  DefaultInterface.DefaultTool := pTool;
end;

function TPXV_Inst.Get_DefaultToolID: Integer;
begin
  Result := DefaultInterface.DefaultToolID;
end;

function TPXV_Inst.Get_LastActiveTool: IPXV_Tool;
begin
  Result := DefaultInterface.LastActiveTool;
end;

function TPXV_Inst.Get_LastActiveToolID: Integer;
begin
  Result := DefaultInterface.LastActiveToolID;
end;

function TPXV_Inst.Get_EventServer: IEventServer;
begin
  Result := DefaultInterface.EventServer;
end;

function TPXV_Inst.Get_DefaultProgressMon: IProgressMon;
begin
  Result := DefaultInterface.DefaultProgressMon;
end;

function TPXV_Inst.Get_ProgressMon: IProgressMon;
begin
  Result := DefaultInterface.ProgressMon;
end;

procedure TPXV_Inst.Set_ProgressMon(const pProgressMon: IProgressMon);
begin
  DefaultInterface.ProgressMon := pProgressMon;
end;

function TPXV_Inst.Get_AnnotStateModelManager: IPXV_AnnotStateModelManager;
begin
  Result := DefaultInterface.AnnotStateModelManager;
end;

function TPXV_Inst.Get_State: ULONG_T;
begin
  Result := DefaultInterface.State;
end;

function TPXV_Inst.Get_SelectedStamp: IPXC_StampInfo;
begin
  Result := DefaultInterface.SelectedStamp;
end;

procedure TPXV_Inst.Set_SelectedStamp(const pStamp: IPXC_StampInfo);
begin
  DefaultInterface.SelectedStamp := pStamp;
end;

function TPXV_Inst.Get_CommentStylesManager: IPXV_CommentStylesManager;
begin
  Result := DefaultInterface.CommentStylesManager;
end;

function TPXV_Inst.Get_Settings: ICabNode;
begin
  Result := DefaultInterface.Settings;
end;

function TPXV_Inst.Get_IsHistoryLoaded: WordBool;
begin
  Result := DefaultInterface.IsHistoryLoaded;
end;

function TPXV_Inst.Get_DispMeasureUnit: MeasureUnit;
begin
  Result := DefaultInterface.DispMeasureUnit;
end;

function TPXV_Inst.Get_EventsRegistry: IEventsRegistry;
begin
  Result := DefaultInterface.EventsRegistry;
end;

function TPXV_Inst.Get_APIVersion: ULONG_T;
begin
  Result := DefaultInterface.APIVersion;
end;

function TPXV_Inst.Get_AppType: ULONG_T;
begin
  Result := DefaultInterface.AppType;
end;

function TPXV_Inst.Get_ImportConvertersCount: ULONG_T;
begin
  Result := DefaultInterface.ImportConvertersCount;
end;

function TPXV_Inst.Get_ImportConverter(nIndex: ULONG_T): IPXV_ImportConverter;
begin
  Result := DefaultInterface.ImportConverter[nIndex];
end;

function TPXV_Inst.Get_ExportConvertersCount: ULONG_T;
begin
  Result := DefaultInterface.ExportConvertersCount;
end;

function TPXV_Inst.Get_ExportConverter(nIndex: ULONG_T): IPXV_ExportConverter;
begin
  Result := DefaultInterface.ExportConverter[nIndex];
end;

function TPXV_Inst.Get_ActiveMainFrmWndHandle: HANDLE_T;
begin
  Result := DefaultInterface.ActiveMainFrmWndHandle;
end;

function TPXV_Inst.Get_JSCodeSnippets: IPXV_JSCodeSnippetsStorage;
begin
  Result := DefaultInterface.JSCodeSnippets;
end;

function TPXV_Inst.CreateString(const sInitial: WideString): IString;
begin
  Result := DefaultInterface.CreateString(sInitial);
end;

procedure TPXV_Inst.Init(const pCtx: IUnknown; const pLicKey: WideString; 
                         const pUserSettingsSrc: IUnknown; const pHistorySrc: IUnknown; 
                         const pHistoryThumbsSrc: IUnknown; nFlags: Integer; 
                         const pReserved: IUnknown);
begin
  DefaultInterface.Init(pCtx, pLicKey, pUserSettingsSrc, pHistorySrc, pHistoryThumbsSrc, nFlags, 
                        pReserved);
end;

procedure TPXV_Inst.SaveUserSettings(const pUserSettingsDest: IUnknown; nFlags: Integer);
begin
  DefaultInterface.SaveUserSettings(pUserSettingsDest, nFlags);
end;

procedure TPXV_Inst.Shutdown(nFlags: Integer);
begin
  DefaultInterface.Shutdown(nFlags);
end;

procedure TPXV_Inst.CreateNewMainFrm(hWndParent: HANDLE_T; var stPos: tagRECT; 
                                     nCreateFlags: Integer; out pMainFrm: IPXV_MainFrame);
begin
  DefaultInterface.CreateNewMainFrm(hWndParent, stPos, nCreateFlags, pMainFrm);
end;

function TPXV_Inst.FindDocByID(nDocID: ULONG_T): IPXV_Document;
begin
  Result := DefaultInterface.FindDocByID(nDocID);
end;

function TPXV_Inst.FindDocByCoreDoc(const pCoreDoc: IPXC_Document): IPXV_Document;
begin
  Result := DefaultInterface.FindDocByCoreDoc(pCoreDoc);
end;

function TPXV_Inst.FindDocBySrcFile(const pSrcFile: IAFS_File): IPXV_Document;
begin
  Result := DefaultInterface.FindDocBySrcFile(pSrcFile);
end;

function TPXV_Inst.FindDocBySrcFileName(const pSrcFileName: IAFS_Name): IPXV_Document;
begin
  Result := DefaultInterface.FindDocBySrcFileName(pSrcFileName);
end;

function TPXV_Inst.FindDocBySrcFileName2(const sSrcFileName: WideString; bDIPath: WordBool): IPXV_Document;
begin
  Result := DefaultInterface.FindDocBySrcFileName2(sSrcFileName, bDIPath);
end;

procedure TPXV_Inst.RegisterExtension(const sName: WideString; const pExtension: IUnknown);
begin
  DefaultInterface.RegisterExtension(sName, pExtension);
end;

function TPXV_Inst.GetExtension(const sName: WideString): IUnknown;
begin
  Result := DefaultInterface.GetExtension(sName);
end;

procedure TPXV_Inst.StartLoadingPlugins;
begin
  DefaultInterface.StartLoadingPlugins;
end;

procedure TPXV_Inst.FinishLoadingPlugins;
begin
  DefaultInterface.FinishLoadingPlugins;
end;

procedure TPXV_Inst.AddPluginFromFile(const sFileName: WideString);
begin
  DefaultInterface.AddPluginFromFile(sFileName);
end;

procedure TPXV_Inst.AddPlugin(const pPlugin: IPXV_Plugin);
begin
  DefaultInterface.AddPlugin(pPlugin);
end;

procedure TPXV_Inst.RegisterActionHandler(const pHandler: IPXV_ActionHandler);
begin
  DefaultInterface.RegisterActionHandler(pHandler);
end;

function TPXV_Inst.GetHandlerForAction(nActionType: ULONG_T): IPXV_ActionHandler;
begin
  Result := DefaultInterface.GetHandlerForAction(nActionType);
end;

procedure TPXV_Inst.RegisterViewCreator(const pViewCreator: IPXV_ViewCreator);
begin
  DefaultInterface.RegisterViewCreator(pViewCreator);
end;

procedure TPXV_Inst.UnregisterViewCreator(const pViewCreator: IPXV_ViewCreator);
begin
  DefaultInterface.UnregisterViewCreator(pViewCreator);
end;

function TPXV_Inst.GetStdFolder(nFolderID: PXV_StdFolderID; bUser: WordBool; 
                                bCreateIfNotExists: WordBool): WideString;
begin
  Result := DefaultInterface.GetStdFolder(nFolderID, bUser, bCreateIfNotExists);
end;

procedure TPXV_Inst.SetStdFolder(nFolderID: PXV_StdFolderID; const sFolderPath: WideString; 
                                 bUser: WordBool);
begin
  DefaultInterface.SetStdFolder(nFolderID, sFolderPath, bUser);
end;

procedure TPXV_Inst.AddDefaultTranslationData(const pDefaultTranslationXml: IStream);
begin
  DefaultInterface.AddDefaultTranslationData(pDefaultTranslationXml);
end;

function TPXV_Inst.GetLocalStr(const sStrID: WideString): WideString;
begin
  Result := DefaultInterface.GetLocalStr(sStrID);
end;

function TPXV_Inst.GetLocalStr2(nStrID: Integer): WideString;
begin
  Result := DefaultInterface.GetLocalStr2(nStrID);
end;

function TPXV_Inst.Str2ID(const sStr: WideString; bAddIfNotExists: WordBool): Integer;
begin
  Result := DefaultInterface.Str2ID(sStr, bAddIfNotExists);
end;

function TPXV_Inst.ID2Str(nID: Integer): WideString;
begin
  Result := DefaultInterface.ID2Str(nID);
end;

function TPXV_Inst.GetPluginSettings(const pPlugin: IPXV_Plugin; bCreateIfNotExists: WordBool): ICabNode;
begin
  Result := DefaultInterface.GetPluginSettings(pPlugin, bCreateIfNotExists);
end;

function TPXV_Inst.ShowOpenFilesDlg(const pFileFilters: WideString; 
                                    const pInitialFolderName: WideString; bAllowMult: WordBool; 
                                    const pDlgTitle: WideString; hWndParent: HANDLE_T; 
                                    bShowHidden: WordBool; nFilterIndex: Integer): IPXV_OpenFilesDlgRes;
begin
  Result := DefaultInterface.ShowOpenFilesDlg(pFileFilters, pInitialFolderName, bAllowMult, 
                                              pDlgTitle, hWndParent, bShowHidden, nFilterIndex);
end;

function TPXV_Inst.ShowSaveFileDlg(const pFileFilters: WideString; 
                                   const pInitialFolderName: WideString; 
                                   const pInitialFileName: WideString; 
                                   const pDefaultExt: WideString; const pDlgTitle: WideString; 
                                   hWndParent: HANDLE_T; bOverwritePrompt: WordBool; 
                                   bShowHidden: WordBool; nFilterIndex: Integer): IPXV_SaveFileDlgRes;
begin
  Result := DefaultInterface.ShowSaveFileDlg(pFileFilters, pInitialFolderName, pInitialFileName, 
                                             pDefaultExt, pDlgTitle, hWndParent, bOverwritePrompt, 
                                             bShowHidden, nFilterIndex);
end;

function TPXV_Inst.ShowSelectFolderDlg(const pInitialFolderName: WideString; 
                                       const pDlgTitle: WideString; hWndParent: HANDLE_T; 
                                       bCanAddNew: WordBool): IAFS_Name;
begin
  Result := DefaultInterface.ShowSelectFolderDlg(pInitialFolderName, pDlgTitle, hWndParent, 
                                                 bCanAddNew);
end;

function TPXV_Inst.GetTextFromHRes(hRes: HResult; bShort: WordBool): WideString;
begin
  Result := DefaultInterface.GetTextFromHRes(hRes, bShort);
end;

procedure TPXV_Inst.RegisterTool(const pTool: IPXV_Tool);
begin
  DefaultInterface.RegisterTool(pTool);
end;

function TPXV_Inst.GetTool(nTooID: Integer): IPXV_Tool;
begin
  Result := DefaultInterface.GetTool(nTooID);
end;

function TPXV_Inst.StartTimer(const pTimerHandler: IPXV_TimerHandler; nElapse: ULONG_T; 
                              nFlags: ULONG_T): LONG_PTR;
begin
  Result := DefaultInterface.StartTimer(pTimerHandler, nElapse, nFlags);
end;

procedure TPXV_Inst.RestartTimer(nTimerID: LONG_PTR; nNewElapse: ULONG_T);
begin
  DefaultInterface.RestartTimer(nTimerID, nNewElapse);
end;

procedure TPXV_Inst.StopTimer(nTimerID: LONG_PTR);
begin
  DefaultInterface.StopTimer(nTimerID);
end;

procedure TPXV_Inst.StopAllTimers(const pTimerHandler: IPXV_TimerHandler);
begin
  DefaultInterface.StopAllTimers(pTimerHandler);
end;

procedure TPXV_Inst.PerformActions(const pDoc: IPXV_Document; const pAList: IPXC_ActionsList; 
                                   nClass: PXV_ActionTriggerClass; 
                                   nSubclass: PXV_ActionTriggerSubclass; const pActionData: IUnknown);
begin
  DefaultInterface.PerformActions(pDoc, pAList, nClass, nSubclass, pActionData);
end;

function TPXV_Inst.ShowEditActionListDlg(const pDoc: IPXC_Document; 
                                         const pActions: IPXC_ActionsList; hWndParent: HANDLE_T): IPXC_ActionsList;
begin
  Result := DefaultInterface.ShowEditActionListDlg(pDoc, pActions, hWndParent);
end;

procedure TPXV_Inst.ExecuteJS(const pDoc: IPXV_Document; sScript: PWideChar; 
                              nClass: PXV_ActionTriggerClass; nSubclass: PXV_ActionTriggerSubclass; 
                              const pActionData: IUnknown; const pResult: IString);
begin
  DefaultInterface.ExecuteJS(pDoc, sScript, nClass, nSubclass, pActionData, pResult);
end;

procedure TPXV_Inst.ShowChooseFontDlg(const pIDoc: IPXC_Document; var pFontParams: ICabNode);
begin
  DefaultInterface.ShowChooseFontDlg(pIDoc, pFontParams);
end;

function TPXV_Inst.GetAnnotHandler(const pAnnot: IPXC_Annotation): IPXV_AnnotHandler;
begin
  Result := DefaultInterface.GetAnnotHandler(pAnnot);
end;

procedure TPXV_Inst.RegisterImportConverter(const pConverter: IPXV_ImportConverter);
begin
  DefaultInterface.RegisterImportConverter(pConverter);
end;

procedure TPXV_Inst.RegisterExportConverter(const pConverter: IPXV_ExportConverter);
begin
  DefaultInterface.RegisterExportConverter(pConverter);
end;

procedure TPXV_Inst.ThreadSafeCall(const pCb: IPXV_ThreadSafeCallback; bWaitWithMsgLoop: WordBool);
begin
  DefaultInterface.ThreadSafeCall(pCb, bWaitWithMsgLoop);
end;

procedure TPXV_Inst.RegisterDocSelectionHandler(const pSelHandler: IPXV_DocSelectionHandler);
begin
  DefaultInterface.RegisterDocSelectionHandler(pSelHandler);
end;

procedure TPXV_Inst.UnregisterDocSelectionHandler(const pSelHandler: IPXV_DocSelectionHandler);
begin
  DefaultInterface.UnregisterDocSelectionHandler(pSelHandler);
end;

function TPXV_Inst.GetDocSelectionHandler(const pDoc: IPXV_Document; 
                                          const pDocSel: IPXV_DocSelection): IPXV_DocSelectionHandler;
begin
  Result := DefaultInterface.GetDocSelectionHandler(pDoc, pDocSel);
end;

procedure TPXV_Inst.UpdateProps(bLazy: WordBool; bFull: WordBool);
begin
  DefaultInterface.UpdateProps(bLazy, bFull);
end;

function TPXV_Inst.GetPrinters: IUniqueStrings;
begin
  Result := DefaultInterface.GetPrinters;
end;

function TPXV_Inst.CreateBookmList: IPXV_BookmList;
begin
  Result := DefaultInterface.CreateBookmList;
end;

function TPXV_Inst.CreateAnnotsList: IPXV_AnnotsList;
begin
  Result := DefaultInterface.CreateAnnotsList;
end;

function TPXV_Inst.CreateOpenDocParams: ICab;
begin
  Result := DefaultInterface.CreateOpenDocParams;
end;

procedure TPXV_Inst.SaveHistory(const pHistoryDest: IUnknown; const pHistoryThumbsDest: IUnknown; 
                                nFlags: Integer);
begin
  DefaultInterface.SaveHistory(pHistoryDest, pHistoryThumbsDest, nFlags);
end;

procedure TPXV_Inst.AsyncDoAndWaitForFinish(const pOp: IOperation; nOpExecFlags: ULONG_T);
begin
  DefaultInterface.AsyncDoAndWaitForFinish(pOp, nOpExecFlags);
end;

function TPXV_Inst.CreateOp(nOpID: Integer): IOperation;
begin
  Result := DefaultInterface.CreateOp(nOpID);
end;

procedure TPXV_Inst.RegisterOpCreator(const pOpCreator: IPXV_OperationsCreator);
begin
  DefaultInterface.RegisterOpCreator(pOpCreator);
end;

procedure TPXV_Inst.UnregisterOpCreator(const pOpCreator: IPXV_OperationsCreator);
begin
  DefaultInterface.UnregisterOpCreator(pOpCreator);
end;

procedure TPXV_Inst.ExecUICmd(const sCmdID: WideString; const pOwner: IUIX_Obj);
begin
  DefaultInterface.ExecUICmd(sCmdID, pOwner);
end;

procedure TPXV_Inst.ExecUICmd2(nCmdID: Integer; const pOwner: IUIX_Obj);
begin
  DefaultInterface.ExecUICmd2(nCmdID, pOwner);
end;

procedure TPXV_Inst.UpdateProp(nPropID: Integer; nUpdateFlags: Integer; 
                               const pPropHost: IUIX_PropHost);
begin
  DefaultInterface.UpdateProp(nPropID, nUpdateFlags, pPropHost);
end;

procedure TPXV_Inst.FireAppPrefsChanged(nFlagIndex: PXV_AppPrefsChanges; 
                                        const pCumulChangeFlags: IBitSet);
begin
  DefaultInterface.FireAppPrefsChanged(nFlagIndex, pCumulChangeFlags);
end;

procedure TPXV_Inst.FireAppPrefsChanged2(const pChangeFlags: IBitSet);
begin
  DefaultInterface.FireAppPrefsChanged2(pChangeFlags);
end;

function TPXV_Inst.GetDlgParentWindow(const pRDoc: IPXC_Document): HANDLE_T;
begin
  Result := DefaultInterface.GetDlgParentWindow(pRDoc);
end;

procedure TPXV_Inst.AsyncDo(const pOp: IOperation; nOpExecFlags: ULONG_T; 
                            const pAsyncDoCb: IPXV_AsyncDoCallback);
begin
  DefaultInterface.AsyncDo(pOp, nOpExecFlags, pAsyncDoCb);
end;

procedure TPXV_Inst.FireCmdCustomizationEvent(const pSource: IUIX_Obj; nFlags: Integer);
begin
  DefaultInterface.FireCmdCustomizationEvent(pSource, nFlags);
end;

procedure TPXV_Inst.ShowCmdBar(const sBarID: WideString; bShow: WordBool);
begin
  DefaultInterface.ShowCmdBar(sBarID, bShow);
end;

function TPXV_Inst.IsCmdBarVisible(const sBarID: WideString): WordBool;
begin
  Result := DefaultInterface.IsCmdBarVisible(sBarID);
end;

procedure TPXV_Inst.ShowCmdBar2(nBarID: Integer; bShow: WordBool);
begin
  DefaultInterface.ShowCmdBar2(nBarID, bShow);
end;

function TPXV_Inst.IsCmdBarVisible2(nBarID: Integer): WordBool;
begin
  Result := DefaultInterface.IsCmdBarVisible2(nBarID);
end;

procedure TPXV_Inst.ResetCmdCustomization(nFlags: Integer);
begin
  DefaultInterface.ResetCmdCustomization(nFlags);
end;

procedure TPXV_Inst.ClearHistory(bSilent: WordBool);
begin
  DefaultInterface.ClearHistory(bSilent);
end;

procedure TPXV_Inst.ModifyCoreDoc(const pCoreDoc: IPXC_Document; nModType: PXC_DocModifyType; 
                                  nModCount: Integer);
begin
  DefaultInterface.ModifyCoreDoc(pCoreDoc, nModType, nModCount);
end;

procedure TPXV_Inst.ModifyDoc(const pDoc: IPXV_Document; nModType: PXC_DocModifyType; 
                              nModCount: Integer);
begin
  DefaultInterface.ModifyDoc(pDoc, nModType, nModCount);
end;

function TPXV_Inst.CreateStdPresetsCallbacks(const sPathToPresetsArr: WideString; 
                                             const pCustomIoCallbacks: IPXV_PresetsIoCallbacks; 
                                             const pCustomStorage: ICab; nListStyle: Integer): IPXV_PresetsListCallbacks;
begin
  Result := DefaultInterface.CreateStdPresetsCallbacks(sPathToPresetsArr, pCustomIoCallbacks, 
                                                       pCustomStorage, nListStyle);
end;

function TPXV_Inst.CreateStdPresetsButton(const pBtnObj: IUIX_Obj; 
                                          const pCallbacks: IPXV_PresetsListCallbacks): IPXV_PresetsButton;
begin
  Result := DefaultInterface.CreateStdPresetsButton(pBtnObj, pCallbacks);
end;

procedure TPXV_Inst.GetMeasureUnitInfo(nUnit: MeasureUnit; out sName: WideString; 
                                       out sShortName: WideString; out nPt2UnitCoef: Double; 
                                       out nDispPrec: Integer);
begin
  DefaultInterface.GetMeasureUnitInfo(nUnit, sName, sShortName, nPt2UnitCoef, nDispPrec);
end;

procedure TPXV_Inst.SetupMeasureEditFilter(const pEditFilter: IUIX_NumEditFilter; 
                                           nCurUnit: MeasureUnit; nMin: Double; nMax: Double; 
                                           nAdvDispCoef: Double; nStep: Double; bNegative: WordBool);
begin
  DefaultInterface.SetupMeasureEditFilter(pEditFilter, nCurUnit, nMin, nMax, nAdvDispCoef, nStep, 
                                          bNegative);
end;

function TPXV_Inst.FormatMeasureValue(nValueInPoints: Double; nDestUnit: MeasureUnit; 
                                      nFmtFlags: Integer): WideString;
begin
  Result := DefaultInterface.FormatMeasureValue(nValueInPoints, nDestUnit, nFmtFlags);
end;

function TPXV_Inst.FormatNumber(nNum: Double; nDispPrec: Integer; bKeepZeroTrailers: WordBool; 
                                bAllowGrouping: WordBool): WideString;
begin
  Result := DefaultInterface.FormatNumber(nNum, nDispPrec, bKeepZeroTrailers, bAllowGrouping);
end;

function TPXV_Inst.Str2Number(const sStr: WideString; bSigned: WordBool; out bOK: WordBool): Double;
begin
  Result := DefaultInterface.Str2Number(sStr, bSigned, bOK);
end;

function TPXV_Inst.FormatFileSize(nSize: Largeuint; bShort: WordBool): WideString;
begin
  Result := DefaultInterface.FormatFileSize(nSize, bShort);
end;

procedure TPXV_Inst.CreateMeasureUnitsConvTbl(var pConvTbl: IUIX_NumEditFilterConvTbl);
begin
  DefaultInterface.CreateMeasureUnitsConvTbl(pConvTbl);
end;

function TPXV_Inst.CreatePageSizeCtl: IPXV_PageSizeCtl;
begin
  Result := DefaultInterface.CreatePageSizeCtl;
end;

function TPXV_Inst.CreateStdRangeCtl(const pDlgDlg: IUIX_Obj; const pSrcRange: IRangeHelper): IPXV_RangeCtl;
begin
  Result := DefaultInterface.CreateStdRangeCtl(pDlgDlg, pSrcRange);
end;

procedure TPXV_Inst.SyncronizeAllDocPanesLayouts(bLazy: WordBool);
begin
  DefaultInterface.SyncronizeAllDocPanesLayouts(bLazy);
end;

function TPXV_Inst.ShowCreateFileErrDlg(const pFileName: IAFS_Name; hErr: HResult; 
                                        hWndParent: HANDLE_T; nFlags: Integer; 
                                        out pNewFileName: IAFS_Name): Integer;
begin
  Result := DefaultInterface.ShowCreateFileErrDlg(pFileName, hErr, hWndParent, nFlags, pNewFileName);
end;

function TPXV_Inst.NewCoreDoc(const pNewDocParams: ICab): IPXC_Document;
begin
  Result := DefaultInterface.NewCoreDoc(pNewDocParams);
end;

procedure TPXV_Inst.SetReservedLowMemory(pMemory: Pointer; cbMemory: ULONG_PTR);
begin
  DefaultInterface.SetReservedLowMemory(pMemory, cbMemory);
end;

procedure TPXV_Inst.SyncronizeCmdCustomization(const pISource: IUIX_Obj; nFlags: Integer; 
                                               bFireEvent: WordBool);
begin
  DefaultInterface.SyncronizeCmdCustomization(pISource, nFlags, bFireEvent);
end;

procedure TPXV_Inst.LockCmdCustomizationEvent;
begin
  DefaultInterface.LockCmdCustomizationEvent;
end;

procedure TPXV_Inst.UnlockCmdCustomizationEvent;
begin
  DefaultInterface.UnlockCmdCustomizationEvent;
end;

function TPXV_Inst.ShowMsgBox(const sText: WideString; const sTitle: WideString; 
                              const sHeader: WideString; hWndParent: HANDLE_T; nStyle: Integer): LONG_PTR;
begin
  Result := DefaultInterface.ShowMsgBox(sText, sTitle, sHeader, hWndParent, nStyle);
end;

function TPXV_Inst.ShowMsgBoxWithOpt(const sText: WideString; const sTitle: WideString; 
                                     const sHeader: WideString; const sOptionText: WideString; 
                                     var nOptionState: Integer; hWndParent: HANDLE_T; 
                                     nStyle: Integer): LONG_PTR;
begin
  Result := DefaultInterface.ShowMsgBoxWithOpt(sText, sTitle, sHeader, sOptionText, nOptionState, 
                                               hWndParent, nStyle);
end;

function TPXV_Inst.ShowMsgBoxEx(var pConfig: UIX_MsgBoxConfig; out pOptionState: Integer; 
                                out pSelectedRadioID: Integer; out ppEditText: WideString): LONG_PTR;
begin
  Result := DefaultInterface.ShowMsgBoxEx(pConfig, pOptionState, pSelectedRadioID, ppEditText);
end;

function TPXV_Inst.PathToName(sPath: PWideChar; bDIPath: WordBool; const sFSName: WideString; 
                              bAllowAuth: WordBool; hWndParent: HANDLE_T): IAFS_Name;
begin
  Result := DefaultInterface.PathToName(sPath, bDIPath, sFSName, bAllowAuth, hWndParent);
end;

function TPXV_Inst.GetUILanguages: IPXV_UILanguages;
begin
  Result := DefaultInterface.GetUILanguages;
end;

procedure TPXV_Inst.SetCurrentUILang(sLangCode: PWideChar);
begin
  DefaultInterface.SetCurrentUILang(sLangCode);
end;

function TPXV_Inst.GetCurrentUILang: WideString;
begin
  Result := DefaultInterface.GetCurrentUILang;
end;

function TPXV_Inst.GetDefaultPrinter: WideString;
begin
  Result := DefaultInterface.GetDefaultPrinter;
end;

function TPXV_Inst.CreateStdBindContext: IAFS_BindContext;
begin
  Result := DefaultInterface.CreateStdBindContext;
end;

function TPXV_Inst.GetDocViewFromUIObj(const pObj: IUIX_Obj; bGetActiveIfNotFound: WordBool): IPXV_DocumentView;
begin
  Result := DefaultInterface.GetDocViewFromUIObj(pObj, bGetActiveIfNotFound);
end;

function TPXV_Inst.GetMainViewFromUIObj(const pObj: IUIX_Obj; bGetActiveIfNotFound: WordBool): IPXV_MainView;
begin
  Result := DefaultInterface.GetMainViewFromUIObj(pObj, bGetActiveIfNotFound);
end;

procedure TPXV_Inst.RegisterSignatureProvider(const pProvider: IPXV_SignatureProvider);
begin
  DefaultInterface.RegisterSignatureProvider(pProvider);
end;

function TPXV_Inst.GetLocalStrID(const sStrID: WideString): WideString;
begin
  Result := DefaultInterface.GetLocalStrID(sStrID);
end;

function TPXV_Inst.GetLocalStrID2(nStrID: Integer): WideString;
begin
  Result := DefaultInterface.GetLocalStrID2(nStrID);
end;

function TPXV_Inst.RevertDoc(const pDoc: IPXV_Document; const pNewTempData: IAFS_File): IPXV_Document;
begin
  Result := DefaultInterface.RevertDoc(pDoc, pNewTempData);
end;

function TPXV_Inst.ExpandOpenFileFilterAlias(pFilterAlias: PWideChar; nFlags: Integer): WideString;
begin
  Result := DefaultInterface.ExpandOpenFileFilterAlias(pFilterAlias, nFlags);
end;

function TPXV_Inst.CreatePagesPreviewCtl(const pParent: IUIX_Obj; var pRect: tagRECT; 
                                         const pID: WideString; nStyle: Int64; nScrollStyle: Int64; 
                                         bWindowed: WordBool): IPXV_PagesPreviewCtl;
begin
  Result := DefaultInterface.CreatePagesPreviewCtl(pParent, pRect, pID, nStyle, nScrollStyle, 
                                                   bWindowed);
end;

function TPXV_Inst.CreateFileNamesProvider: IPXV_FileNamesProvider;
begin
  Result := DefaultInterface.CreateFileNamesProvider;
end;

function TPXV_Inst.GetFormatConverterParams(bImport: WordBool; sConvID: PWideChar): ICab;
begin
  Result := DefaultInterface.GetFormatConverterParams(bImport, sConvID);
end;

procedure TPXV_Inst.SetFormatConverterParams(bImport: WordBool; pConvID: PWideChar; 
                                             const pNewParams: ICabNode);
begin
  DefaultInterface.SetFormatConverterParams(bImport, pConvID, pNewParams);
end;

function TPXV_Inst.GetFormatConverterIndex(bImport: WordBool; pConvID: PWideChar): Integer;
begin
  Result := DefaultInterface.GetFormatConverterIndex(bImport, pConvID);
end;

function TPXV_Inst.CreateAttachList: IPXV_AttachList;
begin
  Result := DefaultInterface.CreateAttachList;
end;

function TPXV_Inst.CreateDocList: IPXV_DocList;
begin
  Result := DefaultInterface.CreateDocList;
end;

function TPXV_Inst.CreateMacroHelper: IPXV_MacroHelper;
begin
  Result := DefaultInterface.CreateMacroHelper;
end;

procedure TPXV_Inst.SetMainWindow(hWndMain: HANDLE_T);
begin
  DefaultInterface.SetMainWindow(hWndMain);
end;

procedure TPXV_Inst.LoadUserSettings(const pUserSettingsSrc: IUnknown; nFlags: Integer);
begin
  DefaultInterface.LoadUserSettings(pUserSettingsSrc, nFlags);
end;

function TPXV_Inst.ExecuteJSEx(const pCoreDoc: IPXC_Document; sScript: PWideChar; 
                               nClass: PXV_ActionTriggerClass; 
                               nSubclass: PXV_ActionTriggerSubclass; const pActionData: IUnknown): IPXV_JSValue;
begin
  Result := DefaultInterface.ExecuteJSEx(pCoreDoc, sScript, nClass, nSubclass, pActionData);
end;

function TPXV_Inst.EditImageFmtParams(const pFmtParams: IIXC_ImageFmtParams; hWndParent: HANDLE_T; 
                                      nFlags: Integer): WordBool;
begin
  Result := DefaultInterface.EditImageFmtParams(pFmtParams, hWndParent, nFlags);
end;

function TPXV_Inst.EditImage(const pImage: IUnknown; hWndParent: HANDLE_T; 
                             const sDlgTitle: WideString; nFlags: Integer): IIXC_Image;
begin
  Result := DefaultInterface.EditImage(pImage, hWndParent, sDlgTitle, nFlags);
end;

function TPXV_Inst.ShowAppPrefsDlg(hWndParent: HANDLE_T; const sActivePageID: WideString; 
                                   const sActiveCtlID: WideString): WordBool;
begin
  Result := DefaultInterface.ShowAppPrefsDlg(hWndParent, sActivePageID, sActiveCtlID);
end;

procedure TPXV_Inst.EnableRibbonUI(bEnable: WordBool);
begin
  DefaultInterface.EnableRibbonUI(bEnable);
end;

procedure TPXV_Inst.RegisterDocInfoBarSpan(sSpanID: PWideChar; sTitle: PWideChar; sDesc: PWideChar; 
                                           nWeight: Integer; nColor: Integer; const pIcon: IUIX_Icon);
begin
  DefaultInterface.RegisterDocInfoBarSpan(sSpanID, sTitle, sDesc, nWeight, nColor, pIcon);
end;

procedure TPXV_Inst.ShowRibbonTab(const sTabID: WideString; bShow: WordBool);
begin
  DefaultInterface.ShowRibbonTab(sTabID, bShow);
end;

procedure TPXV_Inst.ShowRibbonTab2(nTabID: Integer; bShow: WordBool);
begin
  DefaultInterface.ShowRibbonTab2(nTabID, bShow);
end;

procedure TPXV_Control.InitControlData;
const
  CEventDispIDs: array [0..0] of DWORD = (
    $00000001);
  CControlData: TControlData2 = (
    ClassID:      '{A1149909-4EDC-4421-B9E5-E93C25A000A1}';
    EventIID:     '{CF87328C-B7C8-4FC8-8DE6-043E83F25A17}';
    EventCount:   1;
    EventDispIDs: @CEventDispIDs;
    LicenseKey:   nil (*HR:$80004002*);
    Flags:        $00000000;
    Version:      500);
begin
  ControlData := @CControlData;
  TControlData2(CControlData).FirstEventOfs := UIntPtr(@@FOnEvent) - UIntPtr(Self);
end;

procedure TPXV_Control.CreateControl;

  procedure DoCreate;
  begin
    FIntf := IUnknown(OleObject) as IPXV_Control;
  end;

begin
  if FIntf = nil then DoCreate;
end;

function TPXV_Control.GetControlInterface: IPXV_Control;
begin
  CreateControl;
  Result := FIntf;
end;

function TPXV_Control.Get_Inst: IPXV_Inst;
begin
  Result := DefaultInterface.Inst;
end;

function TPXV_Control.Get_Frame: IPXV_MainFrame;
begin
  Result := DefaultInterface.Frame;
end;

function TPXV_Control.Get_Doc: IPXV_Document;
begin
  Result := DefaultInterface.Doc;
end;

function TPXV_Control.SetLicKey(const sKey: WideString): WordBool;
begin
  Result := DefaultInterface.SetLicKey(sKey);
end;

procedure TPXV_Control.ShowPane(const sPaneID: WideString; bShow: WordBool; 
                                bHighlightOnShow: WordBool);
begin
  DefaultInterface.ShowPane(sPaneID, bShow, bHighlightOnShow);
end;

procedure TPXV_Control.ShowPane2(nPaneID: Integer; bShow: WordBool; bHighlightOnShow: WordBool);
begin
  DefaultInterface.ShowPane2(nPaneID, bShow, bHighlightOnShow);
end;

function TPXV_Control.GetPaneVisibility(const sPaneID: WideString): Integer;
begin
  Result := DefaultInterface.GetPaneVisibility(sPaneID);
end;

function TPXV_Control.GetPaneVisibility2(nPaneID: Integer): Integer;
begin
  Result := DefaultInterface.GetPaneVisibility2(nPaneID);
end;

procedure TPXV_Control.OpenDocFromPath(const sSrcPath: WideString; const pOpenParams: ICab);
begin
  DefaultInterface.OpenDocFromPath(sSrcPath, pOpenParams);
end;

procedure TPXV_Control.OpenDocFrom(const pSrc: IUnknown; const pOpenParams: ICab);
begin
  DefaultInterface.OpenDocFrom(pSrc, pOpenParams);
end;

procedure TPXV_Control.OpenDocWithDlg(const sInitialPath: WideString; bOnlyPDF: WordBool; 
                                      bNoErrorUI: WordBool);
begin
  DefaultInterface.OpenDocWithDlg(sInitialPath, bOnlyPDF, bNoErrorUI);
end;

procedure TPXV_Control.CreateNewBlankDoc(nPageWidth: Double; nPageHeight: Double; 
                                         nPagesCount: Integer; nPageRotation: Integer);
begin
  DefaultInterface.CreateNewBlankDoc(nPageWidth, nPageHeight, nPagesCount, nPageRotation);
end;

procedure TPXV_Control.CreateNewBlankDoc2(const sPaperSize: WideString; nPagesCount: Integer; 
                                          nPageRotation: Integer);
begin
  DefaultInterface.CreateNewBlankDoc2(sPaperSize, nPagesCount, nPageRotation);
end;

procedure TPXV_Control.GoToFirstPage;
begin
  DefaultInterface.GoToFirstPage;
end;

procedure TPXV_Control.GoToLastPage;
begin
  DefaultInterface.GoToLastPage;
end;

procedure TPXV_Control.GoToPrevPage;
begin
  DefaultInterface.GoToPrevPage;
end;

procedure TPXV_Control.GoToNextPage;
begin
  DefaultInterface.GoToNextPage;
end;

procedure TPXV_Control.SetZoom(nMode: PXV_ZoomMode; nLevel: Double; bAllowSmooth: WordBool);
begin
  DefaultInterface.SetZoom(nMode, nLevel, bAllowSmooth);
end;

procedure TPXV_Control.ZoomIn(bAllowSmooth: WordBool);
begin
  DefaultInterface.ZoomIn(bAllowSmooth);
end;

procedure TPXV_Control.ZoomOut(bAllowSmooth: WordBool);
begin
  DefaultInterface.ZoomOut(bAllowSmooth);
end;

procedure TPXV_Control.GoToDestination(var stDest: PXC_Destination; nGoDestFlags: ULONG_T);
begin
  DefaultInterface.GoToDestination(stDest, nGoDestFlags);
end;

procedure TPXV_Control.GoToNamedDestination(const sDestName: WideString; nGoDestFlags: ULONG_T);
begin
  DefaultInterface.GoToNamedDestination(sDestName, nGoDestFlags);
end;

procedure TPXV_Control.GoBack;
begin
  DefaultInterface.GoBack;
end;

procedure TPXV_Control.GoForward;
begin
  DefaultInterface.GoForward;
end;

procedure TPXV_Control.Undo;
begin
  DefaultInterface.Undo;
end;

procedure TPXV_Control.Redo;
begin
  DefaultInterface.Redo;
end;

procedure TPXV_Control.PrintPages(nFirst: ULONG_T; nCount: ULONG_T; bUseDefOpts: WordBool);
begin
  DefaultInterface.PrintPages(nFirst, nCount, bUseDefOpts);
end;

procedure TPXV_Control.PrintWithDlg(bUseDefOpts: WordBool; bSaveUserChanges: WordBool);
begin
  DefaultInterface.PrintWithDlg(bUseDefOpts, bSaveUserChanges);
end;

procedure TPXV_Control.EnableEventListening(const sEventID: WideString; bEnable: WordBool);
begin
  DefaultInterface.EnableEventListening(sEventID, bEnable);
end;

procedure TPXV_Control.EnableEventListening2(nEventID: Integer; bEnable: WordBool);
begin
  DefaultInterface.EnableEventListening2(nEventID, bEnable);
end;

function TPXV_Control.IsEventListening(const sEventID: WideString): WordBool;
begin
  Result := DefaultInterface.IsEventListening(sEventID);
end;

function TPXV_Control.IsEventListening2(nEventID: Integer): WordBool;
begin
  Result := DefaultInterface.IsEventListening2(nEventID);
end;

procedure Register;
begin
  RegisterComponents(dtlOcxPage, [TPXV_Control]);
  RegisterComponents(dtlServerPage, [TPXC_Inst, TCoAUX_Cab, TPXV_Inst]);
end;

end.
